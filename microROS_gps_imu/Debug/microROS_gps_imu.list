
microROS_gps_imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000174e4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001358  080176e8  080176e8  000276e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018a40  08018a40  00030fbc  2**0
                  CONTENTS
  4 .ARM          00000008  08018a40  08018a40  00028a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018a48  08018a48  00030fbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018a48  08018a48  00028a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018a50  08018a50  00028a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fbc  20000000  08018a54  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db40  20000fc0  08019a10  00030fc0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000eb00  08019a10  0003eb00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030fbc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021743  00000000  00000000  00030fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ef  00000000  00000000  0005272d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001988  00000000  00000000  00056a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d0  00000000  00000000  000583a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d555  00000000  00000000  00059b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000218d0  00000000  00000000  000870cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116716  00000000  00000000  000a899d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000083  00000000  00000000  001bf0b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008314  00000000  00000000  001bf138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000fc0 	.word	0x20000fc0
 800021c:	00000000 	.word	0x00000000
 8000220:	080176cc 	.word	0x080176cc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000fc4 	.word	0x20000fc4
 800023c:	080176cc 	.word	0x080176cc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr

08000304 <__aeabi_drsub>:
 8000304:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000308:	e002      	b.n	8000310 <__adddf3>
 800030a:	bf00      	nop

0800030c <__aeabi_dsub>:
 800030c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000310 <__adddf3>:
 8000310:	b530      	push	{r4, r5, lr}
 8000312:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000316:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800031a:	ea94 0f05 	teq	r4, r5
 800031e:	bf08      	it	eq
 8000320:	ea90 0f02 	teqeq	r0, r2
 8000324:	bf1f      	itttt	ne
 8000326:	ea54 0c00 	orrsne.w	ip, r4, r0
 800032a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000332:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000336:	f000 80e2 	beq.w	80004fe <__adddf3+0x1ee>
 800033a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000342:	bfb8      	it	lt
 8000344:	426d      	neglt	r5, r5
 8000346:	dd0c      	ble.n	8000362 <__adddf3+0x52>
 8000348:	442c      	add	r4, r5
 800034a:	ea80 0202 	eor.w	r2, r0, r2
 800034e:	ea81 0303 	eor.w	r3, r1, r3
 8000352:	ea82 0000 	eor.w	r0, r2, r0
 8000356:	ea83 0101 	eor.w	r1, r3, r1
 800035a:	ea80 0202 	eor.w	r2, r0, r2
 800035e:	ea81 0303 	eor.w	r3, r1, r3
 8000362:	2d36      	cmp	r5, #54	; 0x36
 8000364:	bf88      	it	hi
 8000366:	bd30      	pophi	{r4, r5, pc}
 8000368:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800036c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000370:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000374:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x70>
 800037a:	4240      	negs	r0, r0
 800037c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000380:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000384:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000388:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800038c:	d002      	beq.n	8000394 <__adddf3+0x84>
 800038e:	4252      	negs	r2, r2
 8000390:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000394:	ea94 0f05 	teq	r4, r5
 8000398:	f000 80a7 	beq.w	80004ea <__adddf3+0x1da>
 800039c:	f1a4 0401 	sub.w	r4, r4, #1
 80003a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a4:	db0d      	blt.n	80003c2 <__adddf3+0xb2>
 80003a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003aa:	fa22 f205 	lsr.w	r2, r2, r5
 80003ae:	1880      	adds	r0, r0, r2
 80003b0:	f141 0100 	adc.w	r1, r1, #0
 80003b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b8:	1880      	adds	r0, r0, r2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	4159      	adcs	r1, r3
 80003c0:	e00e      	b.n	80003e0 <__adddf3+0xd0>
 80003c2:	f1a5 0520 	sub.w	r5, r5, #32
 80003c6:	f10e 0e20 	add.w	lr, lr, #32
 80003ca:	2a01      	cmp	r2, #1
 80003cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003d0:	bf28      	it	cs
 80003d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	18c0      	adds	r0, r0, r3
 80003dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e4:	d507      	bpl.n	80003f6 <__adddf3+0xe6>
 80003e6:	f04f 0e00 	mov.w	lr, #0
 80003ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003fa:	d31b      	bcc.n	8000434 <__adddf3+0x124>
 80003fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000400:	d30c      	bcc.n	800041c <__adddf3+0x10c>
 8000402:	0849      	lsrs	r1, r1, #1
 8000404:	ea5f 0030 	movs.w	r0, r0, rrx
 8000408:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800040c:	f104 0401 	add.w	r4, r4, #1
 8000410:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000414:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000418:	f080 809a 	bcs.w	8000550 <__adddf3+0x240>
 800041c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000420:	bf08      	it	eq
 8000422:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000426:	f150 0000 	adcs.w	r0, r0, #0
 800042a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042e:	ea41 0105 	orr.w	r1, r1, r5
 8000432:	bd30      	pop	{r4, r5, pc}
 8000434:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000438:	4140      	adcs	r0, r0
 800043a:	eb41 0101 	adc.w	r1, r1, r1
 800043e:	3c01      	subs	r4, #1
 8000440:	bf28      	it	cs
 8000442:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000446:	d2e9      	bcs.n	800041c <__adddf3+0x10c>
 8000448:	f091 0f00 	teq	r1, #0
 800044c:	bf04      	itt	eq
 800044e:	4601      	moveq	r1, r0
 8000450:	2000      	moveq	r0, #0
 8000452:	fab1 f381 	clz	r3, r1
 8000456:	bf08      	it	eq
 8000458:	3320      	addeq	r3, #32
 800045a:	f1a3 030b 	sub.w	r3, r3, #11
 800045e:	f1b3 0220 	subs.w	r2, r3, #32
 8000462:	da0c      	bge.n	800047e <__adddf3+0x16e>
 8000464:	320c      	adds	r2, #12
 8000466:	dd08      	ble.n	800047a <__adddf3+0x16a>
 8000468:	f102 0c14 	add.w	ip, r2, #20
 800046c:	f1c2 020c 	rsb	r2, r2, #12
 8000470:	fa01 f00c 	lsl.w	r0, r1, ip
 8000474:	fa21 f102 	lsr.w	r1, r1, r2
 8000478:	e00c      	b.n	8000494 <__adddf3+0x184>
 800047a:	f102 0214 	add.w	r2, r2, #20
 800047e:	bfd8      	it	le
 8000480:	f1c2 0c20 	rsble	ip, r2, #32
 8000484:	fa01 f102 	lsl.w	r1, r1, r2
 8000488:	fa20 fc0c 	lsr.w	ip, r0, ip
 800048c:	bfdc      	itt	le
 800048e:	ea41 010c 	orrle.w	r1, r1, ip
 8000492:	4090      	lslle	r0, r2
 8000494:	1ae4      	subs	r4, r4, r3
 8000496:	bfa2      	ittt	ge
 8000498:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800049c:	4329      	orrge	r1, r5
 800049e:	bd30      	popge	{r4, r5, pc}
 80004a0:	ea6f 0404 	mvn.w	r4, r4
 80004a4:	3c1f      	subs	r4, #31
 80004a6:	da1c      	bge.n	80004e2 <__adddf3+0x1d2>
 80004a8:	340c      	adds	r4, #12
 80004aa:	dc0e      	bgt.n	80004ca <__adddf3+0x1ba>
 80004ac:	f104 0414 	add.w	r4, r4, #20
 80004b0:	f1c4 0220 	rsb	r2, r4, #32
 80004b4:	fa20 f004 	lsr.w	r0, r0, r4
 80004b8:	fa01 f302 	lsl.w	r3, r1, r2
 80004bc:	ea40 0003 	orr.w	r0, r0, r3
 80004c0:	fa21 f304 	lsr.w	r3, r1, r4
 80004c4:	ea45 0103 	orr.w	r1, r5, r3
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f1c4 040c 	rsb	r4, r4, #12
 80004ce:	f1c4 0220 	rsb	r2, r4, #32
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 f304 	lsl.w	r3, r1, r4
 80004da:	ea40 0003 	orr.w	r0, r0, r3
 80004de:	4629      	mov	r1, r5
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	fa21 f004 	lsr.w	r0, r1, r4
 80004e6:	4629      	mov	r1, r5
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	f094 0f00 	teq	r4, #0
 80004ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004f2:	bf06      	itte	eq
 80004f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f8:	3401      	addeq	r4, #1
 80004fa:	3d01      	subne	r5, #1
 80004fc:	e74e      	b.n	800039c <__adddf3+0x8c>
 80004fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000502:	bf18      	it	ne
 8000504:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000508:	d029      	beq.n	800055e <__adddf3+0x24e>
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	d005      	beq.n	8000522 <__adddf3+0x212>
 8000516:	ea54 0c00 	orrs.w	ip, r4, r0
 800051a:	bf04      	itt	eq
 800051c:	4619      	moveq	r1, r3
 800051e:	4610      	moveq	r0, r2
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf1e      	ittt	ne
 8000528:	2100      	movne	r1, #0
 800052a:	2000      	movne	r0, #0
 800052c:	bd30      	popne	{r4, r5, pc}
 800052e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000532:	d105      	bne.n	8000540 <__adddf3+0x230>
 8000534:	0040      	lsls	r0, r0, #1
 8000536:	4149      	adcs	r1, r1
 8000538:	bf28      	it	cs
 800053a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053e:	bd30      	pop	{r4, r5, pc}
 8000540:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000544:	bf3c      	itt	cc
 8000546:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800054a:	bd30      	popcc	{r4, r5, pc}
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000554:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000558:	f04f 0000 	mov.w	r0, #0
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000562:	bf1a      	itte	ne
 8000564:	4619      	movne	r1, r3
 8000566:	4610      	movne	r0, r2
 8000568:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800056c:	bf1c      	itt	ne
 800056e:	460b      	movne	r3, r1
 8000570:	4602      	movne	r2, r0
 8000572:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000576:	bf06      	itte	eq
 8000578:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800057c:	ea91 0f03 	teqeq	r1, r3
 8000580:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	bf00      	nop

08000588 <__aeabi_ui2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059c:	f04f 0500 	mov.w	r5, #0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e750      	b.n	8000448 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_i2d>:
 80005a8:	f090 0f00 	teq	r0, #0
 80005ac:	bf04      	itt	eq
 80005ae:	2100      	moveq	r1, #0
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005c0:	bf48      	it	mi
 80005c2:	4240      	negmi	r0, r0
 80005c4:	f04f 0100 	mov.w	r1, #0
 80005c8:	e73e      	b.n	8000448 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_f2d>:
 80005cc:	0042      	lsls	r2, r0, #1
 80005ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005da:	bf1f      	itttt	ne
 80005dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e8:	4770      	bxne	lr
 80005ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ee:	bf08      	it	eq
 80005f0:	4770      	bxeq	lr
 80005f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f6:	bf04      	itt	eq
 80005f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000604:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800060c:	e71c      	b.n	8000448 <__adddf3+0x138>
 800060e:	bf00      	nop

08000610 <__aeabi_ul2d>:
 8000610:	ea50 0201 	orrs.w	r2, r0, r1
 8000614:	bf08      	it	eq
 8000616:	4770      	bxeq	lr
 8000618:	b530      	push	{r4, r5, lr}
 800061a:	f04f 0500 	mov.w	r5, #0
 800061e:	e00a      	b.n	8000636 <__aeabi_l2d+0x16>

08000620 <__aeabi_l2d>:
 8000620:	ea50 0201 	orrs.w	r2, r0, r1
 8000624:	bf08      	it	eq
 8000626:	4770      	bxeq	lr
 8000628:	b530      	push	{r4, r5, lr}
 800062a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062e:	d502      	bpl.n	8000636 <__aeabi_l2d+0x16>
 8000630:	4240      	negs	r0, r0
 8000632:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000636:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800063a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000642:	f43f aed8 	beq.w	80003f6 <__adddf3+0xe6>
 8000646:	f04f 0203 	mov.w	r2, #3
 800064a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064e:	bf18      	it	ne
 8000650:	3203      	addne	r2, #3
 8000652:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000656:	bf18      	it	ne
 8000658:	3203      	addne	r2, #3
 800065a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065e:	f1c2 0320 	rsb	r3, r2, #32
 8000662:	fa00 fc03 	lsl.w	ip, r0, r3
 8000666:	fa20 f002 	lsr.w	r0, r0, r2
 800066a:	fa01 fe03 	lsl.w	lr, r1, r3
 800066e:	ea40 000e 	orr.w	r0, r0, lr
 8000672:	fa21 f102 	lsr.w	r1, r1, r2
 8000676:	4414      	add	r4, r2
 8000678:	e6bd      	b.n	80003f6 <__adddf3+0xe6>
 800067a:	bf00      	nop

0800067c <__aeabi_ldivmod>:
 800067c:	b97b      	cbnz	r3, 800069e <__aeabi_ldivmod+0x22>
 800067e:	b972      	cbnz	r2, 800069e <__aeabi_ldivmod+0x22>
 8000680:	2900      	cmp	r1, #0
 8000682:	bfbe      	ittt	lt
 8000684:	2000      	movlt	r0, #0
 8000686:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800068a:	e006      	blt.n	800069a <__aeabi_ldivmod+0x1e>
 800068c:	bf08      	it	eq
 800068e:	2800      	cmpeq	r0, #0
 8000690:	bf1c      	itt	ne
 8000692:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000696:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800069a:	f000 b9f9 	b.w	8000a90 <__aeabi_idiv0>
 800069e:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a6:	2900      	cmp	r1, #0
 80006a8:	db09      	blt.n	80006be <__aeabi_ldivmod+0x42>
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db1a      	blt.n	80006e4 <__aeabi_ldivmod+0x68>
 80006ae:	f000 f887 	bl	80007c0 <__udivmoddi4>
 80006b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006ba:	b004      	add	sp, #16
 80006bc:	4770      	bx	lr
 80006be:	4240      	negs	r0, r0
 80006c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db1b      	blt.n	8000700 <__aeabi_ldivmod+0x84>
 80006c8:	f000 f87a 	bl	80007c0 <__udivmoddi4>
 80006cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006d4:	b004      	add	sp, #16
 80006d6:	4240      	negs	r0, r0
 80006d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006dc:	4252      	negs	r2, r2
 80006de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006e2:	4770      	bx	lr
 80006e4:	4252      	negs	r2, r2
 80006e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006ea:	f000 f869 	bl	80007c0 <__udivmoddi4>
 80006ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f6:	b004      	add	sp, #16
 80006f8:	4240      	negs	r0, r0
 80006fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006fe:	4770      	bx	lr
 8000700:	4252      	negs	r2, r2
 8000702:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000706:	f000 f85b 	bl	80007c0 <__udivmoddi4>
 800070a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800070e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000712:	b004      	add	sp, #16
 8000714:	4252      	negs	r2, r2
 8000716:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800071a:	4770      	bx	lr

0800071c <__aeabi_uldivmod>:
 800071c:	b953      	cbnz	r3, 8000734 <__aeabi_uldivmod+0x18>
 800071e:	b94a      	cbnz	r2, 8000734 <__aeabi_uldivmod+0x18>
 8000720:	2900      	cmp	r1, #0
 8000722:	bf08      	it	eq
 8000724:	2800      	cmpeq	r0, #0
 8000726:	bf1c      	itt	ne
 8000728:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800072c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000730:	f000 b9ae 	b.w	8000a90 <__aeabi_idiv0>
 8000734:	f1ad 0c08 	sub.w	ip, sp, #8
 8000738:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800073c:	f000 f840 	bl	80007c0 <__udivmoddi4>
 8000740:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000748:	b004      	add	sp, #16
 800074a:	4770      	bx	lr

0800074c <__aeabi_d2lz>:
 800074c:	b508      	push	{r3, lr}
 800074e:	4602      	mov	r2, r0
 8000750:	460b      	mov	r3, r1
 8000752:	ec43 2b17 	vmov	d7, r2, r3
 8000756:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800075a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075e:	d403      	bmi.n	8000768 <__aeabi_d2lz+0x1c>
 8000760:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000764:	f000 b80c 	b.w	8000780 <__aeabi_d2ulz>
 8000768:	eeb1 7b47 	vneg.f64	d7, d7
 800076c:	ec51 0b17 	vmov	r0, r1, d7
 8000770:	f000 f806 	bl	8000780 <__aeabi_d2ulz>
 8000774:	4240      	negs	r0, r0
 8000776:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800077a:	bd08      	pop	{r3, pc}
 800077c:	0000      	movs	r0, r0
	...

08000780 <__aeabi_d2ulz>:
 8000780:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b0 <__aeabi_d2ulz+0x30>
 8000784:	ec41 0b17 	vmov	d7, r0, r1
 8000788:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x38>
 800078c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000790:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000794:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000798:	eea4 7b45 	vfms.f64	d7, d4, d5
 800079c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a0:	ee16 1a10 	vmov	r1, s12
 80007a4:	ee17 0a90 	vmov	r0, s15
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	f3af 8000 	nop.w
 80007b0:	00000000 	.word	0x00000000
 80007b4:	3df00000 	.word	0x3df00000
 80007b8:	00000000 	.word	0x00000000
 80007bc:	41f00000 	.word	0x41f00000

080007c0 <__udivmoddi4>:
 80007c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007c4:	9d08      	ldr	r5, [sp, #32]
 80007c6:	4604      	mov	r4, r0
 80007c8:	468e      	mov	lr, r1
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d14d      	bne.n	800086a <__udivmoddi4+0xaa>
 80007ce:	428a      	cmp	r2, r1
 80007d0:	4694      	mov	ip, r2
 80007d2:	d969      	bls.n	80008a8 <__udivmoddi4+0xe8>
 80007d4:	fab2 f282 	clz	r2, r2
 80007d8:	b152      	cbz	r2, 80007f0 <__udivmoddi4+0x30>
 80007da:	fa01 f302 	lsl.w	r3, r1, r2
 80007de:	f1c2 0120 	rsb	r1, r2, #32
 80007e2:	fa20 f101 	lsr.w	r1, r0, r1
 80007e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80007ea:	ea41 0e03 	orr.w	lr, r1, r3
 80007ee:	4094      	lsls	r4, r2
 80007f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007f4:	0c21      	lsrs	r1, r4, #16
 80007f6:	fbbe f6f8 	udiv	r6, lr, r8
 80007fa:	fa1f f78c 	uxth.w	r7, ip
 80007fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000802:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000806:	fb06 f107 	mul.w	r1, r6, r7
 800080a:	4299      	cmp	r1, r3
 800080c:	d90a      	bls.n	8000824 <__udivmoddi4+0x64>
 800080e:	eb1c 0303 	adds.w	r3, ip, r3
 8000812:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000816:	f080 811f 	bcs.w	8000a58 <__udivmoddi4+0x298>
 800081a:	4299      	cmp	r1, r3
 800081c:	f240 811c 	bls.w	8000a58 <__udivmoddi4+0x298>
 8000820:	3e02      	subs	r6, #2
 8000822:	4463      	add	r3, ip
 8000824:	1a5b      	subs	r3, r3, r1
 8000826:	b2a4      	uxth	r4, r4
 8000828:	fbb3 f0f8 	udiv	r0, r3, r8
 800082c:	fb08 3310 	mls	r3, r8, r0, r3
 8000830:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000834:	fb00 f707 	mul.w	r7, r0, r7
 8000838:	42a7      	cmp	r7, r4
 800083a:	d90a      	bls.n	8000852 <__udivmoddi4+0x92>
 800083c:	eb1c 0404 	adds.w	r4, ip, r4
 8000840:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000844:	f080 810a 	bcs.w	8000a5c <__udivmoddi4+0x29c>
 8000848:	42a7      	cmp	r7, r4
 800084a:	f240 8107 	bls.w	8000a5c <__udivmoddi4+0x29c>
 800084e:	4464      	add	r4, ip
 8000850:	3802      	subs	r0, #2
 8000852:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000856:	1be4      	subs	r4, r4, r7
 8000858:	2600      	movs	r6, #0
 800085a:	b11d      	cbz	r5, 8000864 <__udivmoddi4+0xa4>
 800085c:	40d4      	lsrs	r4, r2
 800085e:	2300      	movs	r3, #0
 8000860:	e9c5 4300 	strd	r4, r3, [r5]
 8000864:	4631      	mov	r1, r6
 8000866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086a:	428b      	cmp	r3, r1
 800086c:	d909      	bls.n	8000882 <__udivmoddi4+0xc2>
 800086e:	2d00      	cmp	r5, #0
 8000870:	f000 80ef 	beq.w	8000a52 <__udivmoddi4+0x292>
 8000874:	2600      	movs	r6, #0
 8000876:	e9c5 0100 	strd	r0, r1, [r5]
 800087a:	4630      	mov	r0, r6
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	fab3 f683 	clz	r6, r3
 8000886:	2e00      	cmp	r6, #0
 8000888:	d14a      	bne.n	8000920 <__udivmoddi4+0x160>
 800088a:	428b      	cmp	r3, r1
 800088c:	d302      	bcc.n	8000894 <__udivmoddi4+0xd4>
 800088e:	4282      	cmp	r2, r0
 8000890:	f200 80f9 	bhi.w	8000a86 <__udivmoddi4+0x2c6>
 8000894:	1a84      	subs	r4, r0, r2
 8000896:	eb61 0303 	sbc.w	r3, r1, r3
 800089a:	2001      	movs	r0, #1
 800089c:	469e      	mov	lr, r3
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d0e0      	beq.n	8000864 <__udivmoddi4+0xa4>
 80008a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80008a6:	e7dd      	b.n	8000864 <__udivmoddi4+0xa4>
 80008a8:	b902      	cbnz	r2, 80008ac <__udivmoddi4+0xec>
 80008aa:	deff      	udf	#255	; 0xff
 80008ac:	fab2 f282 	clz	r2, r2
 80008b0:	2a00      	cmp	r2, #0
 80008b2:	f040 8092 	bne.w	80009da <__udivmoddi4+0x21a>
 80008b6:	eba1 010c 	sub.w	r1, r1, ip
 80008ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008be:	fa1f fe8c 	uxth.w	lr, ip
 80008c2:	2601      	movs	r6, #1
 80008c4:	0c20      	lsrs	r0, r4, #16
 80008c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80008ca:	fb07 1113 	mls	r1, r7, r3, r1
 80008ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008d2:	fb0e f003 	mul.w	r0, lr, r3
 80008d6:	4288      	cmp	r0, r1
 80008d8:	d908      	bls.n	80008ec <__udivmoddi4+0x12c>
 80008da:	eb1c 0101 	adds.w	r1, ip, r1
 80008de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x12a>
 80008e4:	4288      	cmp	r0, r1
 80008e6:	f200 80cb 	bhi.w	8000a80 <__udivmoddi4+0x2c0>
 80008ea:	4643      	mov	r3, r8
 80008ec:	1a09      	subs	r1, r1, r0
 80008ee:	b2a4      	uxth	r4, r4
 80008f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80008f4:	fb07 1110 	mls	r1, r7, r0, r1
 80008f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000900:	45a6      	cmp	lr, r4
 8000902:	d908      	bls.n	8000916 <__udivmoddi4+0x156>
 8000904:	eb1c 0404 	adds.w	r4, ip, r4
 8000908:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800090c:	d202      	bcs.n	8000914 <__udivmoddi4+0x154>
 800090e:	45a6      	cmp	lr, r4
 8000910:	f200 80bb 	bhi.w	8000a8a <__udivmoddi4+0x2ca>
 8000914:	4608      	mov	r0, r1
 8000916:	eba4 040e 	sub.w	r4, r4, lr
 800091a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800091e:	e79c      	b.n	800085a <__udivmoddi4+0x9a>
 8000920:	f1c6 0720 	rsb	r7, r6, #32
 8000924:	40b3      	lsls	r3, r6
 8000926:	fa22 fc07 	lsr.w	ip, r2, r7
 800092a:	ea4c 0c03 	orr.w	ip, ip, r3
 800092e:	fa20 f407 	lsr.w	r4, r0, r7
 8000932:	fa01 f306 	lsl.w	r3, r1, r6
 8000936:	431c      	orrs	r4, r3
 8000938:	40f9      	lsrs	r1, r7
 800093a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800093e:	fa00 f306 	lsl.w	r3, r0, r6
 8000942:	fbb1 f8f9 	udiv	r8, r1, r9
 8000946:	0c20      	lsrs	r0, r4, #16
 8000948:	fa1f fe8c 	uxth.w	lr, ip
 800094c:	fb09 1118 	mls	r1, r9, r8, r1
 8000950:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000954:	fb08 f00e 	mul.w	r0, r8, lr
 8000958:	4288      	cmp	r0, r1
 800095a:	fa02 f206 	lsl.w	r2, r2, r6
 800095e:	d90b      	bls.n	8000978 <__udivmoddi4+0x1b8>
 8000960:	eb1c 0101 	adds.w	r1, ip, r1
 8000964:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000968:	f080 8088 	bcs.w	8000a7c <__udivmoddi4+0x2bc>
 800096c:	4288      	cmp	r0, r1
 800096e:	f240 8085 	bls.w	8000a7c <__udivmoddi4+0x2bc>
 8000972:	f1a8 0802 	sub.w	r8, r8, #2
 8000976:	4461      	add	r1, ip
 8000978:	1a09      	subs	r1, r1, r0
 800097a:	b2a4      	uxth	r4, r4
 800097c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000980:	fb09 1110 	mls	r1, r9, r0, r1
 8000984:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000988:	fb00 fe0e 	mul.w	lr, r0, lr
 800098c:	458e      	cmp	lr, r1
 800098e:	d908      	bls.n	80009a2 <__udivmoddi4+0x1e2>
 8000990:	eb1c 0101 	adds.w	r1, ip, r1
 8000994:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000998:	d26c      	bcs.n	8000a74 <__udivmoddi4+0x2b4>
 800099a:	458e      	cmp	lr, r1
 800099c:	d96a      	bls.n	8000a74 <__udivmoddi4+0x2b4>
 800099e:	3802      	subs	r0, #2
 80009a0:	4461      	add	r1, ip
 80009a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009a6:	fba0 9402 	umull	r9, r4, r0, r2
 80009aa:	eba1 010e 	sub.w	r1, r1, lr
 80009ae:	42a1      	cmp	r1, r4
 80009b0:	46c8      	mov	r8, r9
 80009b2:	46a6      	mov	lr, r4
 80009b4:	d356      	bcc.n	8000a64 <__udivmoddi4+0x2a4>
 80009b6:	d053      	beq.n	8000a60 <__udivmoddi4+0x2a0>
 80009b8:	b15d      	cbz	r5, 80009d2 <__udivmoddi4+0x212>
 80009ba:	ebb3 0208 	subs.w	r2, r3, r8
 80009be:	eb61 010e 	sbc.w	r1, r1, lr
 80009c2:	fa01 f707 	lsl.w	r7, r1, r7
 80009c6:	fa22 f306 	lsr.w	r3, r2, r6
 80009ca:	40f1      	lsrs	r1, r6
 80009cc:	431f      	orrs	r7, r3
 80009ce:	e9c5 7100 	strd	r7, r1, [r5]
 80009d2:	2600      	movs	r6, #0
 80009d4:	4631      	mov	r1, r6
 80009d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009da:	f1c2 0320 	rsb	r3, r2, #32
 80009de:	40d8      	lsrs	r0, r3
 80009e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80009e4:	fa21 f303 	lsr.w	r3, r1, r3
 80009e8:	4091      	lsls	r1, r2
 80009ea:	4301      	orrs	r1, r0
 80009ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f0:	fa1f fe8c 	uxth.w	lr, ip
 80009f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80009f8:	fb07 3610 	mls	r6, r7, r0, r3
 80009fc:	0c0b      	lsrs	r3, r1, #16
 80009fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a02:	fb00 f60e 	mul.w	r6, r0, lr
 8000a06:	429e      	cmp	r6, r3
 8000a08:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0c:	d908      	bls.n	8000a20 <__udivmoddi4+0x260>
 8000a0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a16:	d22f      	bcs.n	8000a78 <__udivmoddi4+0x2b8>
 8000a18:	429e      	cmp	r6, r3
 8000a1a:	d92d      	bls.n	8000a78 <__udivmoddi4+0x2b8>
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	4463      	add	r3, ip
 8000a20:	1b9b      	subs	r3, r3, r6
 8000a22:	b289      	uxth	r1, r1
 8000a24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a28:	fb07 3316 	mls	r3, r7, r6, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb06 f30e 	mul.w	r3, r6, lr
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x28a>
 8000a38:	eb1c 0101 	adds.w	r1, ip, r1
 8000a3c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000a40:	d216      	bcs.n	8000a70 <__udivmoddi4+0x2b0>
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d914      	bls.n	8000a70 <__udivmoddi4+0x2b0>
 8000a46:	3e02      	subs	r6, #2
 8000a48:	4461      	add	r1, ip
 8000a4a:	1ac9      	subs	r1, r1, r3
 8000a4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a50:	e738      	b.n	80008c4 <__udivmoddi4+0x104>
 8000a52:	462e      	mov	r6, r5
 8000a54:	4628      	mov	r0, r5
 8000a56:	e705      	b.n	8000864 <__udivmoddi4+0xa4>
 8000a58:	4606      	mov	r6, r0
 8000a5a:	e6e3      	b.n	8000824 <__udivmoddi4+0x64>
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	e6f8      	b.n	8000852 <__udivmoddi4+0x92>
 8000a60:	454b      	cmp	r3, r9
 8000a62:	d2a9      	bcs.n	80009b8 <__udivmoddi4+0x1f8>
 8000a64:	ebb9 0802 	subs.w	r8, r9, r2
 8000a68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a6c:	3801      	subs	r0, #1
 8000a6e:	e7a3      	b.n	80009b8 <__udivmoddi4+0x1f8>
 8000a70:	4646      	mov	r6, r8
 8000a72:	e7ea      	b.n	8000a4a <__udivmoddi4+0x28a>
 8000a74:	4620      	mov	r0, r4
 8000a76:	e794      	b.n	80009a2 <__udivmoddi4+0x1e2>
 8000a78:	4640      	mov	r0, r8
 8000a7a:	e7d1      	b.n	8000a20 <__udivmoddi4+0x260>
 8000a7c:	46d0      	mov	r8, sl
 8000a7e:	e77b      	b.n	8000978 <__udivmoddi4+0x1b8>
 8000a80:	3b02      	subs	r3, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	e732      	b.n	80008ec <__udivmoddi4+0x12c>
 8000a86:	4630      	mov	r0, r6
 8000a88:	e709      	b.n	800089e <__udivmoddi4+0xde>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	e742      	b.n	8000916 <__udivmoddi4+0x156>

08000a90 <__aeabi_idiv0>:
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <init_MPU_6050>:

	return i2c_success;
}

void init_MPU_6050(mpu_6050_t *my_mpu_6050, I2C_HandleTypeDef *i2c)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	6039      	str	r1, [r7, #0]
//	uint8_t i2cTxBuffer[6] = {0};
//	uint8_t i2cRxBuffer[6] = {0};



	my_mpu_6050->i2c_handle = i2c;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	601a      	str	r2, [r3, #0]

	/* Allocating memory Dynamically
	 * Make Sure to Free
	 */
	my_mpu_6050->i2c_tx_buff = (uint8_t *)malloc(6 * sizeof(uint8_t));
 8000aa4:	2006      	movs	r0, #6
 8000aa6:	f012 f8df 	bl	8012c68 <malloc>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	605a      	str	r2, [r3, #4]
	my_mpu_6050->i2c_rx_buff = (uint8_t *)malloc(6 * sizeof(uint8_t));
 8000ab2:	2006      	movs	r0, #6
 8000ab4:	f012 f8d8 	bl	8012c68 <malloc>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	609a      	str	r2, [r3, #8]
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <accel_Gyro_Config>:

/* Create another parameter that will allow user to
 * configure the full scale range of the accelerometer
 */
uint8_t accel_Gyro_Config(mpu_6050_t *my_mpu_6050)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	6078      	str	r0, [r7, #4]
	uint8_t configSuccess = HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	73fb      	strb	r3, [r7, #15]
	uint8_t dlpfSet = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	73bb      	strb	r3, [r7, #14]

	/* Selecting the 8g full range scale for the accelerometer
	 * by writing AFS_SEL_8 to ACCEL_CONFIG register
	 */
	my_mpu_6050->i2c_tx_buff[0] = ACCEL_CONFIG;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	221c      	movs	r2, #28
 8000ade:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[1] = AFS_SEL_8;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	701a      	strb	r2, [r3, #0]

	/* Selecting the 250 degree/seconds full range scale for the gyro
	 * by writing FS_SEL_250 to GYRO_CONFIG register
	 */

	my_mpu_6050->i2c_tx_buff[2] = GYRO_CONFIG;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	3302      	adds	r3, #2
 8000af0:	221b      	movs	r2, #27
 8000af2:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[3] = FS_SEL_250;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	3303      	adds	r3, #3
 8000afa:	2200      	movs	r2, #0
 8000afc:	701a      	strb	r2, [r3, #0]


	configSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 4, 100);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	2364      	movs	r3, #100	; 0x64
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	21d0      	movs	r1, #208	; 0xd0
 8000b0e:	f001 fef3 	bl	80028f8 <HAL_I2C_Master_Transmit>
 8000b12:	4603      	mov	r3, r0
 8000b14:	73fb      	strb	r3, [r7, #15]

/* Enabling the digital low pass filter */

	my_mpu_6050->i2c_tx_buff[0] = CONFIG;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	221a      	movs	r2, #26
 8000b1c:	701a      	strb	r2, [r3, #0]
	my_mpu_6050->i2c_tx_buff[1] = (0x05U);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	3301      	adds	r3, #1
 8000b24:	2205      	movs	r2, #5
 8000b26:	701a      	strb	r2, [r3, #0]

	dlpfSet = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685a      	ldr	r2, [r3, #4]
 8000b30:	2364      	movs	r3, #100	; 0x64
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2302      	movs	r3, #2
 8000b36:	21d0      	movs	r1, #208	; 0xd0
 8000b38:	f001 fede 	bl	80028f8 <HAL_I2C_Master_Transmit>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	73bb      	strb	r3, [r7, #14]

return configSuccess;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <get_Accel>:

	return enableSuccess;
}

uint8_t get_Accel(mpu_6050_t *my_mpu_6050)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af02      	add	r7, sp, #8
 8000b50:	6078      	str	r0, [r7, #4]
	/* flags that check if communication between i2c master and slave was successful */
	uint8_t i2c_Tx_flag = HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	73bb      	strb	r3, [r7, #14]
	uint8_t i2c_Rx_flag = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	737b      	strb	r3, [r7, #13]
	uint8_t i2c_success = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = ACCEL_XOUT_H;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	223b      	movs	r2, #59	; 0x3b
 8000b64:	701a      	strb	r2, [r3, #0]

	i2c_Tx_flag = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 1, 1000);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2301      	movs	r3, #1
 8000b76:	21d0      	movs	r1, #208	; 0xd0
 8000b78:	f001 febe 	bl	80028f8 <HAL_I2C_Master_Transmit>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	73bb      	strb	r3, [r7, #14]


	/* Retrieve the acceleration values from 6 registers
	 * ACCEL_XOUT_H, ACCEL_XOUT_L, ACCEL_YOUT_H, ACCEL_YOUT_L, ACCEL_ZOUT_H, ACCEL_ZOUT_L respectively
	 */
	i2c_Rx_flag = HAL_I2C_Master_Receive(my_mpu_6050->i2c_handle, MASTER_R, my_mpu_6050->i2c_rx_buff, 6, 1000);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2306      	movs	r3, #6
 8000b90:	21d1      	movs	r1, #209	; 0xd1
 8000b92:	f001 ffa5 	bl	8002ae0 <HAL_I2C_Master_Receive>
 8000b96:	4603      	mov	r3, r0
 8000b98:	737b      	strb	r3, [r7, #13]

	if (i2c_Tx_flag == HAL_OK && i2c_Rx_flag == HAL_OK)
 8000b9a:	7bbb      	ldrb	r3, [r7, #14]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d104      	bne.n	8000baa <get_Accel+0x60>
 8000ba0:	7b7b      	ldrb	r3, [r7, #13]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <get_Accel+0x60>
		i2c_success = HAL_OK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	73fb      	strb	r3, [r7, #15]

	/* You are also supposed to check A0 Pin on MPU_6050 */

	return i2c_success;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	0000      	movs	r0, r0
	...

08000bb8 <formatAccel>:

void formatAccel(mpu_6050_t *my_mpu_6050)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	my_mpu_6050->accelX = (int16_t)((my_mpu_6050->i2c_rx_buff[0] << 8) | my_mpu_6050->i2c_rx_buff[1]);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	021b      	lsls	r3, r3, #8
 8000bc8:	b21a      	sxth	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	819a      	strh	r2, [r3, #12]
	my_mpu_6050->aX =  ((float)(my_mpu_6050->accelX))/4096;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000be2:	ee07 3a90 	vmov	s15, r3
 8000be6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bea:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8000ca0 <formatAccel+0xe8>
 8000bee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Calibration value for acceleration in the x direction */
	//my_mpu_6050->aX-= 0.089;

	my_mpu_6050->accelY = (int16_t)((my_mpu_6050->i2c_rx_buff[2] << 8) | my_mpu_6050->i2c_rx_buff[3]);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	021b      	lsls	r3, r3, #8
 8000c02:	b21a      	sxth	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	3303      	adds	r3, #3
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b21a      	sxth	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	81da      	strh	r2, [r3, #14]
	my_mpu_6050->aY =  ((float)my_mpu_6050->accelY)/4096;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000c1c:	ee07 3a90 	vmov	s15, r3
 8000c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c24:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000ca0 <formatAccel+0xe8>
 8000c28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Calibration value for acceleration in the y direction */
	//my_mpu_6050->aY += 1.05;

	my_mpu_6050->accelZ = (int16_t)((my_mpu_6050->i2c_rx_buff[4] << 8) | my_mpu_6050->i2c_rx_buff[5]);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	3304      	adds	r3, #4
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	3305      	adds	r3, #5
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b21b      	sxth	r3, r3
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	821a      	strh	r2, [r3, #16]
	my_mpu_6050->aZ =  ((float)my_mpu_6050->accelZ)/4096;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000c56:	ee07 3a90 	vmov	s15, r3
 8000c5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c5e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000ca0 <formatAccel+0xe8>
 8000c62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	edc3 7a07 	vstr	s15, [r3, #28]

	/* Calibration value for acceleration in the z direction */
	my_mpu_6050->aZ += 0.1;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	edd3 7a07 	vldr	s15, [r3, #28]
 8000c72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c76:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000c98 <formatAccel+0xe0>
 8000c7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c7e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	f3af 8000 	nop.w
 8000c98:	9999999a 	.word	0x9999999a
 8000c9c:	3fb99999 	.word	0x3fb99999
 8000ca0:	45800000 	.word	0x45800000

08000ca4 <set_Sample_Rt>:
//
//}


uint8_t set_Sample_Rt(mpu_6050_t *my_mpu_6050)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af02      	add	r7, sp, #8
 8000caa:	6078      	str	r0, [r7, #4]
	uint8_t sampleSuccess = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = SMPRT_DIV;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2219      	movs	r2, #25
 8000cb6:	701a      	strb	r2, [r3, #0]

	/* Divider == 8 therefore sampleRate of accelerometer and gryo = 8kHz/8 == 1kHz */
	my_mpu_6050->i2c_tx_buff[1] = 0x08U;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	701a      	strb	r2, [r3, #0]

	sampleSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6818      	ldr	r0, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	2364      	movs	r3, #100	; 0x64
 8000ccc:	9300      	str	r3, [sp, #0]
 8000cce:	2302      	movs	r3, #2
 8000cd0:	21d0      	movs	r1, #208	; 0xd0
 8000cd2:	f001 fe11 	bl	80028f8 <HAL_I2C_Master_Transmit>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	73fb      	strb	r3, [r7, #15]

	return sampleSuccess;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <wake>:

uint8_t wake(mpu_6050_t *my_mpu_6050)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	6078      	str	r0, [r7, #4]
	uint8_t wakeSuccess = HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	73fb      	strb	r3, [r7, #15]

	my_mpu_6050->i2c_tx_buff[0] = PWR_MGMT_1;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	226b      	movs	r2, #107	; 0x6b
 8000cf6:	701a      	strb	r2, [r3, #0]

	my_mpu_6050->i2c_tx_buff[1] = 0x00U;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]

	wakeSuccess = HAL_I2C_Master_Transmit(my_mpu_6050->i2c_handle, MASTER_W, my_mpu_6050->i2c_tx_buff, 2, 100);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	2364      	movs	r3, #100	; 0x64
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2302      	movs	r3, #2
 8000d10:	21d0      	movs	r1, #208	; 0xd0
 8000d12:	f001 fdf1 	bl	80028f8 <HAL_I2C_Master_Transmit>
 8000d16:	4603      	mov	r3, r0
 8000d18:	73fb      	strb	r3, [r7, #15]

	return wakeSuccess;
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d28:	f001 f9d5 	bl	80020d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d2c:	f000 f842 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d30:	f000 f90a 	bl	8000f48 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d34:	f000 f8d8 	bl	8000ee8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000d38:	f000 f898 	bl	8000e6c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	init_MPU_6050(&my_imu, &hi2c1);
 8000d3c:	4914      	ldr	r1, [pc, #80]	; (8000d90 <main+0x6c>)
 8000d3e:	4815      	ldr	r0, [pc, #84]	; (8000d94 <main+0x70>)
 8000d40:	f7ff fea8 	bl	8000a94 <init_MPU_6050>

	wake(&my_imu);
 8000d44:	4813      	ldr	r0, [pc, #76]	; (8000d94 <main+0x70>)
 8000d46:	f7ff ffcd 	bl	8000ce4 <wake>

	set_Sample_Rt(&my_imu);
 8000d4a:	4812      	ldr	r0, [pc, #72]	; (8000d94 <main+0x70>)
 8000d4c:	f7ff ffaa 	bl	8000ca4 <set_Sample_Rt>

	accel_Gyro_Config(&my_imu);
 8000d50:	4810      	ldr	r0, [pc, #64]	; (8000d94 <main+0x70>)
 8000d52:	f7ff feb9 	bl	8000ac8 <accel_Gyro_Config>

	ui_array.data = (example_interfaces__msg__UInt8*)
					malloc(6 * sizeof(example_interfaces__msg__UInt8));
 8000d56:	2006      	movs	r0, #6
 8000d58:	f011 ff86 	bl	8012c68 <malloc>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
	ui_array.data = (example_interfaces__msg__UInt8*)
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <main+0x74>)
 8000d62:	601a      	str	r2, [r3, #0]


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d64:	f005 fc14 	bl	8006590 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of microROS_tx */
  microROS_txHandle = osThreadNew(tx_data, NULL, &microROS_tx_attributes);
 8000d68:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <main+0x78>)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <main+0x7c>)
 8000d6e:	f005 fc79 	bl	8006664 <osThreadNew>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <main+0x80>)
 8000d76:	6013      	str	r3, [r2, #0]

  /* creation of data_aq */
  data_aqHandle = osThreadNew(getData, NULL, &data_aq_attributes);
 8000d78:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <main+0x84>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	480b      	ldr	r0, [pc, #44]	; (8000dac <main+0x88>)
 8000d7e:	f005 fc71 	bl	8006664 <osThreadNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <main+0x8c>)
 8000d86:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d88:	f005 fc36 	bl	80065f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <main+0x68>
 8000d8e:	bf00      	nop
 8000d90:	20000fdc 	.word	0x20000fdc
 8000d94:	200010c0 	.word	0x200010c0
 8000d98:	200010f4 	.word	0x200010f4
 8000d9c:	08017788 	.word	0x08017788
 8000da0:	08001151 	.word	0x08001151
 8000da4:	200010b8 	.word	0x200010b8
 8000da8:	080177ac 	.word	0x080177ac
 8000dac:	08001279 	.word	0x08001279
 8000db0:	200010bc 	.word	0x200010bc

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b094      	sub	sp, #80	; 0x50
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	2234      	movs	r2, #52	; 0x34
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f011 ff6e 	bl	8012ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <SystemClock_Config+0xb0>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <SystemClock_Config+0xb0>)
 8000dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de2:	6413      	str	r3, [r2, #64]	; 0x40
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <SystemClock_Config+0xb0>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <SystemClock_Config+0xb4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000df8:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <SystemClock_Config+0xb4>)
 8000dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <SystemClock_Config+0xb4>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e10:	2301      	movs	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e14:	2310      	movs	r3, #16
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4618      	mov	r0, r3
 8000e22:	f002 fa57 	bl	80032d4 <HAL_RCC_OscConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000e2c:	f000 fa50 	bl	80012d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e30:	230f      	movs	r3, #15
 8000e32:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 fcef 	bl	8003830 <HAL_RCC_ClockConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000e58:	f000 fa3a 	bl	80012d0 <Error_Handler>
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3750      	adds	r7, #80	; 0x50
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40007000 	.word	0x40007000

08000e6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e72:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <MX_I2C1_Init+0x78>)
 8000e74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e78:	f240 220b 	movw	r2, #523	; 0x20b
 8000e7c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000eaa:	f001 fc95 	bl	80027d8 <HAL_I2C_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000eb4:	f000 fa0c 	bl	80012d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000ebc:	f002 f972 	bl	80031a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000ec6:	f000 fa03 	bl	80012d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <MX_I2C1_Init+0x74>)
 8000ece:	f002 f9b4 	bl	800323a <HAL_I2CEx_ConfigDigitalFilter>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ed8:	f000 f9fa 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000fdc 	.word	0x20000fdc
 8000ee4:	40005400 	.word	0x40005400

08000ee8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_USART3_UART_Init+0x58>)
 8000eee:	4a15      	ldr	r2, [pc, #84]	; (8000f44 <MX_USART3_UART_Init+0x5c>)
 8000ef0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_USART3_UART_Init+0x58>)
 8000ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART3_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <MX_USART3_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART3_UART_Init+0x58>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART3_UART_Init+0x58>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART3_UART_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART3_UART_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART3_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART3_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USART3_UART_Init+0x58>)
 8000f2c:	f003 fdde 	bl	8004aec <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f36:	f000 f9cb 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20001030 	.word	0x20001030
 8000f44:	40004800 	.word	0x40004800

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08c      	sub	sp, #48	; 0x30
 8000f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	4b77      	ldr	r3, [pc, #476]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a76      	ldr	r2, [pc, #472]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b74      	ldr	r3, [pc, #464]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	61bb      	str	r3, [r7, #24]
 8000f74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f76:	4b71      	ldr	r3, [pc, #452]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a70      	ldr	r2, [pc, #448]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b6e      	ldr	r3, [pc, #440]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b6b      	ldr	r3, [pc, #428]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a6a      	ldr	r2, [pc, #424]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b68      	ldr	r3, [pc, #416]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	4b65      	ldr	r3, [pc, #404]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a64      	ldr	r2, [pc, #400]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b62      	ldr	r3, [pc, #392]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbe:	4b5f      	ldr	r3, [pc, #380]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a5e      	ldr	r2, [pc, #376]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000fc4:	f043 0308 	orr.w	r3, r3, #8
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b5c      	ldr	r3, [pc, #368]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fd6:	4b59      	ldr	r3, [pc, #356]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a58      	ldr	r2, [pc, #352]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b56      	ldr	r3, [pc, #344]	; (800113c <MX_GPIO_Init+0x1f4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ff4:	4852      	ldr	r0, [pc, #328]	; (8001140 <MX_GPIO_Init+0x1f8>)
 8000ff6:	f001 fbbb 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2140      	movs	r1, #64	; 0x40
 8000ffe:	4851      	ldr	r0, [pc, #324]	; (8001144 <MX_GPIO_Init+0x1fc>)
 8001000:	f001 fbb6 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	484b      	ldr	r0, [pc, #300]	; (8001148 <MX_GPIO_Init+0x200>)
 800101c:	f001 f9fc 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001020:	2332      	movs	r3, #50	; 0x32
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001030:	230b      	movs	r3, #11
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	4843      	ldr	r0, [pc, #268]	; (8001148 <MX_GPIO_Init+0x200>)
 800103c:	f001 f9ec 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001040:	2386      	movs	r3, #134	; 0x86
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001050:	230b      	movs	r3, #11
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	483c      	ldr	r0, [pc, #240]	; (800114c <MX_GPIO_Init+0x204>)
 800105c:	f001 f9dc 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001060:	f244 0381 	movw	r3, #16513	; 0x4081
 8001064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	4831      	ldr	r0, [pc, #196]	; (8001140 <MX_GPIO_Init+0x1f8>)
 800107a:	f001 f9cd 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800107e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001090:	230b      	movs	r3, #11
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	4829      	ldr	r0, [pc, #164]	; (8001140 <MX_GPIO_Init+0x1f8>)
 800109c:	f001 f9bc 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010a0:	2340      	movs	r3, #64	; 0x40
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a4:	2301      	movs	r3, #1
 80010a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4823      	ldr	r0, [pc, #140]	; (8001144 <MX_GPIO_Init+0x1fc>)
 80010b8:	f001 f9ae 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	481d      	ldr	r0, [pc, #116]	; (8001144 <MX_GPIO_Init+0x1fc>)
 80010d0:	f001 f9a2 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010d4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010e6:	230a      	movs	r3, #10
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4816      	ldr	r0, [pc, #88]	; (800114c <MX_GPIO_Init+0x204>)
 80010f2:	f001 f991 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4810      	ldr	r0, [pc, #64]	; (800114c <MX_GPIO_Init+0x204>)
 800110c:	f001 f984 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001110:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001122:	230b      	movs	r3, #11
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_GPIO_Init+0x1fc>)
 800112e:	f001 f973 	bl	8002418 <HAL_GPIO_Init>

}
 8001132:	bf00      	nop
 8001134:	3730      	adds	r7, #48	; 0x30
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40020400 	.word	0x40020400
 8001144:	40021800 	.word	0x40021800
 8001148:	40020800 	.word	0x40020800
 800114c:	40020000 	.word	0x40020000

08001150 <tx_data>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_tx_data */
void tx_data(void *argument)
{
 8001150:	b5b0      	push	{r4, r5, r7, lr}
 8001152:	b0a8      	sub	sp, #160	; 0xa0
 8001154:	af02      	add	r7, sp, #8
 8001156:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	 rmw_uros_set_custom_transport(
 8001158:	4b37      	ldr	r3, [pc, #220]	; (8001238 <tx_data+0xe8>)
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	4b37      	ldr	r3, [pc, #220]	; (800123c <tx_data+0xec>)
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	4b37      	ldr	r3, [pc, #220]	; (8001240 <tx_data+0xf0>)
 8001162:	4a38      	ldr	r2, [pc, #224]	; (8001244 <tx_data+0xf4>)
 8001164:	4938      	ldr	r1, [pc, #224]	; (8001248 <tx_data+0xf8>)
 8001166:	2001      	movs	r0, #1
 8001168:	f008 fc56 	bl	8009a18 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800116c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001170:	4618      	mov	r0, r3
 8001172:	f008 fbd3 	bl	800991c <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8001176:	4b35      	ldr	r3, [pc, #212]	; (800124c <tx_data+0xfc>)
 8001178:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  freeRTOS_allocator.deallocate = microros_deallocate;
 800117c:	4b34      	ldr	r3, [pc, #208]	; (8001250 <tx_data+0x100>)
 800117e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8001182:	4b34      	ldr	r3, [pc, #208]	; (8001254 <tx_data+0x104>)
 8001184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001188:	4b33      	ldr	r3, [pc, #204]	; (8001258 <tx_data+0x108>)
 800118a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800118e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001192:	4618      	mov	r0, r3
 8001194:	f008 fbd0 	bl	8009938 <rcutils_set_default_allocator>
 8001198:	4603      	mov	r3, r0
 800119a:	f083 0301 	eor.w	r3, r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <tx_data+0x5e>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 80011a4:	f240 11d5 	movw	r1, #469	; 0x1d5
 80011a8:	482c      	ldr	r0, [pc, #176]	; (800125c <tx_data+0x10c>)
 80011aa:	f012 fcc1 	bl	8013b30 <iprintf>
	  //std_msgs__msg__Float32 Fmsg;
	  std_msgs__msg__UInt8 accel_data;



	  allocator = rcl_get_default_allocator();
 80011ae:	463b      	mov	r3, r7
 80011b0:	4618      	mov	r0, r3
 80011b2:	f008 fbdf 	bl	8009974 <rcutils_get_default_allocator>
 80011b6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80011ba:	463d      	mov	r5, r7
 80011bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c0:	682b      	ldr	r3, [r5, #0]
 80011c2:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 80011c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011c8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	f008 fad6 	bl	8009780 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 80011d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011d8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80011dc:	4a20      	ldr	r2, [pc, #128]	; (8001260 <tx_data+0x110>)
 80011de:	4921      	ldr	r1, [pc, #132]	; (8001264 <tx_data+0x114>)
 80011e0:	f008 fb18 	bl	8009814 <rclc_node_init_default>

	  /* Creating a publisher that can tx uint8_t data */
	  rclc_publisher_init_default(
 80011e4:	f007 ffca 	bl	800917c <rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011ee:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <tx_data+0x118>)
 80011f4:	f008 fb50 	bl	8009898 <rclc_publisher_init_default>
	    "cubemx_publisher");

//	  ui_array.capacity = 6;
//	  ui_array.size = 0;

	  multi_ui_array.data.data = my_imu.i2c_rx_buff;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <tx_data+0x11c>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <tx_data+0x120>)
 80011fe:	6113      	str	r3, [r2, #16]
	  multi_ui_array.data.capacity = 6;
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <tx_data+0x120>)
 8001202:	2206      	movs	r2, #6
 8001204:	619a      	str	r2, [r3, #24]
	  multi_ui_array.data.size = 6;
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <tx_data+0x120>)
 8001208:	2206      	movs	r2, #6
 800120a:	615a      	str	r2, [r3, #20]
	  {
	    //rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);



		rcl_ret_t ret = rcl_publish(&publisher, &multi_ui_array, NULL);
 800120c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001210:	2200      	movs	r2, #0
 8001212:	4917      	ldr	r1, [pc, #92]	; (8001270 <tx_data+0x120>)
 8001214:	4618      	mov	r0, r3
 8001216:	f008 fa8f 	bl	8009738 <rcl_publish>
 800121a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
		if (ret != RCL_RET_OK)
 800121e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001222:	2b00      	cmp	r3, #0
 8001224:	d004      	beq.n	8001230 <tx_data+0xe0>
		{
		  printf("Error publishing (line %d)\n", __LINE__);
 8001226:	f240 2113 	movw	r1, #531	; 0x213
 800122a:	4812      	ldr	r0, [pc, #72]	; (8001274 <tx_data+0x124>)
 800122c:	f012 fc80 	bl	8013b30 <iprintf>
	    //accel_data.data++;
	    //msg.data++;

		  //accel_data.data++;
		/* 1Khz transmit rate should be good enough for any moving vehicle */
	    osDelay(100);
 8001230:	2064      	movs	r0, #100	; 0x64
 8001232:	f005 fabd 	bl	80067b0 <osDelay>
	  {
 8001236:	e7e9      	b.n	800120c <tx_data+0xbc>
 8001238:	08001fd1 	.word	0x08001fd1
 800123c:	08001f71 	.word	0x08001f71
 8001240:	08001f51 	.word	0x08001f51
 8001244:	08001f29 	.word	0x08001f29
 8001248:	20001030 	.word	0x20001030
 800124c:	08001c5d 	.word	0x08001c5d
 8001250:	08001ca1 	.word	0x08001ca1
 8001254:	08001cd9 	.word	0x08001cd9
 8001258:	08001d45 	.word	0x08001d45
 800125c:	080176fc 	.word	0x080176fc
 8001260:	08017724 	.word	0x08017724
 8001264:	08017728 	.word	0x08017728
 8001268:	08017734 	.word	0x08017734
 800126c:	200010c0 	.word	0x200010c0
 8001270:	20001100 	.word	0x20001100
 8001274:	08017748 	.word	0x08017748

08001278 <getData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getData */
void getData(void *argument)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getData */
  /* Infinite loop */
  for(;;)
  {
	  if (get_Accel(&my_imu) != HAL_OK)
 8001280:	4808      	ldr	r0, [pc, #32]	; (80012a4 <getData+0x2c>)
 8001282:	f7ff fc62 	bl	8000b4a <get_Accel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d004      	beq.n	8001296 <getData+0x1e>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800128c:	2101      	movs	r1, #1
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <getData+0x30>)
 8001290:	f001 fa87 	bl	80027a2 <HAL_GPIO_TogglePin>
 8001294:	e002      	b.n	800129c <getData+0x24>
	  else
		  formatAccel(&my_imu);
 8001296:	4803      	ldr	r0, [pc, #12]	; (80012a4 <getData+0x2c>)
 8001298:	f7ff fc8e 	bl	8000bb8 <formatAccel>

    osDelay(1);
 800129c:	2001      	movs	r0, #1
 800129e:	f005 fa87 	bl	80067b0 <osDelay>
	  if (get_Accel(&my_imu) != HAL_OK)
 80012a2:	e7ed      	b.n	8001280 <getData+0x8>
 80012a4:	200010c0 	.word	0x200010c0
 80012a8:	40020400 	.word	0x40020400

080012ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012be:	f000 ff17 	bl	80020f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40001000 	.word	0x40001000

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <Error_Handler+0x8>
	...

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <HAL_MspInit+0x4c>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a10      	ldr	r2, [pc, #64]	; (8001328 <HAL_MspInit+0x4c>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_MspInit+0x4c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	210f      	movs	r1, #15
 8001316:	f06f 0001 	mvn.w	r0, #1
 800131a:	f000 ffc1 	bl	80022a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0ae      	sub	sp, #184	; 0xb8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2290      	movs	r2, #144	; 0x90
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f011 fca9 	bl	8012ca4 <memset>
  if(hi2c->Instance==I2C1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <HAL_I2C_MspInit+0xb4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d13c      	bne.n	80013d6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800135c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001360:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001362:	2300      	movs	r3, #0
 8001364:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4618      	mov	r0, r3
 800136c:	f002 fcb6 	bl	8003cdc <HAL_RCCEx_PeriphCLKConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001376:	f7ff ffab 	bl	80012d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <HAL_I2C_MspInit+0xb8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <HAL_I2C_MspInit+0xb8>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_I2C_MspInit+0xb8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001392:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001396:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139a:	2312      	movs	r3, #18
 800139c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ac:	2304      	movs	r3, #4
 80013ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013b6:	4619      	mov	r1, r3
 80013b8:	480b      	ldr	r0, [pc, #44]	; (80013e8 <HAL_I2C_MspInit+0xbc>)
 80013ba:	f001 f82d 	bl	8002418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_I2C_MspInit+0xb8>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_I2C_MspInit+0xb8>)
 80013c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_I2C_MspInit+0xb8>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013d6:	bf00      	nop
 80013d8:	37b8      	adds	r7, #184	; 0xb8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40005400 	.word	0x40005400
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020400 	.word	0x40020400

080013ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0ae      	sub	sp, #184	; 0xb8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2290      	movs	r2, #144	; 0x90
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f011 fc49 	bl	8012ca4 <memset>
  if(huart->Instance==USART3)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a26      	ldr	r2, [pc, #152]	; (80014b0 <HAL_UART_MspInit+0xc4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d144      	bne.n	80014a6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800141c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001420:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001422:	2300      	movs	r3, #0
 8001424:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4618      	mov	r0, r3
 800142c:	f002 fc56 	bl	8003cdc <HAL_RCCEx_PeriphCLKConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001436:	f7ff ff4b 	bl	80012d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <HAL_UART_MspInit+0xc8>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a1d      	ldr	r2, [pc, #116]	; (80014b4 <HAL_UART_MspInit+0xc8>)
 8001440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_UART_MspInit+0xc8>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_UART_MspInit+0xc8>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <HAL_UART_MspInit+0xc8>)
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_UART_MspInit+0xc8>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800146a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800146e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001484:	2307      	movs	r3, #7
 8001486:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800148e:	4619      	mov	r1, r3
 8001490:	4809      	ldr	r0, [pc, #36]	; (80014b8 <HAL_UART_MspInit+0xcc>)
 8001492:	f000 ffc1 	bl	8002418 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2105      	movs	r1, #5
 800149a:	2027      	movs	r0, #39	; 0x27
 800149c:	f000 ff00 	bl	80022a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014a0:	2027      	movs	r0, #39	; 0x27
 80014a2:	f000 ff19 	bl	80022d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014a6:	bf00      	nop
 80014a8:	37b8      	adds	r7, #184	; 0xb8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40004800 	.word	0x40004800
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020c00 	.word	0x40020c00

080014bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	; 0x38
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014cc:	4b33      	ldr	r3, [pc, #204]	; (800159c <HAL_InitTick+0xe0>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	4a32      	ldr	r2, [pc, #200]	; (800159c <HAL_InitTick+0xe0>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6413      	str	r3, [r2, #64]	; 0x40
 80014d8:	4b30      	ldr	r3, [pc, #192]	; (800159c <HAL_InitTick+0xe0>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014e4:	f107 0210 	add.w	r2, r7, #16
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 fbc2 	bl	8003c78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d103      	bne.n	8001506 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014fe:	f002 fb93 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8001502:	6378      	str	r0, [r7, #52]	; 0x34
 8001504:	e004      	b.n	8001510 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001506:	f002 fb8f 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 800150a:	4603      	mov	r3, r0
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001512:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <HAL_InitTick+0xe4>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	0c9b      	lsrs	r3, r3, #18
 800151a:	3b01      	subs	r3, #1
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <HAL_InitTick+0xe8>)
 8001520:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <HAL_InitTick+0xec>)
 8001522:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <HAL_InitTick+0xe8>)
 8001526:	f240 32e7 	movw	r2, #999	; 0x3e7
 800152a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <HAL_InitTick+0xe8>)
 800152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001530:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_InitTick+0xe8>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_InitTick+0xe8>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_InitTick+0xe8>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001544:	4817      	ldr	r0, [pc, #92]	; (80015a4 <HAL_InitTick+0xe8>)
 8001546:	f002 fff1 	bl	800452c <HAL_TIM_Base_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001550:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11b      	bne.n	8001590 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001558:	4812      	ldr	r0, [pc, #72]	; (80015a4 <HAL_InitTick+0xe8>)
 800155a:	f003 f849 	bl	80045f0 <HAL_TIM_Base_Start_IT>
 800155e:	4603      	mov	r3, r0
 8001560:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001564:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001568:	2b00      	cmp	r3, #0
 800156a:	d111      	bne.n	8001590 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800156c:	2036      	movs	r0, #54	; 0x36
 800156e:	f000 feb3 	bl	80022d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d808      	bhi.n	800158a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	2036      	movs	r0, #54	; 0x36
 800157e:	f000 fe8f 	bl	80022a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_InitTick+0xf0>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e002      	b.n	8001590 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001590:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001594:	4618      	mov	r0, r3
 8001596:	3738      	adds	r7, #56	; 0x38
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	431bde83 	.word	0x431bde83
 80015a4:	2000111c 	.word	0x2000111c
 80015a8:	40001000 	.word	0x40001000
 80015ac:	20000008 	.word	0x20000008

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <USART3_IRQHandler+0x10>)
 80015e2:	f003 fc99 	bl	8004f18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20001030 	.word	0x20001030

080015f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <TIM6_DAC_IRQHandler+0x10>)
 80015f6:	f003 f873 	bl	80046e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	2000111c 	.word	0x2000111c

08001604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return 1;
 8001608:	2301      	movs	r3, #1
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_kill>:

int _kill(int pid, int sig)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800161e:	f011 fa2b 	bl	8012a78 <__errno>
 8001622:	4603      	mov	r3, r0
 8001624:	2216      	movs	r2, #22
 8001626:	601a      	str	r2, [r3, #0]
  return -1;
 8001628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800162c:	4618      	mov	r0, r3
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <_exit>:

void _exit (int status)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800163c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ffe7 	bl	8001614 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001646:	e7fe      	b.n	8001646 <_exit+0x12>

08001648 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	e00a      	b.n	8001670 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800165a:	f3af 8000 	nop.w
 800165e:	4601      	mov	r1, r0
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	60ba      	str	r2, [r7, #8]
 8001666:	b2ca      	uxtb	r2, r1
 8001668:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf0      	blt.n	800165a <_read+0x12>
  }

  return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e009      	b.n	80016a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	dbf1      	blt.n	8001694 <_write+0x12>
  }
  return len;
 80016b0:	687b      	ldr	r3, [r7, #4]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_close>:

int _close(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e2:	605a      	str	r2, [r3, #4]
  return 0;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <_isatty>:

int _isatty(int file)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <_sbrk+0x5c>)
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <_sbrk+0x60>)
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <_sbrk+0x64>)
 8001742:	4a12      	ldr	r2, [pc, #72]	; (800178c <_sbrk+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d207      	bcs.n	8001764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001754:	f011 f990 	bl	8012a78 <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001762:	e009      	b.n	8001778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20080000 	.word	0x20080000
 8001784:	00000400 	.word	0x00000400
 8001788:	2000116c 	.word	0x2000116c
 800178c:	2000eb00 	.word	0x2000eb00

08001790 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <SystemInit+0x20>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <SystemInit+0x20>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80017c0:	f006 f860 	bl	8007884 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80017c4:	4b5b      	ldr	r3, [pc, #364]	; (8001934 <pvPortMallocMicroROS+0x180>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80017cc:	f000 f98a 	bl	8001ae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80017d0:	4b59      	ldr	r3, [pc, #356]	; (8001938 <pvPortMallocMicroROS+0x184>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 8092 	bne.w	8001902 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d01f      	beq.n	8001824 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 80017e4:	2208      	movs	r2, #8
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d016      	beq.n	8001824 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f023 0307 	bic.w	r3, r3, #7
 80017fc:	3308      	adds	r3, #8
 80017fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00c      	beq.n	8001824 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800180a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180e:	b672      	cpsid	i
 8001810:	f383 8811 	msr	BASEPRI, r3
 8001814:	f3bf 8f6f 	isb	sy
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	b662      	cpsie	i
 800181e:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001820:	bf00      	nop
 8001822:	e7fe      	b.n	8001822 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d06b      	beq.n	8001902 <pvPortMallocMicroROS+0x14e>
 800182a:	4b44      	ldr	r3, [pc, #272]	; (800193c <pvPortMallocMicroROS+0x188>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	d866      	bhi.n	8001902 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001834:	4b42      	ldr	r3, [pc, #264]	; (8001940 <pvPortMallocMicroROS+0x18c>)
 8001836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001838:	4b41      	ldr	r3, [pc, #260]	; (8001940 <pvPortMallocMicroROS+0x18c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800183e:	e004      	b.n	800184a <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	d903      	bls.n	800185c <pvPortMallocMicroROS+0xa8>
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f1      	bne.n	8001840 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800185c:	4b35      	ldr	r3, [pc, #212]	; (8001934 <pvPortMallocMicroROS+0x180>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001862:	429a      	cmp	r2, r3
 8001864:	d04d      	beq.n	8001902 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2208      	movs	r2, #8
 800186c:	4413      	add	r3, r2
 800186e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	1ad2      	subs	r2, r2, r3
 8001880:	2308      	movs	r3, #8
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	429a      	cmp	r2, r3
 8001886:	d921      	bls.n	80018cc <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00c      	beq.n	80018b4 <pvPortMallocMicroROS+0x100>
	__asm volatile
 800189a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800189e:	b672      	cpsid	i
 80018a0:	f383 8811 	msr	BASEPRI, r3
 80018a4:	f3bf 8f6f 	isb	sy
 80018a8:	f3bf 8f4f 	dsb	sy
 80018ac:	b662      	cpsie	i
 80018ae:	613b      	str	r3, [r7, #16]
}
 80018b0:	bf00      	nop
 80018b2:	e7fe      	b.n	80018b2 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	1ad2      	subs	r2, r2, r3
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80018c6:	69b8      	ldr	r0, [r7, #24]
 80018c8:	f000 f96e 	bl	8001ba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <pvPortMallocMicroROS+0x188>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	4a19      	ldr	r2, [pc, #100]	; (800193c <pvPortMallocMicroROS+0x188>)
 80018d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <pvPortMallocMicroROS+0x188>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b19      	ldr	r3, [pc, #100]	; (8001944 <pvPortMallocMicroROS+0x190>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d203      	bcs.n	80018ee <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <pvPortMallocMicroROS+0x188>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a16      	ldr	r2, [pc, #88]	; (8001944 <pvPortMallocMicroROS+0x190>)
 80018ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <pvPortMallocMicroROS+0x184>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	431a      	orrs	r2, r3
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001902:	f005 ffcd 	bl	80078a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00c      	beq.n	800192a <pvPortMallocMicroROS+0x176>
	__asm volatile
 8001910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001914:	b672      	cpsid	i
 8001916:	f383 8811 	msr	BASEPRI, r3
 800191a:	f3bf 8f6f 	isb	sy
 800191e:	f3bf 8f4f 	dsb	sy
 8001922:	b662      	cpsie	i
 8001924:	60fb      	str	r3, [r7, #12]
}
 8001926:	bf00      	nop
 8001928:	e7fe      	b.n	8001928 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 800192a:	69fb      	ldr	r3, [r7, #28]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3728      	adds	r7, #40	; 0x28
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20004d78 	.word	0x20004d78
 8001938:	20004d84 	.word	0x20004d84
 800193c:	20004d7c 	.word	0x20004d7c
 8001940:	20004d70 	.word	0x20004d70
 8001944:	20004d80 	.word	0x20004d80

08001948 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d04c      	beq.n	80019f4 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800195a:	2308      	movs	r3, #8
 800195c:	425b      	negs	r3, r3
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4413      	add	r3, r2
 8001962:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <vPortFreeMicroROS+0xb4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10c      	bne.n	8001990 <vPortFreeMicroROS+0x48>
	__asm volatile
 8001976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800197a:	b672      	cpsid	i
 800197c:	f383 8811 	msr	BASEPRI, r3
 8001980:	f3bf 8f6f 	isb	sy
 8001984:	f3bf 8f4f 	dsb	sy
 8001988:	b662      	cpsie	i
 800198a:	60fb      	str	r3, [r7, #12]
}
 800198c:	bf00      	nop
 800198e:	e7fe      	b.n	800198e <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00c      	beq.n	80019b2 <vPortFreeMicroROS+0x6a>
	__asm volatile
 8001998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800199c:	b672      	cpsid	i
 800199e:	f383 8811 	msr	BASEPRI, r3
 80019a2:	f3bf 8f6f 	isb	sy
 80019a6:	f3bf 8f4f 	dsb	sy
 80019aa:	b662      	cpsie	i
 80019ac:	60bb      	str	r3, [r7, #8]
}
 80019ae:	bf00      	nop
 80019b0:	e7fe      	b.n	80019b0 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <vPortFreeMicroROS+0xb4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d019      	beq.n	80019f4 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d115      	bne.n	80019f4 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <vPortFreeMicroROS+0xb4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	401a      	ands	r2, r3
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80019d8:	f005 ff54 	bl	8007884 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <vPortFreeMicroROS+0xb8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <vPortFreeMicroROS+0xb8>)
 80019e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80019ea:	6938      	ldr	r0, [r7, #16]
 80019ec:	f000 f8dc 	bl	8001ba8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80019f0:	f005 ff56 	bl	80078a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80019f4:	bf00      	nop
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20004d84 	.word	0x20004d84
 8001a00:	20004d7c 	.word	0x20004d7c

08001a04 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001a04:	b480      	push	{r7}
 8001a06:	b087      	sub	sp, #28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001a10:	2308      	movs	r3, #8
 8001a12:	425b      	negs	r3, r3
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	4413      	add	r3, r2
 8001a18:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <getBlockSize+0x38>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]

	return count;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20004d84 	.word	0x20004d84

08001a40 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001a4a:	f005 ff1b 	bl	8007884 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001a4e:	6838      	ldr	r0, [r7, #0]
 8001a50:	f7ff feb0 	bl	80017b4 <pvPortMallocMicroROS>
 8001a54:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d017      	beq.n	8001a8c <pvPortReallocMicroROS+0x4c>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d014      	beq.n	8001a8c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffce 	bl	8001a04 <getBlockSize>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d201      	bcs.n	8001a7c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	68b8      	ldr	r0, [r7, #8]
 8001a82:	f011 f901 	bl	8012c88 <memcpy>

		vPortFreeMicroROS(pv);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff5e 	bl	8001948 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001a8c:	f005 ff08 	bl	80078a0 <xTaskResumeAll>

	return newmem;
 8001a90:	68bb      	ldr	r3, [r7, #8]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b086      	sub	sp, #24
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001aa4:	f005 feee 	bl	8007884 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	fb02 f303 	mul.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff fe7e 	bl	80017b4 <pvPortMallocMicroROS>
 8001ab8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001abe:	e004      	b.n	8001aca <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	613a      	str	r2, [r7, #16]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	1e5a      	subs	r2, r3, #1
 8001ace:	617a      	str	r2, [r7, #20]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f5      	bne.n	8001ac0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001ad4:	f005 fee4 	bl	80078a0 <xTaskResumeAll>
  	return mem;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001aea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001aee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <prvHeapInit+0xac>)
 8001af2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00c      	beq.n	8001b18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3307      	adds	r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f023 0307 	bic.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <prvHeapInit+0xac>)
 8001b14:	4413      	add	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b1c:	4a1d      	ldr	r2, [pc, #116]	; (8001b94 <prvHeapInit+0xb0>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001b22:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <prvHeapInit+0xb0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001b30:	2208      	movs	r2, #8
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f023 0307 	bic.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <prvHeapInit+0xb4>)
 8001b44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <prvHeapInit+0xb4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <prvHeapInit+0xb4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	1ad2      	subs	r2, r2, r3
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <prvHeapInit+0xb4>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <prvHeapInit+0xb8>)
 8001b72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <prvHeapInit+0xbc>)
 8001b7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <prvHeapInit+0xc0>)
 8001b7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b82:	601a      	str	r2, [r3, #0]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	20001170 	.word	0x20001170
 8001b94:	20004d70 	.word	0x20004d70
 8001b98:	20004d78 	.word	0x20004d78
 8001b9c:	20004d80 	.word	0x20004d80
 8001ba0:	20004d7c 	.word	0x20004d7c
 8001ba4:	20004d84 	.word	0x20004d84

08001ba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001bb0:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <prvInsertBlockIntoFreeList+0xac>)
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	e002      	b.n	8001bbc <prvInsertBlockIntoFreeList+0x14>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d8f7      	bhi.n	8001bb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d108      	bne.n	8001bea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	441a      	add	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	441a      	add	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d118      	bne.n	8001c30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <prvInsertBlockIntoFreeList+0xb0>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d00d      	beq.n	8001c26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	441a      	add	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e008      	b.n	8001c38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <prvInsertBlockIntoFreeList+0xb0>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	e003      	b.n	8001c38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d002      	beq.n	8001c46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20004d70 	.word	0x20004d70
 8001c58:	20004d78 	.word	0x20004d78

08001c5c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <microros_allocate+0x3c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <microros_allocate+0x3c>)
 8001c74:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <microros_allocate+0x40>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <microros_allocate+0x40>)
 8001c84:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fd94 	bl	80017b4 <pvPortMallocMicroROS>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20004d88 	.word	0x20004d88
 8001c9c:	20004d8c 	.word	0x20004d8c

08001ca0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00c      	beq.n	8001cca <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff fea7 	bl	8001a04 <getBlockSize>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <microros_deallocate+0x34>)
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <microros_deallocate+0x34>)
 8001cc2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff fe3f 	bl	8001948 <vPortFreeMicroROS>
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20004d8c 	.word	0x20004d8c

08001cd8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001ce4:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <microros_reallocate+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	4413      	add	r3, r2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <microros_reallocate+0x64>)
 8001cf2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <microros_reallocate+0x68>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <microros_reallocate+0x68>)
 8001d02:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d104      	bne.n	8001d14 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001d0a:	68b8      	ldr	r0, [r7, #8]
 8001d0c:	f7ff fd52 	bl	80017b4 <pvPortMallocMicroROS>
 8001d10:	4603      	mov	r3, r0
 8001d12:	e00e      	b.n	8001d32 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f7ff fe75 	bl	8001a04 <getBlockSize>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <microros_reallocate+0x68>)
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <microros_reallocate+0x68>)
 8001d26:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f7ff fe88 	bl	8001a40 <pvPortReallocMicroROS>
 8001d30:	4603      	mov	r3, r0
  }
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20004d88 	.word	0x20004d88
 8001d40:	20004d8c 	.word	0x20004d8c

08001d44 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	fb02 f303 	mul.w	r3, r2, r3
 8001d58:	4a0c      	ldr	r2, [pc, #48]	; (8001d8c <microros_zero_allocate+0x48>)
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <microros_zero_allocate+0x48>)
 8001d62:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	fb02 f303 	mul.w	r3, r2, r3
 8001d6c:	4a08      	ldr	r2, [pc, #32]	; (8001d90 <microros_zero_allocate+0x4c>)
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <microros_zero_allocate+0x4c>)
 8001d76:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f7ff fe8d 	bl	8001a9a <pvPortCallocMicroROS>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20004d88 	.word	0x20004d88
 8001d90:	20004d8c 	.word	0x20004d8c
 8001d94:	00000000 	.word	0x00000000

08001d98 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001d98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001daa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dae:	a320      	add	r3, pc, #128	; (adr r3, 8001e30 <UTILS_NanosecondsToTimespec+0x98>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	f7fe fc62 	bl	800067c <__aeabi_ldivmod>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001dc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dc6:	a31a      	add	r3, pc, #104	; (adr r3, 8001e30 <UTILS_NanosecondsToTimespec+0x98>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fc56 	bl	800067c <__aeabi_ldivmod>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	da20      	bge.n	8001e1e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <UTILS_NanosecondsToTimespec+0x90>)
 8001de2:	fb82 1203 	smull	r1, r2, r2, r3
 8001de6:	1712      	asrs	r2, r2, #28
 8001de8:	17db      	asrs	r3, r3, #31
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	6979      	ldr	r1, [r7, #20]
 8001df8:	17c8      	asrs	r0, r1, #31
 8001dfa:	460c      	mov	r4, r1
 8001dfc:	4605      	mov	r5, r0
 8001dfe:	ebb2 0804 	subs.w	r8, r2, r4
 8001e02:	eb63 0905 	sbc.w	r9, r3, r5
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	4906      	ldr	r1, [pc, #24]	; (8001e2c <UTILS_NanosecondsToTimespec+0x94>)
 8001e14:	fb01 f303 	mul.w	r3, r1, r3
 8001e18:	441a      	add	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
    }
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e28:	44b82fa1 	.word	0x44b82fa1
 8001e2c:	3b9aca00 	.word	0x3b9aca00
 8001e30:	3b9aca00 	.word	0x3b9aca00
 8001e34:	00000000 	.word	0x00000000

08001e38 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e3c:	b08e      	sub	sp, #56	; 0x38
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6278      	str	r0, [r7, #36]	; 0x24
 8001e42:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001e44:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e48:	2300      	movs	r3, #0
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f005 ffa4 	bl	8007dac <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	17da      	asrs	r2, r3, #31
 8001e68:	61bb      	str	r3, [r7, #24]
 8001e6a:	61fa      	str	r2, [r7, #28]
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	69b9      	ldr	r1, [r7, #24]
 8001e76:	000b      	movs	r3, r1
 8001e78:	2200      	movs	r2, #0
 8001e7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e80:	2200      	movs	r2, #0
 8001e82:	461c      	mov	r4, r3
 8001e84:	4615      	mov	r5, r2
 8001e86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e8a:	1911      	adds	r1, r2, r4
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	416b      	adcs	r3, r5
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e96:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001e9a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	f04f 0400 	mov.w	r4, #0
 8001ea6:	f04f 0500 	mov.w	r5, #0
 8001eaa:	015d      	lsls	r5, r3, #5
 8001eac:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001eb0:	0154      	lsls	r4, r2, #5
 8001eb2:	4622      	mov	r2, r4
 8001eb4:	462b      	mov	r3, r5
 8001eb6:	ebb2 0800 	subs.w	r8, r2, r0
 8001eba:	eb63 0901 	sbc.w	r9, r3, r1
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001eca:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001ece:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001ed2:	4690      	mov	r8, r2
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	eb18 0a00 	adds.w	sl, r8, r0
 8001eda:	eb49 0b01 	adc.w	fp, r9, r1
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001eea:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eee:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ef2:	ebb2 040a 	subs.w	r4, r2, sl
 8001ef6:	603c      	str	r4, [r7, #0]
 8001ef8:	eb63 030b 	sbc.w	r3, r3, fp
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f02:	4623      	mov	r3, r4
 8001f04:	181b      	adds	r3, r3, r0
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	462b      	mov	r3, r5
 8001f0a:	eb41 0303 	adc.w	r3, r1, r3
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	6a3a      	ldr	r2, [r7, #32]
 8001f12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f16:	f7ff ff3f 	bl	8001d98 <UTILS_NanosecondsToTimespec>

    return 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3738      	adds	r7, #56	; 0x38
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001f28 <cubemx_transport_open>:
static uint8_t it_buffer[UART_IT_BUFFER_SIZE];
static uint8_t it_data;
static size_t it_head = 0, it_tail = 0;


bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001f36:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_IT(uart, &it_data, 1);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4904      	ldr	r1, [pc, #16]	; (8001f4c <cubemx_transport_open+0x24>)
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f002 fe81 	bl	8004c44 <HAL_UART_Receive_IT>
    return true;
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20005590 	.word	0x20005590

08001f50 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001f5e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Abort_IT(uart);
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f002 feb3 	bl	8004ccc <HAL_UART_Abort_IT>
    return true;
 8001f66:	2301      	movs	r3, #1
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001f84:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f8a:	2b20      	cmp	r3, #32
 8001f8c:	d11a      	bne.n	8001fc4 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_IT(uart, buf, len);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f002 fdf6 	bl	8004b88 <HAL_UART_Transmit_IT>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001fa0:	e002      	b.n	8001fa8 <cubemx_transport_write+0x38>
            osDelay(1);
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f004 fc04 	bl	80067b0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001fa8:	7cfb      	ldrb	r3, [r7, #19]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d103      	bne.n	8001fb6 <cubemx_transport_write+0x46>
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d1f5      	bne.n	8001fa2 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8001fb6:	7cfb      	ldrb	r3, [r7, #19]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <cubemx_transport_write+0x50>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	e002      	b.n	8001fc6 <cubemx_transport_write+0x56>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e000      	b.n	8001fc6 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8001fc4:	2300      	movs	r3, #0
    }
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	603b      	str	r3, [r7, #0]
    size_t wrote = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
    while ((it_head != it_tail) && (wrote < len)){
 8001fe2:	e011      	b.n	8002008 <cubemx_transport_read+0x38>
        buf[wrote] = it_buffer[it_head];
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <cubemx_transport_read+0x5c>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	440b      	add	r3, r1
 8001fee:	4910      	ldr	r1, [pc, #64]	; (8002030 <cubemx_transport_read+0x60>)
 8001ff0:	5c8a      	ldrb	r2, [r1, r2]
 8001ff2:	701a      	strb	r2, [r3, #0]
        it_head = (it_head + 1) % UART_IT_BUFFER_SIZE;
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <cubemx_transport_read+0x5c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	; (800202c <cubemx_transport_read+0x5c>)
 8002000:	6013      	str	r3, [r2, #0]
        wrote++;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
    while ((it_head != it_tail) && (wrote < len)){
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <cubemx_transport_read+0x5c>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <cubemx_transport_read+0x64>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d003      	beq.n	800201c <cubemx_transport_read+0x4c>
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	429a      	cmp	r2, r3
 800201a:	d3e3      	bcc.n	8001fe4 <cubemx_transport_read+0x14>
    }

    return wrote;
 800201c:	697b      	ldr	r3, [r7, #20]
}
 800201e:	4618      	mov	r0, r3
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20005594 	.word	0x20005594
 8002030:	20004d90 	.word	0x20004d90
 8002034:	20005598 	.word	0x20005598

08002038 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    if(it_tail == UART_IT_BUFFER_SIZE)
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_UART_RxCpltCallback+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002048:	d102      	bne.n	8002050 <HAL_UART_RxCpltCallback+0x18>
        it_tail = 0;
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_UART_RxCpltCallback+0x40>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

    it_buffer[it_tail] = it_data;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_UART_RxCpltCallback+0x40>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_UART_RxCpltCallback+0x44>)
 8002056:	7811      	ldrb	r1, [r2, #0]
 8002058:	4a09      	ldr	r2, [pc, #36]	; (8002080 <HAL_UART_RxCpltCallback+0x48>)
 800205a:	54d1      	strb	r1, [r2, r3]
    it_tail++;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_UART_RxCpltCallback+0x40>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <HAL_UART_RxCpltCallback+0x40>)
 8002064:	6013      	str	r3, [r2, #0]

    HAL_UART_Receive_IT(huart, &it_data, 1);
 8002066:	2201      	movs	r2, #1
 8002068:	4904      	ldr	r1, [pc, #16]	; (800207c <HAL_UART_RxCpltCallback+0x44>)
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f002 fdea 	bl	8004c44 <HAL_UART_Receive_IT>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20005598 	.word	0x20005598
 800207c:	20005590 	.word	0x20005590
 8002080:	20004d90 	.word	0x20004d90

08002084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002088:	480d      	ldr	r0, [pc, #52]	; (80020c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800208a:	490e      	ldr	r1, [pc, #56]	; (80020c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800208c:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002090:	e002      	b.n	8002098 <LoopCopyDataInit>

08002092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002096:	3304      	adds	r3, #4

08002098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800209c:	d3f9      	bcc.n	8002092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209e:	4a0b      	ldr	r2, [pc, #44]	; (80020cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020a0:	4c0b      	ldr	r4, [pc, #44]	; (80020d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a4:	e001      	b.n	80020aa <LoopFillZerobss>

080020a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a8:	3204      	adds	r2, #4

080020aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ac:	d3fb      	bcc.n	80020a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ae:	f7ff fb6f 	bl	8001790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020b2:	f010 fdb1 	bl	8012c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020b6:	f7fe fe35 	bl	8000d24 <main>
  bx  lr    
 80020ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020bc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80020c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c4:	20000fbc 	.word	0x20000fbc
  ldr r2, =_sidata
 80020c8:	08018a54 	.word	0x08018a54
  ldr r2, =_sbss
 80020cc:	20000fc0 	.word	0x20000fc0
  ldr r4, =_ebss
 80020d0:	2000eb00 	.word	0x2000eb00

080020d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d4:	e7fe      	b.n	80020d4 <ADC_IRQHandler>

080020d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020da:	2003      	movs	r0, #3
 80020dc:	f000 f8d5 	bl	800228a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e0:	200f      	movs	r0, #15
 80020e2:	f7ff f9eb 	bl	80014bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e6:	f7ff f8f9 	bl	80012dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_IncTick+0x20>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_IncTick+0x24>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a04      	ldr	r2, [pc, #16]	; (8002114 <HAL_IncTick+0x24>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	2000000c 	.word	0x2000000c
 8002114:	2000559c 	.word	0x2000559c

08002118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return uwTick;
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <HAL_GetTick+0x14>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	2000559c 	.word	0x2000559c

08002130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <__NVIC_SetPriorityGrouping+0x40>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800214c:	4013      	ands	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 800215a:	4313      	orrs	r3, r2
 800215c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215e:	4a04      	ldr	r2, [pc, #16]	; (8002170 <__NVIC_SetPriorityGrouping+0x40>)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60d3      	str	r3, [r2, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00
 8002174:	05fa0000 	.word	0x05fa0000

08002178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <__NVIC_GetPriorityGrouping+0x18>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 0307 	and.w	r3, r3, #7
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	db0b      	blt.n	80021be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	f003 021f 	and.w	r2, r3, #31
 80021ac:	4907      	ldr	r1, [pc, #28]	; (80021cc <__NVIC_EnableIRQ+0x38>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2001      	movs	r0, #1
 80021b6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000e100 	.word	0xe000e100

080021d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	db0a      	blt.n	80021fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	490c      	ldr	r1, [pc, #48]	; (800221c <__NVIC_SetPriority+0x4c>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	0112      	lsls	r2, r2, #4
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	440b      	add	r3, r1
 80021f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f8:	e00a      	b.n	8002210 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4908      	ldr	r1, [pc, #32]	; (8002220 <__NVIC_SetPriority+0x50>)
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	3b04      	subs	r3, #4
 8002208:	0112      	lsls	r2, r2, #4
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	440b      	add	r3, r1
 800220e:	761a      	strb	r2, [r3, #24]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000e100 	.word	0xe000e100
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f1c3 0307 	rsb	r3, r3, #7
 800223e:	2b04      	cmp	r3, #4
 8002240:	bf28      	it	cs
 8002242:	2304      	movcs	r3, #4
 8002244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3304      	adds	r3, #4
 800224a:	2b06      	cmp	r3, #6
 800224c:	d902      	bls.n	8002254 <NVIC_EncodePriority+0x30>
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3b03      	subs	r3, #3
 8002252:	e000      	b.n	8002256 <NVIC_EncodePriority+0x32>
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43da      	mvns	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	401a      	ands	r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800226c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	43d9      	mvns	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	4313      	orrs	r3, r2
         );
}
 800227e:	4618      	mov	r0, r3
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ff4c 	bl	8002130 <__NVIC_SetPriorityGrouping>
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b2:	f7ff ff61 	bl	8002178 <__NVIC_GetPriorityGrouping>
 80022b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	6978      	ldr	r0, [r7, #20]
 80022be:	f7ff ffb1 	bl	8002224 <NVIC_EncodePriority>
 80022c2:	4602      	mov	r2, r0
 80022c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff ff80 	bl	80021d0 <__NVIC_SetPriority>
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff54 	bl	8002194 <__NVIC_EnableIRQ>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002302:	f7ff ff09 	bl	8002118 <HAL_GetTick>
 8002306:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d008      	beq.n	8002326 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2280      	movs	r2, #128	; 0x80
 8002318:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e052      	b.n	80023cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0216 	bic.w	r2, r2, #22
 8002334:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002344:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d103      	bne.n	8002356 <HAL_DMA_Abort+0x62>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0208 	bic.w	r2, r2, #8
 8002364:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0201 	bic.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002376:	e013      	b.n	80023a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002378:	f7ff fece 	bl	8002118 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b05      	cmp	r3, #5
 8002384:	d90c      	bls.n	80023a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2220      	movs	r2, #32
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2203      	movs	r2, #3
 8002390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e015      	b.n	80023cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1e4      	bne.n	8002378 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b2:	223f      	movs	r2, #63	; 0x3f
 80023b4:	409a      	lsls	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d004      	beq.n	80023f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2280      	movs	r2, #128	; 0x80
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00c      	b.n	800240c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2205      	movs	r2, #5
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0201 	bic.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e175      	b.n	8002724 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 8164 	bne.w	800271e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d005      	beq.n	800246e <HAL_GPIO_Init+0x56>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d017      	beq.n	800250c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d123      	bne.n	8002560 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0203 	and.w	r2, r3, #3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80be 	beq.w	800271e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	4b66      	ldr	r3, [pc, #408]	; (800273c <HAL_GPIO_Init+0x324>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a65      	ldr	r2, [pc, #404]	; (800273c <HAL_GPIO_Init+0x324>)
 80025a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b63      	ldr	r3, [pc, #396]	; (800273c <HAL_GPIO_Init+0x324>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025ba:	4a61      	ldr	r2, [pc, #388]	; (8002740 <HAL_GPIO_Init+0x328>)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a58      	ldr	r2, [pc, #352]	; (8002744 <HAL_GPIO_Init+0x32c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d037      	beq.n	8002656 <HAL_GPIO_Init+0x23e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a57      	ldr	r2, [pc, #348]	; (8002748 <HAL_GPIO_Init+0x330>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d031      	beq.n	8002652 <HAL_GPIO_Init+0x23a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a56      	ldr	r2, [pc, #344]	; (800274c <HAL_GPIO_Init+0x334>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d02b      	beq.n	800264e <HAL_GPIO_Init+0x236>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a55      	ldr	r2, [pc, #340]	; (8002750 <HAL_GPIO_Init+0x338>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d025      	beq.n	800264a <HAL_GPIO_Init+0x232>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a54      	ldr	r2, [pc, #336]	; (8002754 <HAL_GPIO_Init+0x33c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d01f      	beq.n	8002646 <HAL_GPIO_Init+0x22e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a53      	ldr	r2, [pc, #332]	; (8002758 <HAL_GPIO_Init+0x340>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d019      	beq.n	8002642 <HAL_GPIO_Init+0x22a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a52      	ldr	r2, [pc, #328]	; (800275c <HAL_GPIO_Init+0x344>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <HAL_GPIO_Init+0x226>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a51      	ldr	r2, [pc, #324]	; (8002760 <HAL_GPIO_Init+0x348>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00d      	beq.n	800263a <HAL_GPIO_Init+0x222>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a50      	ldr	r2, [pc, #320]	; (8002764 <HAL_GPIO_Init+0x34c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <HAL_GPIO_Init+0x21e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4f      	ldr	r2, [pc, #316]	; (8002768 <HAL_GPIO_Init+0x350>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d101      	bne.n	8002632 <HAL_GPIO_Init+0x21a>
 800262e:	2309      	movs	r3, #9
 8002630:	e012      	b.n	8002658 <HAL_GPIO_Init+0x240>
 8002632:	230a      	movs	r3, #10
 8002634:	e010      	b.n	8002658 <HAL_GPIO_Init+0x240>
 8002636:	2308      	movs	r3, #8
 8002638:	e00e      	b.n	8002658 <HAL_GPIO_Init+0x240>
 800263a:	2307      	movs	r3, #7
 800263c:	e00c      	b.n	8002658 <HAL_GPIO_Init+0x240>
 800263e:	2306      	movs	r3, #6
 8002640:	e00a      	b.n	8002658 <HAL_GPIO_Init+0x240>
 8002642:	2305      	movs	r3, #5
 8002644:	e008      	b.n	8002658 <HAL_GPIO_Init+0x240>
 8002646:	2304      	movs	r3, #4
 8002648:	e006      	b.n	8002658 <HAL_GPIO_Init+0x240>
 800264a:	2303      	movs	r3, #3
 800264c:	e004      	b.n	8002658 <HAL_GPIO_Init+0x240>
 800264e:	2302      	movs	r3, #2
 8002650:	e002      	b.n	8002658 <HAL_GPIO_Init+0x240>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_GPIO_Init+0x240>
 8002656:	2300      	movs	r3, #0
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	f002 0203 	and.w	r2, r2, #3
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	4093      	lsls	r3, r2
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002668:	4935      	ldr	r1, [pc, #212]	; (8002740 <HAL_GPIO_Init+0x328>)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3302      	adds	r3, #2
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002676:	4b3d      	ldr	r3, [pc, #244]	; (800276c <HAL_GPIO_Init+0x354>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800269a:	4a34      	ldr	r2, [pc, #208]	; (800276c <HAL_GPIO_Init+0x354>)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a0:	4b32      	ldr	r3, [pc, #200]	; (800276c <HAL_GPIO_Init+0x354>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c4:	4a29      	ldr	r2, [pc, #164]	; (800276c <HAL_GPIO_Init+0x354>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ca:	4b28      	ldr	r3, [pc, #160]	; (800276c <HAL_GPIO_Init+0x354>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ee:	4a1f      	ldr	r2, [pc, #124]	; (800276c <HAL_GPIO_Init+0x354>)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <HAL_GPIO_Init+0x354>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002718:	4a14      	ldr	r2, [pc, #80]	; (800276c <HAL_GPIO_Init+0x354>)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3301      	adds	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2b0f      	cmp	r3, #15
 8002728:	f67f ae86 	bls.w	8002438 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	40013800 	.word	0x40013800
 8002744:	40020000 	.word	0x40020000
 8002748:	40020400 	.word	0x40020400
 800274c:	40020800 	.word	0x40020800
 8002750:	40020c00 	.word	0x40020c00
 8002754:	40021000 	.word	0x40021000
 8002758:	40021400 	.word	0x40021400
 800275c:	40021800 	.word	0x40021800
 8002760:	40021c00 	.word	0x40021c00
 8002764:	40022000 	.word	0x40022000
 8002768:	40022400 	.word	0x40022400
 800276c:	40013c00 	.word	0x40013c00

08002770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
 800277c:	4613      	mov	r3, r2
 800277e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002780:	787b      	ldrb	r3, [r7, #1]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800278c:	e003      	b.n	8002796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	041a      	lsls	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	619a      	str	r2, [r3, #24]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027b4:	887a      	ldrh	r2, [r7, #2]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4013      	ands	r3, r2
 80027ba:	041a      	lsls	r2, r3, #16
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	43d9      	mvns	r1, r3
 80027c0:	887b      	ldrh	r3, [r7, #2]
 80027c2:	400b      	ands	r3, r1
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	619a      	str	r2, [r3, #24]
}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e07f      	b.n	80028ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe fd94 	bl	800132c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2224      	movs	r2, #36	; 0x24
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002828:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002838:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d107      	bne.n	8002852 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	e006      	b.n	8002860 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800285e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d104      	bne.n	8002872 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002870:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HAL_I2C_Init+0x11c>)
 800287e:	430b      	orrs	r3, r1
 8002880:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002890:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69d9      	ldr	r1, [r3, #28]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1a      	ldr	r2, [r3, #32]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	02008000 	.word	0x02008000

080028f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	461a      	mov	r2, r3
 8002904:	460b      	mov	r3, r1
 8002906:	817b      	strh	r3, [r7, #10]
 8002908:	4613      	mov	r3, r2
 800290a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b20      	cmp	r3, #32
 8002916:	f040 80da 	bne.w	8002ace <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_I2C_Master_Transmit+0x30>
 8002924:	2302      	movs	r3, #2
 8002926:	e0d3      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x1d8>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002930:	f7ff fbf2 	bl	8002118 <HAL_GetTick>
 8002934:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2319      	movs	r3, #25
 800293c:	2201      	movs	r2, #1
 800293e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f9e6 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e0be      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2221      	movs	r2, #33	; 0x21
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2210      	movs	r2, #16
 800295e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	893a      	ldrh	r2, [r7, #8]
 8002972:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	2bff      	cmp	r3, #255	; 0xff
 8002982:	d90e      	bls.n	80029a2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	22ff      	movs	r2, #255	; 0xff
 8002988:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298e:	b2da      	uxtb	r2, r3
 8002990:	8979      	ldrh	r1, [r7, #10]
 8002992:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fbd0 	bl	8003140 <I2C_TransferConfig>
 80029a0:	e06c      	b.n	8002a7c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	8979      	ldrh	r1, [r7, #10]
 80029b4:	4b48      	ldr	r3, [pc, #288]	; (8002ad8 <HAL_I2C_Master_Transmit+0x1e0>)
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fbbf 	bl	8003140 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80029c2:	e05b      	b.n	8002a7c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	6a39      	ldr	r1, [r7, #32]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f9e3 	bl	8002d94 <I2C_WaitOnTXISFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e07b      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d034      	beq.n	8002a7c <HAL_I2C_Master_Transmit+0x184>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d130      	bne.n	8002a7c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2180      	movs	r1, #128	; 0x80
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f975 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e04d      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2bff      	cmp	r3, #255	; 0xff
 8002a3c:	d90e      	bls.n	8002a5c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	22ff      	movs	r2, #255	; 0xff
 8002a42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	8979      	ldrh	r1, [r7, #10]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 fb73 	bl	8003140 <I2C_TransferConfig>
 8002a5a:	e00f      	b.n	8002a7c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	8979      	ldrh	r1, [r7, #10]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fb62 	bl	8003140 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d19e      	bne.n	80029c4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	6a39      	ldr	r1, [r7, #32]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f9c2 	bl	8002e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e01a      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <HAL_I2C_Master_Transmit+0x1e4>)
 8002aae:	400b      	ands	r3, r1
 8002ab0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
  }
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	80002000 	.word	0x80002000
 8002adc:	fe00e800 	.word	0xfe00e800

08002ae0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	461a      	mov	r2, r3
 8002aec:	460b      	mov	r3, r1
 8002aee:	817b      	strh	r3, [r7, #10]
 8002af0:	4613      	mov	r3, r2
 8002af2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	f040 80db 	bne.w	8002cb8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_I2C_Master_Receive+0x30>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e0d4      	b.n	8002cba <HAL_I2C_Master_Receive+0x1da>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b18:	f7ff fafe 	bl	8002118 <HAL_GetTick>
 8002b1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	2319      	movs	r3, #25
 8002b24:	2201      	movs	r2, #1
 8002b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f8f2 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e0bf      	b.n	8002cba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2222      	movs	r2, #34	; 0x22
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2210      	movs	r2, #16
 8002b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	893a      	ldrh	r2, [r7, #8]
 8002b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	2bff      	cmp	r3, #255	; 0xff
 8002b6a:	d90e      	bls.n	8002b8a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	22ff      	movs	r2, #255	; 0xff
 8002b70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	8979      	ldrh	r1, [r7, #10]
 8002b7a:	4b52      	ldr	r3, [pc, #328]	; (8002cc4 <HAL_I2C_Master_Receive+0x1e4>)
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fadc 	bl	8003140 <I2C_TransferConfig>
 8002b88:	e06d      	b.n	8002c66 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	8979      	ldrh	r1, [r7, #10]
 8002b9c:	4b49      	ldr	r3, [pc, #292]	; (8002cc4 <HAL_I2C_Master_Receive+0x1e4>)
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 facb 	bl	8003140 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002baa:	e05c      	b.n	8002c66 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	6a39      	ldr	r1, [r7, #32]
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f96b 	bl	8002e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e07c      	b.n	8002cba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d034      	beq.n	8002c66 <HAL_I2C_Master_Receive+0x186>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d130      	bne.n	8002c66 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2180      	movs	r1, #128	; 0x80
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f880 	bl	8002d14 <I2C_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e04d      	b.n	8002cba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2bff      	cmp	r3, #255	; 0xff
 8002c26:	d90e      	bls.n	8002c46 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	22ff      	movs	r2, #255	; 0xff
 8002c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	8979      	ldrh	r1, [r7, #10]
 8002c36:	2300      	movs	r3, #0
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fa7e 	bl	8003140 <I2C_TransferConfig>
 8002c44:	e00f      	b.n	8002c66 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	8979      	ldrh	r1, [r7, #10]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 fa6d 	bl	8003140 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d19d      	bne.n	8002bac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	6a39      	ldr	r1, [r7, #32]
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f8cd 	bl	8002e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e01a      	b.n	8002cba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6859      	ldr	r1, [r3, #4]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <HAL_I2C_Master_Receive+0x1e8>)
 8002c98:	400b      	ands	r3, r1
 8002c9a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e000      	b.n	8002cba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	80002400 	.word	0x80002400
 8002cc8:	fe00e800 	.word	0xfe00e800

08002ccc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d103      	bne.n	8002cea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d007      	beq.n	8002d08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	619a      	str	r2, [r3, #24]
  }
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d24:	e022      	b.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d2c:	d01e      	beq.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2e:	f7ff f9f3 	bl	8002118 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d302      	bcc.n	8002d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d113      	bne.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e00f      	b.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4013      	ands	r3, r2
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d0cd      	beq.n	8002d26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002da0:	e02c      	b.n	8002dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f8ea 	bl	8002f80 <I2C_IsErrorOccurred>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e02a      	b.n	8002e0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dbc:	d01e      	beq.n	8002dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbe:	f7ff f9ab 	bl	8002118 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d302      	bcc.n	8002dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d113      	bne.n	8002dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	f043 0220 	orr.w	r2, r3, #32
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e007      	b.n	8002e0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d1cb      	bne.n	8002da2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e20:	e028      	b.n	8002e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f8aa 	bl	8002f80 <I2C_IsErrorOccurred>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e026      	b.n	8002e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7ff f96f 	bl	8002118 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d113      	bne.n	8002e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e007      	b.n	8002e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d1cf      	bne.n	8002e22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e98:	e064      	b.n	8002f64 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f86e 	bl	8002f80 <I2C_IsErrorOccurred>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e062      	b.n	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d138      	bne.n	8002f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d105      	bne.n	8002ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e04e      	b.n	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d107      	bne.n	8002ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2210      	movs	r2, #16
 8002eea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2204      	movs	r2, #4
 8002ef0:	645a      	str	r2, [r3, #68]	; 0x44
 8002ef2:	e002      	b.n	8002efa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2220      	movs	r2, #32
 8002f00:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002f0e:	400b      	ands	r3, r1
 8002f10:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e022      	b.n	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2e:	f7ff f8f3 	bl	8002118 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10f      	bne.n	8002f64 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e007      	b.n	8002f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d193      	bne.n	8002e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	fe00e800 	.word	0xfe00e800

08002f80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	; 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d068      	beq.n	800307e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fb4:	e049      	b.n	800304a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fbc:	d045      	beq.n	800304a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	f7ff f8ab 	bl	8002118 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d302      	bcc.n	8002fd4 <I2C_IsErrorOccurred+0x54>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d13a      	bne.n	800304a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fe6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff6:	d121      	bne.n	800303c <I2C_IsErrorOccurred+0xbc>
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ffe:	d01d      	beq.n	800303c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	2b20      	cmp	r3, #32
 8003004:	d01a      	beq.n	800303c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003014:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003016:	f7ff f87f 	bl	8002118 <HAL_GetTick>
 800301a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800301c:	e00e      	b.n	800303c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800301e:	f7ff f87b 	bl	8002118 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b19      	cmp	r3, #25
 800302a:	d907      	bls.n	800303c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	f043 0320 	orr.w	r3, r3, #32
 8003032:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800303a:	e006      	b.n	800304a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b20      	cmp	r3, #32
 8003048:	d1e9      	bne.n	800301e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b20      	cmp	r3, #32
 8003056:	d003      	beq.n	8003060 <I2C_IsErrorOccurred+0xe0>
 8003058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0aa      	beq.n	8002fb6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003064:	2b00      	cmp	r3, #0
 8003066:	d103      	bne.n	8003070 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2220      	movs	r2, #32
 800306e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	f043 0304 	orr.w	r3, r3, #4
 8003076:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00b      	beq.n	80030a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	f043 0308 	orr.w	r3, r3, #8
 80030b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00b      	beq.n	80030ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	f043 0302 	orr.w	r3, r3, #2
 80030da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80030ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01c      	beq.n	800312e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f7ff fde9 	bl	8002ccc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4b0d      	ldr	r3, [pc, #52]	; (800313c <I2C_IsErrorOccurred+0x1bc>)
 8003106:	400b      	ands	r3, r1
 8003108:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	431a      	orrs	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800312e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003132:	4618      	mov	r0, r3
 8003134:	3728      	adds	r7, #40	; 0x28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	fe00e800 	.word	0xfe00e800

08003140 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	817b      	strh	r3, [r7, #10]
 800314e:	4613      	mov	r3, r2
 8003150:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003152:	897b      	ldrh	r3, [r7, #10]
 8003154:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003158:	7a7b      	ldrb	r3, [r7, #9]
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003160:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	4313      	orrs	r3, r2
 800316a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800316e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	0d5b      	lsrs	r3, r3, #21
 800317a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <I2C_TransferConfig+0x60>)
 8003180:	430b      	orrs	r3, r1
 8003182:	43db      	mvns	r3, r3
 8003184:	ea02 0103 	and.w	r1, r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	03ff63ff 	.word	0x03ff63ff

080031a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d138      	bne.n	800322c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e032      	b.n	800322e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2224      	movs	r2, #36	; 0x24
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003228:	2300      	movs	r3, #0
 800322a:	e000      	b.n	800322e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b20      	cmp	r3, #32
 800324e:	d139      	bne.n	80032c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800325a:	2302      	movs	r3, #2
 800325c:	e033      	b.n	80032c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2224      	movs	r2, #36	; 0x24
 800326a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800328c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e000      	b.n	80032c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032c4:	2302      	movs	r3, #2
  }
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032dc:	2300      	movs	r3, #0
 80032de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e29b      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8087 	beq.w	8003406 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032f8:	4b96      	ldr	r3, [pc, #600]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b04      	cmp	r3, #4
 8003302:	d00c      	beq.n	800331e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003304:	4b93      	ldr	r3, [pc, #588]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 030c 	and.w	r3, r3, #12
 800330c:	2b08      	cmp	r3, #8
 800330e:	d112      	bne.n	8003336 <HAL_RCC_OscConfig+0x62>
 8003310:	4b90      	ldr	r3, [pc, #576]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800331c:	d10b      	bne.n	8003336 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331e:	4b8d      	ldr	r3, [pc, #564]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d06c      	beq.n	8003404 <HAL_RCC_OscConfig+0x130>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d168      	bne.n	8003404 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e275      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333e:	d106      	bne.n	800334e <HAL_RCC_OscConfig+0x7a>
 8003340:	4b84      	ldr	r3, [pc, #528]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a83      	ldr	r2, [pc, #524]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	e02e      	b.n	80033ac <HAL_RCC_OscConfig+0xd8>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0x9c>
 8003356:	4b7f      	ldr	r3, [pc, #508]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a7e      	ldr	r2, [pc, #504]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800335c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b7c      	ldr	r3, [pc, #496]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a7b      	ldr	r2, [pc, #492]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e01d      	b.n	80033ac <HAL_RCC_OscConfig+0xd8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0xc0>
 800337a:	4b76      	ldr	r3, [pc, #472]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a75      	ldr	r2, [pc, #468]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b73      	ldr	r3, [pc, #460]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a72      	ldr	r2, [pc, #456]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0xd8>
 8003394:	4b6f      	ldr	r3, [pc, #444]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a6e      	ldr	r2, [pc, #440]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800339a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b6c      	ldr	r3, [pc, #432]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a6b      	ldr	r2, [pc, #428]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80033a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fe feb0 	bl	8002118 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fe feac 	bl	8002118 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e229      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b61      	ldr	r3, [pc, #388]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0xe8>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fe fe9c 	bl	8002118 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe fe98 	bl	8002118 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e215      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	4b57      	ldr	r3, [pc, #348]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x110>
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d069      	beq.n	80034e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003412:	4b50      	ldr	r3, [pc, #320]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341e:	4b4d      	ldr	r3, [pc, #308]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b08      	cmp	r3, #8
 8003428:	d11c      	bne.n	8003464 <HAL_RCC_OscConfig+0x190>
 800342a:	4b4a      	ldr	r3, [pc, #296]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d116      	bne.n	8003464 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	4b47      	ldr	r3, [pc, #284]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_RCC_OscConfig+0x17a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e1e9      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344e:	4b41      	ldr	r3, [pc, #260]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	493d      	ldr	r1, [pc, #244]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	e040      	b.n	80034e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d023      	beq.n	80034b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800346c:	4b39      	ldr	r3, [pc, #228]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a38      	ldr	r2, [pc, #224]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003478:	f7fe fe4e 	bl	8002118 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003480:	f7fe fe4a 	bl	8002118 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e1c7      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003492:	4b30      	ldr	r3, [pc, #192]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349e:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4929      	ldr	r1, [pc, #164]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]
 80034b2:	e018      	b.n	80034e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034b4:	4b27      	ldr	r3, [pc, #156]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a26      	ldr	r2, [pc, #152]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe fe2a 	bl	8002118 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fe fe26 	bl	8002118 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e1a3      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d038      	beq.n	8003564 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d019      	beq.n	800352e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b16      	ldr	r3, [pc, #88]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 80034fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fe:	4a15      	ldr	r2, [pc, #84]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003506:	f7fe fe07 	bl	8002118 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350e:	f7fe fe03 	bl	8002118 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e180      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x23a>
 800352c:	e01a      	b.n	8003564 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003532:	4a08      	ldr	r2, [pc, #32]	; (8003554 <HAL_RCC_OscConfig+0x280>)
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353a:	f7fe fded 	bl	8002118 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	e00a      	b.n	8003558 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003542:	f7fe fde9 	bl	8002118 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d903      	bls.n	8003558 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e166      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
 8003554:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	4b92      	ldr	r3, [pc, #584]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ee      	bne.n	8003542 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80a4 	beq.w	80036ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b8c      	ldr	r3, [pc, #560]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10d      	bne.n	800359a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	4b89      	ldr	r3, [pc, #548]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4a88      	ldr	r2, [pc, #544]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
 800358a:	4b86      	ldr	r3, [pc, #536]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003596:	2301      	movs	r3, #1
 8003598:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359a:	4b83      	ldr	r3, [pc, #524]	; (80037a8 <HAL_RCC_OscConfig+0x4d4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d118      	bne.n	80035d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035a6:	4b80      	ldr	r3, [pc, #512]	; (80037a8 <HAL_RCC_OscConfig+0x4d4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a7f      	ldr	r2, [pc, #508]	; (80037a8 <HAL_RCC_OscConfig+0x4d4>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b2:	f7fe fdb1 	bl	8002118 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ba:	f7fe fdad 	bl	8002118 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b64      	cmp	r3, #100	; 0x64
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e12a      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035cc:	4b76      	ldr	r3, [pc, #472]	; (80037a8 <HAL_RCC_OscConfig+0x4d4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d106      	bne.n	80035ee <HAL_RCC_OscConfig+0x31a>
 80035e0:	4b70      	ldr	r3, [pc, #448]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	4a6f      	ldr	r2, [pc, #444]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80035e6:	f043 0301 	orr.w	r3, r3, #1
 80035ea:	6713      	str	r3, [r2, #112]	; 0x70
 80035ec:	e02d      	b.n	800364a <HAL_RCC_OscConfig+0x376>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10c      	bne.n	8003610 <HAL_RCC_OscConfig+0x33c>
 80035f6:	4b6b      	ldr	r3, [pc, #428]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	4a6a      	ldr	r2, [pc, #424]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	6713      	str	r3, [r2, #112]	; 0x70
 8003602:	4b68      	ldr	r3, [pc, #416]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	4a67      	ldr	r2, [pc, #412]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003608:	f023 0304 	bic.w	r3, r3, #4
 800360c:	6713      	str	r3, [r2, #112]	; 0x70
 800360e:	e01c      	b.n	800364a <HAL_RCC_OscConfig+0x376>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b05      	cmp	r3, #5
 8003616:	d10c      	bne.n	8003632 <HAL_RCC_OscConfig+0x35e>
 8003618:	4b62      	ldr	r3, [pc, #392]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a61      	ldr	r2, [pc, #388]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 800361e:	f043 0304 	orr.w	r3, r3, #4
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	4b5f      	ldr	r3, [pc, #380]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a5e      	ldr	r2, [pc, #376]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 800362a:	f043 0301 	orr.w	r3, r3, #1
 800362e:	6713      	str	r3, [r2, #112]	; 0x70
 8003630:	e00b      	b.n	800364a <HAL_RCC_OscConfig+0x376>
 8003632:	4b5c      	ldr	r3, [pc, #368]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	4a5b      	ldr	r2, [pc, #364]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	6713      	str	r3, [r2, #112]	; 0x70
 800363e:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	4a58      	ldr	r2, [pc, #352]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003644:	f023 0304 	bic.w	r3, r3, #4
 8003648:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d015      	beq.n	800367e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7fe fd61 	bl	8002118 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003658:	e00a      	b.n	8003670 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7fe fd5d 	bl	8002118 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	; 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e0d8      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003670:	4b4c      	ldr	r3, [pc, #304]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0ee      	beq.n	800365a <HAL_RCC_OscConfig+0x386>
 800367c:	e014      	b.n	80036a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7fe fd4b 	bl	8002118 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fe fd47 	bl	8002118 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0c2      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369c:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1ee      	bne.n	8003686 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d105      	bne.n	80036ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ae:	4b3d      	ldr	r3, [pc, #244]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	4a3c      	ldr	r2, [pc, #240]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80036b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80ae 	beq.w	8003820 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c4:	4b37      	ldr	r3, [pc, #220]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d06d      	beq.n	80037ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d14b      	bne.n	8003770 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d8:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a31      	ldr	r2, [pc, #196]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 80036de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe fd18 	bl	8002118 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fe fd14 	bl	8002118 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e091      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69da      	ldr	r2, [r3, #28]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	019b      	lsls	r3, r3, #6
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	3b01      	subs	r3, #1
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	071b      	lsls	r3, r3, #28
 8003736:	491b      	ldr	r1, [pc, #108]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003738:	4313      	orrs	r3, r2
 800373a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800373c:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003748:	f7fe fce6 	bl	8002118 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003750:	f7fe fce2 	bl	8002118 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e05f      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0x47c>
 800376e:	e057      	b.n	8003820 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800377a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fe fccc 	bl	8002118 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003784:	f7fe fcc8 	bl	8002118 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e045      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003796:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_RCC_OscConfig+0x4d0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x4b0>
 80037a2:	e03d      	b.n	8003820 <HAL_RCC_OscConfig+0x54c>
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037ac:	4b1f      	ldr	r3, [pc, #124]	; (800382c <HAL_RCC_OscConfig+0x558>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d030      	beq.n	800381c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d129      	bne.n	800381c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d122      	bne.n	800381c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037dc:	4013      	ands	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d119      	bne.n	800381c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	3b01      	subs	r3, #1
 80037f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d10f      	bne.n	800381c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d107      	bne.n	800381c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800

08003830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0d0      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003848:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 030f 	and.w	r3, r3, #15
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d910      	bls.n	8003878 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b67      	ldr	r3, [pc, #412]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 020f 	bic.w	r2, r3, #15
 800385e:	4965      	ldr	r1, [pc, #404]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b63      	ldr	r3, [pc, #396]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0b8      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003890:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4a58      	ldr	r2, [pc, #352]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003896:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800389a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a8:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a52      	ldr	r2, [pc, #328]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b4:	4b50      	ldr	r3, [pc, #320]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	494d      	ldr	r1, [pc, #308]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d040      	beq.n	8003954 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	4b47      	ldr	r3, [pc, #284]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d115      	bne.n	8003912 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e07f      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b41      	ldr	r3, [pc, #260]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e073      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e06b      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003912:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4936      	ldr	r1, [pc, #216]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	4313      	orrs	r3, r2
 8003922:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003924:	f7fe fbf8 	bl	8002118 <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	e00a      	b.n	8003942 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392c:	f7fe fbf4 	bl	8002118 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e053      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 020c 	and.w	r2, r3, #12
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	429a      	cmp	r2, r3
 8003952:	d1eb      	bne.n	800392c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003954:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d210      	bcs.n	8003984 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 020f 	bic.w	r2, r3, #15
 800396a:	4922      	ldr	r1, [pc, #136]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e032      	b.n	80039ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4916      	ldr	r1, [pc, #88]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ae:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	490e      	ldr	r1, [pc, #56]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039c2:	f000 f821 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80039c6:	4602      	mov	r2, r0
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_ClockConfig+0x1c8>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	490a      	ldr	r1, [pc, #40]	; (80039fc <HAL_RCC_ClockConfig+0x1cc>)
 80039d4:	5ccb      	ldrb	r3, [r1, r3]
 80039d6:	fa22 f303 	lsr.w	r3, r2, r3
 80039da:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <HAL_RCC_ClockConfig+0x1d0>)
 80039dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RCC_ClockConfig+0x1d4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd fd6a 	bl	80014bc <HAL_InitTick>

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40023c00 	.word	0x40023c00
 80039f8:	40023800 	.word	0x40023800
 80039fc:	080177d0 	.word	0x080177d0
 8003a00:	20000004 	.word	0x20000004
 8003a04:	20000008 	.word	0x20000008

08003a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a0c:	b094      	sub	sp, #80	; 0x50
 8003a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	647b      	str	r3, [r7, #68]	; 0x44
 8003a14:	2300      	movs	r3, #0
 8003a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a18:	2300      	movs	r3, #0
 8003a1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a20:	4b79      	ldr	r3, [pc, #484]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 030c 	and.w	r3, r3, #12
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	d00d      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0x40>
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	f200 80e1 	bhi.w	8003bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0x34>
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d003      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a3a:	e0db      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a3c:	4b73      	ldr	r3, [pc, #460]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a40:	e0db      	b.n	8003bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a42:	4b72      	ldr	r3, [pc, #456]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a46:	e0d8      	b.n	8003bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a48:	4b6f      	ldr	r3, [pc, #444]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a50:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a52:	4b6d      	ldr	r3, [pc, #436]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d063      	beq.n	8003b26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5e:	4b6a      	ldr	r3, [pc, #424]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	099b      	lsrs	r3, r3, #6
 8003a64:	2200      	movs	r2, #0
 8003a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a70:	633b      	str	r3, [r7, #48]	; 0x30
 8003a72:	2300      	movs	r3, #0
 8003a74:	637b      	str	r3, [r7, #52]	; 0x34
 8003a76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	462b      	mov	r3, r5
 8003a7e:	f04f 0000 	mov.w	r0, #0
 8003a82:	f04f 0100 	mov.w	r1, #0
 8003a86:	0159      	lsls	r1, r3, #5
 8003a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a8c:	0150      	lsls	r0, r2, #5
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4621      	mov	r1, r4
 8003a94:	1a51      	subs	r1, r2, r1
 8003a96:	6139      	str	r1, [r7, #16]
 8003a98:	4629      	mov	r1, r5
 8003a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aac:	4659      	mov	r1, fp
 8003aae:	018b      	lsls	r3, r1, #6
 8003ab0:	4651      	mov	r1, sl
 8003ab2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ab6:	4651      	mov	r1, sl
 8003ab8:	018a      	lsls	r2, r1, #6
 8003aba:	4651      	mov	r1, sl
 8003abc:	ebb2 0801 	subs.w	r8, r2, r1
 8003ac0:	4659      	mov	r1, fp
 8003ac2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ada:	4690      	mov	r8, r2
 8003adc:	4699      	mov	r9, r3
 8003ade:	4623      	mov	r3, r4
 8003ae0:	eb18 0303 	adds.w	r3, r8, r3
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	462b      	mov	r3, r5
 8003ae8:	eb49 0303 	adc.w	r3, r9, r3
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003afa:	4629      	mov	r1, r5
 8003afc:	028b      	lsls	r3, r1, #10
 8003afe:	4621      	mov	r1, r4
 8003b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b04:	4621      	mov	r1, r4
 8003b06:	028a      	lsls	r2, r1, #10
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b0e:	2200      	movs	r2, #0
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b18:	f7fc fe00 	bl	800071c <__aeabi_uldivmod>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4613      	mov	r3, r2
 8003b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b24:	e058      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b26:	4b38      	ldr	r3, [pc, #224]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	099b      	lsrs	r3, r3, #6
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	4611      	mov	r1, r2
 8003b32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b36:	623b      	str	r3, [r7, #32]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b40:	4642      	mov	r2, r8
 8003b42:	464b      	mov	r3, r9
 8003b44:	f04f 0000 	mov.w	r0, #0
 8003b48:	f04f 0100 	mov.w	r1, #0
 8003b4c:	0159      	lsls	r1, r3, #5
 8003b4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b52:	0150      	lsls	r0, r2, #5
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4641      	mov	r1, r8
 8003b5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b5e:	4649      	mov	r1, r9
 8003b60:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b78:	ebb2 040a 	subs.w	r4, r2, sl
 8003b7c:	eb63 050b 	sbc.w	r5, r3, fp
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	00eb      	lsls	r3, r5, #3
 8003b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b8e:	00e2      	lsls	r2, r4, #3
 8003b90:	4614      	mov	r4, r2
 8003b92:	461d      	mov	r5, r3
 8003b94:	4643      	mov	r3, r8
 8003b96:	18e3      	adds	r3, r4, r3
 8003b98:	603b      	str	r3, [r7, #0]
 8003b9a:	464b      	mov	r3, r9
 8003b9c:	eb45 0303 	adc.w	r3, r5, r3
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bae:	4629      	mov	r1, r5
 8003bb0:	028b      	lsls	r3, r1, #10
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bb8:	4621      	mov	r1, r4
 8003bba:	028a      	lsls	r2, r1, #10
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	61fa      	str	r2, [r7, #28]
 8003bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bcc:	f7fc fda6 	bl	800071c <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	3301      	adds	r3, #1
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003be8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bf2:	e002      	b.n	8003bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8003bf6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3750      	adds	r7, #80	; 0x50
 8003c00:	46bd      	mov	sp, r7
 8003c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	00f42400 	.word	0x00f42400

08003c10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000004 	.word	0x20000004

08003c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c2c:	f7ff fff0 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	0a9b      	lsrs	r3, r3, #10
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	4903      	ldr	r1, [pc, #12]	; (8003c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	080177e0 	.word	0x080177e0

08003c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c54:	f7ff ffdc 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	0b5b      	lsrs	r3, r3, #13
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4903      	ldr	r1, [pc, #12]	; (8003c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40023800 	.word	0x40023800
 8003c74:	080177e0 	.word	0x080177e0

08003c78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	220f      	movs	r2, #15
 8003c86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0203 	and.w	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c94:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	08db      	lsrs	r3, r3, #3
 8003cb2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cba:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <HAL_RCC_GetClockConfig+0x60>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 020f 	and.w	r2, r3, #15
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	601a      	str	r2, [r3, #0]
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40023c00 	.word	0x40023c00

08003cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d012      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d04:	4b69      	ldr	r3, [pc, #420]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a68      	ldr	r2, [pc, #416]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d0e:	6093      	str	r3, [r2, #8]
 8003d10:	4b66      	ldr	r3, [pc, #408]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d18:	4964      	ldr	r1, [pc, #400]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d26:	2301      	movs	r3, #1
 8003d28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d017      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d36:	4b5d      	ldr	r3, [pc, #372]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d44:	4959      	ldr	r1, [pc, #356]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d54:	d101      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d62:	2301      	movs	r3, #1
 8003d64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d017      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d72:	4b4e      	ldr	r3, [pc, #312]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	494a      	ldr	r1, [pc, #296]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d90:	d101      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d92:	2301      	movs	r3, #1
 8003d94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003dae:	2301      	movs	r3, #1
 8003db0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 808b 	beq.w	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dc0:	4b3a      	ldr	r3, [pc, #232]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	4a39      	ldr	r2, [pc, #228]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dca:	6413      	str	r3, [r2, #64]	; 0x40
 8003dcc:	4b37      	ldr	r3, [pc, #220]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dd8:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a34      	ldr	r2, [pc, #208]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de4:	f7fe f998 	bl	8002118 <HAL_GetTick>
 8003de8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dec:	f7fe f994 	bl	8002118 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e38f      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dfe:	4b2c      	ldr	r3, [pc, #176]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0f0      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e0a:	4b28      	ldr	r3, [pc, #160]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d035      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d02e      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e28:	4b20      	ldr	r3, [pc, #128]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e32:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	4a1d      	ldr	r2, [pc, #116]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e3e:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	4a1a      	ldr	r2, [pc, #104]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e4a:	4a18      	ldr	r2, [pc, #96]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e50:	4b16      	ldr	r3, [pc, #88]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d114      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fe f95c 	bl	8002118 <HAL_GetTick>
 8003e60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e62:	e00a      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e64:	f7fe f958 	bl	8002118 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e351      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0ee      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e92:	d111      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ea0:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ea2:	400b      	ands	r3, r1
 8003ea4:	4901      	ldr	r1, [pc, #4]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	608b      	str	r3, [r1, #8]
 8003eaa:	e00b      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40007000 	.word	0x40007000
 8003eb4:	0ffffcff 	.word	0x0ffffcff
 8003eb8:	4bac      	ldr	r3, [pc, #688]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4aab      	ldr	r2, [pc, #684]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ebe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ec2:	6093      	str	r3, [r2, #8]
 8003ec4:	4ba9      	ldr	r3, [pc, #676]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed0:	49a6      	ldr	r1, [pc, #664]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d010      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ee2:	4ba2      	ldr	r3, [pc, #648]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee8:	4aa0      	ldr	r2, [pc, #640]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ef2:	4b9e      	ldr	r3, [pc, #632]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	499b      	ldr	r1, [pc, #620]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f10:	4b96      	ldr	r3, [pc, #600]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f1e:	4993      	ldr	r1, [pc, #588]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f32:	4b8e      	ldr	r3, [pc, #568]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f40:	498a      	ldr	r1, [pc, #552]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f54:	4b85      	ldr	r3, [pc, #532]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f62:	4982      	ldr	r1, [pc, #520]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f76:	4b7d      	ldr	r3, [pc, #500]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	4979      	ldr	r1, [pc, #484]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f98:	4b74      	ldr	r3, [pc, #464]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9e:	f023 0203 	bic.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	4971      	ldr	r1, [pc, #452]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fba:	4b6c      	ldr	r3, [pc, #432]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc0:	f023 020c 	bic.w	r2, r3, #12
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc8:	4968      	ldr	r1, [pc, #416]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fdc:	4b63      	ldr	r3, [pc, #396]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	4960      	ldr	r1, [pc, #384]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ffe:	4b5b      	ldr	r3, [pc, #364]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400c:	4957      	ldr	r1, [pc, #348]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00a      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004020:	4b52      	ldr	r3, [pc, #328]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	494f      	ldr	r1, [pc, #316]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00a      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004042:	4b4a      	ldr	r3, [pc, #296]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004048:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004050:	4946      	ldr	r1, [pc, #280]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004064:	4b41      	ldr	r3, [pc, #260]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004072:	493e      	ldr	r1, [pc, #248]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004086:	4b39      	ldr	r3, [pc, #228]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004094:	4935      	ldr	r1, [pc, #212]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004096:	4313      	orrs	r3, r2
 8004098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00a      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040a8:	4b30      	ldr	r3, [pc, #192]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040b6:	492d      	ldr	r1, [pc, #180]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d011      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040ca:	4b28      	ldr	r3, [pc, #160]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d8:	4924      	ldr	r1, [pc, #144]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040e8:	d101      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040ea:	2301      	movs	r3, #1
 80040ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040fa:	2301      	movs	r3, #1
 80040fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800410a:	4b18      	ldr	r3, [pc, #96]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004110:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004118:	4914      	ldr	r1, [pc, #80]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00b      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800413c:	490b      	ldr	r1, [pc, #44]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00f      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004150:	4b06      	ldr	r3, [pc, #24]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004156:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004160:	4902      	ldr	r1, [pc, #8]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004168:	e002      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00b      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800417c:	4b8a      	ldr	r3, [pc, #552]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800417e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004182:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418c:	4986      	ldr	r1, [pc, #536]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00b      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80041a0:	4b81      	ldr	r3, [pc, #516]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041b0:	497d      	ldr	r1, [pc, #500]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d006      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 80d6 	beq.w	8004378 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041cc:	4b76      	ldr	r3, [pc, #472]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a75      	ldr	r2, [pc, #468]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d8:	f7fd ff9e 	bl	8002118 <HAL_GetTick>
 80041dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041e0:	f7fd ff9a 	bl	8002118 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	; 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e195      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041f2:	4b6d      	ldr	r3, [pc, #436]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d021      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420e:	2b00      	cmp	r3, #0
 8004210:	d11d      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004212:	4b65      	ldr	r3, [pc, #404]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004218:	0c1b      	lsrs	r3, r3, #16
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004220:	4b61      	ldr	r3, [pc, #388]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004226:	0e1b      	lsrs	r3, r3, #24
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	019a      	lsls	r2, r3, #6
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	041b      	lsls	r3, r3, #16
 8004238:	431a      	orrs	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	061b      	lsls	r3, r3, #24
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	071b      	lsls	r3, r3, #28
 8004246:	4958      	ldr	r1, [pc, #352]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d004      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004262:	d00a      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800426c:	2b00      	cmp	r3, #0
 800426e:	d02e      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004278:	d129      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800427a:	4b4b      	ldr	r3, [pc, #300]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004280:	0c1b      	lsrs	r3, r3, #16
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004288:	4b47      	ldr	r3, [pc, #284]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800428a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428e:	0f1b      	lsrs	r3, r3, #28
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	019a      	lsls	r2, r3, #6
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	041b      	lsls	r3, r3, #16
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	061b      	lsls	r3, r3, #24
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	071b      	lsls	r3, r3, #28
 80042ae:	493e      	ldr	r1, [pc, #248]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042b6:	4b3c      	ldr	r3, [pc, #240]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042bc:	f023 021f 	bic.w	r2, r3, #31
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	3b01      	subs	r3, #1
 80042c6:	4938      	ldr	r1, [pc, #224]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d01d      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042da:	4b33      	ldr	r3, [pc, #204]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e0:	0e1b      	lsrs	r3, r3, #24
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042e8:	4b2f      	ldr	r3, [pc, #188]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ee:	0f1b      	lsrs	r3, r3, #28
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	019a      	lsls	r2, r3, #6
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	431a      	orrs	r2, r3
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	061b      	lsls	r3, r3, #24
 8004308:	431a      	orrs	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	071b      	lsls	r3, r3, #28
 800430e:	4926      	ldr	r1, [pc, #152]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d011      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	019a      	lsls	r2, r3, #6
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	041b      	lsls	r3, r3, #16
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	061b      	lsls	r3, r3, #24
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	071b      	lsls	r3, r3, #28
 800433e:	491a      	ldr	r1, [pc, #104]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a17      	ldr	r2, [pc, #92]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004352:	f7fd fee1 	bl	8002118 <HAL_GetTick>
 8004356:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004358:	e008      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800435a:	f7fd fedd 	bl	8002118 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b64      	cmp	r3, #100	; 0x64
 8004366:	d901      	bls.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e0d8      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800436c:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b01      	cmp	r3, #1
 800437c:	f040 80ce 	bne.w	800451c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004380:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800438a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800438c:	f7fd fec4 	bl	8002118 <HAL_GetTick>
 8004390:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004392:	e00b      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004394:	f7fd fec0 	bl	8002118 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b64      	cmp	r3, #100	; 0x64
 80043a0:	d904      	bls.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e0bb      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043ac:	4b5e      	ldr	r3, [pc, #376]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b8:	d0ec      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d02e      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d12a      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043e2:	4b51      	ldr	r3, [pc, #324]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e8:	0c1b      	lsrs	r3, r3, #16
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043f0:	4b4d      	ldr	r3, [pc, #308]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f6:	0f1b      	lsrs	r3, r3, #28
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	019a      	lsls	r2, r3, #6
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	041b      	lsls	r3, r3, #16
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	061b      	lsls	r3, r3, #24
 8004410:	431a      	orrs	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	071b      	lsls	r3, r3, #28
 8004416:	4944      	ldr	r1, [pc, #272]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800441e:	4b42      	ldr	r3, [pc, #264]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004424:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	3b01      	subs	r3, #1
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	493d      	ldr	r1, [pc, #244]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d022      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800444c:	d11d      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800444e:	4b36      	ldr	r3, [pc, #216]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	0e1b      	lsrs	r3, r3, #24
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800445c:	4b32      	ldr	r3, [pc, #200]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004462:	0f1b      	lsrs	r3, r3, #28
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	019a      	lsls	r2, r3, #6
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	041b      	lsls	r3, r3, #16
 8004476:	431a      	orrs	r2, r3
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	061b      	lsls	r3, r3, #24
 800447c:	431a      	orrs	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	071b      	lsls	r3, r3, #28
 8004482:	4929      	ldr	r1, [pc, #164]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	d028      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004496:	4b24      	ldr	r3, [pc, #144]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449c:	0e1b      	lsrs	r3, r3, #24
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044a4:	4b20      	ldr	r3, [pc, #128]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044aa:	0c1b      	lsrs	r3, r3, #16
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	019a      	lsls	r2, r3, #6
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	041b      	lsls	r3, r3, #16
 80044bc:	431a      	orrs	r2, r3
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	061b      	lsls	r3, r3, #24
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	071b      	lsls	r3, r3, #28
 80044ca:	4917      	ldr	r1, [pc, #92]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044d2:	4b15      	ldr	r3, [pc, #84]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	4911      	ldr	r1, [pc, #68]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a0e      	ldr	r2, [pc, #56]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f4:	f7fd fe10 	bl	8002118 <HAL_GetTick>
 80044f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044fc:	f7fd fe0c 	bl	8002118 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e007      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800451a:	d1ef      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800

0800452c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e049      	b.n	80045d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f841 	bl	80045da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3304      	adds	r3, #4
 8004568:	4619      	mov	r1, r3
 800456a:	4610      	mov	r0, r2
 800456c:	f000 fa00 	bl	8004970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	d001      	beq.n	8004608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e054      	b.n	80046b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a26      	ldr	r2, [pc, #152]	; (80046c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d022      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004632:	d01d      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d018      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d013      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <HAL_TIM_Base_Start_IT+0xdc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00e      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1e      	ldr	r2, [pc, #120]	; (80046d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d009      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1c      	ldr	r2, [pc, #112]	; (80046d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0x80>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1b      	ldr	r2, [pc, #108]	; (80046d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d115      	bne.n	800469c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	4b19      	ldr	r3, [pc, #100]	; (80046dc <HAL_TIM_Base_Start_IT+0xec>)
 8004678:	4013      	ands	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b06      	cmp	r3, #6
 8004680:	d015      	beq.n	80046ae <HAL_TIM_Base_Start_IT+0xbe>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004688:	d011      	beq.n	80046ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469a:	e008      	b.n	80046ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e000      	b.n	80046b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	40010000 	.word	0x40010000
 80046c4:	40000400 	.word	0x40000400
 80046c8:	40000800 	.word	0x40000800
 80046cc:	40000c00 	.word	0x40000c00
 80046d0:	40010400 	.word	0x40010400
 80046d4:	40014000 	.word	0x40014000
 80046d8:	40001800 	.word	0x40001800
 80046dc:	00010007 	.word	0x00010007

080046e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d122      	bne.n	800473c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b02      	cmp	r3, #2
 8004702:	d11b      	bne.n	800473c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f06f 0202 	mvn.w	r2, #2
 800470c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f905 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
 8004728:	e005      	b.n	8004736 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f8f7 	bl	800491e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f908 	bl	8004946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b04      	cmp	r3, #4
 8004748:	d122      	bne.n	8004790 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b04      	cmp	r3, #4
 8004756:	d11b      	bne.n	8004790 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0204 	mvn.w	r2, #4
 8004760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2202      	movs	r2, #2
 8004766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f8db 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
 800477c:	e005      	b.n	800478a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f8cd 	bl	800491e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f8de 	bl	8004946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b08      	cmp	r3, #8
 800479c:	d122      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d11b      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0208 	mvn.w	r2, #8
 80047b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2204      	movs	r2, #4
 80047ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f8b1 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
 80047d0:	e005      	b.n	80047de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8a3 	bl	800491e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f8b4 	bl	8004946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	2b10      	cmp	r3, #16
 80047f0:	d122      	bne.n	8004838 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d11b      	bne.n	8004838 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0210 	mvn.w	r2, #16
 8004808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2208      	movs	r2, #8
 800480e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f887 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f879 	bl	800491e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f88a 	bl	8004946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b01      	cmp	r3, #1
 8004844:	d10e      	bne.n	8004864 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b01      	cmp	r3, #1
 8004852:	d107      	bne.n	8004864 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0201 	mvn.w	r2, #1
 800485c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fc fd24 	bl	80012ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486e:	2b80      	cmp	r3, #128	; 0x80
 8004870:	d10e      	bne.n	8004890 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487c:	2b80      	cmp	r3, #128	; 0x80
 800487e:	d107      	bne.n	8004890 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f91a 	bl	8004ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489e:	d10e      	bne.n	80048be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b80      	cmp	r3, #128	; 0x80
 80048ac:	d107      	bne.n	80048be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f90d 	bl	8004ad8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d10e      	bne.n	80048ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d107      	bne.n	80048ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f838 	bl	800495a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d10e      	bne.n	8004916 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b20      	cmp	r3, #32
 8004904:	d107      	bne.n	8004916 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f06f 0220 	mvn.w	r2, #32
 800490e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f8cd 	bl	8004ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a40      	ldr	r2, [pc, #256]	; (8004a84 <TIM_Base_SetConfig+0x114>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d013      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498e:	d00f      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a3d      	ldr	r2, [pc, #244]	; (8004a88 <TIM_Base_SetConfig+0x118>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00b      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a3c      	ldr	r2, [pc, #240]	; (8004a8c <TIM_Base_SetConfig+0x11c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d007      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a3b      	ldr	r2, [pc, #236]	; (8004a90 <TIM_Base_SetConfig+0x120>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d003      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3a      	ldr	r2, [pc, #232]	; (8004a94 <TIM_Base_SetConfig+0x124>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d108      	bne.n	80049c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a2f      	ldr	r2, [pc, #188]	; (8004a84 <TIM_Base_SetConfig+0x114>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d02b      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d0:	d027      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a2c      	ldr	r2, [pc, #176]	; (8004a88 <TIM_Base_SetConfig+0x118>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d023      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2b      	ldr	r2, [pc, #172]	; (8004a8c <TIM_Base_SetConfig+0x11c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d01f      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2a      	ldr	r2, [pc, #168]	; (8004a90 <TIM_Base_SetConfig+0x120>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01b      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a29      	ldr	r2, [pc, #164]	; (8004a94 <TIM_Base_SetConfig+0x124>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d017      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a28      	ldr	r2, [pc, #160]	; (8004a98 <TIM_Base_SetConfig+0x128>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a27      	ldr	r2, [pc, #156]	; (8004a9c <TIM_Base_SetConfig+0x12c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00f      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a26      	ldr	r2, [pc, #152]	; (8004aa0 <TIM_Base_SetConfig+0x130>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00b      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a25      	ldr	r2, [pc, #148]	; (8004aa4 <TIM_Base_SetConfig+0x134>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a24      	ldr	r2, [pc, #144]	; (8004aa8 <TIM_Base_SetConfig+0x138>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d003      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a23      	ldr	r2, [pc, #140]	; (8004aac <TIM_Base_SetConfig+0x13c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d108      	bne.n	8004a34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <TIM_Base_SetConfig+0x114>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_Base_SetConfig+0xf8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a0c      	ldr	r2, [pc, #48]	; (8004a94 <TIM_Base_SetConfig+0x124>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d103      	bne.n	8004a70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	615a      	str	r2, [r3, #20]
}
 8004a76:	bf00      	nop
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40010000 	.word	0x40010000
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800
 8004a90:	40000c00 	.word	0x40000c00
 8004a94:	40010400 	.word	0x40010400
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40014400 	.word	0x40014400
 8004aa0:	40014800 	.word	0x40014800
 8004aa4:	40001800 	.word	0x40001800
 8004aa8:	40001c00 	.word	0x40001c00
 8004aac:	40002000 	.word	0x40002000

08004ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e040      	b.n	8004b80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc fc6c 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2224      	movs	r2, #36	; 0x24
 8004b18:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0201 	bic.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fd10 	bl	8005550 <UART_SetConfig>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e022      	b.n	8004b80 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 ff68 	bl	8005a18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 ffef 	bl	8005b5c <UART_CheckIdleState>
 8004b7e:	4603      	mov	r3, r0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b08b      	sub	sp, #44	; 0x2c
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	4613      	mov	r3, r2
 8004b94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d147      	bne.n	8004c2e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_UART_Transmit_IT+0x22>
 8004ba4:	88fb      	ldrh	r3, [r7, #6]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e040      	b.n	8004c30 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	88fa      	ldrh	r2, [r7, #6]
 8004bb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	88fa      	ldrh	r2, [r7, #6]
 8004bc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2221      	movs	r2, #33	; 0x21
 8004bd6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be0:	d107      	bne.n	8004bf2 <HAL_UART_Transmit_IT+0x6a>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d103      	bne.n	8004bf2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4a13      	ldr	r2, [pc, #76]	; (8004c3c <HAL_UART_Transmit_IT+0xb4>)
 8004bee:	66da      	str	r2, [r3, #108]	; 0x6c
 8004bf0:	e002      	b.n	8004bf8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4a12      	ldr	r2, [pc, #72]	; (8004c40 <HAL_UART_Transmit_IT+0xb8>)
 8004bf6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	613b      	str	r3, [r7, #16]
   return(result);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	623b      	str	r3, [r7, #32]
 8004c18:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	69f9      	ldr	r1, [r7, #28]
 8004c1c:	6a3a      	ldr	r2, [r7, #32]
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e6      	bne.n	8004bf8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e000      	b.n	8004c30 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004c2e:	2302      	movs	r3, #2
  }
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	372c      	adds	r7, #44	; 0x2c
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	080061a3 	.word	0x080061a3
 8004c40:	080060ed 	.word	0x080060ed

08004c44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	; 0x28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d132      	bne.n	8004cc2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_UART_Receive_IT+0x24>
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e02b      	b.n	8004cc4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d018      	beq.n	8004cb2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	e853 3f00 	ldrex	r3, [r3]
 8004c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	623b      	str	r3, [r7, #32]
 8004ca0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	69f9      	ldr	r1, [r7, #28]
 8004ca4:	6a3a      	ldr	r2, [r7, #32]
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e6      	bne.n	8004c80 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f001 f863 	bl	8005d84 <UART_Start_Receive_IT>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	e000      	b.n	8004cc4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
  }
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3728      	adds	r7, #40	; 0x28
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b0a2      	sub	sp, #136	; 0x88
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cea:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8004cee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004cfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cfe:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e4      	bne.n	8004cda <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d30:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e5      	bne.n	8004d10 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d118      	bne.n	8004d7e <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5c:	f023 0310 	bic.w	r3, r3, #16
 8004d60:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d72:	e841 2300 	strex	r3, r2, [r1]
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1e6      	bne.n	8004d4c <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00f      	beq.n	8004da6 <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d90:	2b80      	cmp	r3, #128	; 0x80
 8004d92:	d104      	bne.n	8004d9e <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d98:	4a5d      	ldr	r2, [pc, #372]	; (8004f10 <HAL_UART_Abort_IT+0x244>)
 8004d9a:	651a      	str	r2, [r3, #80]	; 0x50
 8004d9c:	e003      	b.n	8004da6 <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	2200      	movs	r2, #0
 8004da4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00f      	beq.n	8004dce <HAL_UART_Abort_IT+0x102>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	d104      	bne.n	8004dc6 <HAL_UART_Abort_IT+0xfa>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dc0:	4a54      	ldr	r2, [pc, #336]	; (8004f14 <HAL_UART_Abort_IT+0x248>)
 8004dc2:	651a      	str	r2, [r3, #80]	; 0x50
 8004dc4:	e003      	b.n	8004dce <HAL_UART_Abort_IT+0x102>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dca:	2200      	movs	r2, #0
 8004dcc:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd8:	2b80      	cmp	r3, #128	; 0x80
 8004dda:	d12d      	bne.n	8004e38 <HAL_UART_Abort_IT+0x16c>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3308      	adds	r3, #8
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	623b      	str	r3, [r7, #32]
   return(result);
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004df2:	677b      	str	r3, [r7, #116]	; 0x74
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3308      	adds	r3, #8
 8004dfa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004dfc:	633a      	str	r2, [r7, #48]	; 0x30
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e5      	bne.n	8004ddc <HAL_UART_Abort_IT+0x110>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00f      	beq.n	8004e38 <HAL_UART_Abort_IT+0x16c>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fd fad9 	bl	80023d4 <HAL_DMA_Abort_IT>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d004      	beq.n	8004e32 <HAL_UART_Abort_IT+0x166>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	651a      	str	r2, [r3, #80]	; 0x50
 8004e30:	e002      	b.n	8004e38 <HAL_UART_Abort_IT+0x16c>
      }
      else
      {
        abortcplt = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e42:	2b40      	cmp	r3, #64	; 0x40
 8004e44:	d130      	bne.n	8004ea8 <HAL_UART_Abort_IT+0x1dc>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e5c:	673b      	str	r3, [r7, #112]	; 0x70
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3308      	adds	r3, #8
 8004e64:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004e66:	61fa      	str	r2, [r7, #28]
 8004e68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	69b9      	ldr	r1, [r7, #24]
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	617b      	str	r3, [r7, #20]
   return(result);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e5      	bne.n	8004e46 <HAL_UART_Abort_IT+0x17a>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d012      	beq.n	8004ea8 <HAL_UART_Abort_IT+0x1dc>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fd faa4 	bl	80023d4 <HAL_DMA_Abort_IT>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d007      	beq.n	8004ea2 <HAL_UART_Abort_IT+0x1d6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e96:	2200      	movs	r2, #0
 8004e98:	651a      	str	r2, [r3, #80]	; 0x50
        abortcplt = 1U;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ea0:	e002      	b.n	8004ea8 <HAL_UART_Abort_IT+0x1dc>
      }
      else
      {
        abortcplt = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8004ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d12a      	bne.n	8004f06 <HAL_UART_Abort_IT+0x23a>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	669a      	str	r2, [r3, #104]	; 0x68
    huart->TxISR = NULL;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	220f      	movs	r2, #15
 8004eda:	621a      	str	r2, [r3, #32]


    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0208 	orr.w	r2, r2, #8
 8004eea:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fb05 	bl	8005510 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3788      	adds	r7, #136	; 0x88
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	08006005 	.word	0x08006005
 8004f14:	08006071 	.word	0x08006071

08004f18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b0ba      	sub	sp, #232	; 0xe8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f42:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f46:	4013      	ands	r3, r2
 8004f48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d115      	bne.n	8004f80 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00f      	beq.n	8004f80 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 82ac 	beq.w	80054ce <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	4798      	blx	r3
      }
      return;
 8004f7e:	e2a6      	b.n	80054ce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 8117 	beq.w	80051b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f9a:	4b85      	ldr	r3, [pc, #532]	; (80051b0 <HAL_UART_IRQHandler+0x298>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 810a 	beq.w	80051b8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d011      	beq.n	8004fd4 <HAL_UART_IRQHandler+0xbc>
 8004fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00b      	beq.n	8004fd4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fca:	f043 0201 	orr.w	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d011      	beq.n	8005004 <HAL_UART_IRQHandler+0xec>
 8004fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00b      	beq.n	8005004 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ffa:	f043 0204 	orr.w	r2, r3, #4
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d011      	beq.n	8005034 <HAL_UART_IRQHandler+0x11c>
 8005010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00b      	beq.n	8005034 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2204      	movs	r2, #4
 8005022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800502a:	f043 0202 	orr.w	r2, r3, #2
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d017      	beq.n	8005070 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800504c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005050:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00b      	beq.n	8005070 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2208      	movs	r2, #8
 800505e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005066:	f043 0208 	orr.w	r2, r3, #8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005078:	2b00      	cmp	r3, #0
 800507a:	d012      	beq.n	80050a2 <HAL_UART_IRQHandler+0x18a>
 800507c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005080:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00c      	beq.n	80050a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005098:	f043 0220 	orr.w	r2, r3, #32
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8212 	beq.w	80054d2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00d      	beq.n	80050d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d007      	beq.n	80050d6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ea:	2b40      	cmp	r3, #64	; 0x40
 80050ec:	d005      	beq.n	80050fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d04f      	beq.n	800519a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 ff08 	bl	8005f10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510a:	2b40      	cmp	r3, #64	; 0x40
 800510c:	d141      	bne.n	8005192 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3308      	adds	r3, #8
 8005114:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800511c:	e853 3f00 	ldrex	r3, [r3]
 8005120:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005124:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800512c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3308      	adds	r3, #8
 8005136:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800513a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800513e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005146:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1d9      	bne.n	800510e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800515e:	2b00      	cmp	r3, #0
 8005160:	d013      	beq.n	800518a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005166:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <HAL_UART_IRQHandler+0x29c>)
 8005168:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800516e:	4618      	mov	r0, r3
 8005170:	f7fd f930 	bl	80023d4 <HAL_DMA_Abort_IT>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d017      	beq.n	80051aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005184:	4610      	mov	r0, r2
 8005186:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005188:	e00f      	b.n	80051aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f9b6 	bl	80054fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005190:	e00b      	b.n	80051aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f9b2 	bl	80054fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005198:	e007      	b.n	80051aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f9ae 	bl	80054fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80051a8:	e193      	b.n	80054d2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051aa:	bf00      	nop
    return;
 80051ac:	e191      	b.n	80054d2 <HAL_UART_IRQHandler+0x5ba>
 80051ae:	bf00      	nop
 80051b0:	04000120 	.word	0x04000120
 80051b4:	08005fd9 	.word	0x08005fd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051bc:	2b01      	cmp	r3, #1
 80051be:	f040 814c 	bne.w	800545a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8145 	beq.w	800545a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 813e 	beq.w	800545a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2210      	movs	r2, #16
 80051e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b40      	cmp	r3, #64	; 0x40
 80051f2:	f040 80b6 	bne.w	8005362 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005202:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 8165 	beq.w	80054d6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005216:	429a      	cmp	r2, r3
 8005218:	f080 815d 	bcs.w	80054d6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005222:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005230:	f000 8086 	beq.w	8005340 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005248:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800524c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005250:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800525e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005262:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800526a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005276:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1da      	bne.n	8005234 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3308      	adds	r3, #8
 8005284:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800528e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3308      	adds	r3, #8
 800529e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e1      	bne.n	800527e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3308      	adds	r3, #8
 80052c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3308      	adds	r3, #8
 80052da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e3      	bne.n	80052ba <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800530e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005310:	f023 0310 	bic.w	r3, r3, #16
 8005314:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005322:	65bb      	str	r3, [r7, #88]	; 0x58
 8005324:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005328:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e4      	bne.n	8005300 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533a:	4618      	mov	r0, r3
 800533c:	f7fc ffda 	bl	80022f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005352:	b29b      	uxth	r3, r3
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	b29b      	uxth	r3, r3
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f8e2 	bl	8005524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005360:	e0b9      	b.n	80054d6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800536e:	b29b      	uxth	r3, r3
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 80ab 	beq.w	80054da <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005384:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 80a6 	beq.w	80054da <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800539c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800539e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053b0:	647b      	str	r3, [r7, #68]	; 0x44
 80053b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e4      	bne.n	800538e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3308      	adds	r3, #8
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	623b      	str	r3, [r7, #32]
   return(result);
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	f023 0301 	bic.w	r3, r3, #1
 80053da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3308      	adds	r3, #8
 80053e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053e8:	633a      	str	r2, [r7, #48]	; 0x30
 80053ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f0:	e841 2300 	strex	r3, r2, [r1]
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e3      	bne.n	80053c4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	60fb      	str	r3, [r7, #12]
   return(result);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f023 0310 	bic.w	r3, r3, #16
 8005424:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005432:	61fb      	str	r3, [r7, #28]
 8005434:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	69b9      	ldr	r1, [r7, #24]
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	617b      	str	r3, [r7, #20]
   return(result);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e4      	bne.n	8005410 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2202      	movs	r2, #2
 800544a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800544c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f866 	bl	8005524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005458:	e03f      	b.n	80054da <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800545a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00e      	beq.n	8005484 <HAL_UART_IRQHandler+0x56c>
 8005466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800546a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d008      	beq.n	8005484 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800547a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f85d 	bl	800553c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005482:	e02d      	b.n	80054e0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00e      	beq.n	80054ae <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d01c      	beq.n	80054de <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	4798      	blx	r3
    }
    return;
 80054ac:	e017      	b.n	80054de <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d012      	beq.n	80054e0 <HAL_UART_IRQHandler+0x5c8>
 80054ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00c      	beq.n	80054e0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fecb 	bl	8006262 <UART_EndTransmit_IT>
    return;
 80054cc:	e008      	b.n	80054e0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80054ce:	bf00      	nop
 80054d0:	e006      	b.n	80054e0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80054d2:	bf00      	nop
 80054d4:	e004      	b.n	80054e0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80054d6:	bf00      	nop
 80054d8:	e002      	b.n	80054e0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80054da:	bf00      	nop
 80054dc:	e000      	b.n	80054e0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80054de:	bf00      	nop
  }

}
 80054e0:	37e8      	adds	r7, #232	; 0xe8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop

080054e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b088      	sub	sp, #32
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005558:	2300      	movs	r3, #0
 800555a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	431a      	orrs	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	4ba6      	ldr	r3, [pc, #664]	; (8005814 <UART_SetConfig+0x2c4>)
 800557c:	4013      	ands	r3, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6812      	ldr	r2, [r2, #0]
 8005582:	6979      	ldr	r1, [r7, #20]
 8005584:	430b      	orrs	r3, r1
 8005586:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a1b      	ldr	r3, [r3, #32]
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	430a      	orrs	r2, r1
 80055c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a94      	ldr	r2, [pc, #592]	; (8005818 <UART_SetConfig+0x2c8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d120      	bne.n	800560e <UART_SetConfig+0xbe>
 80055cc:	4b93      	ldr	r3, [pc, #588]	; (800581c <UART_SetConfig+0x2cc>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d816      	bhi.n	8005608 <UART_SetConfig+0xb8>
 80055da:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <UART_SetConfig+0x90>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	080055f1 	.word	0x080055f1
 80055e4:	080055fd 	.word	0x080055fd
 80055e8:	080055f7 	.word	0x080055f7
 80055ec:	08005603 	.word	0x08005603
 80055f0:	2301      	movs	r3, #1
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e150      	b.n	8005898 <UART_SetConfig+0x348>
 80055f6:	2302      	movs	r3, #2
 80055f8:	77fb      	strb	r3, [r7, #31]
 80055fa:	e14d      	b.n	8005898 <UART_SetConfig+0x348>
 80055fc:	2304      	movs	r3, #4
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e14a      	b.n	8005898 <UART_SetConfig+0x348>
 8005602:	2308      	movs	r3, #8
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e147      	b.n	8005898 <UART_SetConfig+0x348>
 8005608:	2310      	movs	r3, #16
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e144      	b.n	8005898 <UART_SetConfig+0x348>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a83      	ldr	r2, [pc, #524]	; (8005820 <UART_SetConfig+0x2d0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d132      	bne.n	800567e <UART_SetConfig+0x12e>
 8005618:	4b80      	ldr	r3, [pc, #512]	; (800581c <UART_SetConfig+0x2cc>)
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561e:	f003 030c 	and.w	r3, r3, #12
 8005622:	2b0c      	cmp	r3, #12
 8005624:	d828      	bhi.n	8005678 <UART_SetConfig+0x128>
 8005626:	a201      	add	r2, pc, #4	; (adr r2, 800562c <UART_SetConfig+0xdc>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	08005661 	.word	0x08005661
 8005630:	08005679 	.word	0x08005679
 8005634:	08005679 	.word	0x08005679
 8005638:	08005679 	.word	0x08005679
 800563c:	0800566d 	.word	0x0800566d
 8005640:	08005679 	.word	0x08005679
 8005644:	08005679 	.word	0x08005679
 8005648:	08005679 	.word	0x08005679
 800564c:	08005667 	.word	0x08005667
 8005650:	08005679 	.word	0x08005679
 8005654:	08005679 	.word	0x08005679
 8005658:	08005679 	.word	0x08005679
 800565c:	08005673 	.word	0x08005673
 8005660:	2300      	movs	r3, #0
 8005662:	77fb      	strb	r3, [r7, #31]
 8005664:	e118      	b.n	8005898 <UART_SetConfig+0x348>
 8005666:	2302      	movs	r3, #2
 8005668:	77fb      	strb	r3, [r7, #31]
 800566a:	e115      	b.n	8005898 <UART_SetConfig+0x348>
 800566c:	2304      	movs	r3, #4
 800566e:	77fb      	strb	r3, [r7, #31]
 8005670:	e112      	b.n	8005898 <UART_SetConfig+0x348>
 8005672:	2308      	movs	r3, #8
 8005674:	77fb      	strb	r3, [r7, #31]
 8005676:	e10f      	b.n	8005898 <UART_SetConfig+0x348>
 8005678:	2310      	movs	r3, #16
 800567a:	77fb      	strb	r3, [r7, #31]
 800567c:	e10c      	b.n	8005898 <UART_SetConfig+0x348>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a68      	ldr	r2, [pc, #416]	; (8005824 <UART_SetConfig+0x2d4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d120      	bne.n	80056ca <UART_SetConfig+0x17a>
 8005688:	4b64      	ldr	r3, [pc, #400]	; (800581c <UART_SetConfig+0x2cc>)
 800568a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005692:	2b30      	cmp	r3, #48	; 0x30
 8005694:	d013      	beq.n	80056be <UART_SetConfig+0x16e>
 8005696:	2b30      	cmp	r3, #48	; 0x30
 8005698:	d814      	bhi.n	80056c4 <UART_SetConfig+0x174>
 800569a:	2b20      	cmp	r3, #32
 800569c:	d009      	beq.n	80056b2 <UART_SetConfig+0x162>
 800569e:	2b20      	cmp	r3, #32
 80056a0:	d810      	bhi.n	80056c4 <UART_SetConfig+0x174>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <UART_SetConfig+0x15c>
 80056a6:	2b10      	cmp	r3, #16
 80056a8:	d006      	beq.n	80056b8 <UART_SetConfig+0x168>
 80056aa:	e00b      	b.n	80056c4 <UART_SetConfig+0x174>
 80056ac:	2300      	movs	r3, #0
 80056ae:	77fb      	strb	r3, [r7, #31]
 80056b0:	e0f2      	b.n	8005898 <UART_SetConfig+0x348>
 80056b2:	2302      	movs	r3, #2
 80056b4:	77fb      	strb	r3, [r7, #31]
 80056b6:	e0ef      	b.n	8005898 <UART_SetConfig+0x348>
 80056b8:	2304      	movs	r3, #4
 80056ba:	77fb      	strb	r3, [r7, #31]
 80056bc:	e0ec      	b.n	8005898 <UART_SetConfig+0x348>
 80056be:	2308      	movs	r3, #8
 80056c0:	77fb      	strb	r3, [r7, #31]
 80056c2:	e0e9      	b.n	8005898 <UART_SetConfig+0x348>
 80056c4:	2310      	movs	r3, #16
 80056c6:	77fb      	strb	r3, [r7, #31]
 80056c8:	e0e6      	b.n	8005898 <UART_SetConfig+0x348>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a56      	ldr	r2, [pc, #344]	; (8005828 <UART_SetConfig+0x2d8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d120      	bne.n	8005716 <UART_SetConfig+0x1c6>
 80056d4:	4b51      	ldr	r3, [pc, #324]	; (800581c <UART_SetConfig+0x2cc>)
 80056d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056de:	2bc0      	cmp	r3, #192	; 0xc0
 80056e0:	d013      	beq.n	800570a <UART_SetConfig+0x1ba>
 80056e2:	2bc0      	cmp	r3, #192	; 0xc0
 80056e4:	d814      	bhi.n	8005710 <UART_SetConfig+0x1c0>
 80056e6:	2b80      	cmp	r3, #128	; 0x80
 80056e8:	d009      	beq.n	80056fe <UART_SetConfig+0x1ae>
 80056ea:	2b80      	cmp	r3, #128	; 0x80
 80056ec:	d810      	bhi.n	8005710 <UART_SetConfig+0x1c0>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <UART_SetConfig+0x1a8>
 80056f2:	2b40      	cmp	r3, #64	; 0x40
 80056f4:	d006      	beq.n	8005704 <UART_SetConfig+0x1b4>
 80056f6:	e00b      	b.n	8005710 <UART_SetConfig+0x1c0>
 80056f8:	2300      	movs	r3, #0
 80056fa:	77fb      	strb	r3, [r7, #31]
 80056fc:	e0cc      	b.n	8005898 <UART_SetConfig+0x348>
 80056fe:	2302      	movs	r3, #2
 8005700:	77fb      	strb	r3, [r7, #31]
 8005702:	e0c9      	b.n	8005898 <UART_SetConfig+0x348>
 8005704:	2304      	movs	r3, #4
 8005706:	77fb      	strb	r3, [r7, #31]
 8005708:	e0c6      	b.n	8005898 <UART_SetConfig+0x348>
 800570a:	2308      	movs	r3, #8
 800570c:	77fb      	strb	r3, [r7, #31]
 800570e:	e0c3      	b.n	8005898 <UART_SetConfig+0x348>
 8005710:	2310      	movs	r3, #16
 8005712:	77fb      	strb	r3, [r7, #31]
 8005714:	e0c0      	b.n	8005898 <UART_SetConfig+0x348>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a44      	ldr	r2, [pc, #272]	; (800582c <UART_SetConfig+0x2dc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d125      	bne.n	800576c <UART_SetConfig+0x21c>
 8005720:	4b3e      	ldr	r3, [pc, #248]	; (800581c <UART_SetConfig+0x2cc>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800572a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800572e:	d017      	beq.n	8005760 <UART_SetConfig+0x210>
 8005730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005734:	d817      	bhi.n	8005766 <UART_SetConfig+0x216>
 8005736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800573a:	d00b      	beq.n	8005754 <UART_SetConfig+0x204>
 800573c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005740:	d811      	bhi.n	8005766 <UART_SetConfig+0x216>
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <UART_SetConfig+0x1fe>
 8005746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800574a:	d006      	beq.n	800575a <UART_SetConfig+0x20a>
 800574c:	e00b      	b.n	8005766 <UART_SetConfig+0x216>
 800574e:	2300      	movs	r3, #0
 8005750:	77fb      	strb	r3, [r7, #31]
 8005752:	e0a1      	b.n	8005898 <UART_SetConfig+0x348>
 8005754:	2302      	movs	r3, #2
 8005756:	77fb      	strb	r3, [r7, #31]
 8005758:	e09e      	b.n	8005898 <UART_SetConfig+0x348>
 800575a:	2304      	movs	r3, #4
 800575c:	77fb      	strb	r3, [r7, #31]
 800575e:	e09b      	b.n	8005898 <UART_SetConfig+0x348>
 8005760:	2308      	movs	r3, #8
 8005762:	77fb      	strb	r3, [r7, #31]
 8005764:	e098      	b.n	8005898 <UART_SetConfig+0x348>
 8005766:	2310      	movs	r3, #16
 8005768:	77fb      	strb	r3, [r7, #31]
 800576a:	e095      	b.n	8005898 <UART_SetConfig+0x348>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a2f      	ldr	r2, [pc, #188]	; (8005830 <UART_SetConfig+0x2e0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d125      	bne.n	80057c2 <UART_SetConfig+0x272>
 8005776:	4b29      	ldr	r3, [pc, #164]	; (800581c <UART_SetConfig+0x2cc>)
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005780:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005784:	d017      	beq.n	80057b6 <UART_SetConfig+0x266>
 8005786:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800578a:	d817      	bhi.n	80057bc <UART_SetConfig+0x26c>
 800578c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005790:	d00b      	beq.n	80057aa <UART_SetConfig+0x25a>
 8005792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005796:	d811      	bhi.n	80057bc <UART_SetConfig+0x26c>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <UART_SetConfig+0x254>
 800579c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a0:	d006      	beq.n	80057b0 <UART_SetConfig+0x260>
 80057a2:	e00b      	b.n	80057bc <UART_SetConfig+0x26c>
 80057a4:	2301      	movs	r3, #1
 80057a6:	77fb      	strb	r3, [r7, #31]
 80057a8:	e076      	b.n	8005898 <UART_SetConfig+0x348>
 80057aa:	2302      	movs	r3, #2
 80057ac:	77fb      	strb	r3, [r7, #31]
 80057ae:	e073      	b.n	8005898 <UART_SetConfig+0x348>
 80057b0:	2304      	movs	r3, #4
 80057b2:	77fb      	strb	r3, [r7, #31]
 80057b4:	e070      	b.n	8005898 <UART_SetConfig+0x348>
 80057b6:	2308      	movs	r3, #8
 80057b8:	77fb      	strb	r3, [r7, #31]
 80057ba:	e06d      	b.n	8005898 <UART_SetConfig+0x348>
 80057bc:	2310      	movs	r3, #16
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e06a      	b.n	8005898 <UART_SetConfig+0x348>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a1b      	ldr	r2, [pc, #108]	; (8005834 <UART_SetConfig+0x2e4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d138      	bne.n	800583e <UART_SetConfig+0x2ee>
 80057cc:	4b13      	ldr	r3, [pc, #76]	; (800581c <UART_SetConfig+0x2cc>)
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80057d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057da:	d017      	beq.n	800580c <UART_SetConfig+0x2bc>
 80057dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057e0:	d82a      	bhi.n	8005838 <UART_SetConfig+0x2e8>
 80057e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e6:	d00b      	beq.n	8005800 <UART_SetConfig+0x2b0>
 80057e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ec:	d824      	bhi.n	8005838 <UART_SetConfig+0x2e8>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <UART_SetConfig+0x2aa>
 80057f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f6:	d006      	beq.n	8005806 <UART_SetConfig+0x2b6>
 80057f8:	e01e      	b.n	8005838 <UART_SetConfig+0x2e8>
 80057fa:	2300      	movs	r3, #0
 80057fc:	77fb      	strb	r3, [r7, #31]
 80057fe:	e04b      	b.n	8005898 <UART_SetConfig+0x348>
 8005800:	2302      	movs	r3, #2
 8005802:	77fb      	strb	r3, [r7, #31]
 8005804:	e048      	b.n	8005898 <UART_SetConfig+0x348>
 8005806:	2304      	movs	r3, #4
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e045      	b.n	8005898 <UART_SetConfig+0x348>
 800580c:	2308      	movs	r3, #8
 800580e:	77fb      	strb	r3, [r7, #31]
 8005810:	e042      	b.n	8005898 <UART_SetConfig+0x348>
 8005812:	bf00      	nop
 8005814:	efff69f3 	.word	0xefff69f3
 8005818:	40011000 	.word	0x40011000
 800581c:	40023800 	.word	0x40023800
 8005820:	40004400 	.word	0x40004400
 8005824:	40004800 	.word	0x40004800
 8005828:	40004c00 	.word	0x40004c00
 800582c:	40005000 	.word	0x40005000
 8005830:	40011400 	.word	0x40011400
 8005834:	40007800 	.word	0x40007800
 8005838:	2310      	movs	r3, #16
 800583a:	77fb      	strb	r3, [r7, #31]
 800583c:	e02c      	b.n	8005898 <UART_SetConfig+0x348>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a72      	ldr	r2, [pc, #456]	; (8005a0c <UART_SetConfig+0x4bc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d125      	bne.n	8005894 <UART_SetConfig+0x344>
 8005848:	4b71      	ldr	r3, [pc, #452]	; (8005a10 <UART_SetConfig+0x4c0>)
 800584a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005852:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005856:	d017      	beq.n	8005888 <UART_SetConfig+0x338>
 8005858:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800585c:	d817      	bhi.n	800588e <UART_SetConfig+0x33e>
 800585e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005862:	d00b      	beq.n	800587c <UART_SetConfig+0x32c>
 8005864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005868:	d811      	bhi.n	800588e <UART_SetConfig+0x33e>
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <UART_SetConfig+0x326>
 800586e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005872:	d006      	beq.n	8005882 <UART_SetConfig+0x332>
 8005874:	e00b      	b.n	800588e <UART_SetConfig+0x33e>
 8005876:	2300      	movs	r3, #0
 8005878:	77fb      	strb	r3, [r7, #31]
 800587a:	e00d      	b.n	8005898 <UART_SetConfig+0x348>
 800587c:	2302      	movs	r3, #2
 800587e:	77fb      	strb	r3, [r7, #31]
 8005880:	e00a      	b.n	8005898 <UART_SetConfig+0x348>
 8005882:	2304      	movs	r3, #4
 8005884:	77fb      	strb	r3, [r7, #31]
 8005886:	e007      	b.n	8005898 <UART_SetConfig+0x348>
 8005888:	2308      	movs	r3, #8
 800588a:	77fb      	strb	r3, [r7, #31]
 800588c:	e004      	b.n	8005898 <UART_SetConfig+0x348>
 800588e:	2310      	movs	r3, #16
 8005890:	77fb      	strb	r3, [r7, #31]
 8005892:	e001      	b.n	8005898 <UART_SetConfig+0x348>
 8005894:	2310      	movs	r3, #16
 8005896:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a0:	d15b      	bne.n	800595a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80058a2:	7ffb      	ldrb	r3, [r7, #31]
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d828      	bhi.n	80058fa <UART_SetConfig+0x3aa>
 80058a8:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <UART_SetConfig+0x360>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	080058d5 	.word	0x080058d5
 80058b4:	080058dd 	.word	0x080058dd
 80058b8:	080058e5 	.word	0x080058e5
 80058bc:	080058fb 	.word	0x080058fb
 80058c0:	080058eb 	.word	0x080058eb
 80058c4:	080058fb 	.word	0x080058fb
 80058c8:	080058fb 	.word	0x080058fb
 80058cc:	080058fb 	.word	0x080058fb
 80058d0:	080058f3 	.word	0x080058f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d4:	f7fe f9a8 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 80058d8:	61b8      	str	r0, [r7, #24]
        break;
 80058da:	e013      	b.n	8005904 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058dc:	f7fe f9b8 	bl	8003c50 <HAL_RCC_GetPCLK2Freq>
 80058e0:	61b8      	str	r0, [r7, #24]
        break;
 80058e2:	e00f      	b.n	8005904 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058e4:	4b4b      	ldr	r3, [pc, #300]	; (8005a14 <UART_SetConfig+0x4c4>)
 80058e6:	61bb      	str	r3, [r7, #24]
        break;
 80058e8:	e00c      	b.n	8005904 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ea:	f7fe f88d 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80058ee:	61b8      	str	r0, [r7, #24]
        break;
 80058f0:	e008      	b.n	8005904 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058f6:	61bb      	str	r3, [r7, #24]
        break;
 80058f8:	e004      	b.n	8005904 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	77bb      	strb	r3, [r7, #30]
        break;
 8005902:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d074      	beq.n	80059f4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	005a      	lsls	r2, r3, #1
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	085b      	lsrs	r3, r3, #1
 8005914:	441a      	add	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	fbb2 f3f3 	udiv	r3, r2, r3
 800591e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	2b0f      	cmp	r3, #15
 8005924:	d916      	bls.n	8005954 <UART_SetConfig+0x404>
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800592c:	d212      	bcs.n	8005954 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	b29b      	uxth	r3, r3
 8005932:	f023 030f 	bic.w	r3, r3, #15
 8005936:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	b29b      	uxth	r3, r3
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	b29a      	uxth	r2, r3
 8005944:	89fb      	ldrh	r3, [r7, #14]
 8005946:	4313      	orrs	r3, r2
 8005948:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	89fa      	ldrh	r2, [r7, #14]
 8005950:	60da      	str	r2, [r3, #12]
 8005952:	e04f      	b.n	80059f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	77bb      	strb	r3, [r7, #30]
 8005958:	e04c      	b.n	80059f4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800595a:	7ffb      	ldrb	r3, [r7, #31]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d828      	bhi.n	80059b2 <UART_SetConfig+0x462>
 8005960:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <UART_SetConfig+0x418>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	0800598d 	.word	0x0800598d
 800596c:	08005995 	.word	0x08005995
 8005970:	0800599d 	.word	0x0800599d
 8005974:	080059b3 	.word	0x080059b3
 8005978:	080059a3 	.word	0x080059a3
 800597c:	080059b3 	.word	0x080059b3
 8005980:	080059b3 	.word	0x080059b3
 8005984:	080059b3 	.word	0x080059b3
 8005988:	080059ab 	.word	0x080059ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800598c:	f7fe f94c 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8005990:	61b8      	str	r0, [r7, #24]
        break;
 8005992:	e013      	b.n	80059bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005994:	f7fe f95c 	bl	8003c50 <HAL_RCC_GetPCLK2Freq>
 8005998:	61b8      	str	r0, [r7, #24]
        break;
 800599a:	e00f      	b.n	80059bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800599c:	4b1d      	ldr	r3, [pc, #116]	; (8005a14 <UART_SetConfig+0x4c4>)
 800599e:	61bb      	str	r3, [r7, #24]
        break;
 80059a0:	e00c      	b.n	80059bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059a2:	f7fe f831 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80059a6:	61b8      	str	r0, [r7, #24]
        break;
 80059a8:	e008      	b.n	80059bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ae:	61bb      	str	r3, [r7, #24]
        break;
 80059b0:	e004      	b.n	80059bc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	77bb      	strb	r3, [r7, #30]
        break;
 80059ba:	bf00      	nop
    }

    if (pclk != 0U)
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d018      	beq.n	80059f4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	085a      	lsrs	r2, r3, #1
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	441a      	add	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b0f      	cmp	r3, #15
 80059da:	d909      	bls.n	80059f0 <UART_SetConfig+0x4a0>
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e2:	d205      	bcs.n	80059f0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60da      	str	r2, [r3, #12]
 80059ee:	e001      	b.n	80059f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005a00:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3720      	adds	r7, #32
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40007c00 	.word	0x40007c00
 8005a10:	40023800 	.word	0x40023800
 8005a14:	00f42400 	.word	0x00f42400

08005a18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01a      	beq.n	8005b2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b16:	d10a      	bne.n	8005b2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	605a      	str	r2, [r3, #4]
  }
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b6c:	f7fc fad4 	bl	8002118 <HAL_GetTick>
 8005b70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d10e      	bne.n	8005b9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f831 	bl	8005bf6 <UART_WaitOnFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e027      	b.n	8005bee <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d10e      	bne.n	8005bca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f81b 	bl	8005bf6 <UART_WaitOnFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e011      	b.n	8005bee <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b09c      	sub	sp, #112	; 0x70
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	603b      	str	r3, [r7, #0]
 8005c02:	4613      	mov	r3, r2
 8005c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c06:	e0a7      	b.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c0e:	f000 80a3 	beq.w	8005d58 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c12:	f7fc fa81 	bl	8002118 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d13f      	bne.n	8005ca8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c3c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c48:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e6      	bne.n	8005c28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6c:	f023 0301 	bic.w	r3, r3, #1
 8005c70:	663b      	str	r3, [r7, #96]	; 0x60
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3308      	adds	r3, #8
 8005c78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e5      	bne.n	8005c5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2220      	movs	r2, #32
 8005c92:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e068      	b.n	8005d7a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d050      	beq.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc4:	d148      	bne.n	8005d58 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cee:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e6      	bne.n	8005cd0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3308      	adds	r3, #8
 8005d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	613b      	str	r3, [r7, #16]
   return(result);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3308      	adds	r3, #8
 8005d20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d22:	623a      	str	r2, [r7, #32]
 8005d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	69f9      	ldr	r1, [r7, #28]
 8005d28:	6a3a      	ldr	r2, [r7, #32]
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e5      	bne.n	8005d02 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e010      	b.n	8005d7a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69da      	ldr	r2, [r3, #28]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	4013      	ands	r3, r2
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	bf0c      	ite	eq
 8005d68:	2301      	moveq	r3, #1
 8005d6a:	2300      	movne	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	461a      	mov	r2, r3
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	f43f af48 	beq.w	8005c08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3770      	adds	r7, #112	; 0x70
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b097      	sub	sp, #92	; 0x5c
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	88fa      	ldrh	r2, [r7, #6]
 8005d9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	88fa      	ldrh	r2, [r7, #6]
 8005da4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db6:	d10e      	bne.n	8005dd6 <UART_Start_Receive_IT+0x52>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d105      	bne.n	8005dcc <UART_Start_Receive_IT+0x48>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005dc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dca:	e02d      	b.n	8005e28 <UART_Start_Receive_IT+0xa4>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	22ff      	movs	r2, #255	; 0xff
 8005dd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dd4:	e028      	b.n	8005e28 <UART_Start_Receive_IT+0xa4>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10d      	bne.n	8005dfa <UART_Start_Receive_IT+0x76>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d104      	bne.n	8005df0 <UART_Start_Receive_IT+0x6c>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	22ff      	movs	r2, #255	; 0xff
 8005dea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dee:	e01b      	b.n	8005e28 <UART_Start_Receive_IT+0xa4>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	227f      	movs	r2, #127	; 0x7f
 8005df4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005df8:	e016      	b.n	8005e28 <UART_Start_Receive_IT+0xa4>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e02:	d10d      	bne.n	8005e20 <UART_Start_Receive_IT+0x9c>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d104      	bne.n	8005e16 <UART_Start_Receive_IT+0x92>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	227f      	movs	r2, #127	; 0x7f
 8005e10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e14:	e008      	b.n	8005e28 <UART_Start_Receive_IT+0xa4>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	223f      	movs	r2, #63	; 0x3f
 8005e1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005e1e:	e003      	b.n	8005e28 <UART_Start_Receive_IT+0xa4>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2222      	movs	r2, #34	; 0x22
 8005e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e42:	e853 3f00 	ldrex	r3, [r3]
 8005e46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	f043 0301 	orr.w	r3, r3, #1
 8005e4e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3308      	adds	r3, #8
 8005e56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e58:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e60:	e841 2300 	strex	r3, r2, [r1]
 8005e64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e5      	bne.n	8005e38 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e74:	d107      	bne.n	8005e86 <UART_Start_Receive_IT+0x102>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4a21      	ldr	r2, [pc, #132]	; (8005f08 <UART_Start_Receive_IT+0x184>)
 8005e82:	669a      	str	r2, [r3, #104]	; 0x68
 8005e84:	e002      	b.n	8005e8c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4a20      	ldr	r2, [pc, #128]	; (8005f0c <UART_Start_Receive_IT+0x188>)
 8005e8a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d019      	beq.n	8005ec8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e6      	bne.n	8005e94 <UART_Start_Receive_IT+0x110>
 8005ec6:	e018      	b.n	8005efa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	e853 3f00 	ldrex	r3, [r3]
 8005ed4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f043 0320 	orr.w	r3, r3, #32
 8005edc:	653b      	str	r3, [r7, #80]	; 0x50
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee6:	623b      	str	r3, [r7, #32]
 8005ee8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eea:	69f9      	ldr	r1, [r7, #28]
 8005eec:	6a3a      	ldr	r2, [r7, #32]
 8005eee:	e841 2300 	strex	r3, r2, [r1]
 8005ef2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1e6      	bne.n	8005ec8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	375c      	adds	r7, #92	; 0x5c
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	0800641d 	.word	0x0800641d
 8005f0c:	080062b7 	.word	0x080062b7

08005f10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b095      	sub	sp, #84	; 0x54
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f20:	e853 3f00 	ldrex	r3, [r3]
 8005f24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f36:	643b      	str	r3, [r7, #64]	; 0x40
 8005f38:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e6      	bne.n	8005f18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3308      	adds	r3, #8
 8005f50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	e853 3f00 	ldrex	r3, [r3]
 8005f58:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	f023 0301 	bic.w	r3, r3, #1
 8005f60:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3308      	adds	r3, #8
 8005f68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e5      	bne.n	8005f4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d118      	bne.n	8005fb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f023 0310 	bic.w	r3, r3, #16
 8005f9a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	6979      	ldr	r1, [r7, #20]
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e6      	bne.n	8005f86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005fcc:	bf00      	nop
 8005fce:	3754      	adds	r7, #84	; 0x54
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7ff fa80 	bl	80054fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006010:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006016:	2200      	movs	r2, #0
 8006018:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800601e:	2b00      	cmp	r3, #0
 8006020:	d004      	beq.n	800602c <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006028:	2b00      	cmp	r3, #0
 800602a:	d11d      	bne.n	8006068 <UART_DMATxAbortCallback+0x64>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	220f      	movs	r2, #15
 800604a:	621a      	str	r2, [r3, #32]


  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff fa55 	bl	8005510 <HAL_UART_AbortCpltCallback>
 8006066:	e000      	b.n	800606a <UART_DMATxAbortCallback+0x66>
      return;
 8006068:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006082:	2200      	movs	r2, #0
 8006084:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608a:	2b00      	cmp	r3, #0
 800608c:	d004      	beq.n	8006098 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006094:	2b00      	cmp	r3, #0
 8006096:	d125      	bne.n	80060e4 <UART_DMARxAbortCallback+0x74>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	220f      	movs	r2, #15
 80060b6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0208 	orr.w	r2, r2, #8
 80060c6:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f7ff fa17 	bl	8005510 <HAL_UART_AbortCpltCallback>
 80060e2:	e000      	b.n	80060e6 <UART_DMARxAbortCallback+0x76>
      return;
 80060e4:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b08f      	sub	sp, #60	; 0x3c
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060f8:	2b21      	cmp	r3, #33	; 0x21
 80060fa:	d14c      	bne.n	8006196 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d132      	bne.n	800616e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	61fb      	str	r3, [r7, #28]
   return(result);
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006128:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800612c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e6      	bne.n	8006108 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	60bb      	str	r3, [r7, #8]
   return(result);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800614e:	633b      	str	r3, [r7, #48]	; 0x30
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	6979      	ldr	r1, [r7, #20]
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	e841 2300 	strex	r3, r2, [r1]
 8006164:	613b      	str	r3, [r7, #16]
   return(result);
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e6      	bne.n	800613a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800616c:	e013      	b.n	8006196 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006172:	781a      	ldrb	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800617e:	1c5a      	adds	r2, r3, #1
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006196:	bf00      	nop
 8006198:	373c      	adds	r7, #60	; 0x3c
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b091      	sub	sp, #68	; 0x44
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ae:	2b21      	cmp	r3, #33	; 0x21
 80061b0:	d151      	bne.n	8006256 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d132      	bne.n	8006224 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	e853 3f00 	ldrex	r3, [r3]
 80061ca:	623b      	str	r3, [r7, #32]
   return(result);
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061dc:	633b      	str	r3, [r7, #48]	; 0x30
 80061de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e4:	e841 2300 	strex	r3, r2, [r1]
 80061e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1e6      	bne.n	80061be <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006204:	637b      	str	r3, [r7, #52]	; 0x34
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
 800620c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	69b9      	ldr	r1, [r7, #24]
 8006214:	69fa      	ldr	r2, [r7, #28]
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	617b      	str	r3, [r7, #20]
   return(result);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e6      	bne.n	80061f0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006222:	e018      	b.n	8006256 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006228:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800622a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006238:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623e:	1c9a      	adds	r2, r3, #2
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800624a:	b29b      	uxth	r3, r3
 800624c:	3b01      	subs	r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006256:	bf00      	nop
 8006258:	3744      	adds	r7, #68	; 0x44
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b088      	sub	sp, #32
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	e853 3f00 	ldrex	r3, [r3]
 8006276:	60bb      	str	r3, [r7, #8]
   return(result);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800627e:	61fb      	str	r3, [r7, #28]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	6979      	ldr	r1, [r7, #20]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	e841 2300 	strex	r3, r2, [r1]
 8006294:	613b      	str	r3, [r7, #16]
   return(result);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e6      	bne.n	800626a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff f91d 	bl	80054e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ae:	bf00      	nop
 80062b0:	3720      	adds	r7, #32
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b096      	sub	sp, #88	; 0x58
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062ce:	2b22      	cmp	r3, #34	; 0x22
 80062d0:	f040 8098 	bne.w	8006404 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062de:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80062e2:	b2d9      	uxtb	r1, r3
 80062e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ee:	400a      	ands	r2, r1
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006304:	b29b      	uxth	r3, r3
 8006306:	3b01      	subs	r3, #1
 8006308:	b29a      	uxth	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006316:	b29b      	uxth	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d17b      	bne.n	8006414 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800632a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006330:	653b      	str	r3, [r7, #80]	; 0x50
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800633a:	647b      	str	r3, [r7, #68]	; 0x44
 800633c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e6      	bne.n	800631c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3308      	adds	r3, #8
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	e853 3f00 	ldrex	r3, [r3]
 800635c:	623b      	str	r3, [r7, #32]
   return(result);
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	f023 0301 	bic.w	r3, r3, #1
 8006364:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3308      	adds	r3, #8
 800636c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800636e:	633a      	str	r2, [r7, #48]	; 0x30
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1e5      	bne.n	800634e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639a:	2b01      	cmp	r3, #1
 800639c:	d12e      	bne.n	80063fc <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f023 0310 	bic.w	r3, r3, #16
 80063b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	69b9      	ldr	r1, [r7, #24]
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	617b      	str	r3, [r7, #20]
   return(result);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e6      	bne.n	80063a4 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	f003 0310 	and.w	r3, r3, #16
 80063e0:	2b10      	cmp	r3, #16
 80063e2:	d103      	bne.n	80063ec <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2210      	movs	r2, #16
 80063ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff f895 	bl	8005524 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063fa:	e00b      	b.n	8006414 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7fb fe1b 	bl	8002038 <HAL_UART_RxCpltCallback>
}
 8006402:	e007      	b.n	8006414 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0208 	orr.w	r2, r2, #8
 8006412:	619a      	str	r2, [r3, #24]
}
 8006414:	bf00      	nop
 8006416:	3758      	adds	r7, #88	; 0x58
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b096      	sub	sp, #88	; 0x58
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800642a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006434:	2b22      	cmp	r3, #34	; 0x22
 8006436:	f040 8098 	bne.w	800656a <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006448:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800644a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800644e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006452:	4013      	ands	r3, r2
 8006454:	b29a      	uxth	r2, r3
 8006456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006458:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	1c9a      	adds	r2, r3, #2
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800646a:	b29b      	uxth	r3, r3
 800646c:	3b01      	subs	r3, #1
 800646e:	b29a      	uxth	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800647c:	b29b      	uxth	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d17b      	bne.n	800657a <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	461a      	mov	r2, r3
 800649e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a0:	643b      	str	r3, [r7, #64]	; 0x40
 80064a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e6      	bne.n	8006482 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f023 0301 	bic.w	r3, r3, #1
 80064ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3308      	adds	r3, #8
 80064d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e5      	bne.n	80064b4 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006500:	2b01      	cmp	r3, #1
 8006502:	d12e      	bne.n	8006562 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	e853 3f00 	ldrex	r3, [r3]
 8006516:	60bb      	str	r3, [r7, #8]
   return(result);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f023 0310 	bic.w	r3, r3, #16
 800651e:	647b      	str	r3, [r7, #68]	; 0x44
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	6979      	ldr	r1, [r7, #20]
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	e841 2300 	strex	r3, r2, [r1]
 8006534:	613b      	str	r3, [r7, #16]
   return(result);
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e6      	bne.n	800650a <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f003 0310 	and.w	r3, r3, #16
 8006546:	2b10      	cmp	r3, #16
 8006548:	d103      	bne.n	8006552 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2210      	movs	r2, #16
 8006550:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fe ffe2 	bl	8005524 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006560:	e00b      	b.n	800657a <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fb fd68 	bl	8002038 <HAL_UART_RxCpltCallback>
}
 8006568:	e007      	b.n	800657a <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699a      	ldr	r2, [r3, #24]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0208 	orr.w	r2, r2, #8
 8006578:	619a      	str	r2, [r3, #24]
}
 800657a:	bf00      	nop
 800657c:	3758      	adds	r7, #88	; 0x58
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006582:	b480      	push	{r7}
 8006584:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006586:	bf00      	nop
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006596:	f3ef 8305 	mrs	r3, IPSR
 800659a:	60bb      	str	r3, [r7, #8]
  return(result);
 800659c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10f      	bne.n	80065c2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065a2:	f3ef 8310 	mrs	r3, PRIMASK
 80065a6:	607b      	str	r3, [r7, #4]
  return(result);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d105      	bne.n	80065ba <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065ae:	f3ef 8311 	mrs	r3, BASEPRI
 80065b2:	603b      	str	r3, [r7, #0]
  return(result);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d007      	beq.n	80065ca <osKernelInitialize+0x3a>
 80065ba:	4b0e      	ldr	r3, [pc, #56]	; (80065f4 <osKernelInitialize+0x64>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d103      	bne.n	80065ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80065c2:	f06f 0305 	mvn.w	r3, #5
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	e00c      	b.n	80065e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80065ca:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <osKernelInitialize+0x64>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d105      	bne.n	80065de <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80065d2:	4b08      	ldr	r3, [pc, #32]	; (80065f4 <osKernelInitialize+0x64>)
 80065d4:	2201      	movs	r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80065d8:	2300      	movs	r3, #0
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	e002      	b.n	80065e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80065de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80065e4:	68fb      	ldr	r3, [r7, #12]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	200055a0 	.word	0x200055a0

080065f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065fe:	f3ef 8305 	mrs	r3, IPSR
 8006602:	60bb      	str	r3, [r7, #8]
  return(result);
 8006604:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10f      	bne.n	800662a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800660a:	f3ef 8310 	mrs	r3, PRIMASK
 800660e:	607b      	str	r3, [r7, #4]
  return(result);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d105      	bne.n	8006622 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006616:	f3ef 8311 	mrs	r3, BASEPRI
 800661a:	603b      	str	r3, [r7, #0]
  return(result);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d007      	beq.n	8006632 <osKernelStart+0x3a>
 8006622:	4b0f      	ldr	r3, [pc, #60]	; (8006660 <osKernelStart+0x68>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b02      	cmp	r3, #2
 8006628:	d103      	bne.n	8006632 <osKernelStart+0x3a>
    stat = osErrorISR;
 800662a:	f06f 0305 	mvn.w	r3, #5
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	e010      	b.n	8006654 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006632:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <osKernelStart+0x68>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d109      	bne.n	800664e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800663a:	f7ff ffa2 	bl	8006582 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800663e:	4b08      	ldr	r3, [pc, #32]	; (8006660 <osKernelStart+0x68>)
 8006640:	2202      	movs	r2, #2
 8006642:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006644:	f001 f8b4 	bl	80077b0 <vTaskStartScheduler>
      stat = osOK;
 8006648:	2300      	movs	r3, #0
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	e002      	b.n	8006654 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800664e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006652:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006654:	68fb      	ldr	r3, [r7, #12]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	200055a0 	.word	0x200055a0

08006664 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006664:	b580      	push	{r7, lr}
 8006666:	b090      	sub	sp, #64	; 0x40
 8006668:	af04      	add	r7, sp, #16
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006670:	2300      	movs	r3, #0
 8006672:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006674:	f3ef 8305 	mrs	r3, IPSR
 8006678:	61fb      	str	r3, [r7, #28]
  return(result);
 800667a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800667c:	2b00      	cmp	r3, #0
 800667e:	f040 808f 	bne.w	80067a0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006682:	f3ef 8310 	mrs	r3, PRIMASK
 8006686:	61bb      	str	r3, [r7, #24]
  return(result);
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d105      	bne.n	800669a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800668e:	f3ef 8311 	mrs	r3, BASEPRI
 8006692:	617b      	str	r3, [r7, #20]
  return(result);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <osThreadNew+0x3e>
 800669a:	4b44      	ldr	r3, [pc, #272]	; (80067ac <osThreadNew+0x148>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d07e      	beq.n	80067a0 <osThreadNew+0x13c>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d07b      	beq.n	80067a0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80066a8:	2380      	movs	r3, #128	; 0x80
 80066aa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80066ac:	2318      	movs	r3, #24
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80066b0:	2300      	movs	r3, #0
 80066b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80066b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d045      	beq.n	800674c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d002      	beq.n	80066ce <osThreadNew+0x6a>
        name = attr->name;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d008      	beq.n	80066f4 <osThreadNew+0x90>
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	2b38      	cmp	r3, #56	; 0x38
 80066e6:	d805      	bhi.n	80066f4 <osThreadNew+0x90>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <osThreadNew+0x94>
        return (NULL);
 80066f4:	2300      	movs	r3, #0
 80066f6:	e054      	b.n	80067a2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	089b      	lsrs	r3, r3, #2
 8006706:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00e      	beq.n	800672e <osThreadNew+0xca>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	2b5b      	cmp	r3, #91	; 0x5b
 8006716:	d90a      	bls.n	800672e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800671c:	2b00      	cmp	r3, #0
 800671e:	d006      	beq.n	800672e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <osThreadNew+0xca>
        mem = 1;
 8006728:	2301      	movs	r3, #1
 800672a:	623b      	str	r3, [r7, #32]
 800672c:	e010      	b.n	8006750 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10c      	bne.n	8006750 <osThreadNew+0xec>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d108      	bne.n	8006750 <osThreadNew+0xec>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d104      	bne.n	8006750 <osThreadNew+0xec>
          mem = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	623b      	str	r3, [r7, #32]
 800674a:	e001      	b.n	8006750 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800674c:	2300      	movs	r3, #0
 800674e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d110      	bne.n	8006778 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800675e:	9202      	str	r2, [sp, #8]
 8006760:	9301      	str	r3, [sp, #4]
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800676a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 fe3f 	bl	80073f0 <xTaskCreateStatic>
 8006772:	4603      	mov	r3, r0
 8006774:	613b      	str	r3, [r7, #16]
 8006776:	e013      	b.n	80067a0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d110      	bne.n	80067a0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	b29a      	uxth	r2, r3
 8006782:	f107 0310 	add.w	r3, r7, #16
 8006786:	9301      	str	r3, [sp, #4]
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 fe90 	bl	80074b6 <xTaskCreate>
 8006796:	4603      	mov	r3, r0
 8006798:	2b01      	cmp	r3, #1
 800679a:	d001      	beq.n	80067a0 <osThreadNew+0x13c>
          hTask = NULL;
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80067a0:	693b      	ldr	r3, [r7, #16]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3730      	adds	r7, #48	; 0x30
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	200055a0 	.word	0x200055a0

080067b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067b8:	f3ef 8305 	mrs	r3, IPSR
 80067bc:	613b      	str	r3, [r7, #16]
  return(result);
 80067be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10f      	bne.n	80067e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067c4:	f3ef 8310 	mrs	r3, PRIMASK
 80067c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d105      	bne.n	80067dc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067d0:	f3ef 8311 	mrs	r3, BASEPRI
 80067d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d007      	beq.n	80067ec <osDelay+0x3c>
 80067dc:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <osDelay+0x58>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d103      	bne.n	80067ec <osDelay+0x3c>
    stat = osErrorISR;
 80067e4:	f06f 0305 	mvn.w	r3, #5
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	e007      	b.n	80067fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 ffa4 	bl	8007744 <vTaskDelay>
    }
  }

  return (stat);
 80067fc:	697b      	ldr	r3, [r7, #20]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	200055a0 	.word	0x200055a0

0800680c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4a07      	ldr	r2, [pc, #28]	; (8006838 <vApplicationGetIdleTaskMemory+0x2c>)
 800681c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	4a06      	ldr	r2, [pc, #24]	; (800683c <vApplicationGetIdleTaskMemory+0x30>)
 8006822:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2280      	movs	r2, #128	; 0x80
 8006828:	601a      	str	r2, [r3, #0]
}
 800682a:	bf00      	nop
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	200055a4 	.word	0x200055a4
 800683c:	20005600 	.word	0x20005600

08006840 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4a07      	ldr	r2, [pc, #28]	; (800686c <vApplicationGetTimerTaskMemory+0x2c>)
 8006850:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	4a06      	ldr	r2, [pc, #24]	; (8006870 <vApplicationGetTimerTaskMemory+0x30>)
 8006856:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800685e:	601a      	str	r2, [r3, #0]
}
 8006860:	bf00      	nop
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	20005800 	.word	0x20005800
 8006870:	2000585c 	.word	0x2000585c

08006874 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f103 0208 	add.w	r2, r3, #8
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800688c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f103 0208 	add.w	r2, r3, #8
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f103 0208 	add.w	r2, r3, #8
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	601a      	str	r2, [r3, #0]
}
 800690a:	bf00      	nop
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006916:	b480      	push	{r7}
 8006918:	b085      	sub	sp, #20
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800692c:	d103      	bne.n	8006936 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	e00c      	b.n	8006950 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	3308      	adds	r3, #8
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	e002      	b.n	8006944 <vListInsert+0x2e>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	429a      	cmp	r2, r3
 800694e:	d2f6      	bcs.n	800693e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	601a      	str	r2, [r3, #0]
}
 800697c:	bf00      	nop
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6892      	ldr	r2, [r2, #8]
 800699e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6852      	ldr	r2, [r2, #4]
 80069a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d103      	bne.n	80069bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689a      	ldr	r2, [r3, #8]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	1e5a      	subs	r2, r3, #1
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10c      	bne.n	8006a0a <xQueueGenericReset+0x2e>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	b672      	cpsid	i
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	b662      	cpsie	i
 8006a04:	60bb      	str	r3, [r7, #8]
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006a0a:	f002 f8a7 	bl	8008b5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a16:	68f9      	ldr	r1, [r7, #12]
 8006a18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a1a:	fb01 f303 	mul.w	r3, r1, r3
 8006a1e:	441a      	add	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	68f9      	ldr	r1, [r7, #12]
 8006a3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a40:	fb01 f303 	mul.w	r3, r1, r3
 8006a44:	441a      	add	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	22ff      	movs	r2, #255	; 0xff
 8006a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	22ff      	movs	r2, #255	; 0xff
 8006a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d114      	bne.n	8006a8a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01a      	beq.n	8006a9e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3310      	adds	r3, #16
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f001 f937 	bl	8007ce0 <xTaskRemoveFromEventList>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d012      	beq.n	8006a9e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a78:	4b0c      	ldr	r3, [pc, #48]	; (8006aac <xQueueGenericReset+0xd0>)
 8006a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	e009      	b.n	8006a9e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3310      	adds	r3, #16
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff fef0 	bl	8006874 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3324      	adds	r3, #36	; 0x24
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff feeb 	bl	8006874 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a9e:	f002 f891 	bl	8008bc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006aa2:	2301      	movs	r3, #1
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	e000ed04 	.word	0xe000ed04

08006ab0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08e      	sub	sp, #56	; 0x38
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10c      	bne.n	8006ade <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	b672      	cpsid	i
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	b662      	cpsie	i
 8006ad8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ada:	bf00      	nop
 8006adc:	e7fe      	b.n	8006adc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10c      	bne.n	8006afe <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	b672      	cpsid	i
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	b662      	cpsie	i
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006afa:	bf00      	nop
 8006afc:	e7fe      	b.n	8006afc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <xQueueGenericCreateStatic+0x5a>
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <xQueueGenericCreateStatic+0x5e>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e000      	b.n	8006b10 <xQueueGenericCreateStatic+0x60>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10c      	bne.n	8006b2e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	b672      	cpsid	i
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	b662      	cpsie	i
 8006b28:	623b      	str	r3, [r7, #32]
}
 8006b2a:	bf00      	nop
 8006b2c:	e7fe      	b.n	8006b2c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d102      	bne.n	8006b3a <xQueueGenericCreateStatic+0x8a>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <xQueueGenericCreateStatic+0x8e>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e000      	b.n	8006b40 <xQueueGenericCreateStatic+0x90>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10c      	bne.n	8006b5e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b48:	b672      	cpsid	i
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	b662      	cpsie	i
 8006b58:	61fb      	str	r3, [r7, #28]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b5e:	2350      	movs	r3, #80	; 0x50
 8006b60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b50      	cmp	r3, #80	; 0x50
 8006b66:	d00c      	beq.n	8006b82 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6c:	b672      	cpsid	i
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	b662      	cpsie	i
 8006b7c:	61bb      	str	r3, [r7, #24]
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b82:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00d      	beq.n	8006baa <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 f805 	bl	8006bb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3730      	adds	r7, #48	; 0x30
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d103      	bne.n	8006bd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e002      	b.n	8006bd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006be2:	2101      	movs	r1, #1
 8006be4:	69b8      	ldr	r0, [r7, #24]
 8006be6:	f7ff fef9 	bl	80069dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006bf2:	bf00      	nop
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
	...

08006bfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08e      	sub	sp, #56	; 0x38
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10c      	bne.n	8006c32 <xQueueGenericSend+0x36>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	b672      	cpsid	i
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	b662      	cpsie	i
 8006c2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d103      	bne.n	8006c40 <xQueueGenericSend+0x44>
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <xQueueGenericSend+0x48>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e000      	b.n	8006c46 <xQueueGenericSend+0x4a>
 8006c44:	2300      	movs	r3, #0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10c      	bne.n	8006c64 <xQueueGenericSend+0x68>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	b672      	cpsid	i
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	b662      	cpsie	i
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c60:	bf00      	nop
 8006c62:	e7fe      	b.n	8006c62 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d103      	bne.n	8006c72 <xQueueGenericSend+0x76>
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d101      	bne.n	8006c76 <xQueueGenericSend+0x7a>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e000      	b.n	8006c78 <xQueueGenericSend+0x7c>
 8006c76:	2300      	movs	r3, #0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10c      	bne.n	8006c96 <xQueueGenericSend+0x9a>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	b672      	cpsid	i
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	b662      	cpsie	i
 8006c90:	623b      	str	r3, [r7, #32]
}
 8006c92:	bf00      	nop
 8006c94:	e7fe      	b.n	8006c94 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c96:	f001 fa11 	bl	80080bc <xTaskGetSchedulerState>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d102      	bne.n	8006ca6 <xQueueGenericSend+0xaa>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <xQueueGenericSend+0xae>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <xQueueGenericSend+0xb0>
 8006caa:	2300      	movs	r3, #0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10c      	bne.n	8006cca <xQueueGenericSend+0xce>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	b672      	cpsid	i
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	b662      	cpsie	i
 8006cc4:	61fb      	str	r3, [r7, #28]
}
 8006cc6:	bf00      	nop
 8006cc8:	e7fe      	b.n	8006cc8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cca:	f001 ff47 	bl	8008b5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d302      	bcc.n	8006ce0 <xQueueGenericSend+0xe4>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d129      	bne.n	8006d34 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ce6:	f000 fa15 	bl	8007114 <prvCopyDataToQueue>
 8006cea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d010      	beq.n	8006d16 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	3324      	adds	r3, #36	; 0x24
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fff1 	bl	8007ce0 <xTaskRemoveFromEventList>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d013      	beq.n	8006d2c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d04:	4b3f      	ldr	r3, [pc, #252]	; (8006e04 <xQueueGenericSend+0x208>)
 8006d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	e00a      	b.n	8006d2c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d007      	beq.n	8006d2c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d1c:	4b39      	ldr	r3, [pc, #228]	; (8006e04 <xQueueGenericSend+0x208>)
 8006d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d2c:	f001 ff4a 	bl	8008bc4 <vPortExitCritical>
				return pdPASS;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e063      	b.n	8006dfc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d103      	bne.n	8006d42 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d3a:	f001 ff43 	bl	8008bc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e05c      	b.n	8006dfc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d106      	bne.n	8006d56 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d48:	f107 0314 	add.w	r3, r7, #20
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f001 f855 	bl	8007dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d52:	2301      	movs	r3, #1
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d56:	f001 ff35 	bl	8008bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d5a:	f000 fd93 	bl	8007884 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d5e:	f001 fefd 	bl	8008b5c <vPortEnterCritical>
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d68:	b25b      	sxtb	r3, r3
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d6e:	d103      	bne.n	8006d78 <xQueueGenericSend+0x17c>
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d7e:	b25b      	sxtb	r3, r3
 8006d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d84:	d103      	bne.n	8006d8e <xQueueGenericSend+0x192>
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d8e:	f001 ff19 	bl	8008bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d92:	1d3a      	adds	r2, r7, #4
 8006d94:	f107 0314 	add.w	r3, r7, #20
 8006d98:	4611      	mov	r1, r2
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f001 f844 	bl	8007e28 <xTaskCheckForTimeOut>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d124      	bne.n	8006df0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006da6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006da8:	f000 faac 	bl	8007304 <prvIsQueueFull>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d018      	beq.n	8006de4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	3310      	adds	r3, #16
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	4611      	mov	r1, r2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 ff3c 	bl	8007c38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dc2:	f000 fa37 	bl	8007234 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006dc6:	f000 fd6b 	bl	80078a0 <xTaskResumeAll>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f47f af7c 	bne.w	8006cca <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <xQueueGenericSend+0x208>)
 8006dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	e772      	b.n	8006cca <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006de6:	f000 fa25 	bl	8007234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dea:	f000 fd59 	bl	80078a0 <xTaskResumeAll>
 8006dee:	e76c      	b.n	8006cca <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006df2:	f000 fa1f 	bl	8007234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006df6:	f000 fd53 	bl	80078a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3738      	adds	r7, #56	; 0x38
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	e000ed04 	.word	0xe000ed04

08006e08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08e      	sub	sp, #56	; 0x38
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10c      	bne.n	8006e3a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	b672      	cpsid	i
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	b662      	cpsie	i
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e36:	bf00      	nop
 8006e38:	e7fe      	b.n	8006e38 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d103      	bne.n	8006e48 <xQueueGenericSendFromISR+0x40>
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <xQueueGenericSendFromISR+0x44>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e000      	b.n	8006e4e <xQueueGenericSendFromISR+0x46>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10c      	bne.n	8006e6c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	b672      	cpsid	i
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	b662      	cpsie	i
 8006e66:	623b      	str	r3, [r7, #32]
}
 8006e68:	bf00      	nop
 8006e6a:	e7fe      	b.n	8006e6a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d103      	bne.n	8006e7a <xQueueGenericSendFromISR+0x72>
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d101      	bne.n	8006e7e <xQueueGenericSendFromISR+0x76>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <xQueueGenericSendFromISR+0x78>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d10c      	bne.n	8006e9e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	b672      	cpsid	i
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	b662      	cpsie	i
 8006e98:	61fb      	str	r3, [r7, #28]
}
 8006e9a:	bf00      	nop
 8006e9c:	e7fe      	b.n	8006e9c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e9e:	f001 ff45 	bl	8008d2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ea2:	f3ef 8211 	mrs	r2, BASEPRI
 8006ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eaa:	b672      	cpsid	i
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	b662      	cpsie	i
 8006eba:	61ba      	str	r2, [r7, #24]
 8006ebc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ebe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d302      	bcc.n	8006ed4 <xQueueGenericSendFromISR+0xcc>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d12c      	bne.n	8006f2e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	68b9      	ldr	r1, [r7, #8]
 8006ee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ee4:	f000 f916 	bl	8007114 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ee8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef0:	d112      	bne.n	8006f18 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d016      	beq.n	8006f28 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	3324      	adds	r3, #36	; 0x24
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 feee 	bl	8007ce0 <xTaskRemoveFromEventList>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00e      	beq.n	8006f28 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00b      	beq.n	8006f28 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	e007      	b.n	8006f28 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	b25a      	sxtb	r2, r3
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006f2c:	e001      	b.n	8006f32 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	637b      	str	r3, [r7, #52]	; 0x34
 8006f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f34:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3738      	adds	r7, #56	; 0x38
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08c      	sub	sp, #48	; 0x30
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f54:	2300      	movs	r3, #0
 8006f56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10c      	bne.n	8006f7c <xQueueReceive+0x34>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	b672      	cpsid	i
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	b662      	cpsie	i
 8006f76:	623b      	str	r3, [r7, #32]
}
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d103      	bne.n	8006f8a <xQueueReceive+0x42>
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <xQueueReceive+0x46>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <xQueueReceive+0x48>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10c      	bne.n	8006fae <xQueueReceive+0x66>
	__asm volatile
 8006f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f98:	b672      	cpsid	i
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	b662      	cpsie	i
 8006fa8:	61fb      	str	r3, [r7, #28]
}
 8006faa:	bf00      	nop
 8006fac:	e7fe      	b.n	8006fac <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fae:	f001 f885 	bl	80080bc <xTaskGetSchedulerState>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d102      	bne.n	8006fbe <xQueueReceive+0x76>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <xQueueReceive+0x7a>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <xQueueReceive+0x7c>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10c      	bne.n	8006fe2 <xQueueReceive+0x9a>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	b672      	cpsid	i
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	b662      	cpsie	i
 8006fdc:	61bb      	str	r3, [r7, #24]
}
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fe2:	f001 fdbb 	bl	8008b5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d01f      	beq.n	8007032 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ff2:	68b9      	ldr	r1, [r7, #8]
 8006ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ff6:	f000 f8f7 	bl	80071e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	1e5a      	subs	r2, r3, #1
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00f      	beq.n	800702a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	3310      	adds	r3, #16
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fe66 	bl	8007ce0 <xTaskRemoveFromEventList>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d007      	beq.n	800702a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800701a:	4b3d      	ldr	r3, [pc, #244]	; (8007110 <xQueueReceive+0x1c8>)
 800701c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800702a:	f001 fdcb 	bl	8008bc4 <vPortExitCritical>
				return pdPASS;
 800702e:	2301      	movs	r3, #1
 8007030:	e069      	b.n	8007106 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d103      	bne.n	8007040 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007038:	f001 fdc4 	bl	8008bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800703c:	2300      	movs	r3, #0
 800703e:	e062      	b.n	8007106 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007046:	f107 0310 	add.w	r3, r7, #16
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fed6 	bl	8007dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007050:	2301      	movs	r3, #1
 8007052:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007054:	f001 fdb6 	bl	8008bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007058:	f000 fc14 	bl	8007884 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800705c:	f001 fd7e 	bl	8008b5c <vPortEnterCritical>
 8007060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007062:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007066:	b25b      	sxtb	r3, r3
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800706c:	d103      	bne.n	8007076 <xQueueReceive+0x12e>
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	2200      	movs	r2, #0
 8007072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800707c:	b25b      	sxtb	r3, r3
 800707e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007082:	d103      	bne.n	800708c <xQueueReceive+0x144>
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800708c:	f001 fd9a 	bl	8008bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007090:	1d3a      	adds	r2, r7, #4
 8007092:	f107 0310 	add.w	r3, r7, #16
 8007096:	4611      	mov	r1, r2
 8007098:	4618      	mov	r0, r3
 800709a:	f000 fec5 	bl	8007e28 <xTaskCheckForTimeOut>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d123      	bne.n	80070ec <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070a6:	f000 f917 	bl	80072d8 <prvIsQueueEmpty>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d017      	beq.n	80070e0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	3324      	adds	r3, #36	; 0x24
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	4611      	mov	r1, r2
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 fdbd 	bl	8007c38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070c0:	f000 f8b8 	bl	8007234 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070c4:	f000 fbec 	bl	80078a0 <xTaskResumeAll>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d189      	bne.n	8006fe2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80070ce:	4b10      	ldr	r3, [pc, #64]	; (8007110 <xQueueReceive+0x1c8>)
 80070d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	e780      	b.n	8006fe2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80070e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070e2:	f000 f8a7 	bl	8007234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070e6:	f000 fbdb 	bl	80078a0 <xTaskResumeAll>
 80070ea:	e77a      	b.n	8006fe2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80070ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ee:	f000 f8a1 	bl	8007234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070f2:	f000 fbd5 	bl	80078a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070f8:	f000 f8ee 	bl	80072d8 <prvIsQueueEmpty>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f43f af6f 	beq.w	8006fe2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007104:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007106:	4618      	mov	r0, r3
 8007108:	3730      	adds	r7, #48	; 0x30
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	e000ed04 	.word	0xe000ed04

08007114 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007120:	2300      	movs	r3, #0
 8007122:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007128:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10d      	bne.n	800714e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d14d      	bne.n	80071d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	4618      	mov	r0, r3
 8007140:	f000 ffda 	bl	80080f8 <xTaskPriorityDisinherit>
 8007144:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	609a      	str	r2, [r3, #8]
 800714c:	e043      	b.n	80071d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d119      	bne.n	8007188 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6858      	ldr	r0, [r3, #4]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715c:	461a      	mov	r2, r3
 800715e:	68b9      	ldr	r1, [r7, #8]
 8007160:	f00b fd92 	bl	8012c88 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716c:	441a      	add	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	429a      	cmp	r2, r3
 800717c:	d32b      	bcc.n	80071d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	605a      	str	r2, [r3, #4]
 8007186:	e026      	b.n	80071d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	68d8      	ldr	r0, [r3, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	461a      	mov	r2, r3
 8007192:	68b9      	ldr	r1, [r7, #8]
 8007194:	f00b fd78 	bl	8012c88 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a0:	425b      	negs	r3, r3
 80071a2:	441a      	add	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d207      	bcs.n	80071c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071bc:	425b      	negs	r3, r3
 80071be:	441a      	add	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d105      	bne.n	80071d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80071de:	697b      	ldr	r3, [r7, #20]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d018      	beq.n	800722c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68da      	ldr	r2, [r3, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	441a      	add	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	429a      	cmp	r2, r3
 8007212:	d303      	bcc.n	800721c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68d9      	ldr	r1, [r3, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007224:	461a      	mov	r2, r3
 8007226:	6838      	ldr	r0, [r7, #0]
 8007228:	f00b fd2e 	bl	8012c88 <memcpy>
	}
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800723c:	f001 fc8e 	bl	8008b5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007246:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007248:	e011      	b.n	800726e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	2b00      	cmp	r3, #0
 8007250:	d012      	beq.n	8007278 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3324      	adds	r3, #36	; 0x24
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fd42 	bl	8007ce0 <xTaskRemoveFromEventList>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007262:	f000 fe47 	bl	8007ef4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007266:	7bfb      	ldrb	r3, [r7, #15]
 8007268:	3b01      	subs	r3, #1
 800726a:	b2db      	uxtb	r3, r3
 800726c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800726e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007272:	2b00      	cmp	r3, #0
 8007274:	dce9      	bgt.n	800724a <prvUnlockQueue+0x16>
 8007276:	e000      	b.n	800727a <prvUnlockQueue+0x46>
					break;
 8007278:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	22ff      	movs	r2, #255	; 0xff
 800727e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007282:	f001 fc9f 	bl	8008bc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007286:	f001 fc69 	bl	8008b5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007290:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007292:	e011      	b.n	80072b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d012      	beq.n	80072c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	3310      	adds	r3, #16
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fd1d 	bl	8007ce0 <xTaskRemoveFromEventList>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072ac:	f000 fe22 	bl	8007ef4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dce9      	bgt.n	8007294 <prvUnlockQueue+0x60>
 80072c0:	e000      	b.n	80072c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	22ff      	movs	r2, #255	; 0xff
 80072c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80072cc:	f001 fc7a 	bl	8008bc4 <vPortExitCritical>
}
 80072d0:	bf00      	nop
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072e0:	f001 fc3c 	bl	8008b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d102      	bne.n	80072f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072ec:	2301      	movs	r3, #1
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	e001      	b.n	80072f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072f6:	f001 fc65 	bl	8008bc4 <vPortExitCritical>

	return xReturn;
 80072fa:	68fb      	ldr	r3, [r7, #12]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800730c:	f001 fc26 	bl	8008b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007318:	429a      	cmp	r2, r3
 800731a:	d102      	bne.n	8007322 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800731c:	2301      	movs	r3, #1
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	e001      	b.n	8007326 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007326:	f001 fc4d 	bl	8008bc4 <vPortExitCritical>

	return xReturn;
 800732a:	68fb      	ldr	r3, [r7, #12]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	e014      	b.n	800736e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007344:	4a0f      	ldr	r2, [pc, #60]	; (8007384 <vQueueAddToRegistry+0x50>)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10b      	bne.n	8007368 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007350:	490c      	ldr	r1, [pc, #48]	; (8007384 <vQueueAddToRegistry+0x50>)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800735a:	4a0a      	ldr	r2, [pc, #40]	; (8007384 <vQueueAddToRegistry+0x50>)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	4413      	add	r3, r2
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007366:	e006      	b.n	8007376 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3301      	adds	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b07      	cmp	r3, #7
 8007372:	d9e7      	bls.n	8007344 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007374:	bf00      	nop
 8007376:	bf00      	nop
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	20005c5c 	.word	0x20005c5c

08007388 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007398:	f001 fbe0 	bl	8008b5c <vPortEnterCritical>
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073a2:	b25b      	sxtb	r3, r3
 80073a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073a8:	d103      	bne.n	80073b2 <vQueueWaitForMessageRestricted+0x2a>
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073b8:	b25b      	sxtb	r3, r3
 80073ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073be:	d103      	bne.n	80073c8 <vQueueWaitForMessageRestricted+0x40>
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073c8:	f001 fbfc 	bl	8008bc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d106      	bne.n	80073e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	3324      	adds	r3, #36	; 0x24
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fc51 	bl	8007c84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80073e2:	6978      	ldr	r0, [r7, #20]
 80073e4:	f7ff ff26 	bl	8007234 <prvUnlockQueue>
	}
 80073e8:	bf00      	nop
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08e      	sub	sp, #56	; 0x38
 80073f4:	af04      	add	r7, sp, #16
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
 80073fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10c      	bne.n	800741e <xTaskCreateStatic+0x2e>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	b672      	cpsid	i
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	b662      	cpsie	i
 8007418:	623b      	str	r3, [r7, #32]
}
 800741a:	bf00      	nop
 800741c:	e7fe      	b.n	800741c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800741e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10c      	bne.n	800743e <xTaskCreateStatic+0x4e>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007428:	b672      	cpsid	i
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	b662      	cpsie	i
 8007438:	61fb      	str	r3, [r7, #28]
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800743e:	235c      	movs	r3, #92	; 0x5c
 8007440:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	2b5c      	cmp	r3, #92	; 0x5c
 8007446:	d00c      	beq.n	8007462 <xTaskCreateStatic+0x72>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	b672      	cpsid	i
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	b662      	cpsie	i
 800745c:	61bb      	str	r3, [r7, #24]
}
 800745e:	bf00      	nop
 8007460:	e7fe      	b.n	8007460 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007462:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	2b00      	cmp	r3, #0
 8007468:	d01e      	beq.n	80074a8 <xTaskCreateStatic+0xb8>
 800746a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800746c:	2b00      	cmp	r3, #0
 800746e:	d01b      	beq.n	80074a8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007478:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	2202      	movs	r2, #2
 800747e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007482:	2300      	movs	r3, #0
 8007484:	9303      	str	r3, [sp, #12]
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	9302      	str	r3, [sp, #8]
 800748a:	f107 0314 	add.w	r3, r7, #20
 800748e:	9301      	str	r3, [sp, #4]
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 f850 	bl	8007540 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074a2:	f000 f8df 	bl	8007664 <prvAddNewTaskToReadyList>
 80074a6:	e001      	b.n	80074ac <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80074a8:	2300      	movs	r3, #0
 80074aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074ac:	697b      	ldr	r3, [r7, #20]
	}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3728      	adds	r7, #40	; 0x28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b08c      	sub	sp, #48	; 0x30
 80074ba:	af04      	add	r7, sp, #16
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	603b      	str	r3, [r7, #0]
 80074c2:	4613      	mov	r3, r2
 80074c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 fc72 	bl	8008db4 <pvPortMalloc>
 80074d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00e      	beq.n	80074f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074d8:	205c      	movs	r0, #92	; 0x5c
 80074da:	f001 fc6b 	bl	8008db4 <pvPortMalloc>
 80074de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	631a      	str	r2, [r3, #48]	; 0x30
 80074ec:	e005      	b.n	80074fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074ee:	6978      	ldr	r0, [r7, #20]
 80074f0:	f001 fd2a 	bl	8008f48 <vPortFree>
 80074f4:	e001      	b.n	80074fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d017      	beq.n	8007530 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007508:	88fa      	ldrh	r2, [r7, #6]
 800750a:	2300      	movs	r3, #0
 800750c:	9303      	str	r3, [sp, #12]
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	9302      	str	r3, [sp, #8]
 8007512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 f80e 	bl	8007540 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007524:	69f8      	ldr	r0, [r7, #28]
 8007526:	f000 f89d 	bl	8007664 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800752a:	2301      	movs	r3, #1
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	e002      	b.n	8007536 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007534:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007536:	69bb      	ldr	r3, [r7, #24]
	}
 8007538:	4618      	mov	r0, r3
 800753a:	3720      	adds	r7, #32
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	461a      	mov	r2, r3
 8007558:	21a5      	movs	r1, #165	; 0xa5
 800755a:	f00b fba3 	bl	8012ca4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007568:	440b      	add	r3, r1
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	f023 0307 	bic.w	r3, r3, #7
 8007576:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00c      	beq.n	800759c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	b672      	cpsid	i
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	b662      	cpsie	i
 8007596:	617b      	str	r3, [r7, #20]
}
 8007598:	bf00      	nop
 800759a:	e7fe      	b.n	800759a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d01f      	beq.n	80075e2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075a2:	2300      	movs	r3, #0
 80075a4:	61fb      	str	r3, [r7, #28]
 80075a6:	e012      	b.n	80075ce <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	4413      	add	r3, r2
 80075ae:	7819      	ldrb	r1, [r3, #0]
 80075b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	3334      	adds	r3, #52	; 0x34
 80075b8:	460a      	mov	r2, r1
 80075ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	4413      	add	r3, r2
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d006      	beq.n	80075d6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	3301      	adds	r3, #1
 80075cc:	61fb      	str	r3, [r7, #28]
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	2b0f      	cmp	r3, #15
 80075d2:	d9e9      	bls.n	80075a8 <prvInitialiseNewTask+0x68>
 80075d4:	e000      	b.n	80075d8 <prvInitialiseNewTask+0x98>
			{
				break;
 80075d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075e0:	e003      	b.n	80075ea <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ec:	2b37      	cmp	r3, #55	; 0x37
 80075ee:	d901      	bls.n	80075f4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075f0:	2337      	movs	r3, #55	; 0x37
 80075f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007602:	2200      	movs	r2, #0
 8007604:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	3304      	adds	r3, #4
 800760a:	4618      	mov	r0, r3
 800760c:	f7ff f952 	bl	80068b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	3318      	adds	r3, #24
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff f94d 	bl	80068b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800761e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007622:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800762e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007632:	2200      	movs	r2, #0
 8007634:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	68f9      	ldr	r1, [r7, #12]
 8007642:	69b8      	ldr	r0, [r7, #24]
 8007644:	f001 f97a 	bl	800893c <pxPortInitialiseStack>
 8007648:	4602      	mov	r2, r0
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800764e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007658:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800765a:	bf00      	nop
 800765c:	3720      	adds	r7, #32
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800766c:	f001 fa76 	bl	8008b5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007670:	4b2d      	ldr	r3, [pc, #180]	; (8007728 <prvAddNewTaskToReadyList+0xc4>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3301      	adds	r3, #1
 8007676:	4a2c      	ldr	r2, [pc, #176]	; (8007728 <prvAddNewTaskToReadyList+0xc4>)
 8007678:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800767a:	4b2c      	ldr	r3, [pc, #176]	; (800772c <prvAddNewTaskToReadyList+0xc8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d109      	bne.n	8007696 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007682:	4a2a      	ldr	r2, [pc, #168]	; (800772c <prvAddNewTaskToReadyList+0xc8>)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007688:	4b27      	ldr	r3, [pc, #156]	; (8007728 <prvAddNewTaskToReadyList+0xc4>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d110      	bne.n	80076b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007690:	f000 fc54 	bl	8007f3c <prvInitialiseTaskLists>
 8007694:	e00d      	b.n	80076b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007696:	4b26      	ldr	r3, [pc, #152]	; (8007730 <prvAddNewTaskToReadyList+0xcc>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d109      	bne.n	80076b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800769e:	4b23      	ldr	r3, [pc, #140]	; (800772c <prvAddNewTaskToReadyList+0xc8>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d802      	bhi.n	80076b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076ac:	4a1f      	ldr	r2, [pc, #124]	; (800772c <prvAddNewTaskToReadyList+0xc8>)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076b2:	4b20      	ldr	r3, [pc, #128]	; (8007734 <prvAddNewTaskToReadyList+0xd0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3301      	adds	r3, #1
 80076b8:	4a1e      	ldr	r2, [pc, #120]	; (8007734 <prvAddNewTaskToReadyList+0xd0>)
 80076ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076bc:	4b1d      	ldr	r3, [pc, #116]	; (8007734 <prvAddNewTaskToReadyList+0xd0>)
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c8:	4b1b      	ldr	r3, [pc, #108]	; (8007738 <prvAddNewTaskToReadyList+0xd4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d903      	bls.n	80076d8 <prvAddNewTaskToReadyList+0x74>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	4a18      	ldr	r2, [pc, #96]	; (8007738 <prvAddNewTaskToReadyList+0xd4>)
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076dc:	4613      	mov	r3, r2
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4a15      	ldr	r2, [pc, #84]	; (800773c <prvAddNewTaskToReadyList+0xd8>)
 80076e6:	441a      	add	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3304      	adds	r3, #4
 80076ec:	4619      	mov	r1, r3
 80076ee:	4610      	mov	r0, r2
 80076f0:	f7ff f8ed 	bl	80068ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076f4:	f001 fa66 	bl	8008bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076f8:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <prvAddNewTaskToReadyList+0xcc>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00e      	beq.n	800771e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007700:	4b0a      	ldr	r3, [pc, #40]	; (800772c <prvAddNewTaskToReadyList+0xc8>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770a:	429a      	cmp	r2, r3
 800770c:	d207      	bcs.n	800771e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800770e:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <prvAddNewTaskToReadyList+0xdc>)
 8007710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800771e:	bf00      	nop
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20006170 	.word	0x20006170
 800772c:	20005c9c 	.word	0x20005c9c
 8007730:	2000617c 	.word	0x2000617c
 8007734:	2000618c 	.word	0x2000618c
 8007738:	20006178 	.word	0x20006178
 800773c:	20005ca0 	.word	0x20005ca0
 8007740:	e000ed04 	.word	0xe000ed04

08007744 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800774c:	2300      	movs	r3, #0
 800774e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d019      	beq.n	800778a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007756:	4b14      	ldr	r3, [pc, #80]	; (80077a8 <vTaskDelay+0x64>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00c      	beq.n	8007778 <vTaskDelay+0x34>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	b672      	cpsid	i
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	b662      	cpsie	i
 8007772:	60bb      	str	r3, [r7, #8]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007778:	f000 f884 	bl	8007884 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800777c:	2100      	movs	r1, #0
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fd2c 	bl	80081dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007784:	f000 f88c 	bl	80078a0 <xTaskResumeAll>
 8007788:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d107      	bne.n	80077a0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007790:	4b06      	ldr	r3, [pc, #24]	; (80077ac <vTaskDelay+0x68>)
 8007792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077a0:	bf00      	nop
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	20006198 	.word	0x20006198
 80077ac:	e000ed04 	.word	0xe000ed04

080077b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08a      	sub	sp, #40	; 0x28
 80077b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077be:	463a      	mov	r2, r7
 80077c0:	1d39      	adds	r1, r7, #4
 80077c2:	f107 0308 	add.w	r3, r7, #8
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7ff f820 	bl	800680c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	9202      	str	r2, [sp, #8]
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	2300      	movs	r3, #0
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	2300      	movs	r3, #0
 80077dc:	460a      	mov	r2, r1
 80077de:	4923      	ldr	r1, [pc, #140]	; (800786c <vTaskStartScheduler+0xbc>)
 80077e0:	4823      	ldr	r0, [pc, #140]	; (8007870 <vTaskStartScheduler+0xc0>)
 80077e2:	f7ff fe05 	bl	80073f0 <xTaskCreateStatic>
 80077e6:	4603      	mov	r3, r0
 80077e8:	4a22      	ldr	r2, [pc, #136]	; (8007874 <vTaskStartScheduler+0xc4>)
 80077ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077ec:	4b21      	ldr	r3, [pc, #132]	; (8007874 <vTaskStartScheduler+0xc4>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077f4:	2301      	movs	r3, #1
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	e001      	b.n	80077fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d102      	bne.n	800780a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007804:	f000 fd3e 	bl	8008284 <xTimerCreateTimerTask>
 8007808:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d118      	bne.n	8007842 <vTaskStartScheduler+0x92>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	b672      	cpsid	i
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	b662      	cpsie	i
 8007824:	613b      	str	r3, [r7, #16]
}
 8007826:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007828:	4b13      	ldr	r3, [pc, #76]	; (8007878 <vTaskStartScheduler+0xc8>)
 800782a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800782e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007830:	4b12      	ldr	r3, [pc, #72]	; (800787c <vTaskStartScheduler+0xcc>)
 8007832:	2201      	movs	r2, #1
 8007834:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007836:	4b12      	ldr	r3, [pc, #72]	; (8007880 <vTaskStartScheduler+0xd0>)
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800783c:	f001 f910 	bl	8008a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007840:	e010      	b.n	8007864 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007848:	d10c      	bne.n	8007864 <vTaskStartScheduler+0xb4>
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784e:	b672      	cpsid	i
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	b662      	cpsie	i
 800785e:	60fb      	str	r3, [r7, #12]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <vTaskStartScheduler+0xb2>
}
 8007864:	bf00      	nop
 8007866:	3718      	adds	r7, #24
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	08017764 	.word	0x08017764
 8007870:	08007f0d 	.word	0x08007f0d
 8007874:	20006194 	.word	0x20006194
 8007878:	20006190 	.word	0x20006190
 800787c:	2000617c 	.word	0x2000617c
 8007880:	20006174 	.word	0x20006174

08007884 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007884:	b480      	push	{r7}
 8007886:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007888:	4b04      	ldr	r3, [pc, #16]	; (800789c <vTaskSuspendAll+0x18>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3301      	adds	r3, #1
 800788e:	4a03      	ldr	r2, [pc, #12]	; (800789c <vTaskSuspendAll+0x18>)
 8007890:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007892:	bf00      	nop
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	20006198 	.word	0x20006198

080078a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078a6:	2300      	movs	r3, #0
 80078a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078aa:	2300      	movs	r3, #0
 80078ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078ae:	4b43      	ldr	r3, [pc, #268]	; (80079bc <xTaskResumeAll+0x11c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10c      	bne.n	80078d0 <xTaskResumeAll+0x30>
	__asm volatile
 80078b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ba:	b672      	cpsid	i
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	b662      	cpsie	i
 80078ca:	603b      	str	r3, [r7, #0]
}
 80078cc:	bf00      	nop
 80078ce:	e7fe      	b.n	80078ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078d0:	f001 f944 	bl	8008b5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078d4:	4b39      	ldr	r3, [pc, #228]	; (80079bc <xTaskResumeAll+0x11c>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3b01      	subs	r3, #1
 80078da:	4a38      	ldr	r2, [pc, #224]	; (80079bc <xTaskResumeAll+0x11c>)
 80078dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078de:	4b37      	ldr	r3, [pc, #220]	; (80079bc <xTaskResumeAll+0x11c>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d162      	bne.n	80079ac <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078e6:	4b36      	ldr	r3, [pc, #216]	; (80079c0 <xTaskResumeAll+0x120>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d05e      	beq.n	80079ac <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078ee:	e02f      	b.n	8007950 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078f0:	4b34      	ldr	r3, [pc, #208]	; (80079c4 <xTaskResumeAll+0x124>)
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	3318      	adds	r3, #24
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7ff f843 	bl	8006988 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3304      	adds	r3, #4
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff f83e 	bl	8006988 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007910:	4b2d      	ldr	r3, [pc, #180]	; (80079c8 <xTaskResumeAll+0x128>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	429a      	cmp	r2, r3
 8007916:	d903      	bls.n	8007920 <xTaskResumeAll+0x80>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	4a2a      	ldr	r2, [pc, #168]	; (80079c8 <xTaskResumeAll+0x128>)
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007924:	4613      	mov	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4a27      	ldr	r2, [pc, #156]	; (80079cc <xTaskResumeAll+0x12c>)
 800792e:	441a      	add	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3304      	adds	r3, #4
 8007934:	4619      	mov	r1, r3
 8007936:	4610      	mov	r0, r2
 8007938:	f7fe ffc9 	bl	80068ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007940:	4b23      	ldr	r3, [pc, #140]	; (80079d0 <xTaskResumeAll+0x130>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007946:	429a      	cmp	r2, r3
 8007948:	d302      	bcc.n	8007950 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800794a:	4b22      	ldr	r3, [pc, #136]	; (80079d4 <xTaskResumeAll+0x134>)
 800794c:	2201      	movs	r2, #1
 800794e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007950:	4b1c      	ldr	r3, [pc, #112]	; (80079c4 <xTaskResumeAll+0x124>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1cb      	bne.n	80078f0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800795e:	f000 fb8d 	bl	800807c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007962:	4b1d      	ldr	r3, [pc, #116]	; (80079d8 <xTaskResumeAll+0x138>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d010      	beq.n	8007990 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800796e:	f000 f847 	bl	8007a00 <xTaskIncrementTick>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8007978:	4b16      	ldr	r3, [pc, #88]	; (80079d4 <xTaskResumeAll+0x134>)
 800797a:	2201      	movs	r2, #1
 800797c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3b01      	subs	r3, #1
 8007982:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1f1      	bne.n	800796e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800798a:	4b13      	ldr	r3, [pc, #76]	; (80079d8 <xTaskResumeAll+0x138>)
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007990:	4b10      	ldr	r3, [pc, #64]	; (80079d4 <xTaskResumeAll+0x134>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007998:	2301      	movs	r3, #1
 800799a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800799c:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <xTaskResumeAll+0x13c>)
 800799e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079ac:	f001 f90a 	bl	8008bc4 <vPortExitCritical>

	return xAlreadyYielded;
 80079b0:	68bb      	ldr	r3, [r7, #8]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20006198 	.word	0x20006198
 80079c0:	20006170 	.word	0x20006170
 80079c4:	20006130 	.word	0x20006130
 80079c8:	20006178 	.word	0x20006178
 80079cc:	20005ca0 	.word	0x20005ca0
 80079d0:	20005c9c 	.word	0x20005c9c
 80079d4:	20006184 	.word	0x20006184
 80079d8:	20006180 	.word	0x20006180
 80079dc:	e000ed04 	.word	0xe000ed04

080079e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079e6:	4b05      	ldr	r3, [pc, #20]	; (80079fc <xTaskGetTickCount+0x1c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079ec:	687b      	ldr	r3, [r7, #4]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	20006174 	.word	0x20006174

08007a00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a06:	2300      	movs	r3, #0
 8007a08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a0a:	4b50      	ldr	r3, [pc, #320]	; (8007b4c <xTaskIncrementTick+0x14c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f040 808b 	bne.w	8007b2a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a14:	4b4e      	ldr	r3, [pc, #312]	; (8007b50 <xTaskIncrementTick+0x150>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a1c:	4a4c      	ldr	r2, [pc, #304]	; (8007b50 <xTaskIncrementTick+0x150>)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d122      	bne.n	8007a6e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a28:	4b4a      	ldr	r3, [pc, #296]	; (8007b54 <xTaskIncrementTick+0x154>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00c      	beq.n	8007a4c <xTaskIncrementTick+0x4c>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	b672      	cpsid	i
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	b662      	cpsie	i
 8007a46:	603b      	str	r3, [r7, #0]
}
 8007a48:	bf00      	nop
 8007a4a:	e7fe      	b.n	8007a4a <xTaskIncrementTick+0x4a>
 8007a4c:	4b41      	ldr	r3, [pc, #260]	; (8007b54 <xTaskIncrementTick+0x154>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	4b41      	ldr	r3, [pc, #260]	; (8007b58 <xTaskIncrementTick+0x158>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a3f      	ldr	r2, [pc, #252]	; (8007b54 <xTaskIncrementTick+0x154>)
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	4a3f      	ldr	r2, [pc, #252]	; (8007b58 <xTaskIncrementTick+0x158>)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6013      	str	r3, [r2, #0]
 8007a60:	4b3e      	ldr	r3, [pc, #248]	; (8007b5c <xTaskIncrementTick+0x15c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	4a3d      	ldr	r2, [pc, #244]	; (8007b5c <xTaskIncrementTick+0x15c>)
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	f000 fb07 	bl	800807c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a6e:	4b3c      	ldr	r3, [pc, #240]	; (8007b60 <xTaskIncrementTick+0x160>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d349      	bcc.n	8007b0c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a78:	4b36      	ldr	r3, [pc, #216]	; (8007b54 <xTaskIncrementTick+0x154>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d104      	bne.n	8007a8c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a82:	4b37      	ldr	r3, [pc, #220]	; (8007b60 <xTaskIncrementTick+0x160>)
 8007a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a88:	601a      	str	r2, [r3, #0]
					break;
 8007a8a:	e03f      	b.n	8007b0c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a8c:	4b31      	ldr	r3, [pc, #196]	; (8007b54 <xTaskIncrementTick+0x154>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d203      	bcs.n	8007aac <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007aa4:	4a2e      	ldr	r2, [pc, #184]	; (8007b60 <xTaskIncrementTick+0x160>)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007aaa:	e02f      	b.n	8007b0c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fe ff69 	bl	8006988 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d004      	beq.n	8007ac8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	3318      	adds	r3, #24
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fe ff60 	bl	8006988 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007acc:	4b25      	ldr	r3, [pc, #148]	; (8007b64 <xTaskIncrementTick+0x164>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d903      	bls.n	8007adc <xTaskIncrementTick+0xdc>
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	4a22      	ldr	r2, [pc, #136]	; (8007b64 <xTaskIncrementTick+0x164>)
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4a1f      	ldr	r2, [pc, #124]	; (8007b68 <xTaskIncrementTick+0x168>)
 8007aea:	441a      	add	r2, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	3304      	adds	r3, #4
 8007af0:	4619      	mov	r1, r3
 8007af2:	4610      	mov	r0, r2
 8007af4:	f7fe feeb 	bl	80068ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afc:	4b1b      	ldr	r3, [pc, #108]	; (8007b6c <xTaskIncrementTick+0x16c>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d3b8      	bcc.n	8007a78 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007b06:	2301      	movs	r3, #1
 8007b08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b0a:	e7b5      	b.n	8007a78 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b0c:	4b17      	ldr	r3, [pc, #92]	; (8007b6c <xTaskIncrementTick+0x16c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b12:	4915      	ldr	r1, [pc, #84]	; (8007b68 <xTaskIncrementTick+0x168>)
 8007b14:	4613      	mov	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	440b      	add	r3, r1
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d907      	bls.n	8007b34 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8007b24:	2301      	movs	r3, #1
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	e004      	b.n	8007b34 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007b2a:	4b11      	ldr	r3, [pc, #68]	; (8007b70 <xTaskIncrementTick+0x170>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	4a0f      	ldr	r2, [pc, #60]	; (8007b70 <xTaskIncrementTick+0x170>)
 8007b32:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007b34:	4b0f      	ldr	r3, [pc, #60]	; (8007b74 <xTaskIncrementTick+0x174>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007b40:	697b      	ldr	r3, [r7, #20]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20006198 	.word	0x20006198
 8007b50:	20006174 	.word	0x20006174
 8007b54:	20006128 	.word	0x20006128
 8007b58:	2000612c 	.word	0x2000612c
 8007b5c:	20006188 	.word	0x20006188
 8007b60:	20006190 	.word	0x20006190
 8007b64:	20006178 	.word	0x20006178
 8007b68:	20005ca0 	.word	0x20005ca0
 8007b6c:	20005c9c 	.word	0x20005c9c
 8007b70:	20006180 	.word	0x20006180
 8007b74:	20006184 	.word	0x20006184

08007b78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b7e:	4b29      	ldr	r3, [pc, #164]	; (8007c24 <vTaskSwitchContext+0xac>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b86:	4b28      	ldr	r3, [pc, #160]	; (8007c28 <vTaskSwitchContext+0xb0>)
 8007b88:	2201      	movs	r2, #1
 8007b8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b8c:	e043      	b.n	8007c16 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8007b8e:	4b26      	ldr	r3, [pc, #152]	; (8007c28 <vTaskSwitchContext+0xb0>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b94:	4b25      	ldr	r3, [pc, #148]	; (8007c2c <vTaskSwitchContext+0xb4>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	60fb      	str	r3, [r7, #12]
 8007b9a:	e012      	b.n	8007bc2 <vTaskSwitchContext+0x4a>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10c      	bne.n	8007bbc <vTaskSwitchContext+0x44>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	b672      	cpsid	i
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	b662      	cpsie	i
 8007bb6:	607b      	str	r3, [r7, #4]
}
 8007bb8:	bf00      	nop
 8007bba:	e7fe      	b.n	8007bba <vTaskSwitchContext+0x42>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3b01      	subs	r3, #1
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	491b      	ldr	r1, [pc, #108]	; (8007c30 <vTaskSwitchContext+0xb8>)
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	440b      	add	r3, r1
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0e2      	beq.n	8007b9c <vTaskSwitchContext+0x24>
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4a13      	ldr	r2, [pc, #76]	; (8007c30 <vTaskSwitchContext+0xb8>)
 8007be2:	4413      	add	r3, r2
 8007be4:	60bb      	str	r3, [r7, #8]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	605a      	str	r2, [r3, #4]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d104      	bne.n	8007c06 <vTaskSwitchContext+0x8e>
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	605a      	str	r2, [r3, #4]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	4a09      	ldr	r2, [pc, #36]	; (8007c34 <vTaskSwitchContext+0xbc>)
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	4a06      	ldr	r2, [pc, #24]	; (8007c2c <vTaskSwitchContext+0xb4>)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6013      	str	r3, [r2, #0]
}
 8007c16:	bf00      	nop
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	20006198 	.word	0x20006198
 8007c28:	20006184 	.word	0x20006184
 8007c2c:	20006178 	.word	0x20006178
 8007c30:	20005ca0 	.word	0x20005ca0
 8007c34:	20005c9c 	.word	0x20005c9c

08007c38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10c      	bne.n	8007c62 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4c:	b672      	cpsid	i
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	b662      	cpsie	i
 8007c5c:	60fb      	str	r3, [r7, #12]
}
 8007c5e:	bf00      	nop
 8007c60:	e7fe      	b.n	8007c60 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c62:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <vTaskPlaceOnEventList+0x48>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3318      	adds	r3, #24
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7fe fe53 	bl	8006916 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c70:	2101      	movs	r1, #1
 8007c72:	6838      	ldr	r0, [r7, #0]
 8007c74:	f000 fab2 	bl	80081dc <prvAddCurrentTaskToDelayedList>
}
 8007c78:	bf00      	nop
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20005c9c 	.word	0x20005c9c

08007c84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10c      	bne.n	8007cb0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	b672      	cpsid	i
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	b662      	cpsie	i
 8007caa:	617b      	str	r3, [r7, #20]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cb0:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <vTaskPlaceOnEventListRestricted+0x58>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3318      	adds	r3, #24
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f7fe fe08 	bl	80068ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	68b8      	ldr	r0, [r7, #8]
 8007cce:	f000 fa85 	bl	80081dc <prvAddCurrentTaskToDelayedList>
	}
 8007cd2:	bf00      	nop
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20005c9c 	.word	0x20005c9c

08007ce0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10c      	bne.n	8007d10 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	b672      	cpsid	i
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	b662      	cpsie	i
 8007d0a:	60fb      	str	r3, [r7, #12]
}
 8007d0c:	bf00      	nop
 8007d0e:	e7fe      	b.n	8007d0e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	3318      	adds	r3, #24
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fe fe37 	bl	8006988 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d1a:	4b1e      	ldr	r3, [pc, #120]	; (8007d94 <xTaskRemoveFromEventList+0xb4>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d11d      	bne.n	8007d5e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	3304      	adds	r3, #4
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fe2e 	bl	8006988 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d30:	4b19      	ldr	r3, [pc, #100]	; (8007d98 <xTaskRemoveFromEventList+0xb8>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d903      	bls.n	8007d40 <xTaskRemoveFromEventList+0x60>
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3c:	4a16      	ldr	r2, [pc, #88]	; (8007d98 <xTaskRemoveFromEventList+0xb8>)
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d44:	4613      	mov	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4a13      	ldr	r2, [pc, #76]	; (8007d9c <xTaskRemoveFromEventList+0xbc>)
 8007d4e:	441a      	add	r2, r3
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4619      	mov	r1, r3
 8007d56:	4610      	mov	r0, r2
 8007d58:	f7fe fdb9 	bl	80068ce <vListInsertEnd>
 8007d5c:	e005      	b.n	8007d6a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	3318      	adds	r3, #24
 8007d62:	4619      	mov	r1, r3
 8007d64:	480e      	ldr	r0, [pc, #56]	; (8007da0 <xTaskRemoveFromEventList+0xc0>)
 8007d66:	f7fe fdb2 	bl	80068ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6e:	4b0d      	ldr	r3, [pc, #52]	; (8007da4 <xTaskRemoveFromEventList+0xc4>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d905      	bls.n	8007d84 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d7c:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <xTaskRemoveFromEventList+0xc8>)
 8007d7e:	2201      	movs	r2, #1
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	e001      	b.n	8007d88 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007d84:	2300      	movs	r3, #0
 8007d86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d88:	697b      	ldr	r3, [r7, #20]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3718      	adds	r7, #24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	20006198 	.word	0x20006198
 8007d98:	20006178 	.word	0x20006178
 8007d9c:	20005ca0 	.word	0x20005ca0
 8007da0:	20006130 	.word	0x20006130
 8007da4:	20005c9c 	.word	0x20005c9c
 8007da8:	20006184 	.word	0x20006184

08007dac <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10c      	bne.n	8007dd4 <vTaskSetTimeOutState+0x28>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	b672      	cpsid	i
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	b662      	cpsie	i
 8007dce:	60fb      	str	r3, [r7, #12]
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8007dd4:	f000 fec2 	bl	8008b5c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007dd8:	4b06      	ldr	r3, [pc, #24]	; (8007df4 <vTaskSetTimeOutState+0x48>)
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007de0:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <vTaskSetTimeOutState+0x4c>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007de8:	f000 feec 	bl	8008bc4 <vPortExitCritical>
}
 8007dec:	bf00      	nop
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	20006188 	.word	0x20006188
 8007df8:	20006174 	.word	0x20006174

08007dfc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e04:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <vTaskInternalSetTimeOutState+0x24>)
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e0c:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <vTaskInternalSetTimeOutState+0x28>)
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	605a      	str	r2, [r3, #4]
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	20006188 	.word	0x20006188
 8007e24:	20006174 	.word	0x20006174

08007e28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b088      	sub	sp, #32
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10c      	bne.n	8007e52 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3c:	b672      	cpsid	i
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	b662      	cpsie	i
 8007e4c:	613b      	str	r3, [r7, #16]
}
 8007e4e:	bf00      	nop
 8007e50:	e7fe      	b.n	8007e50 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10c      	bne.n	8007e72 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5c:	b672      	cpsid	i
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	b662      	cpsie	i
 8007e6c:	60fb      	str	r3, [r7, #12]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007e72:	f000 fe73 	bl	8008b5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e76:	4b1d      	ldr	r3, [pc, #116]	; (8007eec <xTaskCheckForTimeOut+0xc4>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	69ba      	ldr	r2, [r7, #24]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e8e:	d102      	bne.n	8007e96 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e90:	2300      	movs	r3, #0
 8007e92:	61fb      	str	r3, [r7, #28]
 8007e94:	e023      	b.n	8007ede <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	4b15      	ldr	r3, [pc, #84]	; (8007ef0 <xTaskCheckForTimeOut+0xc8>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d007      	beq.n	8007eb2 <xTaskCheckForTimeOut+0x8a>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d302      	bcc.n	8007eb2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007eac:	2301      	movs	r3, #1
 8007eae:	61fb      	str	r3, [r7, #28]
 8007eb0:	e015      	b.n	8007ede <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d20b      	bcs.n	8007ed4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	1ad2      	subs	r2, r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff ff97 	bl	8007dfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	61fb      	str	r3, [r7, #28]
 8007ed2:	e004      	b.n	8007ede <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007eda:	2301      	movs	r3, #1
 8007edc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ede:	f000 fe71 	bl	8008bc4 <vPortExitCritical>

	return xReturn;
 8007ee2:	69fb      	ldr	r3, [r7, #28]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3720      	adds	r7, #32
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	20006174 	.word	0x20006174
 8007ef0:	20006188 	.word	0x20006188

08007ef4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ef8:	4b03      	ldr	r3, [pc, #12]	; (8007f08 <vTaskMissedYield+0x14>)
 8007efa:	2201      	movs	r2, #1
 8007efc:	601a      	str	r2, [r3, #0]
}
 8007efe:	bf00      	nop
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	20006184 	.word	0x20006184

08007f0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f14:	f000 f852 	bl	8007fbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f18:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <prvIdleTask+0x28>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d9f9      	bls.n	8007f14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f20:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <prvIdleTask+0x2c>)
 8007f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f30:	e7f0      	b.n	8007f14 <prvIdleTask+0x8>
 8007f32:	bf00      	nop
 8007f34:	20005ca0 	.word	0x20005ca0
 8007f38:	e000ed04 	.word	0xe000ed04

08007f3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f42:	2300      	movs	r3, #0
 8007f44:	607b      	str	r3, [r7, #4]
 8007f46:	e00c      	b.n	8007f62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	4a12      	ldr	r2, [pc, #72]	; (8007f9c <prvInitialiseTaskLists+0x60>)
 8007f54:	4413      	add	r3, r2
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe fc8c 	bl	8006874 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	607b      	str	r3, [r7, #4]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b37      	cmp	r3, #55	; 0x37
 8007f66:	d9ef      	bls.n	8007f48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f68:	480d      	ldr	r0, [pc, #52]	; (8007fa0 <prvInitialiseTaskLists+0x64>)
 8007f6a:	f7fe fc83 	bl	8006874 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f6e:	480d      	ldr	r0, [pc, #52]	; (8007fa4 <prvInitialiseTaskLists+0x68>)
 8007f70:	f7fe fc80 	bl	8006874 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f74:	480c      	ldr	r0, [pc, #48]	; (8007fa8 <prvInitialiseTaskLists+0x6c>)
 8007f76:	f7fe fc7d 	bl	8006874 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f7a:	480c      	ldr	r0, [pc, #48]	; (8007fac <prvInitialiseTaskLists+0x70>)
 8007f7c:	f7fe fc7a 	bl	8006874 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f80:	480b      	ldr	r0, [pc, #44]	; (8007fb0 <prvInitialiseTaskLists+0x74>)
 8007f82:	f7fe fc77 	bl	8006874 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f86:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <prvInitialiseTaskLists+0x78>)
 8007f88:	4a05      	ldr	r2, [pc, #20]	; (8007fa0 <prvInitialiseTaskLists+0x64>)
 8007f8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <prvInitialiseTaskLists+0x7c>)
 8007f8e:	4a05      	ldr	r2, [pc, #20]	; (8007fa4 <prvInitialiseTaskLists+0x68>)
 8007f90:	601a      	str	r2, [r3, #0]
}
 8007f92:	bf00      	nop
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20005ca0 	.word	0x20005ca0
 8007fa0:	20006100 	.word	0x20006100
 8007fa4:	20006114 	.word	0x20006114
 8007fa8:	20006130 	.word	0x20006130
 8007fac:	20006144 	.word	0x20006144
 8007fb0:	2000615c 	.word	0x2000615c
 8007fb4:	20006128 	.word	0x20006128
 8007fb8:	2000612c 	.word	0x2000612c

08007fbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fc2:	e019      	b.n	8007ff8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fc4:	f000 fdca 	bl	8008b5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc8:	4b10      	ldr	r3, [pc, #64]	; (800800c <prvCheckTasksWaitingTermination+0x50>)
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fe fcd7 	bl	8006988 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fda:	4b0d      	ldr	r3, [pc, #52]	; (8008010 <prvCheckTasksWaitingTermination+0x54>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	4a0b      	ldr	r2, [pc, #44]	; (8008010 <prvCheckTasksWaitingTermination+0x54>)
 8007fe2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fe4:	4b0b      	ldr	r3, [pc, #44]	; (8008014 <prvCheckTasksWaitingTermination+0x58>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	4a0a      	ldr	r2, [pc, #40]	; (8008014 <prvCheckTasksWaitingTermination+0x58>)
 8007fec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fee:	f000 fde9 	bl	8008bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f810 	bl	8008018 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ff8:	4b06      	ldr	r3, [pc, #24]	; (8008014 <prvCheckTasksWaitingTermination+0x58>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e1      	bne.n	8007fc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008000:	bf00      	nop
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	20006144 	.word	0x20006144
 8008010:	20006170 	.word	0x20006170
 8008014:	20006158 	.word	0x20006158

08008018 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008026:	2b00      	cmp	r3, #0
 8008028:	d108      	bne.n	800803c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802e:	4618      	mov	r0, r3
 8008030:	f000 ff8a 	bl	8008f48 <vPortFree>
				vPortFree( pxTCB );
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 ff87 	bl	8008f48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800803a:	e01a      	b.n	8008072 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008042:	2b01      	cmp	r3, #1
 8008044:	d103      	bne.n	800804e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 ff7e 	bl	8008f48 <vPortFree>
	}
 800804c:	e011      	b.n	8008072 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008054:	2b02      	cmp	r3, #2
 8008056:	d00c      	beq.n	8008072 <prvDeleteTCB+0x5a>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	b672      	cpsid	i
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	b662      	cpsie	i
 800806c:	60fb      	str	r3, [r7, #12]
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <prvDeleteTCB+0x58>
	}
 8008072:	bf00      	nop
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
	...

0800807c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008082:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <prvResetNextTaskUnblockTime+0x38>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d104      	bne.n	8008096 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800808c:	4b0a      	ldr	r3, [pc, #40]	; (80080b8 <prvResetNextTaskUnblockTime+0x3c>)
 800808e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008092:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008094:	e008      	b.n	80080a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008096:	4b07      	ldr	r3, [pc, #28]	; (80080b4 <prvResetNextTaskUnblockTime+0x38>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	4a04      	ldr	r2, [pc, #16]	; (80080b8 <prvResetNextTaskUnblockTime+0x3c>)
 80080a6:	6013      	str	r3, [r2, #0]
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	20006128 	.word	0x20006128
 80080b8:	20006190 	.word	0x20006190

080080bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080c2:	4b0b      	ldr	r3, [pc, #44]	; (80080f0 <xTaskGetSchedulerState+0x34>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d102      	bne.n	80080d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080ca:	2301      	movs	r3, #1
 80080cc:	607b      	str	r3, [r7, #4]
 80080ce:	e008      	b.n	80080e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080d0:	4b08      	ldr	r3, [pc, #32]	; (80080f4 <xTaskGetSchedulerState+0x38>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d102      	bne.n	80080de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080d8:	2302      	movs	r3, #2
 80080da:	607b      	str	r3, [r7, #4]
 80080dc:	e001      	b.n	80080e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080de:	2300      	movs	r3, #0
 80080e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080e2:	687b      	ldr	r3, [r7, #4]
	}
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	2000617c 	.word	0x2000617c
 80080f4:	20006198 	.word	0x20006198

080080f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d05a      	beq.n	80081c4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800810e:	4b30      	ldr	r3, [pc, #192]	; (80081d0 <xTaskPriorityDisinherit+0xd8>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	429a      	cmp	r2, r3
 8008116:	d00c      	beq.n	8008132 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811c:	b672      	cpsid	i
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	b662      	cpsie	i
 800812c:	60fb      	str	r3, [r7, #12]
}
 800812e:	bf00      	nop
 8008130:	e7fe      	b.n	8008130 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10c      	bne.n	8008154 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	b672      	cpsid	i
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	b662      	cpsie	i
 800814e:	60bb      	str	r3, [r7, #8]
}
 8008150:	bf00      	nop
 8008152:	e7fe      	b.n	8008152 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008158:	1e5a      	subs	r2, r3, #1
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008166:	429a      	cmp	r2, r3
 8008168:	d02c      	beq.n	80081c4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800816e:	2b00      	cmp	r3, #0
 8008170:	d128      	bne.n	80081c4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	3304      	adds	r3, #4
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fc06 	bl	8006988 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008188:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008194:	4b0f      	ldr	r3, [pc, #60]	; (80081d4 <xTaskPriorityDisinherit+0xdc>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	429a      	cmp	r2, r3
 800819a:	d903      	bls.n	80081a4 <xTaskPriorityDisinherit+0xac>
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a0:	4a0c      	ldr	r2, [pc, #48]	; (80081d4 <xTaskPriorityDisinherit+0xdc>)
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a8:	4613      	mov	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	4a09      	ldr	r2, [pc, #36]	; (80081d8 <xTaskPriorityDisinherit+0xe0>)
 80081b2:	441a      	add	r2, r3
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	3304      	adds	r3, #4
 80081b8:	4619      	mov	r1, r3
 80081ba:	4610      	mov	r0, r2
 80081bc:	f7fe fb87 	bl	80068ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081c0:	2301      	movs	r3, #1
 80081c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081c4:	697b      	ldr	r3, [r7, #20]
	}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20005c9c 	.word	0x20005c9c
 80081d4:	20006178 	.word	0x20006178
 80081d8:	20005ca0 	.word	0x20005ca0

080081dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081e6:	4b21      	ldr	r3, [pc, #132]	; (800826c <prvAddCurrentTaskToDelayedList+0x90>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081ec:	4b20      	ldr	r3, [pc, #128]	; (8008270 <prvAddCurrentTaskToDelayedList+0x94>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3304      	adds	r3, #4
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fe fbc8 	bl	8006988 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081fe:	d10a      	bne.n	8008216 <prvAddCurrentTaskToDelayedList+0x3a>
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d007      	beq.n	8008216 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008206:	4b1a      	ldr	r3, [pc, #104]	; (8008270 <prvAddCurrentTaskToDelayedList+0x94>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3304      	adds	r3, #4
 800820c:	4619      	mov	r1, r3
 800820e:	4819      	ldr	r0, [pc, #100]	; (8008274 <prvAddCurrentTaskToDelayedList+0x98>)
 8008210:	f7fe fb5d 	bl	80068ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008214:	e026      	b.n	8008264 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4413      	add	r3, r2
 800821c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800821e:	4b14      	ldr	r3, [pc, #80]	; (8008270 <prvAddCurrentTaskToDelayedList+0x94>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	429a      	cmp	r2, r3
 800822c:	d209      	bcs.n	8008242 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800822e:	4b12      	ldr	r3, [pc, #72]	; (8008278 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	4b0f      	ldr	r3, [pc, #60]	; (8008270 <prvAddCurrentTaskToDelayedList+0x94>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3304      	adds	r3, #4
 8008238:	4619      	mov	r1, r3
 800823a:	4610      	mov	r0, r2
 800823c:	f7fe fb6b 	bl	8006916 <vListInsert>
}
 8008240:	e010      	b.n	8008264 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008242:	4b0e      	ldr	r3, [pc, #56]	; (800827c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	4b0a      	ldr	r3, [pc, #40]	; (8008270 <prvAddCurrentTaskToDelayedList+0x94>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3304      	adds	r3, #4
 800824c:	4619      	mov	r1, r3
 800824e:	4610      	mov	r0, r2
 8008250:	f7fe fb61 	bl	8006916 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008254:	4b0a      	ldr	r3, [pc, #40]	; (8008280 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	429a      	cmp	r2, r3
 800825c:	d202      	bcs.n	8008264 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800825e:	4a08      	ldr	r2, [pc, #32]	; (8008280 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	6013      	str	r3, [r2, #0]
}
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	20006174 	.word	0x20006174
 8008270:	20005c9c 	.word	0x20005c9c
 8008274:	2000615c 	.word	0x2000615c
 8008278:	2000612c 	.word	0x2000612c
 800827c:	20006128 	.word	0x20006128
 8008280:	20006190 	.word	0x20006190

08008284 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b08a      	sub	sp, #40	; 0x28
 8008288:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800828a:	2300      	movs	r3, #0
 800828c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800828e:	f000 fb15 	bl	80088bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008292:	4b1d      	ldr	r3, [pc, #116]	; (8008308 <xTimerCreateTimerTask+0x84>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d021      	beq.n	80082de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082a2:	1d3a      	adds	r2, r7, #4
 80082a4:	f107 0108 	add.w	r1, r7, #8
 80082a8:	f107 030c 	add.w	r3, r7, #12
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fe fac7 	bl	8006840 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	9202      	str	r2, [sp, #8]
 80082ba:	9301      	str	r3, [sp, #4]
 80082bc:	2302      	movs	r3, #2
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	2300      	movs	r3, #0
 80082c2:	460a      	mov	r2, r1
 80082c4:	4911      	ldr	r1, [pc, #68]	; (800830c <xTimerCreateTimerTask+0x88>)
 80082c6:	4812      	ldr	r0, [pc, #72]	; (8008310 <xTimerCreateTimerTask+0x8c>)
 80082c8:	f7ff f892 	bl	80073f0 <xTaskCreateStatic>
 80082cc:	4603      	mov	r3, r0
 80082ce:	4a11      	ldr	r2, [pc, #68]	; (8008314 <xTimerCreateTimerTask+0x90>)
 80082d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082d2:	4b10      	ldr	r3, [pc, #64]	; (8008314 <xTimerCreateTimerTask+0x90>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082da:	2301      	movs	r3, #1
 80082dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10c      	bne.n	80082fe <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	b672      	cpsid	i
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	b662      	cpsie	i
 80082f8:	613b      	str	r3, [r7, #16]
}
 80082fa:	bf00      	nop
 80082fc:	e7fe      	b.n	80082fc <xTimerCreateTimerTask+0x78>
	return xReturn;
 80082fe:	697b      	ldr	r3, [r7, #20]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	200061cc 	.word	0x200061cc
 800830c:	0801776c 	.word	0x0801776c
 8008310:	08008455 	.word	0x08008455
 8008314:	200061d0 	.word	0x200061d0

08008318 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	; 0x28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008326:	2300      	movs	r3, #0
 8008328:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10c      	bne.n	800834a <xTimerGenericCommand+0x32>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	b672      	cpsid	i
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	b662      	cpsie	i
 8008344:	623b      	str	r3, [r7, #32]
}
 8008346:	bf00      	nop
 8008348:	e7fe      	b.n	8008348 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800834a:	4b1a      	ldr	r3, [pc, #104]	; (80083b4 <xTimerGenericCommand+0x9c>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d02a      	beq.n	80083a8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b05      	cmp	r3, #5
 8008362:	dc18      	bgt.n	8008396 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008364:	f7ff feaa 	bl	80080bc <xTaskGetSchedulerState>
 8008368:	4603      	mov	r3, r0
 800836a:	2b02      	cmp	r3, #2
 800836c:	d109      	bne.n	8008382 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800836e:	4b11      	ldr	r3, [pc, #68]	; (80083b4 <xTimerGenericCommand+0x9c>)
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	f107 0110 	add.w	r1, r7, #16
 8008376:	2300      	movs	r3, #0
 8008378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800837a:	f7fe fc3f 	bl	8006bfc <xQueueGenericSend>
 800837e:	6278      	str	r0, [r7, #36]	; 0x24
 8008380:	e012      	b.n	80083a8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008382:	4b0c      	ldr	r3, [pc, #48]	; (80083b4 <xTimerGenericCommand+0x9c>)
 8008384:	6818      	ldr	r0, [r3, #0]
 8008386:	f107 0110 	add.w	r1, r7, #16
 800838a:	2300      	movs	r3, #0
 800838c:	2200      	movs	r2, #0
 800838e:	f7fe fc35 	bl	8006bfc <xQueueGenericSend>
 8008392:	6278      	str	r0, [r7, #36]	; 0x24
 8008394:	e008      	b.n	80083a8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008396:	4b07      	ldr	r3, [pc, #28]	; (80083b4 <xTimerGenericCommand+0x9c>)
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	f107 0110 	add.w	r1, r7, #16
 800839e:	2300      	movs	r3, #0
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	f7fe fd31 	bl	8006e08 <xQueueGenericSendFromISR>
 80083a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3728      	adds	r7, #40	; 0x28
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	200061cc 	.word	0x200061cc

080083b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af02      	add	r7, sp, #8
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083c2:	4b23      	ldr	r3, [pc, #140]	; (8008450 <prvProcessExpiredTimer+0x98>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	3304      	adds	r3, #4
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fe fad9 	bl	8006988 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083dc:	f003 0304 	and.w	r3, r3, #4
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d024      	beq.n	800842e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	699a      	ldr	r2, [r3, #24]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	18d1      	adds	r1, r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	6978      	ldr	r0, [r7, #20]
 80083f2:	f000 f8d3 	bl	800859c <prvInsertTimerInActiveList>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d021      	beq.n	8008440 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083fc:	2300      	movs	r3, #0
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	2300      	movs	r3, #0
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	2100      	movs	r1, #0
 8008406:	6978      	ldr	r0, [r7, #20]
 8008408:	f7ff ff86 	bl	8008318 <xTimerGenericCommand>
 800840c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d115      	bne.n	8008440 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008418:	b672      	cpsid	i
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	b662      	cpsie	i
 8008428:	60fb      	str	r3, [r7, #12]
}
 800842a:	bf00      	nop
 800842c:	e7fe      	b.n	800842c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008434:	f023 0301 	bic.w	r3, r3, #1
 8008438:	b2da      	uxtb	r2, r3
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	6978      	ldr	r0, [r7, #20]
 8008446:	4798      	blx	r3
}
 8008448:	bf00      	nop
 800844a:	3718      	adds	r7, #24
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	200061c4 	.word	0x200061c4

08008454 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800845c:	f107 0308 	add.w	r3, r7, #8
 8008460:	4618      	mov	r0, r3
 8008462:	f000 f857 	bl	8008514 <prvGetNextExpireTime>
 8008466:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	4619      	mov	r1, r3
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 f803 	bl	8008478 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008472:	f000 f8d5 	bl	8008620 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008476:	e7f1      	b.n	800845c <prvTimerTask+0x8>

08008478 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008482:	f7ff f9ff 	bl	8007884 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008486:	f107 0308 	add.w	r3, r7, #8
 800848a:	4618      	mov	r0, r3
 800848c:	f000 f866 	bl	800855c <prvSampleTimeNow>
 8008490:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d130      	bne.n	80084fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10a      	bne.n	80084b4 <prvProcessTimerOrBlockTask+0x3c>
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d806      	bhi.n	80084b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084a6:	f7ff f9fb 	bl	80078a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084aa:	68f9      	ldr	r1, [r7, #12]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7ff ff83 	bl	80083b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084b2:	e024      	b.n	80084fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d008      	beq.n	80084cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084ba:	4b13      	ldr	r3, [pc, #76]	; (8008508 <prvProcessTimerOrBlockTask+0x90>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <prvProcessTimerOrBlockTask+0x50>
 80084c4:	2301      	movs	r3, #1
 80084c6:	e000      	b.n	80084ca <prvProcessTimerOrBlockTask+0x52>
 80084c8:	2300      	movs	r3, #0
 80084ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084cc:	4b0f      	ldr	r3, [pc, #60]	; (800850c <prvProcessTimerOrBlockTask+0x94>)
 80084ce:	6818      	ldr	r0, [r3, #0]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	4619      	mov	r1, r3
 80084da:	f7fe ff55 	bl	8007388 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80084de:	f7ff f9df 	bl	80078a0 <xTaskResumeAll>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10a      	bne.n	80084fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084e8:	4b09      	ldr	r3, [pc, #36]	; (8008510 <prvProcessTimerOrBlockTask+0x98>)
 80084ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	f3bf 8f6f 	isb	sy
}
 80084f8:	e001      	b.n	80084fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084fa:	f7ff f9d1 	bl	80078a0 <xTaskResumeAll>
}
 80084fe:	bf00      	nop
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	200061c8 	.word	0x200061c8
 800850c:	200061cc 	.word	0x200061cc
 8008510:	e000ed04 	.word	0xe000ed04

08008514 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800851c:	4b0e      	ldr	r3, [pc, #56]	; (8008558 <prvGetNextExpireTime+0x44>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <prvGetNextExpireTime+0x16>
 8008526:	2201      	movs	r2, #1
 8008528:	e000      	b.n	800852c <prvGetNextExpireTime+0x18>
 800852a:	2200      	movs	r2, #0
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d105      	bne.n	8008544 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008538:	4b07      	ldr	r3, [pc, #28]	; (8008558 <prvGetNextExpireTime+0x44>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	60fb      	str	r3, [r7, #12]
 8008542:	e001      	b.n	8008548 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008544:	2300      	movs	r3, #0
 8008546:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008548:	68fb      	ldr	r3, [r7, #12]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	200061c4 	.word	0x200061c4

0800855c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008564:	f7ff fa3c 	bl	80079e0 <xTaskGetTickCount>
 8008568:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800856a:	4b0b      	ldr	r3, [pc, #44]	; (8008598 <prvSampleTimeNow+0x3c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	429a      	cmp	r2, r3
 8008572:	d205      	bcs.n	8008580 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008574:	f000 f93c 	bl	80087f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	e002      	b.n	8008586 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008586:	4a04      	ldr	r2, [pc, #16]	; (8008598 <prvSampleTimeNow+0x3c>)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800858c:	68fb      	ldr	r3, [r7, #12]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	200061d4 	.word	0x200061d4

0800859c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085aa:	2300      	movs	r3, #0
 80085ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d812      	bhi.n	80085e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	1ad2      	subs	r2, r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d302      	bcc.n	80085d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085d0:	2301      	movs	r3, #1
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	e01b      	b.n	800860e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085d6:	4b10      	ldr	r3, [pc, #64]	; (8008618 <prvInsertTimerInActiveList+0x7c>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3304      	adds	r3, #4
 80085de:	4619      	mov	r1, r3
 80085e0:	4610      	mov	r0, r2
 80085e2:	f7fe f998 	bl	8006916 <vListInsert>
 80085e6:	e012      	b.n	800860e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d206      	bcs.n	80085fe <prvInsertTimerInActiveList+0x62>
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d302      	bcc.n	80085fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085f8:	2301      	movs	r3, #1
 80085fa:	617b      	str	r3, [r7, #20]
 80085fc:	e007      	b.n	800860e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085fe:	4b07      	ldr	r3, [pc, #28]	; (800861c <prvInsertTimerInActiveList+0x80>)
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3304      	adds	r3, #4
 8008606:	4619      	mov	r1, r3
 8008608:	4610      	mov	r0, r2
 800860a:	f7fe f984 	bl	8006916 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800860e:	697b      	ldr	r3, [r7, #20]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	200061c8 	.word	0x200061c8
 800861c:	200061c4 	.word	0x200061c4

08008620 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08e      	sub	sp, #56	; 0x38
 8008624:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008626:	e0d0      	b.n	80087ca <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	da1a      	bge.n	8008664 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800862e:	1d3b      	adds	r3, r7, #4
 8008630:	3304      	adds	r3, #4
 8008632:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10c      	bne.n	8008654 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863e:	b672      	cpsid	i
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	b662      	cpsie	i
 800864e:	61fb      	str	r3, [r7, #28]
}
 8008650:	bf00      	nop
 8008652:	e7fe      	b.n	8008652 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800865a:	6850      	ldr	r0, [r2, #4]
 800865c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800865e:	6892      	ldr	r2, [r2, #8]
 8008660:	4611      	mov	r1, r2
 8008662:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	f2c0 80ae 	blt.w	80087c8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d004      	beq.n	8008682 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	3304      	adds	r3, #4
 800867c:	4618      	mov	r0, r3
 800867e:	f7fe f983 	bl	8006988 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008682:	463b      	mov	r3, r7
 8008684:	4618      	mov	r0, r3
 8008686:	f7ff ff69 	bl	800855c <prvSampleTimeNow>
 800868a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b09      	cmp	r3, #9
 8008690:	f200 809b 	bhi.w	80087ca <prvProcessReceivedCommands+0x1aa>
 8008694:	a201      	add	r2, pc, #4	; (adr r2, 800869c <prvProcessReceivedCommands+0x7c>)
 8008696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869a:	bf00      	nop
 800869c:	080086c5 	.word	0x080086c5
 80086a0:	080086c5 	.word	0x080086c5
 80086a4:	080086c5 	.word	0x080086c5
 80086a8:	0800873d 	.word	0x0800873d
 80086ac:	08008751 	.word	0x08008751
 80086b0:	0800879f 	.word	0x0800879f
 80086b4:	080086c5 	.word	0x080086c5
 80086b8:	080086c5 	.word	0x080086c5
 80086bc:	0800873d 	.word	0x0800873d
 80086c0:	08008751 	.word	0x08008751
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ca:	f043 0301 	orr.w	r3, r3, #1
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	18d1      	adds	r1, r2, r3
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086e4:	f7ff ff5a 	bl	800859c <prvInsertTimerInActiveList>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d06d      	beq.n	80087ca <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b00      	cmp	r3, #0
 8008702:	d062      	beq.n	80087ca <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	699b      	ldr	r3, [r3, #24]
 800870a:	441a      	add	r2, r3
 800870c:	2300      	movs	r3, #0
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	2300      	movs	r3, #0
 8008712:	2100      	movs	r1, #0
 8008714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008716:	f7ff fdff 	bl	8008318 <xTimerGenericCommand>
 800871a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d153      	bne.n	80087ca <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	b672      	cpsid	i
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	b662      	cpsie	i
 8008736:	61bb      	str	r3, [r7, #24]
}
 8008738:	bf00      	nop
 800873a:	e7fe      	b.n	800873a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008742:	f023 0301 	bic.w	r3, r3, #1
 8008746:	b2da      	uxtb	r2, r3
 8008748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800874e:	e03c      	b.n	80087ca <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008756:	f043 0301 	orr.w	r3, r3, #1
 800875a:	b2da      	uxtb	r2, r3
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008766:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10c      	bne.n	800878a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	b672      	cpsid	i
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	b662      	cpsie	i
 8008784:	617b      	str	r3, [r7, #20]
}
 8008786:	bf00      	nop
 8008788:	e7fe      	b.n	8008788 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800878a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878c:	699a      	ldr	r2, [r3, #24]
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	18d1      	adds	r1, r2, r3
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008798:	f7ff ff00 	bl	800859c <prvInsertTimerInActiveList>
					break;
 800879c:	e015      	b.n	80087ca <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800879e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087a4:	f003 0302 	and.w	r3, r3, #2
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d103      	bne.n	80087b4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80087ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ae:	f000 fbcb 	bl	8008f48 <vPortFree>
 80087b2:	e00a      	b.n	80087ca <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	b2da      	uxtb	r2, r3
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087c6:	e000      	b.n	80087ca <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80087c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087ca:	4b08      	ldr	r3, [pc, #32]	; (80087ec <prvProcessReceivedCommands+0x1cc>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	1d39      	adds	r1, r7, #4
 80087d0:	2200      	movs	r2, #0
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fe fbb8 	bl	8006f48 <xQueueReceive>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f47f af24 	bne.w	8008628 <prvProcessReceivedCommands+0x8>
	}
}
 80087e0:	bf00      	nop
 80087e2:	bf00      	nop
 80087e4:	3730      	adds	r7, #48	; 0x30
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	200061cc 	.word	0x200061cc

080087f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b088      	sub	sp, #32
 80087f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087f6:	e04a      	b.n	800888e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087f8:	4b2e      	ldr	r3, [pc, #184]	; (80088b4 <prvSwitchTimerLists+0xc4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008802:	4b2c      	ldr	r3, [pc, #176]	; (80088b4 <prvSwitchTimerLists+0xc4>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3304      	adds	r3, #4
 8008810:	4618      	mov	r0, r3
 8008812:	f7fe f8b9 	bl	8006988 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008824:	f003 0304 	and.w	r3, r3, #4
 8008828:	2b00      	cmp	r3, #0
 800882a:	d030      	beq.n	800888e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	4413      	add	r3, r2
 8008834:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	429a      	cmp	r2, r3
 800883c:	d90e      	bls.n	800885c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800884a:	4b1a      	ldr	r3, [pc, #104]	; (80088b4 <prvSwitchTimerLists+0xc4>)
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	3304      	adds	r3, #4
 8008852:	4619      	mov	r1, r3
 8008854:	4610      	mov	r0, r2
 8008856:	f7fe f85e 	bl	8006916 <vListInsert>
 800885a:	e018      	b.n	800888e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800885c:	2300      	movs	r3, #0
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	2300      	movs	r3, #0
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	2100      	movs	r1, #0
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f7ff fd56 	bl	8008318 <xTimerGenericCommand>
 800886c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10c      	bne.n	800888e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	b672      	cpsid	i
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	b662      	cpsie	i
 8008888:	603b      	str	r3, [r7, #0]
}
 800888a:	bf00      	nop
 800888c:	e7fe      	b.n	800888c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800888e:	4b09      	ldr	r3, [pc, #36]	; (80088b4 <prvSwitchTimerLists+0xc4>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1af      	bne.n	80087f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008898:	4b06      	ldr	r3, [pc, #24]	; (80088b4 <prvSwitchTimerLists+0xc4>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800889e:	4b06      	ldr	r3, [pc, #24]	; (80088b8 <prvSwitchTimerLists+0xc8>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a04      	ldr	r2, [pc, #16]	; (80088b4 <prvSwitchTimerLists+0xc4>)
 80088a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088a6:	4a04      	ldr	r2, [pc, #16]	; (80088b8 <prvSwitchTimerLists+0xc8>)
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	6013      	str	r3, [r2, #0]
}
 80088ac:	bf00      	nop
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	200061c4 	.word	0x200061c4
 80088b8:	200061c8 	.word	0x200061c8

080088bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088c2:	f000 f94b 	bl	8008b5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088c6:	4b15      	ldr	r3, [pc, #84]	; (800891c <prvCheckForValidListAndQueue+0x60>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d120      	bne.n	8008910 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088ce:	4814      	ldr	r0, [pc, #80]	; (8008920 <prvCheckForValidListAndQueue+0x64>)
 80088d0:	f7fd ffd0 	bl	8006874 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088d4:	4813      	ldr	r0, [pc, #76]	; (8008924 <prvCheckForValidListAndQueue+0x68>)
 80088d6:	f7fd ffcd 	bl	8006874 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088da:	4b13      	ldr	r3, [pc, #76]	; (8008928 <prvCheckForValidListAndQueue+0x6c>)
 80088dc:	4a10      	ldr	r2, [pc, #64]	; (8008920 <prvCheckForValidListAndQueue+0x64>)
 80088de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088e0:	4b12      	ldr	r3, [pc, #72]	; (800892c <prvCheckForValidListAndQueue+0x70>)
 80088e2:	4a10      	ldr	r2, [pc, #64]	; (8008924 <prvCheckForValidListAndQueue+0x68>)
 80088e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088e6:	2300      	movs	r3, #0
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	4b11      	ldr	r3, [pc, #68]	; (8008930 <prvCheckForValidListAndQueue+0x74>)
 80088ec:	4a11      	ldr	r2, [pc, #68]	; (8008934 <prvCheckForValidListAndQueue+0x78>)
 80088ee:	2110      	movs	r1, #16
 80088f0:	200a      	movs	r0, #10
 80088f2:	f7fe f8dd 	bl	8006ab0 <xQueueGenericCreateStatic>
 80088f6:	4603      	mov	r3, r0
 80088f8:	4a08      	ldr	r2, [pc, #32]	; (800891c <prvCheckForValidListAndQueue+0x60>)
 80088fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088fc:	4b07      	ldr	r3, [pc, #28]	; (800891c <prvCheckForValidListAndQueue+0x60>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008904:	4b05      	ldr	r3, [pc, #20]	; (800891c <prvCheckForValidListAndQueue+0x60>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	490b      	ldr	r1, [pc, #44]	; (8008938 <prvCheckForValidListAndQueue+0x7c>)
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe fd12 	bl	8007334 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008910:	f000 f958 	bl	8008bc4 <vPortExitCritical>
}
 8008914:	bf00      	nop
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	200061cc 	.word	0x200061cc
 8008920:	2000619c 	.word	0x2000619c
 8008924:	200061b0 	.word	0x200061b0
 8008928:	200061c4 	.word	0x200061c4
 800892c:	200061c8 	.word	0x200061c8
 8008930:	20006278 	.word	0x20006278
 8008934:	200061d8 	.word	0x200061d8
 8008938:	08017774 	.word	0x08017774

0800893c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3b04      	subs	r3, #4
 800894c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3b04      	subs	r3, #4
 800895a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f023 0201 	bic.w	r2, r3, #1
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3b04      	subs	r3, #4
 800896a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800896c:	4a0c      	ldr	r2, [pc, #48]	; (80089a0 <pxPortInitialiseStack+0x64>)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3b14      	subs	r3, #20
 8008976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3b04      	subs	r3, #4
 8008982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f06f 0202 	mvn.w	r2, #2
 800898a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3b20      	subs	r3, #32
 8008990:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008992:	68fb      	ldr	r3, [r7, #12]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	080089a5 	.word	0x080089a5

080089a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089ae:	4b14      	ldr	r3, [pc, #80]	; (8008a00 <prvTaskExitError+0x5c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089b6:	d00c      	beq.n	80089d2 <prvTaskExitError+0x2e>
	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089bc:	b672      	cpsid	i
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	b662      	cpsie	i
 80089cc:	60fb      	str	r3, [r7, #12]
}
 80089ce:	bf00      	nop
 80089d0:	e7fe      	b.n	80089d0 <prvTaskExitError+0x2c>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d6:	b672      	cpsid	i
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	b662      	cpsie	i
 80089e6:	60bb      	str	r3, [r7, #8]
}
 80089e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089ea:	bf00      	nop
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d0fc      	beq.n	80089ec <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089f2:	bf00      	nop
 80089f4:	bf00      	nop
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	20000010 	.word	0x20000010
	...

08008a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a10:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <pxCurrentTCBConst2>)
 8008a12:	6819      	ldr	r1, [r3, #0]
 8008a14:	6808      	ldr	r0, [r1, #0]
 8008a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1a:	f380 8809 	msr	PSP, r0
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8811 	msr	BASEPRI, r0
 8008a2a:	4770      	bx	lr
 8008a2c:	f3af 8000 	nop.w

08008a30 <pxCurrentTCBConst2>:
 8008a30:	20005c9c 	.word	0x20005c9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a38:	4808      	ldr	r0, [pc, #32]	; (8008a5c <prvPortStartFirstTask+0x24>)
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	6800      	ldr	r0, [r0, #0]
 8008a3e:	f380 8808 	msr	MSP, r0
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8814 	msr	CONTROL, r0
 8008a4a:	b662      	cpsie	i
 8008a4c:	b661      	cpsie	f
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	df00      	svc	0
 8008a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a5a:	bf00      	nop
 8008a5c:	e000ed08 	.word	0xe000ed08

08008a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a66:	4b37      	ldr	r3, [pc, #220]	; (8008b44 <xPortStartScheduler+0xe4>)
 8008a68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	22ff      	movs	r2, #255	; 0xff
 8008a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	4b2f      	ldr	r3, [pc, #188]	; (8008b48 <xPortStartScheduler+0xe8>)
 8008a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a8e:	4b2f      	ldr	r3, [pc, #188]	; (8008b4c <xPortStartScheduler+0xec>)
 8008a90:	2207      	movs	r2, #7
 8008a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a94:	e009      	b.n	8008aaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a96:	4b2d      	ldr	r3, [pc, #180]	; (8008b4c <xPortStartScheduler+0xec>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	4a2b      	ldr	r2, [pc, #172]	; (8008b4c <xPortStartScheduler+0xec>)
 8008a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aaa:	78fb      	ldrb	r3, [r7, #3]
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab2:	2b80      	cmp	r3, #128	; 0x80
 8008ab4:	d0ef      	beq.n	8008a96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ab6:	4b25      	ldr	r3, [pc, #148]	; (8008b4c <xPortStartScheduler+0xec>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f1c3 0307 	rsb	r3, r3, #7
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d00c      	beq.n	8008adc <xPortStartScheduler+0x7c>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	b672      	cpsid	i
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	b662      	cpsie	i
 8008ad6:	60bb      	str	r3, [r7, #8]
}
 8008ad8:	bf00      	nop
 8008ada:	e7fe      	b.n	8008ada <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008adc:	4b1b      	ldr	r3, [pc, #108]	; (8008b4c <xPortStartScheduler+0xec>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	021b      	lsls	r3, r3, #8
 8008ae2:	4a1a      	ldr	r2, [pc, #104]	; (8008b4c <xPortStartScheduler+0xec>)
 8008ae4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ae6:	4b19      	ldr	r3, [pc, #100]	; (8008b4c <xPortStartScheduler+0xec>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008aee:	4a17      	ldr	r2, [pc, #92]	; (8008b4c <xPortStartScheduler+0xec>)
 8008af0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008afa:	4b15      	ldr	r3, [pc, #84]	; (8008b50 <xPortStartScheduler+0xf0>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a14      	ldr	r2, [pc, #80]	; (8008b50 <xPortStartScheduler+0xf0>)
 8008b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b06:	4b12      	ldr	r3, [pc, #72]	; (8008b50 <xPortStartScheduler+0xf0>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a11      	ldr	r2, [pc, #68]	; (8008b50 <xPortStartScheduler+0xf0>)
 8008b0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b12:	f000 f8dd 	bl	8008cd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b16:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <xPortStartScheduler+0xf4>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b1c:	f000 f8fc 	bl	8008d18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b20:	4b0d      	ldr	r3, [pc, #52]	; (8008b58 <xPortStartScheduler+0xf8>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a0c      	ldr	r2, [pc, #48]	; (8008b58 <xPortStartScheduler+0xf8>)
 8008b26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b2c:	f7ff ff84 	bl	8008a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b30:	f7ff f822 	bl	8007b78 <vTaskSwitchContext>
	prvTaskExitError();
 8008b34:	f7ff ff36 	bl	80089a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	e000e400 	.word	0xe000e400
 8008b48:	200062c8 	.word	0x200062c8
 8008b4c:	200062cc 	.word	0x200062cc
 8008b50:	e000ed20 	.word	0xe000ed20
 8008b54:	20000010 	.word	0x20000010
 8008b58:	e000ef34 	.word	0xe000ef34

08008b5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	b672      	cpsid	i
 8008b68:	f383 8811 	msr	BASEPRI, r3
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	b662      	cpsie	i
 8008b76:	607b      	str	r3, [r7, #4]
}
 8008b78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b7a:	4b10      	ldr	r3, [pc, #64]	; (8008bbc <vPortEnterCritical+0x60>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	4a0e      	ldr	r2, [pc, #56]	; (8008bbc <vPortEnterCritical+0x60>)
 8008b82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b84:	4b0d      	ldr	r3, [pc, #52]	; (8008bbc <vPortEnterCritical+0x60>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d111      	bne.n	8008bb0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b8c:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <vPortEnterCritical+0x64>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00c      	beq.n	8008bb0 <vPortEnterCritical+0x54>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	b672      	cpsid	i
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	b662      	cpsie	i
 8008baa:	603b      	str	r3, [r7, #0]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <vPortEnterCritical+0x52>
	}
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	20000010 	.word	0x20000010
 8008bc0:	e000ed04 	.word	0xe000ed04

08008bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bca:	4b13      	ldr	r3, [pc, #76]	; (8008c18 <vPortExitCritical+0x54>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10c      	bne.n	8008bec <vPortExitCritical+0x28>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	b672      	cpsid	i
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	b662      	cpsie	i
 8008be6:	607b      	str	r3, [r7, #4]
}
 8008be8:	bf00      	nop
 8008bea:	e7fe      	b.n	8008bea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008bec:	4b0a      	ldr	r3, [pc, #40]	; (8008c18 <vPortExitCritical+0x54>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	4a09      	ldr	r2, [pc, #36]	; (8008c18 <vPortExitCritical+0x54>)
 8008bf4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bf6:	4b08      	ldr	r3, [pc, #32]	; (8008c18 <vPortExitCritical+0x54>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d105      	bne.n	8008c0a <vPortExitCritical+0x46>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	f383 8811 	msr	BASEPRI, r3
}
 8008c08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c0a:	bf00      	nop
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20000010 	.word	0x20000010
 8008c1c:	00000000 	.word	0x00000000

08008c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c20:	f3ef 8009 	mrs	r0, PSP
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	4b15      	ldr	r3, [pc, #84]	; (8008c80 <pxCurrentTCBConst>)
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	f01e 0f10 	tst.w	lr, #16
 8008c30:	bf08      	it	eq
 8008c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3a:	6010      	str	r0, [r2, #0]
 8008c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c44:	b672      	cpsid	i
 8008c46:	f380 8811 	msr	BASEPRI, r0
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	b662      	cpsie	i
 8008c54:	f7fe ff90 	bl	8007b78 <vTaskSwitchContext>
 8008c58:	f04f 0000 	mov.w	r0, #0
 8008c5c:	f380 8811 	msr	BASEPRI, r0
 8008c60:	bc09      	pop	{r0, r3}
 8008c62:	6819      	ldr	r1, [r3, #0]
 8008c64:	6808      	ldr	r0, [r1, #0]
 8008c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6a:	f01e 0f10 	tst.w	lr, #16
 8008c6e:	bf08      	it	eq
 8008c70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c74:	f380 8809 	msr	PSP, r0
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop

08008c80 <pxCurrentTCBConst>:
 8008c80:	20005c9c 	.word	0x20005c9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop

08008c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	b672      	cpsid	i
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	b662      	cpsie	i
 8008ca2:	607b      	str	r3, [r7, #4]
}
 8008ca4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ca6:	f7fe feab 	bl	8007a00 <xTaskIncrementTick>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cb0:	4b06      	ldr	r3, [pc, #24]	; (8008ccc <SysTick_Handler+0x44>)
 8008cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	2300      	movs	r3, #0
 8008cba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	f383 8811 	msr	BASEPRI, r3
}
 8008cc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cc4:	bf00      	nop
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	e000ed04 	.word	0xe000ed04

08008cd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cd4:	4b0b      	ldr	r3, [pc, #44]	; (8008d04 <vPortSetupTimerInterrupt+0x34>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cda:	4b0b      	ldr	r3, [pc, #44]	; (8008d08 <vPortSetupTimerInterrupt+0x38>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ce0:	4b0a      	ldr	r3, [pc, #40]	; (8008d0c <vPortSetupTimerInterrupt+0x3c>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a0a      	ldr	r2, [pc, #40]	; (8008d10 <vPortSetupTimerInterrupt+0x40>)
 8008ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cea:	099b      	lsrs	r3, r3, #6
 8008cec:	4a09      	ldr	r2, [pc, #36]	; (8008d14 <vPortSetupTimerInterrupt+0x44>)
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cf2:	4b04      	ldr	r3, [pc, #16]	; (8008d04 <vPortSetupTimerInterrupt+0x34>)
 8008cf4:	2207      	movs	r2, #7
 8008cf6:	601a      	str	r2, [r3, #0]
}
 8008cf8:	bf00      	nop
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	e000e010 	.word	0xe000e010
 8008d08:	e000e018 	.word	0xe000e018
 8008d0c:	20000004 	.word	0x20000004
 8008d10:	10624dd3 	.word	0x10624dd3
 8008d14:	e000e014 	.word	0xe000e014

08008d18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d28 <vPortEnableVFP+0x10>
 8008d1c:	6801      	ldr	r1, [r0, #0]
 8008d1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d22:	6001      	str	r1, [r0, #0]
 8008d24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d26:	bf00      	nop
 8008d28:	e000ed88 	.word	0xe000ed88

08008d2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d32:	f3ef 8305 	mrs	r3, IPSR
 8008d36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b0f      	cmp	r3, #15
 8008d3c:	d916      	bls.n	8008d6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d3e:	4a19      	ldr	r2, [pc, #100]	; (8008da4 <vPortValidateInterruptPriority+0x78>)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4413      	add	r3, r2
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d48:	4b17      	ldr	r3, [pc, #92]	; (8008da8 <vPortValidateInterruptPriority+0x7c>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	7afa      	ldrb	r2, [r7, #11]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d20c      	bcs.n	8008d6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	b672      	cpsid	i
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	b662      	cpsie	i
 8008d66:	607b      	str	r3, [r7, #4]
}
 8008d68:	bf00      	nop
 8008d6a:	e7fe      	b.n	8008d6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d6c:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <vPortValidateInterruptPriority+0x80>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d74:	4b0e      	ldr	r3, [pc, #56]	; (8008db0 <vPortValidateInterruptPriority+0x84>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d90c      	bls.n	8008d96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	b672      	cpsid	i
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	b662      	cpsie	i
 8008d90:	603b      	str	r3, [r7, #0]
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <vPortValidateInterruptPriority+0x68>
	}
 8008d96:	bf00      	nop
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	e000e3f0 	.word	0xe000e3f0
 8008da8:	200062c8 	.word	0x200062c8
 8008dac:	e000ed0c 	.word	0xe000ed0c
 8008db0:	200062cc 	.word	0x200062cc

08008db4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b08a      	sub	sp, #40	; 0x28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008dc0:	f7fe fd60 	bl	8007884 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dc4:	4b5b      	ldr	r3, [pc, #364]	; (8008f34 <pvPortMalloc+0x180>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d101      	bne.n	8008dd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008dcc:	f000 f91a 	bl	8009004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008dd0:	4b59      	ldr	r3, [pc, #356]	; (8008f38 <pvPortMalloc+0x184>)
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f040 8092 	bne.w	8008f02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d01f      	beq.n	8008e24 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008de4:	2208      	movs	r2, #8
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4413      	add	r3, r2
 8008dea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f003 0307 	and.w	r3, r3, #7
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d016      	beq.n	8008e24 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f023 0307 	bic.w	r3, r3, #7
 8008dfc:	3308      	adds	r3, #8
 8008dfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f003 0307 	and.w	r3, r3, #7
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00c      	beq.n	8008e24 <pvPortMalloc+0x70>
	__asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	b672      	cpsid	i
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	b662      	cpsie	i
 8008e1e:	617b      	str	r3, [r7, #20]
}
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d06b      	beq.n	8008f02 <pvPortMalloc+0x14e>
 8008e2a:	4b44      	ldr	r3, [pc, #272]	; (8008f3c <pvPortMalloc+0x188>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d866      	bhi.n	8008f02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e34:	4b42      	ldr	r3, [pc, #264]	; (8008f40 <pvPortMalloc+0x18c>)
 8008e36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e38:	4b41      	ldr	r3, [pc, #260]	; (8008f40 <pvPortMalloc+0x18c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e3e:	e004      	b.n	8008e4a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d903      	bls.n	8008e5c <pvPortMalloc+0xa8>
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1f1      	bne.n	8008e40 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e5c:	4b35      	ldr	r3, [pc, #212]	; (8008f34 <pvPortMalloc+0x180>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d04d      	beq.n	8008f02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2208      	movs	r2, #8
 8008e6c:	4413      	add	r3, r2
 8008e6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	1ad2      	subs	r2, r2, r3
 8008e80:	2308      	movs	r3, #8
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d921      	bls.n	8008ecc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	f003 0307 	and.w	r3, r3, #7
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00c      	beq.n	8008eb4 <pvPortMalloc+0x100>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	b672      	cpsid	i
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	b662      	cpsie	i
 8008eae:	613b      	str	r3, [r7, #16]
}
 8008eb0:	bf00      	nop
 8008eb2:	e7fe      	b.n	8008eb2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	1ad2      	subs	r2, r2, r3
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ec6:	69b8      	ldr	r0, [r7, #24]
 8008ec8:	f000 f8fe 	bl	80090c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ecc:	4b1b      	ldr	r3, [pc, #108]	; (8008f3c <pvPortMalloc+0x188>)
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	4a19      	ldr	r2, [pc, #100]	; (8008f3c <pvPortMalloc+0x188>)
 8008ed8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008eda:	4b18      	ldr	r3, [pc, #96]	; (8008f3c <pvPortMalloc+0x188>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	4b19      	ldr	r3, [pc, #100]	; (8008f44 <pvPortMalloc+0x190>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d203      	bcs.n	8008eee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ee6:	4b15      	ldr	r3, [pc, #84]	; (8008f3c <pvPortMalloc+0x188>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a16      	ldr	r2, [pc, #88]	; (8008f44 <pvPortMalloc+0x190>)
 8008eec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	4b11      	ldr	r3, [pc, #68]	; (8008f38 <pvPortMalloc+0x184>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	2200      	movs	r2, #0
 8008f00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f02:	f7fe fccd 	bl	80078a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	f003 0307 	and.w	r3, r3, #7
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00c      	beq.n	8008f2a <pvPortMalloc+0x176>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	b672      	cpsid	i
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	b662      	cpsie	i
 8008f24:	60fb      	str	r3, [r7, #12]
}
 8008f26:	bf00      	nop
 8008f28:	e7fe      	b.n	8008f28 <pvPortMalloc+0x174>
	return pvReturn;
 8008f2a:	69fb      	ldr	r3, [r7, #28]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3728      	adds	r7, #40	; 0x28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	20009ed8 	.word	0x20009ed8
 8008f38:	20009ee4 	.word	0x20009ee4
 8008f3c:	20009edc 	.word	0x20009edc
 8008f40:	20009ed0 	.word	0x20009ed0
 8008f44:	20009ee0 	.word	0x20009ee0

08008f48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d04c      	beq.n	8008ff4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f5a:	2308      	movs	r3, #8
 8008f5c:	425b      	negs	r3, r3
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	4413      	add	r3, r2
 8008f62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	4b23      	ldr	r3, [pc, #140]	; (8008ffc <vPortFree+0xb4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4013      	ands	r3, r2
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10c      	bne.n	8008f90 <vPortFree+0x48>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7a:	b672      	cpsid	i
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	b662      	cpsie	i
 8008f8a:	60fb      	str	r3, [r7, #12]
}
 8008f8c:	bf00      	nop
 8008f8e:	e7fe      	b.n	8008f8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00c      	beq.n	8008fb2 <vPortFree+0x6a>
	__asm volatile
 8008f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9c:	b672      	cpsid	i
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	b662      	cpsie	i
 8008fac:	60bb      	str	r3, [r7, #8]
}
 8008fae:	bf00      	nop
 8008fb0:	e7fe      	b.n	8008fb0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	4b11      	ldr	r3, [pc, #68]	; (8008ffc <vPortFree+0xb4>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d019      	beq.n	8008ff4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d115      	bne.n	8008ff4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <vPortFree+0xb4>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	43db      	mvns	r3, r3
 8008fd2:	401a      	ands	r2, r3
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008fd8:	f7fe fc54 	bl	8007884 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	4b07      	ldr	r3, [pc, #28]	; (8009000 <vPortFree+0xb8>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	4a06      	ldr	r2, [pc, #24]	; (8009000 <vPortFree+0xb8>)
 8008fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fea:	6938      	ldr	r0, [r7, #16]
 8008fec:	f000 f86c 	bl	80090c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ff0:	f7fe fc56 	bl	80078a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ff4:	bf00      	nop
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	20009ee4 	.word	0x20009ee4
 8009000:	20009edc 	.word	0x20009edc

08009004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800900a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800900e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009010:	4b27      	ldr	r3, [pc, #156]	; (80090b0 <prvHeapInit+0xac>)
 8009012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00c      	beq.n	8009038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3307      	adds	r3, #7
 8009022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0307 	bic.w	r3, r3, #7
 800902a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	4a1f      	ldr	r2, [pc, #124]	; (80090b0 <prvHeapInit+0xac>)
 8009034:	4413      	add	r3, r2
 8009036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800903c:	4a1d      	ldr	r2, [pc, #116]	; (80090b4 <prvHeapInit+0xb0>)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009042:	4b1c      	ldr	r3, [pc, #112]	; (80090b4 <prvHeapInit+0xb0>)
 8009044:	2200      	movs	r2, #0
 8009046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	4413      	add	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009050:	2208      	movs	r2, #8
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	1a9b      	subs	r3, r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0307 	bic.w	r3, r3, #7
 800905e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4a15      	ldr	r2, [pc, #84]	; (80090b8 <prvHeapInit+0xb4>)
 8009064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009066:	4b14      	ldr	r3, [pc, #80]	; (80090b8 <prvHeapInit+0xb4>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2200      	movs	r2, #0
 800906c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800906e:	4b12      	ldr	r3, [pc, #72]	; (80090b8 <prvHeapInit+0xb4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2200      	movs	r2, #0
 8009074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	1ad2      	subs	r2, r2, r3
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009084:	4b0c      	ldr	r3, [pc, #48]	; (80090b8 <prvHeapInit+0xb4>)
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	4a0a      	ldr	r2, [pc, #40]	; (80090bc <prvHeapInit+0xb8>)
 8009092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	4a09      	ldr	r2, [pc, #36]	; (80090c0 <prvHeapInit+0xbc>)
 800909a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800909c:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <prvHeapInit+0xc0>)
 800909e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090a2:	601a      	str	r2, [r3, #0]
}
 80090a4:	bf00      	nop
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	200062d0 	.word	0x200062d0
 80090b4:	20009ed0 	.word	0x20009ed0
 80090b8:	20009ed8 	.word	0x20009ed8
 80090bc:	20009ee0 	.word	0x20009ee0
 80090c0:	20009edc 	.word	0x20009edc
 80090c4:	20009ee4 	.word	0x20009ee4

080090c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090d0:	4b28      	ldr	r3, [pc, #160]	; (8009174 <prvInsertBlockIntoFreeList+0xac>)
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	e002      	b.n	80090dc <prvInsertBlockIntoFreeList+0x14>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d8f7      	bhi.n	80090d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	4413      	add	r3, r2
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d108      	bne.n	800910a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	441a      	add	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	441a      	add	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d118      	bne.n	8009150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	4b15      	ldr	r3, [pc, #84]	; (8009178 <prvInsertBlockIntoFreeList+0xb0>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	429a      	cmp	r2, r3
 8009128:	d00d      	beq.n	8009146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	441a      	add	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	e008      	b.n	8009158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009146:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <prvInsertBlockIntoFreeList+0xb0>)
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	e003      	b.n	8009158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d002      	beq.n	8009166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009166:	bf00      	nop
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	20009ed0 	.word	0x20009ed0
 8009178:	20009ed8 	.word	0x20009ed8

0800917c <rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray>:
 800917c:	4b04      	ldr	r3, [pc, #16]	; (8009190 <rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray+0x14>)
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	b10a      	cbz	r2, 8009186 <rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray+0xa>
 8009182:	4803      	ldr	r0, [pc, #12]	; (8009190 <rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray+0x14>)
 8009184:	4770      	bx	lr
 8009186:	4a03      	ldr	r2, [pc, #12]	; (8009194 <rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray+0x18>)
 8009188:	4801      	ldr	r0, [pc, #4]	; (8009190 <rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray+0x14>)
 800918a:	6812      	ldr	r2, [r2, #0]
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	4770      	bx	lr
 8009190:	2000001c 	.word	0x2000001c
 8009194:	2000010c 	.word	0x2000010c

08009198 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray>:
 8009198:	4a02      	ldr	r2, [pc, #8]	; (80091a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray+0xc>)
 800919a:	4b03      	ldr	r3, [pc, #12]	; (80091a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray+0x10>)
 800919c:	6812      	ldr	r2, [r2, #0]
 800919e:	601a      	str	r2, [r3, #0]
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	2000010c 	.word	0x2000010c
 80091a8:	2000001c 	.word	0x2000001c

080091ac <example_interfaces__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__size_function__UInt8MultiArray__data>:
 80091ac:	6840      	ldr	r0, [r0, #4]
 80091ae:	4770      	bx	lr

080091b0 <example_interfaces__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__get_const_function__UInt8MultiArray__data>:
 80091b0:	6800      	ldr	r0, [r0, #0]
 80091b2:	4408      	add	r0, r1
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop

080091b8 <example_interfaces__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__fetch_function__UInt8MultiArray__data>:
 80091b8:	6803      	ldr	r3, [r0, #0]
 80091ba:	5c5b      	ldrb	r3, [r3, r1]
 80091bc:	7013      	strb	r3, [r2, #0]
 80091be:	4770      	bx	lr

080091c0 <example_interfaces__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__assign_function__UInt8MultiArray__data>:
 80091c0:	7812      	ldrb	r2, [r2, #0]
 80091c2:	6803      	ldr	r3, [r0, #0]
 80091c4:	545a      	strb	r2, [r3, r1]
 80091c6:	4770      	bx	lr

080091c8 <example_interfaces__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__UInt8MultiArray_init_function>:
 80091c8:	f001 b972 	b.w	800a4b0 <example_interfaces__msg__UInt8MultiArray__init>

080091cc <example_interfaces__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__UInt8MultiArray_fini_function>:
 80091cc:	f001 b994 	b.w	800a4f8 <example_interfaces__msg__UInt8MultiArray__fini>

080091d0 <example_interfaces__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__resize_function__UInt8MultiArray__data>:
 80091d0:	b510      	push	{r4, lr}
 80091d2:	4604      	mov	r4, r0
 80091d4:	b082      	sub	sp, #8
 80091d6:	9101      	str	r1, [sp, #4]
 80091d8:	f001 f8cc 	bl	800a374 <rosidl_runtime_c__uint8__Sequence__fini>
 80091dc:	9901      	ldr	r1, [sp, #4]
 80091de:	4620      	mov	r0, r4
 80091e0:	b002      	add	sp, #8
 80091e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e6:	f001 b8ad 	b.w	800a344 <rosidl_runtime_c__uint8__Sequence__init>
 80091ea:	bf00      	nop

080091ec <example_interfaces__msg__UInt8MultiArray__rosidl_typesupport_introspection_c__get_function__UInt8MultiArray__data>:
 80091ec:	6800      	ldr	r0, [r0, #0]
 80091ee:	4408      	add	r0, r1
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop

080091f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray>:
 80091f4:	b508      	push	{r3, lr}
 80091f6:	f001 f9cf 	bl	800a598 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayLayout>
 80091fa:	4b06      	ldr	r3, [pc, #24]	; (8009214 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray+0x20>)
 80091fc:	4906      	ldr	r1, [pc, #24]	; (8009218 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray+0x24>)
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	60c8      	str	r0, [r1, #12]
 8009202:	b10a      	cbz	r2, 8009208 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray+0x14>
 8009204:	4803      	ldr	r0, [pc, #12]	; (8009214 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray+0x20>)
 8009206:	bd08      	pop	{r3, pc}
 8009208:	4a04      	ldr	r2, [pc, #16]	; (800921c <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray+0x28>)
 800920a:	4802      	ldr	r0, [pc, #8]	; (8009214 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray+0x20>)
 800920c:	6812      	ldr	r2, [r2, #0]
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	bd08      	pop	{r3, pc}
 8009212:	bf00      	nop
 8009214:	200000ac 	.word	0x200000ac
 8009218:	20000034 	.word	0x20000034
 800921c:	20000110 	.word	0x20000110

08009220 <_UInt8MultiArray__max_serialized_size>:
 8009220:	b500      	push	{lr}
 8009222:	b083      	sub	sp, #12
 8009224:	2301      	movs	r3, #1
 8009226:	2100      	movs	r1, #0
 8009228:	f10d 0007 	add.w	r0, sp, #7
 800922c:	f88d 3007 	strb.w	r3, [sp, #7]
 8009230:	f001 fa60 	bl	800a6f4 <max_serialized_size_example_interfaces__msg__MultiArrayLayout>
 8009234:	b003      	add	sp, #12
 8009236:	f85d fb04 	ldr.w	pc, [sp], #4
 800923a:	bf00      	nop

0800923c <get_serialized_size_example_interfaces__msg__UInt8MultiArray>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	4604      	mov	r4, r0
 8009240:	b160      	cbz	r0, 800925c <get_serialized_size_example_interfaces__msg__UInt8MultiArray+0x20>
 8009242:	460d      	mov	r5, r1
 8009244:	f001 f9fa 	bl	800a63c <get_serialized_size_example_interfaces__msg__MultiArrayLayout>
 8009248:	6966      	ldr	r6, [r4, #20]
 800924a:	2104      	movs	r1, #4
 800924c:	182c      	adds	r4, r5, r0
 800924e:	4620      	mov	r0, r4
 8009250:	f000 f8c8 	bl	80093e4 <ucdr_alignment>
 8009254:	1d03      	adds	r3, r0, #4
 8009256:	441c      	add	r4, r3
 8009258:	b90e      	cbnz	r6, 800925e <get_serialized_size_example_interfaces__msg__UInt8MultiArray+0x22>
 800925a:	1b60      	subs	r0, r4, r5
 800925c:	bd70      	pop	{r4, r5, r6, pc}
 800925e:	4620      	mov	r0, r4
 8009260:	2101      	movs	r1, #1
 8009262:	f000 f8bf 	bl	80093e4 <ucdr_alignment>
 8009266:	1933      	adds	r3, r6, r4
 8009268:	181c      	adds	r4, r3, r0
 800926a:	1b60      	subs	r0, r4, r5
 800926c:	e7f6      	b.n	800925c <get_serialized_size_example_interfaces__msg__UInt8MultiArray+0x20>
 800926e:	bf00      	nop

08009270 <_UInt8MultiArray__cdr_deserialize>:
 8009270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009272:	460c      	mov	r4, r1
 8009274:	b083      	sub	sp, #12
 8009276:	b1d9      	cbz	r1, 80092b0 <_UInt8MultiArray__cdr_deserialize+0x40>
 8009278:	4606      	mov	r6, r0
 800927a:	f001 fa45 	bl	800a708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayLayout>
 800927e:	4603      	mov	r3, r0
 8009280:	4621      	mov	r1, r4
 8009282:	4630      	mov	r0, r6
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	4798      	blx	r3
 800928a:	69a7      	ldr	r7, [r4, #24]
 800928c:	ab01      	add	r3, sp, #4
 800928e:	6921      	ldr	r1, [r4, #16]
 8009290:	463a      	mov	r2, r7
 8009292:	4630      	mov	r0, r6
 8009294:	f000 f954 	bl	8009540 <ucdr_deserialize_sequence_uint8_t>
 8009298:	9b01      	ldr	r3, [sp, #4]
 800929a:	4605      	mov	r5, r0
 800929c:	b920      	cbnz	r0, 80092a8 <_UInt8MultiArray__cdr_deserialize+0x38>
 800929e:	429f      	cmp	r7, r3
 80092a0:	d30a      	bcc.n	80092b8 <_UInt8MultiArray__cdr_deserialize+0x48>
 80092a2:	4628      	mov	r0, r5
 80092a4:	b003      	add	sp, #12
 80092a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092a8:	4628      	mov	r0, r5
 80092aa:	6163      	str	r3, [r4, #20]
 80092ac:	b003      	add	sp, #12
 80092ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b0:	460d      	mov	r5, r1
 80092b2:	4628      	mov	r0, r5
 80092b4:	b003      	add	sp, #12
 80092b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b8:	2101      	movs	r1, #1
 80092ba:	4630      	mov	r0, r6
 80092bc:	75b5      	strb	r5, [r6, #22]
 80092be:	7571      	strb	r1, [r6, #21]
 80092c0:	6165      	str	r5, [r4, #20]
 80092c2:	f000 f8a7 	bl	8009414 <ucdr_align_to>
 80092c6:	4630      	mov	r0, r6
 80092c8:	9901      	ldr	r1, [sp, #4]
 80092ca:	f000 f8db 	bl	8009484 <ucdr_advance_buffer>
 80092ce:	4628      	mov	r0, r5
 80092d0:	b003      	add	sp, #12
 80092d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080092d4 <_UInt8MultiArray__cdr_serialize>:
 80092d4:	b188      	cbz	r0, 80092fa <_UInt8MultiArray__cdr_serialize+0x26>
 80092d6:	b538      	push	{r3, r4, r5, lr}
 80092d8:	4604      	mov	r4, r0
 80092da:	460d      	mov	r5, r1
 80092dc:	f001 fa14 	bl	800a708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayLayout>
 80092e0:	4603      	mov	r3, r0
 80092e2:	4629      	mov	r1, r5
 80092e4:	4620      	mov	r0, r4
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	4798      	blx	r3
 80092ec:	4628      	mov	r0, r5
 80092ee:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 80092f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092f6:	f000 b911 	b.w	800951c <ucdr_serialize_sequence_uint8_t>
 80092fa:	4770      	bx	lr

080092fc <_UInt8MultiArray__get_serialized_size>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	4604      	mov	r4, r0
 8009300:	b150      	cbz	r0, 8009318 <_UInt8MultiArray__get_serialized_size+0x1c>
 8009302:	2100      	movs	r1, #0
 8009304:	f001 f99a 	bl	800a63c <get_serialized_size_example_interfaces__msg__MultiArrayLayout>
 8009308:	6965      	ldr	r5, [r4, #20]
 800930a:	4604      	mov	r4, r0
 800930c:	2104      	movs	r1, #4
 800930e:	f000 f869 	bl	80093e4 <ucdr_alignment>
 8009312:	4404      	add	r4, r0
 8009314:	3404      	adds	r4, #4
 8009316:	b90d      	cbnz	r5, 800931c <_UInt8MultiArray__get_serialized_size+0x20>
 8009318:	4620      	mov	r0, r4
 800931a:	bd38      	pop	{r3, r4, r5, pc}
 800931c:	4620      	mov	r0, r4
 800931e:	442c      	add	r4, r5
 8009320:	2101      	movs	r1, #1
 8009322:	f000 f85f 	bl	80093e4 <ucdr_alignment>
 8009326:	4404      	add	r4, r0
 8009328:	4620      	mov	r0, r4
 800932a:	bd38      	pop	{r3, r4, r5, pc}

0800932c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray>:
 800932c:	4800      	ldr	r0, [pc, #0]	; (8009330 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__msg__UInt8MultiArray+0x4>)
 800932e:	4770      	bx	lr
 8009330:	200000c4 	.word	0x200000c4

08009334 <ucdr_check_buffer_available_for>:
 8009334:	7d83      	ldrb	r3, [r0, #22]
 8009336:	b93b      	cbnz	r3, 8009348 <ucdr_check_buffer_available_for+0x14>
 8009338:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800933c:	4419      	add	r1, r3
 800933e:	4288      	cmp	r0, r1
 8009340:	bf34      	ite	cc
 8009342:	2000      	movcc	r0, #0
 8009344:	2001      	movcs	r0, #1
 8009346:	4770      	bx	lr
 8009348:	2000      	movs	r0, #0
 800934a:	4770      	bx	lr

0800934c <ucdr_check_final_buffer_behavior>:
 800934c:	7d83      	ldrb	r3, [r0, #22]
 800934e:	b943      	cbnz	r3, 8009362 <ucdr_check_final_buffer_behavior+0x16>
 8009350:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8009354:	b510      	push	{r4, lr}
 8009356:	4291      	cmp	r1, r2
 8009358:	4604      	mov	r4, r0
 800935a:	d205      	bcs.n	8009368 <ucdr_check_final_buffer_behavior+0x1c>
 800935c:	2301      	movs	r3, #1
 800935e:	4618      	mov	r0, r3
 8009360:	bd10      	pop	{r4, pc}
 8009362:	2300      	movs	r3, #0
 8009364:	4618      	mov	r0, r3
 8009366:	4770      	bx	lr
 8009368:	6982      	ldr	r2, [r0, #24]
 800936a:	b13a      	cbz	r2, 800937c <ucdr_check_final_buffer_behavior+0x30>
 800936c:	69c1      	ldr	r1, [r0, #28]
 800936e:	4790      	blx	r2
 8009370:	f080 0301 	eor.w	r3, r0, #1
 8009374:	75a0      	strb	r0, [r4, #22]
 8009376:	b2db      	uxtb	r3, r3
 8009378:	4618      	mov	r0, r3
 800937a:	bd10      	pop	{r4, pc}
 800937c:	2001      	movs	r0, #1
 800937e:	75a0      	strb	r0, [r4, #22]
 8009380:	e7fa      	b.n	8009378 <ucdr_check_final_buffer_behavior+0x2c>
 8009382:	bf00      	nop

08009384 <ucdr_set_on_full_buffer_callback>:
 8009384:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop

0800938c <ucdr_init_buffer_origin_offset_endian>:
 800938c:	b410      	push	{r4}
 800938e:	9c01      	ldr	r4, [sp, #4]
 8009390:	440a      	add	r2, r1
 8009392:	6001      	str	r1, [r0, #0]
 8009394:	6042      	str	r2, [r0, #4]
 8009396:	190a      	adds	r2, r1, r4
 8009398:	441c      	add	r4, r3
 800939a:	6082      	str	r2, [r0, #8]
 800939c:	2200      	movs	r2, #0
 800939e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80093a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80093a6:	7542      	strb	r2, [r0, #21]
 80093a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093ac:	7582      	strb	r2, [r0, #22]
 80093ae:	7503      	strb	r3, [r0, #20]
 80093b0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop

080093b8 <ucdr_init_buffer_origin_offset>:
 80093b8:	b510      	push	{r4, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	9c04      	ldr	r4, [sp, #16]
 80093be:	9400      	str	r4, [sp, #0]
 80093c0:	2401      	movs	r4, #1
 80093c2:	9401      	str	r4, [sp, #4]
 80093c4:	f7ff ffe2 	bl	800938c <ucdr_init_buffer_origin_offset_endian>
 80093c8:	b002      	add	sp, #8
 80093ca:	bd10      	pop	{r4, pc}

080093cc <ucdr_init_buffer_origin>:
 80093cc:	b510      	push	{r4, lr}
 80093ce:	2400      	movs	r4, #0
 80093d0:	b082      	sub	sp, #8
 80093d2:	9400      	str	r4, [sp, #0]
 80093d4:	f7ff fff0 	bl	80093b8 <ucdr_init_buffer_origin_offset>
 80093d8:	b002      	add	sp, #8
 80093da:	bd10      	pop	{r4, pc}

080093dc <ucdr_init_buffer>:
 80093dc:	2300      	movs	r3, #0
 80093de:	f7ff bff5 	b.w	80093cc <ucdr_init_buffer_origin>
 80093e2:	bf00      	nop

080093e4 <ucdr_alignment>:
 80093e4:	fbb0 f2f1 	udiv	r2, r0, r1
 80093e8:	fb02 0011 	mls	r0, r2, r1, r0
 80093ec:	1e4b      	subs	r3, r1, #1
 80093ee:	1a08      	subs	r0, r1, r0
 80093f0:	4018      	ands	r0, r3
 80093f2:	4770      	bx	lr

080093f4 <ucdr_buffer_alignment>:
 80093f4:	7d43      	ldrb	r3, [r0, #21]
 80093f6:	428b      	cmp	r3, r1
 80093f8:	d209      	bcs.n	800940e <ucdr_buffer_alignment+0x1a>
 80093fa:	6903      	ldr	r3, [r0, #16]
 80093fc:	1e4a      	subs	r2, r1, #1
 80093fe:	fbb3 f0f1 	udiv	r0, r3, r1
 8009402:	fb01 3010 	mls	r0, r1, r0, r3
 8009406:	1a09      	subs	r1, r1, r0
 8009408:	ea01 0002 	and.w	r0, r1, r2
 800940c:	4770      	bx	lr
 800940e:	2000      	movs	r0, #0
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop

08009414 <ucdr_align_to>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	4604      	mov	r4, r0
 8009418:	460d      	mov	r5, r1
 800941a:	f7ff ffeb 	bl	80093f4 <ucdr_buffer_alignment>
 800941e:	68a3      	ldr	r3, [r4, #8]
 8009420:	7565      	strb	r5, [r4, #21]
 8009422:	181a      	adds	r2, r3, r0
 8009424:	6923      	ldr	r3, [r4, #16]
 8009426:	4418      	add	r0, r3
 8009428:	6863      	ldr	r3, [r4, #4]
 800942a:	4293      	cmp	r3, r2
 800942c:	6120      	str	r0, [r4, #16]
 800942e:	bf28      	it	cs
 8009430:	4613      	movcs	r3, r2
 8009432:	60a3      	str	r3, [r4, #8]
 8009434:	bd38      	pop	{r3, r4, r5, pc}
 8009436:	bf00      	nop

08009438 <ucdr_buffer_length>:
 8009438:	6882      	ldr	r2, [r0, #8]
 800943a:	6800      	ldr	r0, [r0, #0]
 800943c:	1a10      	subs	r0, r2, r0
 800943e:	4770      	bx	lr

08009440 <ucdr_buffer_remaining>:
 8009440:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8009444:	1a10      	subs	r0, r2, r0
 8009446:	4770      	bx	lr

08009448 <ucdr_check_final_buffer_behavior_array>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	7d83      	ldrb	r3, [r0, #22]
 800944c:	b9a3      	cbnz	r3, 8009478 <ucdr_check_final_buffer_behavior_array+0x30>
 800944e:	4604      	mov	r4, r0
 8009450:	460d      	mov	r5, r1
 8009452:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8009456:	429a      	cmp	r2, r3
 8009458:	d300      	bcc.n	800945c <ucdr_check_final_buffer_behavior_array+0x14>
 800945a:	b931      	cbnz	r1, 800946a <ucdr_check_final_buffer_behavior_array+0x22>
 800945c:	4620      	mov	r0, r4
 800945e:	f7ff ffef 	bl	8009440 <ucdr_buffer_remaining>
 8009462:	42a8      	cmp	r0, r5
 8009464:	bf28      	it	cs
 8009466:	4628      	movcs	r0, r5
 8009468:	bd38      	pop	{r3, r4, r5, pc}
 800946a:	6983      	ldr	r3, [r0, #24]
 800946c:	b133      	cbz	r3, 800947c <ucdr_check_final_buffer_behavior_array+0x34>
 800946e:	69c1      	ldr	r1, [r0, #28]
 8009470:	4798      	blx	r3
 8009472:	75a0      	strb	r0, [r4, #22]
 8009474:	2800      	cmp	r0, #0
 8009476:	d0f1      	beq.n	800945c <ucdr_check_final_buffer_behavior_array+0x14>
 8009478:	2000      	movs	r0, #0
 800947a:	bd38      	pop	{r3, r4, r5, pc}
 800947c:	2301      	movs	r3, #1
 800947e:	7583      	strb	r3, [r0, #22]
 8009480:	e7fa      	b.n	8009478 <ucdr_check_final_buffer_behavior_array+0x30>
 8009482:	bf00      	nop

08009484 <ucdr_advance_buffer>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	4604      	mov	r4, r0
 8009488:	460d      	mov	r5, r1
 800948a:	f7ff ff53 	bl	8009334 <ucdr_check_buffer_available_for>
 800948e:	b178      	cbz	r0, 80094b0 <ucdr_advance_buffer+0x2c>
 8009490:	6923      	ldr	r3, [r4, #16]
 8009492:	68a2      	ldr	r2, [r4, #8]
 8009494:	442b      	add	r3, r5
 8009496:	442a      	add	r2, r5
 8009498:	6123      	str	r3, [r4, #16]
 800949a:	2301      	movs	r3, #1
 800949c:	60a2      	str	r2, [r4, #8]
 800949e:	7563      	strb	r3, [r4, #21]
 80094a0:	bd38      	pop	{r3, r4, r5, pc}
 80094a2:	68a2      	ldr	r2, [r4, #8]
 80094a4:	1a2d      	subs	r5, r5, r0
 80094a6:	6923      	ldr	r3, [r4, #16]
 80094a8:	4402      	add	r2, r0
 80094aa:	4418      	add	r0, r3
 80094ac:	60a2      	str	r2, [r4, #8]
 80094ae:	6120      	str	r0, [r4, #16]
 80094b0:	4629      	mov	r1, r5
 80094b2:	2201      	movs	r2, #1
 80094b4:	4620      	mov	r0, r4
 80094b6:	f7ff ffc7 	bl	8009448 <ucdr_check_final_buffer_behavior_array>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d1f1      	bne.n	80094a2 <ucdr_advance_buffer+0x1e>
 80094be:	2301      	movs	r3, #1
 80094c0:	7563      	strb	r3, [r4, #21]
 80094c2:	bd38      	pop	{r3, r4, r5, pc}

080094c4 <ucdr_serialize_sequence_char>:
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	4615      	mov	r5, r2
 80094c8:	460e      	mov	r6, r1
 80094ca:	7d01      	ldrb	r1, [r0, #20]
 80094cc:	4604      	mov	r4, r0
 80094ce:	f001 fd2d 	bl	800af2c <ucdr_serialize_endian_uint32_t>
 80094d2:	b90d      	cbnz	r5, 80094d8 <ucdr_serialize_sequence_char+0x14>
 80094d4:	2001      	movs	r0, #1
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	462b      	mov	r3, r5
 80094da:	4632      	mov	r2, r6
 80094dc:	7d21      	ldrb	r1, [r4, #20]
 80094de:	4620      	mov	r0, r4
 80094e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80094e4:	f001 b914 	b.w	800a710 <ucdr_serialize_endian_array_char>

080094e8 <ucdr_deserialize_sequence_char>:
 80094e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ec:	461d      	mov	r5, r3
 80094ee:	4616      	mov	r6, r2
 80094f0:	460f      	mov	r7, r1
 80094f2:	461a      	mov	r2, r3
 80094f4:	7d01      	ldrb	r1, [r0, #20]
 80094f6:	4604      	mov	r4, r0
 80094f8:	f001 fe40 	bl	800b17c <ucdr_deserialize_endian_uint32_t>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	429e      	cmp	r6, r3
 8009500:	d201      	bcs.n	8009506 <ucdr_deserialize_sequence_char+0x1e>
 8009502:	2201      	movs	r2, #1
 8009504:	75a2      	strb	r2, [r4, #22]
 8009506:	b913      	cbnz	r3, 800950e <ucdr_deserialize_sequence_char+0x26>
 8009508:	2001      	movs	r0, #1
 800950a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800950e:	463a      	mov	r2, r7
 8009510:	7d21      	ldrb	r1, [r4, #20]
 8009512:	4620      	mov	r0, r4
 8009514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009518:	f001 b92c 	b.w	800a774 <ucdr_deserialize_endian_array_char>

0800951c <ucdr_serialize_sequence_uint8_t>:
 800951c:	b570      	push	{r4, r5, r6, lr}
 800951e:	4615      	mov	r5, r2
 8009520:	460e      	mov	r6, r1
 8009522:	7d01      	ldrb	r1, [r0, #20]
 8009524:	4604      	mov	r4, r0
 8009526:	f001 fd01 	bl	800af2c <ucdr_serialize_endian_uint32_t>
 800952a:	b90d      	cbnz	r5, 8009530 <ucdr_serialize_sequence_uint8_t+0x14>
 800952c:	2001      	movs	r0, #1
 800952e:	bd70      	pop	{r4, r5, r6, pc}
 8009530:	462b      	mov	r3, r5
 8009532:	4632      	mov	r2, r6
 8009534:	7d21      	ldrb	r1, [r4, #20]
 8009536:	4620      	mov	r0, r4
 8009538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800953c:	f001 b980 	b.w	800a840 <ucdr_serialize_endian_array_uint8_t>

08009540 <ucdr_deserialize_sequence_uint8_t>:
 8009540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009544:	461d      	mov	r5, r3
 8009546:	4616      	mov	r6, r2
 8009548:	460f      	mov	r7, r1
 800954a:	461a      	mov	r2, r3
 800954c:	7d01      	ldrb	r1, [r0, #20]
 800954e:	4604      	mov	r4, r0
 8009550:	f001 fe14 	bl	800b17c <ucdr_deserialize_endian_uint32_t>
 8009554:	682b      	ldr	r3, [r5, #0]
 8009556:	429e      	cmp	r6, r3
 8009558:	d201      	bcs.n	800955e <ucdr_deserialize_sequence_uint8_t+0x1e>
 800955a:	2201      	movs	r2, #1
 800955c:	75a2      	strb	r2, [r4, #22]
 800955e:	b913      	cbnz	r3, 8009566 <ucdr_deserialize_sequence_uint8_t+0x26>
 8009560:	2001      	movs	r0, #1
 8009562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009566:	463a      	mov	r2, r7
 8009568:	7d21      	ldrb	r1, [r4, #20]
 800956a:	4620      	mov	r0, r4
 800956c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009570:	f001 b9cc 	b.w	800a90c <ucdr_deserialize_endian_array_uint8_t>

08009574 <rcl_get_zero_initialized_publisher>:
 8009574:	4b01      	ldr	r3, [pc, #4]	; (800957c <rcl_get_zero_initialized_publisher+0x8>)
 8009576:	6818      	ldr	r0, [r3, #0]
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	080179b4 	.word	0x080179b4

08009580 <rcl_publisher_init>:
 8009580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009584:	b088      	sub	sp, #32
 8009586:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8009588:	2e00      	cmp	r6, #0
 800958a:	d06c      	beq.n	8009666 <rcl_publisher_init+0xe6>
 800958c:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 8009590:	4605      	mov	r5, r0
 8009592:	460f      	mov	r7, r1
 8009594:	4690      	mov	r8, r2
 8009596:	4650      	mov	r0, sl
 8009598:	4699      	mov	r9, r3
 800959a:	f000 f9f9 	bl	8009990 <rcutils_allocator_is_valid>
 800959e:	f080 0401 	eor.w	r4, r0, #1
 80095a2:	b2e4      	uxtb	r4, r4
 80095a4:	2c00      	cmp	r4, #0
 80095a6:	d15e      	bne.n	8009666 <rcl_publisher_init+0xe6>
 80095a8:	2d00      	cmp	r5, #0
 80095aa:	d05c      	beq.n	8009666 <rcl_publisher_init+0xe6>
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	b123      	cbz	r3, 80095ba <rcl_publisher_init+0x3a>
 80095b0:	2464      	movs	r4, #100	; 0x64
 80095b2:	4620      	mov	r0, r4
 80095b4:	b008      	add	sp, #32
 80095b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ba:	4638      	mov	r0, r7
 80095bc:	f005 f980 	bl	800e8c0 <rcl_node_is_valid>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d055      	beq.n	8009670 <rcl_publisher_init+0xf0>
 80095c4:	f1b8 0f00 	cmp.w	r8, #0
 80095c8:	d04d      	beq.n	8009666 <rcl_publisher_init+0xe6>
 80095ca:	fab9 f389 	clz	r3, r9
 80095ce:	095b      	lsrs	r3, r3, #5
 80095d0:	f1b9 0f00 	cmp.w	r9, #0
 80095d4:	d047      	beq.n	8009666 <rcl_publisher_init+0xe6>
 80095d6:	aa07      	add	r2, sp, #28
 80095d8:	9307      	str	r3, [sp, #28]
 80095da:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80095de:	f106 0358 	add.w	r3, r6, #88	; 0x58
 80095e2:	9205      	str	r2, [sp, #20]
 80095e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80095e8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80095ec:	4649      	mov	r1, r9
 80095ee:	4638      	mov	r0, r7
 80095f0:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80095f4:	f005 f9dc 	bl	800e9b0 <rcl_node_resolve_name>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d150      	bne.n	800969e <rcl_publisher_init+0x11e>
 80095fc:	21c8      	movs	r1, #200	; 0xc8
 80095fe:	2001      	movs	r0, #1
 8009600:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 8009604:	4798      	blx	r3
 8009606:	6028      	str	r0, [r5, #0]
 8009608:	2800      	cmp	r0, #0
 800960a:	d050      	beq.n	80096ae <rcl_publisher_init+0x12e>
 800960c:	4638      	mov	r0, r7
 800960e:	f005 f979 	bl	800e904 <rcl_node_get_rmw_handle>
 8009612:	f106 0364 	add.w	r3, r6, #100	; 0x64
 8009616:	4641      	mov	r1, r8
 8009618:	9a07      	ldr	r2, [sp, #28]
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	4633      	mov	r3, r6
 800961e:	682c      	ldr	r4, [r5, #0]
 8009620:	f000 fa74 	bl	8009b0c <rmw_create_publisher>
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800962a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800962e:	b370      	cbz	r0, 800968e <rcl_publisher_init+0x10e>
 8009630:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8009634:	f000 fb4e 	bl	8009cd4 <rmw_publisher_get_actual_qos>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	4604      	mov	r4, r0
 800963c:	b9d0      	cbnz	r0, 8009674 <rcl_publisher_init+0xf4>
 800963e:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 8009642:	4631      	mov	r1, r6
 8009644:	4618      	mov	r0, r3
 8009646:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800964a:	2270      	movs	r2, #112	; 0x70
 800964c:	f009 fb1c 	bl	8012c88 <memcpy>
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8009656:	9807      	ldr	r0, [sp, #28]
 8009658:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800965a:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800965c:	4798      	blx	r3
 800965e:	4620      	mov	r0, r4
 8009660:	b008      	add	sp, #32
 8009662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009666:	240b      	movs	r4, #11
 8009668:	4620      	mov	r0, r4
 800966a:	b008      	add	sp, #32
 800966c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009670:	24c8      	movs	r4, #200	; 0xc8
 8009672:	e79e      	b.n	80095b2 <rcl_publisher_init+0x32>
 8009674:	b1cb      	cbz	r3, 80096aa <rcl_publisher_init+0x12a>
 8009676:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800967a:	b142      	cbz	r2, 800968e <rcl_publisher_init+0x10e>
 800967c:	4638      	mov	r0, r7
 800967e:	f005 f941 	bl	800e904 <rcl_node_get_rmw_handle>
 8009682:	682b      	ldr	r3, [r5, #0]
 8009684:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8009688:	f000 fb38 	bl	8009cfc <rmw_destroy_publisher>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	4618      	mov	r0, r3
 8009690:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8009692:	6e31      	ldr	r1, [r6, #96]	; 0x60
 8009694:	2401      	movs	r4, #1
 8009696:	4790      	blx	r2
 8009698:	2300      	movs	r3, #0
 800969a:	602b      	str	r3, [r5, #0]
 800969c:	e7db      	b.n	8009656 <rcl_publisher_init+0xd6>
 800969e:	2867      	cmp	r0, #103	; 0x67
 80096a0:	d007      	beq.n	80096b2 <rcl_publisher_init+0x132>
 80096a2:	2869      	cmp	r0, #105	; 0x69
 80096a4:	d005      	beq.n	80096b2 <rcl_publisher_init+0x132>
 80096a6:	280a      	cmp	r0, #10
 80096a8:	d001      	beq.n	80096ae <rcl_publisher_init+0x12e>
 80096aa:	2401      	movs	r4, #1
 80096ac:	e7d3      	b.n	8009656 <rcl_publisher_init+0xd6>
 80096ae:	240a      	movs	r4, #10
 80096b0:	e7d1      	b.n	8009656 <rcl_publisher_init+0xd6>
 80096b2:	2467      	movs	r4, #103	; 0x67
 80096b4:	e7cf      	b.n	8009656 <rcl_publisher_init+0xd6>
 80096b6:	bf00      	nop

080096b8 <rcl_publisher_get_default_options>:
 80096b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ba:	4d1d      	ldr	r5, [pc, #116]	; (8009730 <rcl_publisher_get_default_options+0x78>)
 80096bc:	b08b      	sub	sp, #44	; 0x2c
 80096be:	2250      	movs	r2, #80	; 0x50
 80096c0:	491c      	ldr	r1, [pc, #112]	; (8009734 <rcl_publisher_get_default_options+0x7c>)
 80096c2:	4604      	mov	r4, r0
 80096c4:	4628      	mov	r0, r5
 80096c6:	f009 fadf 	bl	8012c88 <memcpy>
 80096ca:	a802      	add	r0, sp, #8
 80096cc:	f000 f952 	bl	8009974 <rcutils_get_default_allocator>
 80096d0:	f10d 0c08 	add.w	ip, sp, #8
 80096d4:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 80096d8:	466e      	mov	r6, sp
 80096da:	2700      	movs	r7, #0
 80096dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80096e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80096e4:	f8dc 3000 	ldr.w	r3, [ip]
 80096e8:	4630      	mov	r0, r6
 80096ea:	f8ce 3000 	str.w	r3, [lr]
 80096ee:	f000 f98f 	bl	8009a10 <rmw_get_default_publisher_options>
 80096f2:	f105 0364 	add.w	r3, r5, #100	; 0x64
 80096f6:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 80096fa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80096fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8009702:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 8009706:	f005 f903 	bl	800e910 <rcl_get_disable_loaned_message>
 800970a:	b958      	cbnz	r0, 8009724 <rcl_publisher_get_default_options+0x6c>
 800970c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8009710:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
 8009714:	2270      	movs	r2, #112	; 0x70
 8009716:	4906      	ldr	r1, [pc, #24]	; (8009730 <rcl_publisher_get_default_options+0x78>)
 8009718:	4620      	mov	r0, r4
 800971a:	f009 fab5 	bl	8012c88 <memcpy>
 800971e:	4620      	mov	r0, r4
 8009720:	b00b      	add	sp, #44	; 0x2c
 8009722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009724:	f000 f958 	bl	80099d8 <rcutils_reset_error>
 8009728:	f885 706c 	strb.w	r7, [r5, #108]	; 0x6c
 800972c:	e7f2      	b.n	8009714 <rcl_publisher_get_default_options+0x5c>
 800972e:	bf00      	nop
 8009730:	20009ee8 	.word	0x20009ee8
 8009734:	080179b8 	.word	0x080179b8

08009738 <rcl_publish>:
 8009738:	b1f8      	cbz	r0, 800977a <rcl_publish+0x42>
 800973a:	6803      	ldr	r3, [r0, #0]
 800973c:	b570      	push	{r4, r5, r6, lr}
 800973e:	4604      	mov	r4, r0
 8009740:	b1b3      	cbz	r3, 8009770 <rcl_publish+0x38>
 8009742:	4616      	mov	r6, r2
 8009744:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009748:	b192      	cbz	r2, 8009770 <rcl_publish+0x38>
 800974a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800974e:	460d      	mov	r5, r1
 8009750:	f004 fcba 	bl	800e0c8 <rcl_context_is_valid>
 8009754:	b160      	cbz	r0, 8009770 <rcl_publish+0x38>
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800975c:	b140      	cbz	r0, 8009770 <rcl_publish+0x38>
 800975e:	b155      	cbz	r5, 8009776 <rcl_publish+0x3e>
 8009760:	4632      	mov	r2, r6
 8009762:	4629      	mov	r1, r5
 8009764:	f000 f972 	bl	8009a4c <rmw_publish>
 8009768:	3800      	subs	r0, #0
 800976a:	bf18      	it	ne
 800976c:	2001      	movne	r0, #1
 800976e:	bd70      	pop	{r4, r5, r6, pc}
 8009770:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009774:	bd70      	pop	{r4, r5, r6, pc}
 8009776:	200b      	movs	r0, #11
 8009778:	bd70      	pop	{r4, r5, r6, pc}
 800977a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800977e:	4770      	bx	lr

08009780 <rclc_support_init>:
 8009780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009784:	b086      	sub	sp, #24
 8009786:	b3bb      	cbz	r3, 80097f8 <rclc_support_init+0x78>
 8009788:	4606      	mov	r6, r0
 800978a:	b3a8      	cbz	r0, 80097f8 <rclc_support_init+0x78>
 800978c:	461c      	mov	r4, r3
 800978e:	460f      	mov	r7, r1
 8009790:	4690      	mov	r8, r2
 8009792:	f004 fe39 	bl	800e408 <rcl_get_zero_initialized_init_options>
 8009796:	f104 050c 	add.w	r5, r4, #12
 800979a:	9005      	str	r0, [sp, #20]
 800979c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80097a0:	e88d 0003 	stmia.w	sp, {r0, r1}
 80097a4:	a805      	add	r0, sp, #20
 80097a6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80097aa:	f004 fe2f 	bl	800e40c <rcl_init_options_init>
 80097ae:	4605      	mov	r5, r0
 80097b0:	b9e0      	cbnz	r0, 80097ec <rclc_support_init+0x6c>
 80097b2:	ad02      	add	r5, sp, #8
 80097b4:	4628      	mov	r0, r5
 80097b6:	f004 fc7d 	bl	800e0b4 <rcl_get_zero_initialized_context>
 80097ba:	4633      	mov	r3, r6
 80097bc:	aa05      	add	r2, sp, #20
 80097be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80097c2:	e886 0003 	stmia.w	r6, {r0, r1}
 80097c6:	4641      	mov	r1, r8
 80097c8:	4638      	mov	r0, r7
 80097ca:	f004 fce3 	bl	800e194 <rcl_init>
 80097ce:	4605      	mov	r5, r0
 80097d0:	b9b8      	cbnz	r0, 8009802 <rclc_support_init+0x82>
 80097d2:	4622      	mov	r2, r4
 80097d4:	f106 010c 	add.w	r1, r6, #12
 80097d8:	2003      	movs	r0, #3
 80097da:	60b4      	str	r4, [r6, #8]
 80097dc:	f005 fad6 	bl	800ed8c <rcl_clock_init>
 80097e0:	4605      	mov	r5, r0
 80097e2:	b970      	cbnz	r0, 8009802 <rclc_support_init+0x82>
 80097e4:	a805      	add	r0, sp, #20
 80097e6:	f004 fe6d 	bl	800e4c4 <rcl_init_options_fini>
 80097ea:	b108      	cbz	r0, 80097f0 <rclc_support_init+0x70>
 80097ec:	f000 f8f4 	bl	80099d8 <rcutils_reset_error>
 80097f0:	4628      	mov	r0, r5
 80097f2:	b006      	add	sp, #24
 80097f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f8:	250b      	movs	r5, #11
 80097fa:	4628      	mov	r0, r5
 80097fc:	b006      	add	sp, #24
 80097fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009802:	f000 f8e9 	bl	80099d8 <rcutils_reset_error>
 8009806:	a805      	add	r0, sp, #20
 8009808:	f004 fe5c 	bl	800e4c4 <rcl_init_options_fini>
 800980c:	2800      	cmp	r0, #0
 800980e:	d0ef      	beq.n	80097f0 <rclc_support_init+0x70>
 8009810:	e7ec      	b.n	80097ec <rclc_support_init+0x6c>
 8009812:	bf00      	nop

08009814 <rclc_node_init_default>:
 8009814:	2b00      	cmp	r3, #0
 8009816:	bf18      	it	ne
 8009818:	2a00      	cmpne	r2, #0
 800981a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800981e:	4616      	mov	r6, r2
 8009820:	bf0c      	ite	eq
 8009822:	2201      	moveq	r2, #1
 8009824:	2200      	movne	r2, #0
 8009826:	b0a3      	sub	sp, #140	; 0x8c
 8009828:	2900      	cmp	r1, #0
 800982a:	bf08      	it	eq
 800982c:	f042 0201 	orreq.w	r2, r2, #1
 8009830:	bb22      	cbnz	r2, 800987c <rclc_node_init_default+0x68>
 8009832:	4604      	mov	r4, r0
 8009834:	b310      	cbz	r0, 800987c <rclc_node_init_default+0x68>
 8009836:	f10d 0810 	add.w	r8, sp, #16
 800983a:	461f      	mov	r7, r3
 800983c:	460d      	mov	r5, r1
 800983e:	f10d 0918 	add.w	r9, sp, #24
 8009842:	4640      	mov	r0, r8
 8009844:	f004 feea 	bl	800e61c <rcl_get_zero_initialized_node>
 8009848:	e898 0003 	ldmia.w	r8, {r0, r1}
 800984c:	e884 0003 	stmia.w	r4, {r0, r1}
 8009850:	4648      	mov	r0, r9
 8009852:	f005 f87d 	bl	800e950 <rcl_node_get_default_options>
 8009856:	4640      	mov	r0, r8
 8009858:	f004 fee0 	bl	800e61c <rcl_get_zero_initialized_node>
 800985c:	f8cd 9000 	str.w	r9, [sp]
 8009860:	463b      	mov	r3, r7
 8009862:	4632      	mov	r2, r6
 8009864:	e898 0003 	ldmia.w	r8, {r0, r1}
 8009868:	e884 0003 	stmia.w	r4, {r0, r1}
 800986c:	4629      	mov	r1, r5
 800986e:	4620      	mov	r0, r4
 8009870:	f004 fede 	bl	800e630 <rcl_node_init>
 8009874:	b930      	cbnz	r0, 8009884 <rclc_node_init_default+0x70>
 8009876:	b023      	add	sp, #140	; 0x8c
 8009878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800987c:	200b      	movs	r0, #11
 800987e:	b023      	add	sp, #140	; 0x8c
 8009880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009884:	9003      	str	r0, [sp, #12]
 8009886:	f000 f8a7 	bl	80099d8 <rcutils_reset_error>
 800988a:	f000 f8a5 	bl	80099d8 <rcutils_reset_error>
 800988e:	9803      	ldr	r0, [sp, #12]
 8009890:	b023      	add	sp, #140	; 0x8c
 8009892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009896:	bf00      	nop

08009898 <rclc_publisher_init_default>:
 8009898:	2b00      	cmp	r3, #0
 800989a:	bf18      	it	ne
 800989c:	2a00      	cmpne	r2, #0
 800989e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a2:	4616      	mov	r6, r2
 80098a4:	bf0c      	ite	eq
 80098a6:	2201      	moveq	r2, #1
 80098a8:	2200      	movne	r2, #0
 80098aa:	b0a0      	sub	sp, #128	; 0x80
 80098ac:	2900      	cmp	r1, #0
 80098ae:	bf08      	it	eq
 80098b0:	f042 0201 	orreq.w	r2, r2, #1
 80098b4:	bb1a      	cbnz	r2, 80098fe <rclc_publisher_init_default+0x66>
 80098b6:	4604      	mov	r4, r0
 80098b8:	b308      	cbz	r0, 80098fe <rclc_publisher_init_default+0x66>
 80098ba:	f10d 0810 	add.w	r8, sp, #16
 80098be:	461f      	mov	r7, r3
 80098c0:	460d      	mov	r5, r1
 80098c2:	f7ff fe57 	bl	8009574 <rcl_get_zero_initialized_publisher>
 80098c6:	6020      	str	r0, [r4, #0]
 80098c8:	4640      	mov	r0, r8
 80098ca:	f7ff fef5 	bl	80096b8 <rcl_publisher_get_default_options>
 80098ce:	2250      	movs	r2, #80	; 0x50
 80098d0:	490d      	ldr	r1, [pc, #52]	; (8009908 <rclc_publisher_init_default+0x70>)
 80098d2:	4640      	mov	r0, r8
 80098d4:	f009 f9d8 	bl	8012c88 <memcpy>
 80098d8:	463b      	mov	r3, r7
 80098da:	4632      	mov	r2, r6
 80098dc:	4629      	mov	r1, r5
 80098de:	4620      	mov	r0, r4
 80098e0:	f8cd 8000 	str.w	r8, [sp]
 80098e4:	f7ff fe4c 	bl	8009580 <rcl_publisher_init>
 80098e8:	b910      	cbnz	r0, 80098f0 <rclc_publisher_init_default+0x58>
 80098ea:	b020      	add	sp, #128	; 0x80
 80098ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f0:	9003      	str	r0, [sp, #12]
 80098f2:	f000 f871 	bl	80099d8 <rcutils_reset_error>
 80098f6:	9803      	ldr	r0, [sp, #12]
 80098f8:	b020      	add	sp, #128	; 0x80
 80098fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098fe:	200b      	movs	r0, #11
 8009900:	b020      	add	sp, #128	; 0x80
 8009902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009906:	bf00      	nop
 8009908:	08017a08 	.word	0x08017a08

0800990c <__default_zero_allocate>:
 800990c:	f009 b8ac 	b.w	8012a68 <calloc>

08009910 <__default_reallocate>:
 8009910:	f00a b992 	b.w	8013c38 <realloc>

08009914 <__default_deallocate>:
 8009914:	f009 b9b0 	b.w	8012c78 <free>

08009918 <__default_allocate>:
 8009918:	f009 b9a6 	b.w	8012c68 <malloc>

0800991c <rcutils_get_zero_initialized_allocator>:
 800991c:	b510      	push	{r4, lr}
 800991e:	4c05      	ldr	r4, [pc, #20]	; (8009934 <rcutils_get_zero_initialized_allocator+0x18>)
 8009920:	4686      	mov	lr, r0
 8009922:	4684      	mov	ip, r0
 8009924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009926:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800992a:	6823      	ldr	r3, [r4, #0]
 800992c:	4670      	mov	r0, lr
 800992e:	f8cc 3000 	str.w	r3, [ip]
 8009932:	bd10      	pop	{r4, pc}
 8009934:	08017a58 	.word	0x08017a58

08009938 <rcutils_set_default_allocator>:
 8009938:	b1a8      	cbz	r0, 8009966 <rcutils_set_default_allocator+0x2e>
 800993a:	6802      	ldr	r2, [r0, #0]
 800993c:	b1a2      	cbz	r2, 8009968 <rcutils_set_default_allocator+0x30>
 800993e:	6841      	ldr	r1, [r0, #4]
 8009940:	b1a1      	cbz	r1, 800996c <rcutils_set_default_allocator+0x34>
 8009942:	b410      	push	{r4}
 8009944:	68c4      	ldr	r4, [r0, #12]
 8009946:	b164      	cbz	r4, 8009962 <rcutils_set_default_allocator+0x2a>
 8009948:	6880      	ldr	r0, [r0, #8]
 800994a:	b138      	cbz	r0, 800995c <rcutils_set_default_allocator+0x24>
 800994c:	4b08      	ldr	r3, [pc, #32]	; (8009970 <rcutils_set_default_allocator+0x38>)
 800994e:	601a      	str	r2, [r3, #0]
 8009950:	2200      	movs	r2, #0
 8009952:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8009956:	2001      	movs	r0, #1
 8009958:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800995c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	4620      	mov	r0, r4
 8009964:	e7fa      	b.n	800995c <rcutils_set_default_allocator+0x24>
 8009966:	4770      	bx	lr
 8009968:	4610      	mov	r0, r2
 800996a:	4770      	bx	lr
 800996c:	4608      	mov	r0, r1
 800996e:	4770      	bx	lr
 8009970:	200000f8 	.word	0x200000f8

08009974 <rcutils_get_default_allocator>:
 8009974:	b510      	push	{r4, lr}
 8009976:	4c05      	ldr	r4, [pc, #20]	; (800998c <rcutils_get_default_allocator+0x18>)
 8009978:	4686      	mov	lr, r0
 800997a:	4684      	mov	ip, r0
 800997c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800997e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	4670      	mov	r0, lr
 8009986:	f8cc 3000 	str.w	r3, [ip]
 800998a:	bd10      	pop	{r4, pc}
 800998c:	200000f8 	.word	0x200000f8

08009990 <rcutils_allocator_is_valid>:
 8009990:	b158      	cbz	r0, 80099aa <rcutils_allocator_is_valid+0x1a>
 8009992:	6803      	ldr	r3, [r0, #0]
 8009994:	b143      	cbz	r3, 80099a8 <rcutils_allocator_is_valid+0x18>
 8009996:	6843      	ldr	r3, [r0, #4]
 8009998:	b133      	cbz	r3, 80099a8 <rcutils_allocator_is_valid+0x18>
 800999a:	68c3      	ldr	r3, [r0, #12]
 800999c:	b123      	cbz	r3, 80099a8 <rcutils_allocator_is_valid+0x18>
 800999e:	6880      	ldr	r0, [r0, #8]
 80099a0:	3800      	subs	r0, #0
 80099a2:	bf18      	it	ne
 80099a4:	2001      	movne	r0, #1
 80099a6:	4770      	bx	lr
 80099a8:	4618      	mov	r0, r3
 80099aa:	4770      	bx	lr

080099ac <rcutils_get_error_string>:
 80099ac:	4b06      	ldr	r3, [pc, #24]	; (80099c8 <rcutils_get_error_string+0x1c>)
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	b13b      	cbz	r3, 80099c2 <rcutils_get_error_string+0x16>
 80099b2:	4b06      	ldr	r3, [pc, #24]	; (80099cc <rcutils_get_error_string+0x20>)
 80099b4:	781a      	ldrb	r2, [r3, #0]
 80099b6:	b90a      	cbnz	r2, 80099bc <rcutils_get_error_string+0x10>
 80099b8:	2201      	movs	r2, #1
 80099ba:	701a      	strb	r2, [r3, #0]
 80099bc:	4b04      	ldr	r3, [pc, #16]	; (80099d0 <rcutils_get_error_string+0x24>)
 80099be:	7818      	ldrb	r0, [r3, #0]
 80099c0:	4770      	bx	lr
 80099c2:	4b04      	ldr	r3, [pc, #16]	; (80099d4 <rcutils_get_error_string+0x28>)
 80099c4:	7818      	ldrb	r0, [r3, #0]
 80099c6:	4770      	bx	lr
 80099c8:	20009f58 	.word	0x20009f58
 80099cc:	20009f71 	.word	0x20009f71
 80099d0:	20009f70 	.word	0x20009f70
 80099d4:	08017a6c 	.word	0x08017a6c

080099d8 <rcutils_reset_error>:
 80099d8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80099f8 <rcutils_reset_error+0x20>
 80099dc:	2300      	movs	r3, #0
 80099de:	4a08      	ldr	r2, [pc, #32]	; (8009a00 <rcutils_reset_error+0x28>)
 80099e0:	4808      	ldr	r0, [pc, #32]	; (8009a04 <rcutils_reset_error+0x2c>)
 80099e2:	8013      	strh	r3, [r2, #0]
 80099e4:	4908      	ldr	r1, [pc, #32]	; (8009a08 <rcutils_reset_error+0x30>)
 80099e6:	7003      	strb	r3, [r0, #0]
 80099e8:	700b      	strb	r3, [r1, #0]
 80099ea:	ed82 7b02 	vstr	d7, [r2, #8]
 80099ee:	4a07      	ldr	r2, [pc, #28]	; (8009a0c <rcutils_reset_error+0x34>)
 80099f0:	7013      	strb	r3, [r2, #0]
 80099f2:	4770      	bx	lr
 80099f4:	f3af 8000 	nop.w
	...
 8009a00:	20009f60 	.word	0x20009f60
 8009a04:	20009f71 	.word	0x20009f71
 8009a08:	20009f70 	.word	0x20009f70
 8009a0c:	20009f58 	.word	0x20009f58

08009a10 <rmw_get_default_publisher_options>:
 8009a10:	2200      	movs	r2, #0
 8009a12:	6002      	str	r2, [r0, #0]
 8009a14:	7102      	strb	r2, [r0, #4]
 8009a16:	4770      	bx	lr

08009a18 <rmw_uros_set_custom_transport>:
 8009a18:	b470      	push	{r4, r5, r6}
 8009a1a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8009a1e:	b162      	cbz	r2, 8009a3a <rmw_uros_set_custom_transport+0x22>
 8009a20:	b15b      	cbz	r3, 8009a3a <rmw_uros_set_custom_transport+0x22>
 8009a22:	b155      	cbz	r5, 8009a3a <rmw_uros_set_custom_transport+0x22>
 8009a24:	b14e      	cbz	r6, 8009a3a <rmw_uros_set_custom_transport+0x22>
 8009a26:	4c06      	ldr	r4, [pc, #24]	; (8009a40 <rmw_uros_set_custom_transport+0x28>)
 8009a28:	7020      	strb	r0, [r4, #0]
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	6166      	str	r6, [r4, #20]
 8009a2e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8009a32:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009a36:	bc70      	pop	{r4, r5, r6}
 8009a38:	4770      	bx	lr
 8009a3a:	200b      	movs	r0, #11
 8009a3c:	bc70      	pop	{r4, r5, r6}
 8009a3e:	4770      	bx	lr
 8009a40:	20009f74 	.word	0x20009f74

08009a44 <flush_session>:
 8009a44:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8009a46:	f002 bcad 	b.w	800c3a4 <uxr_run_session_until_confirm_delivery>
 8009a4a:	bf00      	nop

08009a4c <rmw_publish>:
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d053      	beq.n	8009af8 <rmw_publish+0xac>
 8009a50:	b570      	push	{r4, r5, r6, lr}
 8009a52:	460d      	mov	r5, r1
 8009a54:	b08e      	sub	sp, #56	; 0x38
 8009a56:	2900      	cmp	r1, #0
 8009a58:	d04b      	beq.n	8009af2 <rmw_publish+0xa6>
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	6800      	ldr	r0, [r0, #0]
 8009a5e:	f000 fc57 	bl	800a310 <is_uxrce_rmw_identifier_valid>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d045      	beq.n	8009af2 <rmw_publish+0xa6>
 8009a66:	6866      	ldr	r6, [r4, #4]
 8009a68:	2e00      	cmp	r6, #0
 8009a6a:	d042      	beq.n	8009af2 <rmw_publish+0xa6>
 8009a6c:	69b4      	ldr	r4, [r6, #24]
 8009a6e:	4628      	mov	r0, r5
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	4798      	blx	r3
 8009a74:	69f3      	ldr	r3, [r6, #28]
 8009a76:	9005      	str	r0, [sp, #20]
 8009a78:	b113      	cbz	r3, 8009a80 <rmw_publish+0x34>
 8009a7a:	a805      	add	r0, sp, #20
 8009a7c:	4798      	blx	r3
 8009a7e:	9805      	ldr	r0, [sp, #20]
 8009a80:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	9000      	str	r0, [sp, #0]
 8009a88:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8009a8c:	6972      	ldr	r2, [r6, #20]
 8009a8e:	ab06      	add	r3, sp, #24
 8009a90:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8009a92:	f003 fa85 	bl	800cfa0 <uxr_prepare_output_stream>
 8009a96:	b1d8      	cbz	r0, 8009ad0 <rmw_publish+0x84>
 8009a98:	68a3      	ldr	r3, [r4, #8]
 8009a9a:	a906      	add	r1, sp, #24
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	4798      	blx	r3
 8009aa0:	6a33      	ldr	r3, [r6, #32]
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	b10b      	cbz	r3, 8009aaa <rmw_publish+0x5e>
 8009aa6:	a806      	add	r0, sp, #24
 8009aa8:	4798      	blx	r3
 8009aaa:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8009ab4:	d022      	beq.n	8009afc <rmw_publish+0xb0>
 8009ab6:	6918      	ldr	r0, [r3, #16]
 8009ab8:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8009aba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009abe:	f002 fc71 	bl	800c3a4 <uxr_run_session_until_confirm_delivery>
 8009ac2:	4020      	ands	r0, r4
 8009ac4:	b2c4      	uxtb	r4, r0
 8009ac6:	f084 0001 	eor.w	r0, r4, #1
 8009aca:	b2c0      	uxtb	r0, r0
 8009acc:	b00e      	add	sp, #56	; 0x38
 8009ace:	bd70      	pop	{r4, r5, r6, pc}
 8009ad0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8009ad4:	6918      	ldr	r0, [r3, #16]
 8009ad6:	9b05      	ldr	r3, [sp, #20]
 8009ad8:	9602      	str	r6, [sp, #8]
 8009ada:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	4b09      	ldr	r3, [pc, #36]	; (8009b08 <rmw_publish+0xbc>)
 8009ae2:	9301      	str	r3, [sp, #4]
 8009ae4:	ab06      	add	r3, sp, #24
 8009ae6:	6972      	ldr	r2, [r6, #20]
 8009ae8:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8009aea:	f003 fa89 	bl	800d000 <uxr_prepare_output_stream_fragmented>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d1d2      	bne.n	8009a98 <rmw_publish+0x4c>
 8009af2:	2001      	movs	r0, #1
 8009af4:	b00e      	add	sp, #56	; 0x38
 8009af6:	bd70      	pop	{r4, r5, r6, pc}
 8009af8:	2001      	movs	r0, #1
 8009afa:	4770      	bx	lr
 8009afc:	6918      	ldr	r0, [r3, #16]
 8009afe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009b02:	f002 f8cf 	bl	800bca4 <uxr_flash_output_streams>
 8009b06:	e7de      	b.n	8009ac6 <rmw_publish+0x7a>
 8009b08:	08009a45 	.word	0x08009a45

08009b0c <rmw_create_publisher>:
 8009b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b10:	b087      	sub	sp, #28
 8009b12:	2800      	cmp	r0, #0
 8009b14:	f000 80d2 	beq.w	8009cbc <rmw_create_publisher+0x1b0>
 8009b18:	460e      	mov	r6, r1
 8009b1a:	2900      	cmp	r1, #0
 8009b1c:	f000 80ce 	beq.w	8009cbc <rmw_create_publisher+0x1b0>
 8009b20:	4604      	mov	r4, r0
 8009b22:	6800      	ldr	r0, [r0, #0]
 8009b24:	4615      	mov	r5, r2
 8009b26:	461f      	mov	r7, r3
 8009b28:	f000 fbf2 	bl	800a310 <is_uxrce_rmw_identifier_valid>
 8009b2c:	f080 0001 	eor.w	r0, r0, #1
 8009b30:	b2c0      	uxtb	r0, r0
 8009b32:	2800      	cmp	r0, #0
 8009b34:	f040 80c2 	bne.w	8009cbc <rmw_create_publisher+0x1b0>
 8009b38:	2d00      	cmp	r5, #0
 8009b3a:	f000 80bf 	beq.w	8009cbc <rmw_create_publisher+0x1b0>
 8009b3e:	782b      	ldrb	r3, [r5, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 80bb 	beq.w	8009cbc <rmw_create_publisher+0x1b0>
 8009b46:	2f00      	cmp	r7, #0
 8009b48:	f000 80b8 	beq.w	8009cbc <rmw_create_publisher+0x1b0>
 8009b4c:	485e      	ldr	r0, [pc, #376]	; (8009cc8 <rmw_create_publisher+0x1bc>)
 8009b4e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8009b52:	f005 febf 	bl	800f8d4 <get_memory>
 8009b56:	2800      	cmp	r0, #0
 8009b58:	f000 80b0 	beq.w	8009cbc <rmw_create_publisher+0x1b0>
 8009b5c:	6884      	ldr	r4, [r0, #8]
 8009b5e:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8009b62:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8009b66:	f005 fed9 	bl	800f91c <rmw_get_implementation_identifier>
 8009b6a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8009b6e:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8009b72:	4628      	mov	r0, r5
 8009b74:	f7f6 fbbe 	bl	80002f4 <strlen>
 8009b78:	3001      	adds	r0, #1
 8009b7a:	f104 0884 	add.w	r8, r4, #132	; 0x84
 8009b7e:	283c      	cmp	r0, #60	; 0x3c
 8009b80:	f200 808f 	bhi.w	8009ca2 <rmw_create_publisher+0x196>
 8009b84:	462b      	mov	r3, r5
 8009b86:	4a51      	ldr	r2, [pc, #324]	; (8009ccc <rmw_create_publisher+0x1c0>)
 8009b88:	213c      	movs	r1, #60	; 0x3c
 8009b8a:	4650      	mov	r0, sl
 8009b8c:	f00a f872 	bl	8013c74 <sniprintf>
 8009b90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009b94:	4639      	mov	r1, r7
 8009b96:	2250      	movs	r2, #80	; 0x50
 8009b98:	67e3      	str	r3, [r4, #124]	; 0x7c
 8009b9a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009b9e:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8009ba2:	f009 f871 	bl	8012c88 <memcpy>
 8009ba6:	7a3b      	ldrb	r3, [r7, #8]
 8009ba8:	4630      	mov	r0, r6
 8009baa:	4949      	ldr	r1, [pc, #292]	; (8009cd0 <rmw_create_publisher+0x1c4>)
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bb2:	bf0c      	ite	eq
 8009bb4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8009bb8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8009bbc:	67a3      	str	r3, [r4, #120]	; 0x78
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8009bc4:	f000 fbb2 	bl	800a32c <get_message_typesupport_handle>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d06a      	beq.n	8009ca2 <rmw_create_publisher+0x196>
 8009bcc:	6842      	ldr	r2, [r0, #4]
 8009bce:	61a2      	str	r2, [r4, #24]
 8009bd0:	2a00      	cmp	r2, #0
 8009bd2:	d066      	beq.n	8009ca2 <rmw_create_publisher+0x196>
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	463b      	mov	r3, r7
 8009bd8:	4648      	mov	r0, r9
 8009bda:	f006 f8dd 	bl	800fd98 <create_topic>
 8009bde:	6260      	str	r0, [r4, #36]	; 0x24
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d062      	beq.n	8009caa <rmw_create_publisher+0x19e>
 8009be4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009be8:	2103      	movs	r1, #3
 8009bea:	2506      	movs	r5, #6
 8009bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bf0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 8009bf4:	1c42      	adds	r2, r0, #1
 8009bf6:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8009bfa:	f001 ff03 	bl	800ba04 <uxr_object_id>
 8009bfe:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009c02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c06:	6120      	str	r0, [r4, #16]
 8009c08:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8009c0c:	6910      	ldr	r0, [r2, #16]
 8009c0e:	9500      	str	r5, [sp, #0]
 8009c10:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009c14:	6819      	ldr	r1, [r3, #0]
 8009c16:	6922      	ldr	r2, [r4, #16]
 8009c18:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009c1c:	f001 fe4c 	bl	800b8b8 <uxr_buffer_create_publisher_bin>
 8009c20:	4602      	mov	r2, r0
 8009c22:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8009c26:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8009c2a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8009c2e:	f000 faf5 	bl	800a21c <run_xrce_session>
 8009c32:	b3b0      	cbz	r0, 8009ca2 <rmw_create_publisher+0x196>
 8009c34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c38:	2105      	movs	r1, #5
 8009c3a:	f10d 0a10 	add.w	sl, sp, #16
 8009c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c42:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8009c46:	1c42      	adds	r2, r0, #1
 8009c48:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8009c4c:	f001 feda 	bl	800ba04 <uxr_object_id>
 8009c50:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009c54:	4639      	mov	r1, r7
 8009c56:	6160      	str	r0, [r4, #20]
 8009c58:	691e      	ldr	r6, [r3, #16]
 8009c5a:	4650      	mov	r0, sl
 8009c5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c60:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8009c64:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8009c68:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 8009c6c:	f000 faf2 	bl	800a254 <convert_qos_profile>
 8009c70:	9503      	str	r5, [sp, #12]
 8009c72:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8009c76:	9001      	str	r0, [sp, #4]
 8009c78:	4630      	mov	r0, r6
 8009c7a:	f8ad 1008 	strh.w	r1, [sp, #8]
 8009c7e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8009c8a:	f001 fe45 	bl	800b918 <uxr_buffer_create_datawriter_bin>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8009c94:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8009c98:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8009c9c:	f000 fabe 	bl	800a21c <run_xrce_session>
 8009ca0:	b970      	cbnz	r0, 8009cc0 <rmw_create_publisher+0x1b4>
 8009ca2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ca4:	b108      	cbz	r0, 8009caa <rmw_create_publisher+0x19e>
 8009ca6:	f000 fa53 	bl	800a150 <rmw_uxrce_fini_topic_memory>
 8009caa:	4640      	mov	r0, r8
 8009cac:	f04f 0800 	mov.w	r8, #0
 8009cb0:	f000 f9f6 	bl	800a0a0 <rmw_uxrce_fini_publisher_memory>
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	b007      	add	sp, #28
 8009cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cbc:	f04f 0800 	mov.w	r8, #0
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	b007      	add	sp, #28
 8009cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc8:	2000e86c 	.word	0x2000e86c
 8009ccc:	08017a80 	.word	0x08017a80
 8009cd0:	08017900 	.word	0x08017900

08009cd4 <rmw_publisher_get_actual_qos>:
 8009cd4:	b178      	cbz	r0, 8009cf6 <rmw_publisher_get_actual_qos+0x22>
 8009cd6:	b510      	push	{r4, lr}
 8009cd8:	fab1 f481 	clz	r4, r1
 8009cdc:	0964      	lsrs	r4, r4, #5
 8009cde:	b141      	cbz	r1, 8009cf2 <rmw_publisher_get_actual_qos+0x1e>
 8009ce0:	6843      	ldr	r3, [r0, #4]
 8009ce2:	2250      	movs	r2, #80	; 0x50
 8009ce4:	4608      	mov	r0, r1
 8009ce6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8009cea:	f008 ffcd 	bl	8012c88 <memcpy>
 8009cee:	4620      	mov	r0, r4
 8009cf0:	bd10      	pop	{r4, pc}
 8009cf2:	200b      	movs	r0, #11
 8009cf4:	bd10      	pop	{r4, pc}
 8009cf6:	200b      	movs	r0, #11
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop

08009cfc <rmw_destroy_publisher>:
 8009cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d00:	b128      	cbz	r0, 8009d0e <rmw_destroy_publisher+0x12>
 8009d02:	4604      	mov	r4, r0
 8009d04:	6800      	ldr	r0, [r0, #0]
 8009d06:	460d      	mov	r5, r1
 8009d08:	f000 fb02 	bl	800a310 <is_uxrce_rmw_identifier_valid>
 8009d0c:	b918      	cbnz	r0, 8009d16 <rmw_destroy_publisher+0x1a>
 8009d0e:	2401      	movs	r4, #1
 8009d10:	4620      	mov	r0, r4
 8009d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d16:	6863      	ldr	r3, [r4, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0f8      	beq.n	8009d0e <rmw_destroy_publisher+0x12>
 8009d1c:	fab5 f485 	clz	r4, r5
 8009d20:	0964      	lsrs	r4, r4, #5
 8009d22:	2d00      	cmp	r5, #0
 8009d24:	d0f3      	beq.n	8009d0e <rmw_destroy_publisher+0x12>
 8009d26:	6828      	ldr	r0, [r5, #0]
 8009d28:	f000 faf2 	bl	800a310 <is_uxrce_rmw_identifier_valid>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d0ee      	beq.n	8009d0e <rmw_destroy_publisher+0x12>
 8009d30:	686e      	ldr	r6, [r5, #4]
 8009d32:	2e00      	cmp	r6, #0
 8009d34:	d0eb      	beq.n	8009d0e <rmw_destroy_publisher+0x12>
 8009d36:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8009d38:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8009d3c:	f006 f87c 	bl	800fe38 <destroy_topic>
 8009d40:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8009d44:	6972      	ldr	r2, [r6, #20]
 8009d46:	6918      	ldr	r0, [r3, #16]
 8009d48:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8009d4c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009d50:	6819      	ldr	r1, [r3, #0]
 8009d52:	f001 fcfd 	bl	800b750 <uxr_buffer_delete_entity>
 8009d56:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8009d5a:	4680      	mov	r8, r0
 8009d5c:	6932      	ldr	r2, [r6, #16]
 8009d5e:	6918      	ldr	r0, [r3, #16]
 8009d60:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8009d64:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8009d68:	6819      	ldr	r1, [r3, #0]
 8009d6a:	f001 fcf1 	bl	800b750 <uxr_buffer_delete_entity>
 8009d6e:	4606      	mov	r6, r0
 8009d70:	6938      	ldr	r0, [r7, #16]
 8009d72:	4642      	mov	r2, r8
 8009d74:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8009d78:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8009d7c:	f000 fa4e 	bl	800a21c <run_xrce_session>
 8009d80:	693f      	ldr	r7, [r7, #16]
 8009d82:	4632      	mov	r2, r6
 8009d84:	4606      	mov	r6, r0
 8009d86:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8009d8a:	4638      	mov	r0, r7
 8009d8c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8009d90:	f000 fa44 	bl	800a21c <run_xrce_session>
 8009d94:	b126      	cbz	r6, 8009da0 <rmw_destroy_publisher+0xa4>
 8009d96:	b118      	cbz	r0, 8009da0 <rmw_destroy_publisher+0xa4>
 8009d98:	4628      	mov	r0, r5
 8009d9a:	f000 f981 	bl	800a0a0 <rmw_uxrce_fini_publisher_memory>
 8009d9e:	e7b7      	b.n	8009d10 <rmw_destroy_publisher+0x14>
 8009da0:	2402      	movs	r4, #2
 8009da2:	e7f9      	b.n	8009d98 <rmw_destroy_publisher+0x9c>

08009da4 <rmw_uxrce_init_service_memory>:
 8009da4:	b1e2      	cbz	r2, 8009de0 <rmw_uxrce_init_service_memory+0x3c>
 8009da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009daa:	7b05      	ldrb	r5, [r0, #12]
 8009dac:	4606      	mov	r6, r0
 8009dae:	b9ad      	cbnz	r5, 8009ddc <rmw_uxrce_init_service_memory+0x38>
 8009db0:	23c8      	movs	r3, #200	; 0xc8
 8009db2:	4617      	mov	r7, r2
 8009db4:	460c      	mov	r4, r1
 8009db6:	46a8      	mov	r8, r5
 8009db8:	6083      	str	r3, [r0, #8]
 8009dba:	f240 1301 	movw	r3, #257	; 0x101
 8009dbe:	e9c0 5500 	strd	r5, r5, [r0]
 8009dc2:	8183      	strh	r3, [r0, #12]
 8009dc4:	3501      	adds	r5, #1
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f005 fd93 	bl	800f8f4 <put_memory>
 8009dce:	42af      	cmp	r7, r5
 8009dd0:	60a4      	str	r4, [r4, #8]
 8009dd2:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8009dd6:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8009dda:	d1f3      	bne.n	8009dc4 <rmw_uxrce_init_service_memory+0x20>
 8009ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop

08009de4 <rmw_uxrce_init_client_memory>:
 8009de4:	b1e2      	cbz	r2, 8009e20 <rmw_uxrce_init_client_memory+0x3c>
 8009de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dea:	7b05      	ldrb	r5, [r0, #12]
 8009dec:	4606      	mov	r6, r0
 8009dee:	b9ad      	cbnz	r5, 8009e1c <rmw_uxrce_init_client_memory+0x38>
 8009df0:	23c8      	movs	r3, #200	; 0xc8
 8009df2:	4617      	mov	r7, r2
 8009df4:	460c      	mov	r4, r1
 8009df6:	46a8      	mov	r8, r5
 8009df8:	6083      	str	r3, [r0, #8]
 8009dfa:	f240 1301 	movw	r3, #257	; 0x101
 8009dfe:	e9c0 5500 	strd	r5, r5, [r0]
 8009e02:	8183      	strh	r3, [r0, #12]
 8009e04:	3501      	adds	r5, #1
 8009e06:	4621      	mov	r1, r4
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f005 fd73 	bl	800f8f4 <put_memory>
 8009e0e:	42af      	cmp	r7, r5
 8009e10:	60a4      	str	r4, [r4, #8]
 8009e12:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8009e16:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8009e1a:	d1f3      	bne.n	8009e04 <rmw_uxrce_init_client_memory+0x20>
 8009e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop

08009e24 <rmw_uxrce_init_publisher_memory>:
 8009e24:	b1e2      	cbz	r2, 8009e60 <rmw_uxrce_init_publisher_memory+0x3c>
 8009e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2a:	7b05      	ldrb	r5, [r0, #12]
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	b9ad      	cbnz	r5, 8009e5c <rmw_uxrce_init_publisher_memory+0x38>
 8009e30:	23d8      	movs	r3, #216	; 0xd8
 8009e32:	4617      	mov	r7, r2
 8009e34:	460c      	mov	r4, r1
 8009e36:	46a8      	mov	r8, r5
 8009e38:	6083      	str	r3, [r0, #8]
 8009e3a:	f240 1301 	movw	r3, #257	; 0x101
 8009e3e:	e9c0 5500 	strd	r5, r5, [r0]
 8009e42:	8183      	strh	r3, [r0, #12]
 8009e44:	3501      	adds	r5, #1
 8009e46:	4621      	mov	r1, r4
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f005 fd53 	bl	800f8f4 <put_memory>
 8009e4e:	42af      	cmp	r7, r5
 8009e50:	60a4      	str	r4, [r4, #8]
 8009e52:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8009e56:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8009e5a:	d1f3      	bne.n	8009e44 <rmw_uxrce_init_publisher_memory+0x20>
 8009e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop

08009e64 <rmw_uxrce_init_subscription_memory>:
 8009e64:	b1e2      	cbz	r2, 8009ea0 <rmw_uxrce_init_subscription_memory+0x3c>
 8009e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6a:	7b05      	ldrb	r5, [r0, #12]
 8009e6c:	4606      	mov	r6, r0
 8009e6e:	b9ad      	cbnz	r5, 8009e9c <rmw_uxrce_init_subscription_memory+0x38>
 8009e70:	23d8      	movs	r3, #216	; 0xd8
 8009e72:	4617      	mov	r7, r2
 8009e74:	460c      	mov	r4, r1
 8009e76:	46a8      	mov	r8, r5
 8009e78:	6083      	str	r3, [r0, #8]
 8009e7a:	f240 1301 	movw	r3, #257	; 0x101
 8009e7e:	e9c0 5500 	strd	r5, r5, [r0]
 8009e82:	8183      	strh	r3, [r0, #12]
 8009e84:	3501      	adds	r5, #1
 8009e86:	4621      	mov	r1, r4
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f005 fd33 	bl	800f8f4 <put_memory>
 8009e8e:	42af      	cmp	r7, r5
 8009e90:	60a4      	str	r4, [r4, #8]
 8009e92:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8009e96:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8009e9a:	d1f3      	bne.n	8009e84 <rmw_uxrce_init_subscription_memory+0x20>
 8009e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop

08009ea4 <rmw_uxrce_init_node_memory>:
 8009ea4:	b1e2      	cbz	r2, 8009ee0 <rmw_uxrce_init_node_memory+0x3c>
 8009ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eaa:	7b05      	ldrb	r5, [r0, #12]
 8009eac:	4606      	mov	r6, r0
 8009eae:	b9ad      	cbnz	r5, 8009edc <rmw_uxrce_init_node_memory+0x38>
 8009eb0:	23a4      	movs	r3, #164	; 0xa4
 8009eb2:	4617      	mov	r7, r2
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	46a8      	mov	r8, r5
 8009eb8:	6083      	str	r3, [r0, #8]
 8009eba:	f240 1301 	movw	r3, #257	; 0x101
 8009ebe:	e9c0 5500 	strd	r5, r5, [r0]
 8009ec2:	8183      	strh	r3, [r0, #12]
 8009ec4:	3501      	adds	r5, #1
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f005 fd13 	bl	800f8f4 <put_memory>
 8009ece:	42af      	cmp	r7, r5
 8009ed0:	60a4      	str	r4, [r4, #8]
 8009ed2:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8009ed6:	f804 8c98 	strb.w	r8, [r4, #-152]
 8009eda:	d1f3      	bne.n	8009ec4 <rmw_uxrce_init_node_memory+0x20>
 8009edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop

08009ee4 <rmw_uxrce_init_session_memory>:
 8009ee4:	b1ea      	cbz	r2, 8009f22 <rmw_uxrce_init_session_memory+0x3e>
 8009ee6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eea:	7b05      	ldrb	r5, [r0, #12]
 8009eec:	4606      	mov	r6, r0
 8009eee:	b9b5      	cbnz	r5, 8009f1e <rmw_uxrce_init_session_memory+0x3a>
 8009ef0:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8009ef4:	f240 1301 	movw	r3, #257	; 0x101
 8009ef8:	4617      	mov	r7, r2
 8009efa:	460c      	mov	r4, r1
 8009efc:	46a9      	mov	r9, r5
 8009efe:	f8c0 8008 	str.w	r8, [r0, #8]
 8009f02:	8183      	strh	r3, [r0, #12]
 8009f04:	e9c0 5500 	strd	r5, r5, [r0]
 8009f08:	3501      	adds	r5, #1
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	f005 fcf1 	bl	800f8f4 <put_memory>
 8009f12:	42af      	cmp	r7, r5
 8009f14:	60a4      	str	r4, [r4, #8]
 8009f16:	f884 900c 	strb.w	r9, [r4, #12]
 8009f1a:	4444      	add	r4, r8
 8009f1c:	d1f4      	bne.n	8009f08 <rmw_uxrce_init_session_memory+0x24>
 8009f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f22:	4770      	bx	lr

08009f24 <rmw_uxrce_init_topic_memory>:
 8009f24:	b1e2      	cbz	r2, 8009f60 <rmw_uxrce_init_topic_memory+0x3c>
 8009f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2a:	7b05      	ldrb	r5, [r0, #12]
 8009f2c:	4606      	mov	r6, r0
 8009f2e:	b9ad      	cbnz	r5, 8009f5c <rmw_uxrce_init_topic_memory+0x38>
 8009f30:	231c      	movs	r3, #28
 8009f32:	4617      	mov	r7, r2
 8009f34:	460c      	mov	r4, r1
 8009f36:	46a8      	mov	r8, r5
 8009f38:	6083      	str	r3, [r0, #8]
 8009f3a:	f240 1301 	movw	r3, #257	; 0x101
 8009f3e:	e9c0 5500 	strd	r5, r5, [r0]
 8009f42:	8183      	strh	r3, [r0, #12]
 8009f44:	3501      	adds	r5, #1
 8009f46:	4621      	mov	r1, r4
 8009f48:	4630      	mov	r0, r6
 8009f4a:	f005 fcd3 	bl	800f8f4 <put_memory>
 8009f4e:	42af      	cmp	r7, r5
 8009f50:	60a4      	str	r4, [r4, #8]
 8009f52:	f104 041c 	add.w	r4, r4, #28
 8009f56:	f804 8c10 	strb.w	r8, [r4, #-16]
 8009f5a:	d1f3      	bne.n	8009f44 <rmw_uxrce_init_topic_memory+0x20>
 8009f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop

08009f64 <rmw_uxrce_init_static_input_buffer_memory>:
 8009f64:	b1ea      	cbz	r2, 8009fa2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8009f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f6a:	7b05      	ldrb	r5, [r0, #12]
 8009f6c:	4606      	mov	r6, r0
 8009f6e:	b9b5      	cbnz	r5, 8009f9e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8009f70:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8009f74:	4617      	mov	r7, r2
 8009f76:	460c      	mov	r4, r1
 8009f78:	46a8      	mov	r8, r5
 8009f7a:	6083      	str	r3, [r0, #8]
 8009f7c:	f240 1301 	movw	r3, #257	; 0x101
 8009f80:	e9c0 5500 	strd	r5, r5, [r0]
 8009f84:	8183      	strh	r3, [r0, #12]
 8009f86:	3501      	adds	r5, #1
 8009f88:	4621      	mov	r1, r4
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f005 fcb2 	bl	800f8f4 <put_memory>
 8009f90:	42af      	cmp	r7, r5
 8009f92:	60a4      	str	r4, [r4, #8]
 8009f94:	f884 800c 	strb.w	r8, [r4, #12]
 8009f98:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8009f9c:	d1f3      	bne.n	8009f86 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8009f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa2:	4770      	bx	lr

08009fa4 <rmw_uxrce_init_init_options_impl_memory>:
 8009fa4:	b1e2      	cbz	r2, 8009fe0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8009fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009faa:	7b05      	ldrb	r5, [r0, #12]
 8009fac:	4606      	mov	r6, r0
 8009fae:	b9ad      	cbnz	r5, 8009fdc <rmw_uxrce_init_init_options_impl_memory+0x38>
 8009fb0:	232c      	movs	r3, #44	; 0x2c
 8009fb2:	4617      	mov	r7, r2
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	46a8      	mov	r8, r5
 8009fb8:	6083      	str	r3, [r0, #8]
 8009fba:	f240 1301 	movw	r3, #257	; 0x101
 8009fbe:	e9c0 5500 	strd	r5, r5, [r0]
 8009fc2:	8183      	strh	r3, [r0, #12]
 8009fc4:	3501      	adds	r5, #1
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f005 fc93 	bl	800f8f4 <put_memory>
 8009fce:	42af      	cmp	r7, r5
 8009fd0:	60a4      	str	r4, [r4, #8]
 8009fd2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8009fd6:	f804 8c20 	strb.w	r8, [r4, #-32]
 8009fda:	d1f3      	bne.n	8009fc4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8009fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop

08009fe4 <rmw_uxrce_init_wait_set_memory>:
 8009fe4:	b1e2      	cbz	r2, 800a020 <rmw_uxrce_init_wait_set_memory+0x3c>
 8009fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fea:	7b05      	ldrb	r5, [r0, #12]
 8009fec:	4606      	mov	r6, r0
 8009fee:	b9ad      	cbnz	r5, 800a01c <rmw_uxrce_init_wait_set_memory+0x38>
 8009ff0:	231c      	movs	r3, #28
 8009ff2:	4617      	mov	r7, r2
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	46a8      	mov	r8, r5
 8009ff8:	6083      	str	r3, [r0, #8]
 8009ffa:	f240 1301 	movw	r3, #257	; 0x101
 8009ffe:	e9c0 5500 	strd	r5, r5, [r0]
 800a002:	8183      	strh	r3, [r0, #12]
 800a004:	3501      	adds	r5, #1
 800a006:	4621      	mov	r1, r4
 800a008:	4630      	mov	r0, r6
 800a00a:	f005 fc73 	bl	800f8f4 <put_memory>
 800a00e:	42af      	cmp	r7, r5
 800a010:	60a4      	str	r4, [r4, #8]
 800a012:	f104 041c 	add.w	r4, r4, #28
 800a016:	f804 8c10 	strb.w	r8, [r4, #-16]
 800a01a:	d1f3      	bne.n	800a004 <rmw_uxrce_init_wait_set_memory+0x20>
 800a01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop

0800a024 <rmw_uxrce_init_guard_condition_memory>:
 800a024:	b1e2      	cbz	r2, 800a060 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800a026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a02a:	7b05      	ldrb	r5, [r0, #12]
 800a02c:	4606      	mov	r6, r0
 800a02e:	b9ad      	cbnz	r5, 800a05c <rmw_uxrce_init_guard_condition_memory+0x38>
 800a030:	2320      	movs	r3, #32
 800a032:	4617      	mov	r7, r2
 800a034:	460c      	mov	r4, r1
 800a036:	46a8      	mov	r8, r5
 800a038:	6083      	str	r3, [r0, #8]
 800a03a:	f240 1301 	movw	r3, #257	; 0x101
 800a03e:	e9c0 5500 	strd	r5, r5, [r0]
 800a042:	8183      	strh	r3, [r0, #12]
 800a044:	3501      	adds	r5, #1
 800a046:	4621      	mov	r1, r4
 800a048:	4630      	mov	r0, r6
 800a04a:	f005 fc53 	bl	800f8f4 <put_memory>
 800a04e:	42af      	cmp	r7, r5
 800a050:	60a4      	str	r4, [r4, #8]
 800a052:	f104 0420 	add.w	r4, r4, #32
 800a056:	f804 8c14 	strb.w	r8, [r4, #-20]
 800a05a:	d1f3      	bne.n	800a044 <rmw_uxrce_init_guard_condition_memory+0x20>
 800a05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop

0800a064 <rmw_uxrce_fini_session_memory>:
 800a064:	4601      	mov	r1, r0
 800a066:	4801      	ldr	r0, [pc, #4]	; (800a06c <rmw_uxrce_fini_session_memory+0x8>)
 800a068:	f005 bc44 	b.w	800f8f4 <put_memory>
 800a06c:	2000e88c 	.word	0x2000e88c

0800a070 <rmw_uxrce_fini_node_memory>:
 800a070:	b538      	push	{r3, r4, r5, lr}
 800a072:	4604      	mov	r4, r0
 800a074:	6800      	ldr	r0, [r0, #0]
 800a076:	b128      	cbz	r0, 800a084 <rmw_uxrce_fini_node_memory+0x14>
 800a078:	4b07      	ldr	r3, [pc, #28]	; (800a098 <rmw_uxrce_fini_node_memory+0x28>)
 800a07a:	6819      	ldr	r1, [r3, #0]
 800a07c:	f7f6 f930 	bl	80002e0 <strcmp>
 800a080:	b940      	cbnz	r0, 800a094 <rmw_uxrce_fini_node_memory+0x24>
 800a082:	6020      	str	r0, [r4, #0]
 800a084:	6861      	ldr	r1, [r4, #4]
 800a086:	b129      	cbz	r1, 800a094 <rmw_uxrce_fini_node_memory+0x24>
 800a088:	2500      	movs	r5, #0
 800a08a:	4804      	ldr	r0, [pc, #16]	; (800a09c <rmw_uxrce_fini_node_memory+0x2c>)
 800a08c:	610d      	str	r5, [r1, #16]
 800a08e:	f005 fc31 	bl	800f8f4 <put_memory>
 800a092:	6065      	str	r5, [r4, #4]
 800a094:	bd38      	pop	{r3, r4, r5, pc}
 800a096:	bf00      	nop
 800a098:	08017fe0 	.word	0x08017fe0
 800a09c:	2000e85c 	.word	0x2000e85c

0800a0a0 <rmw_uxrce_fini_publisher_memory>:
 800a0a0:	b510      	push	{r4, lr}
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	6800      	ldr	r0, [r0, #0]
 800a0a6:	b128      	cbz	r0, 800a0b4 <rmw_uxrce_fini_publisher_memory+0x14>
 800a0a8:	4b06      	ldr	r3, [pc, #24]	; (800a0c4 <rmw_uxrce_fini_publisher_memory+0x24>)
 800a0aa:	6819      	ldr	r1, [r3, #0]
 800a0ac:	f7f6 f918 	bl	80002e0 <strcmp>
 800a0b0:	b938      	cbnz	r0, 800a0c2 <rmw_uxrce_fini_publisher_memory+0x22>
 800a0b2:	6020      	str	r0, [r4, #0]
 800a0b4:	6861      	ldr	r1, [r4, #4]
 800a0b6:	b121      	cbz	r1, 800a0c2 <rmw_uxrce_fini_publisher_memory+0x22>
 800a0b8:	4803      	ldr	r0, [pc, #12]	; (800a0c8 <rmw_uxrce_fini_publisher_memory+0x28>)
 800a0ba:	f005 fc1b 	bl	800f8f4 <put_memory>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	6063      	str	r3, [r4, #4]
 800a0c2:	bd10      	pop	{r4, pc}
 800a0c4:	08017fe0 	.word	0x08017fe0
 800a0c8:	2000e86c 	.word	0x2000e86c

0800a0cc <rmw_uxrce_fini_subscription_memory>:
 800a0cc:	b510      	push	{r4, lr}
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	6800      	ldr	r0, [r0, #0]
 800a0d2:	b128      	cbz	r0, 800a0e0 <rmw_uxrce_fini_subscription_memory+0x14>
 800a0d4:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800a0d6:	6819      	ldr	r1, [r3, #0]
 800a0d8:	f7f6 f902 	bl	80002e0 <strcmp>
 800a0dc:	b938      	cbnz	r0, 800a0ee <rmw_uxrce_fini_subscription_memory+0x22>
 800a0de:	6020      	str	r0, [r4, #0]
 800a0e0:	6861      	ldr	r1, [r4, #4]
 800a0e2:	b121      	cbz	r1, 800a0ee <rmw_uxrce_fini_subscription_memory+0x22>
 800a0e4:	4803      	ldr	r0, [pc, #12]	; (800a0f4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800a0e6:	f005 fc05 	bl	800f8f4 <put_memory>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	6063      	str	r3, [r4, #4]
 800a0ee:	bd10      	pop	{r4, pc}
 800a0f0:	08017fe0 	.word	0x08017fe0
 800a0f4:	2000e8ac 	.word	0x2000e8ac

0800a0f8 <rmw_uxrce_fini_service_memory>:
 800a0f8:	b510      	push	{r4, lr}
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	6800      	ldr	r0, [r0, #0]
 800a0fe:	b128      	cbz	r0, 800a10c <rmw_uxrce_fini_service_memory+0x14>
 800a100:	4b06      	ldr	r3, [pc, #24]	; (800a11c <rmw_uxrce_fini_service_memory+0x24>)
 800a102:	6819      	ldr	r1, [r3, #0]
 800a104:	f7f6 f8ec 	bl	80002e0 <strcmp>
 800a108:	b938      	cbnz	r0, 800a11a <rmw_uxrce_fini_service_memory+0x22>
 800a10a:	6020      	str	r0, [r4, #0]
 800a10c:	6861      	ldr	r1, [r4, #4]
 800a10e:	b121      	cbz	r1, 800a11a <rmw_uxrce_fini_service_memory+0x22>
 800a110:	4803      	ldr	r0, [pc, #12]	; (800a120 <rmw_uxrce_fini_service_memory+0x28>)
 800a112:	f005 fbef 	bl	800f8f4 <put_memory>
 800a116:	2300      	movs	r3, #0
 800a118:	6063      	str	r3, [r4, #4]
 800a11a:	bd10      	pop	{r4, pc}
 800a11c:	08017fe0 	.word	0x08017fe0
 800a120:	2000e87c 	.word	0x2000e87c

0800a124 <rmw_uxrce_fini_client_memory>:
 800a124:	b510      	push	{r4, lr}
 800a126:	4604      	mov	r4, r0
 800a128:	6800      	ldr	r0, [r0, #0]
 800a12a:	b128      	cbz	r0, 800a138 <rmw_uxrce_fini_client_memory+0x14>
 800a12c:	4b06      	ldr	r3, [pc, #24]	; (800a148 <rmw_uxrce_fini_client_memory+0x24>)
 800a12e:	6819      	ldr	r1, [r3, #0]
 800a130:	f7f6 f8d6 	bl	80002e0 <strcmp>
 800a134:	b938      	cbnz	r0, 800a146 <rmw_uxrce_fini_client_memory+0x22>
 800a136:	6020      	str	r0, [r4, #0]
 800a138:	6861      	ldr	r1, [r4, #4]
 800a13a:	b121      	cbz	r1, 800a146 <rmw_uxrce_fini_client_memory+0x22>
 800a13c:	4803      	ldr	r0, [pc, #12]	; (800a14c <rmw_uxrce_fini_client_memory+0x28>)
 800a13e:	f005 fbd9 	bl	800f8f4 <put_memory>
 800a142:	2300      	movs	r3, #0
 800a144:	6063      	str	r3, [r4, #4]
 800a146:	bd10      	pop	{r4, pc}
 800a148:	08017fe0 	.word	0x08017fe0
 800a14c:	20009f90 	.word	0x20009f90

0800a150 <rmw_uxrce_fini_topic_memory>:
 800a150:	b510      	push	{r4, lr}
 800a152:	4604      	mov	r4, r0
 800a154:	4803      	ldr	r0, [pc, #12]	; (800a164 <rmw_uxrce_fini_topic_memory+0x14>)
 800a156:	4621      	mov	r1, r4
 800a158:	f005 fbcc 	bl	800f8f4 <put_memory>
 800a15c:	2300      	movs	r3, #0
 800a15e:	61a3      	str	r3, [r4, #24]
 800a160:	bd10      	pop	{r4, pc}
 800a162:	bf00      	nop
 800a164:	2000e8bc 	.word	0x2000e8bc

0800a168 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800a168:	b082      	sub	sp, #8
 800a16a:	492b      	ldr	r1, [pc, #172]	; (800a218 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800a16c:	b530      	push	{r4, r5, lr}
 800a16e:	680d      	ldr	r5, [r1, #0]
 800a170:	ac03      	add	r4, sp, #12
 800a172:	e884 000c 	stmia.w	r4, {r2, r3}
 800a176:	461c      	mov	r4, r3
 800a178:	2d00      	cmp	r5, #0
 800a17a:	d04b      	beq.n	800a214 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800a17c:	462b      	mov	r3, r5
 800a17e:	2100      	movs	r1, #0
 800a180:	689a      	ldr	r2, [r3, #8]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800a188:	4290      	cmp	r0, r2
 800a18a:	bf08      	it	eq
 800a18c:	3101      	addeq	r1, #1
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1f6      	bne.n	800a180 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800a192:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800a196:	2b02      	cmp	r3, #2
 800a198:	d029      	beq.n	800a1ee <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800a19a:	d820      	bhi.n	800a1de <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800a19c:	428c      	cmp	r4, r1
 800a19e:	d828      	bhi.n	800a1f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800a1a0:	fab4 f284 	clz	r2, r4
 800a1a4:	0952      	lsrs	r2, r2, #5
 800a1a6:	b324      	cbz	r4, 800a1f2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800a1a8:	b1dd      	cbz	r5, 800a1e2 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800a1aa:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a1ae:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800a1b2:	e001      	b.n	800a1b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800a1b4:	686d      	ldr	r5, [r5, #4]
 800a1b6:	b1ad      	cbz	r5, 800a1e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800a1b8:	68ab      	ldr	r3, [r5, #8]
 800a1ba:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800a1be:	4288      	cmp	r0, r1
 800a1c0:	d1f8      	bne.n	800a1b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800a1c2:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800a1c6:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800a1ca:	4561      	cmp	r1, ip
 800a1cc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800a1d0:	eb73 0e04 	sbcs.w	lr, r3, r4
 800a1d4:	daee      	bge.n	800a1b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800a1d6:	468c      	mov	ip, r1
 800a1d8:	461c      	mov	r4, r3
 800a1da:	462a      	mov	r2, r5
 800a1dc:	e7ea      	b.n	800a1b4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	d0dc      	beq.n	800a19c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1ea:	b002      	add	sp, #8
 800a1ec:	4770      	bx	lr
 800a1ee:	428c      	cmp	r4, r1
 800a1f0:	d905      	bls.n	800a1fe <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800a1f2:	4809      	ldr	r0, [pc, #36]	; (800a218 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800a1f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1f8:	b002      	add	sp, #8
 800a1fa:	f005 bb6b 	b.w	800f8d4 <get_memory>
 800a1fe:	fab4 f284 	clz	r2, r4
 800a202:	0952      	lsrs	r2, r2, #5
 800a204:	2c00      	cmp	r4, #0
 800a206:	d1ed      	bne.n	800a1e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800a208:	4803      	ldr	r0, [pc, #12]	; (800a218 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800a20a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a20e:	b002      	add	sp, #8
 800a210:	f005 bb60 	b.w	800f8d4 <get_memory>
 800a214:	4629      	mov	r1, r5
 800a216:	e7bc      	b.n	800a192 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800a218:	2000e89c 	.word	0x2000e89c

0800a21c <run_xrce_session>:
 800a21c:	b510      	push	{r4, lr}
 800a21e:	788c      	ldrb	r4, [r1, #2]
 800a220:	b086      	sub	sp, #24
 800a222:	2c01      	cmp	r4, #1
 800a224:	f8ad 200e 	strh.w	r2, [sp, #14]
 800a228:	d00c      	beq.n	800a244 <run_xrce_session+0x28>
 800a22a:	2401      	movs	r4, #1
 800a22c:	4619      	mov	r1, r3
 800a22e:	f10d 020e 	add.w	r2, sp, #14
 800a232:	f10d 0317 	add.w	r3, sp, #23
 800a236:	9400      	str	r4, [sp, #0]
 800a238:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a23c:	f002 f8d6 	bl	800c3ec <uxr_run_session_until_all_status>
 800a240:	b006      	add	sp, #24
 800a242:	bd10      	pop	{r4, pc}
 800a244:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a248:	f001 fd2c 	bl	800bca4 <uxr_flash_output_streams>
 800a24c:	4620      	mov	r0, r4
 800a24e:	b006      	add	sp, #24
 800a250:	bd10      	pop	{r4, pc}
 800a252:	bf00      	nop

0800a254 <convert_qos_profile>:
 800a254:	7a4a      	ldrb	r2, [r1, #9]
 800a256:	f891 c008 	ldrb.w	ip, [r1, #8]
 800a25a:	2a02      	cmp	r2, #2
 800a25c:	bf18      	it	ne
 800a25e:	2200      	movne	r2, #0
 800a260:	7002      	strb	r2, [r0, #0]
 800a262:	f1ac 0202 	sub.w	r2, ip, #2
 800a266:	fab2 f282 	clz	r2, r2
 800a26a:	0952      	lsrs	r2, r2, #5
 800a26c:	7042      	strb	r2, [r0, #1]
 800a26e:	780a      	ldrb	r2, [r1, #0]
 800a270:	8889      	ldrh	r1, [r1, #4]
 800a272:	f1a2 0202 	sub.w	r2, r2, #2
 800a276:	8081      	strh	r1, [r0, #4]
 800a278:	fab2 f282 	clz	r2, r2
 800a27c:	0952      	lsrs	r2, r2, #5
 800a27e:	7082      	strb	r2, [r0, #2]
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop

0800a284 <generate_type_name>:
 800a284:	2300      	movs	r3, #0
 800a286:	b530      	push	{r4, r5, lr}
 800a288:	700b      	strb	r3, [r1, #0]
 800a28a:	b087      	sub	sp, #28
 800a28c:	6803      	ldr	r3, [r0, #0]
 800a28e:	4614      	mov	r4, r2
 800a290:	b1bb      	cbz	r3, 800a2c2 <generate_type_name+0x3e>
 800a292:	4a0e      	ldr	r2, [pc, #56]	; (800a2cc <generate_type_name+0x48>)
 800a294:	4615      	mov	r5, r2
 800a296:	9500      	str	r5, [sp, #0]
 800a298:	9203      	str	r2, [sp, #12]
 800a29a:	4d0d      	ldr	r5, [pc, #52]	; (800a2d0 <generate_type_name+0x4c>)
 800a29c:	6842      	ldr	r2, [r0, #4]
 800a29e:	4608      	mov	r0, r1
 800a2a0:	490c      	ldr	r1, [pc, #48]	; (800a2d4 <generate_type_name+0x50>)
 800a2a2:	9204      	str	r2, [sp, #16]
 800a2a4:	9105      	str	r1, [sp, #20]
 800a2a6:	9102      	str	r1, [sp, #8]
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	4a0b      	ldr	r2, [pc, #44]	; (800a2d8 <generate_type_name+0x54>)
 800a2ac:	9501      	str	r5, [sp, #4]
 800a2ae:	f009 fce1 	bl	8013c74 <sniprintf>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	bfa8      	it	ge
 800a2b6:	4284      	cmpge	r4, r0
 800a2b8:	bfcc      	ite	gt
 800a2ba:	2001      	movgt	r0, #1
 800a2bc:	2000      	movle	r0, #0
 800a2be:	b007      	add	sp, #28
 800a2c0:	bd30      	pop	{r4, r5, pc}
 800a2c2:	4b06      	ldr	r3, [pc, #24]	; (800a2dc <generate_type_name+0x58>)
 800a2c4:	4a01      	ldr	r2, [pc, #4]	; (800a2cc <generate_type_name+0x48>)
 800a2c6:	461d      	mov	r5, r3
 800a2c8:	e7e5      	b.n	800a296 <generate_type_name+0x12>
 800a2ca:	bf00      	nop
 800a2cc:	08017a70 	.word	0x08017a70
 800a2d0:	08017a88 	.word	0x08017a88
 800a2d4:	08017a84 	.word	0x08017a84
 800a2d8:	08017a74 	.word	0x08017a74
 800a2dc:	08018498 	.word	0x08018498

0800a2e0 <generate_topic_name>:
 800a2e0:	b530      	push	{r4, r5, lr}
 800a2e2:	4614      	mov	r4, r2
 800a2e4:	b083      	sub	sp, #12
 800a2e6:	4605      	mov	r5, r0
 800a2e8:	4b07      	ldr	r3, [pc, #28]	; (800a308 <generate_topic_name+0x28>)
 800a2ea:	4a08      	ldr	r2, [pc, #32]	; (800a30c <generate_topic_name+0x2c>)
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	9500      	str	r5, [sp, #0]
 800a2f0:	4621      	mov	r1, r4
 800a2f2:	f009 fcbf 	bl	8013c74 <sniprintf>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	bfa8      	it	ge
 800a2fa:	4284      	cmpge	r4, r0
 800a2fc:	bfcc      	ite	gt
 800a2fe:	2001      	movgt	r0, #1
 800a300:	2000      	movle	r0, #0
 800a302:	b003      	add	sp, #12
 800a304:	bd30      	pop	{r4, r5, pc}
 800a306:	bf00      	nop
 800a308:	08017a94 	.word	0x08017a94
 800a30c:	08017a8c 	.word	0x08017a8c

0800a310 <is_uxrce_rmw_identifier_valid>:
 800a310:	b510      	push	{r4, lr}
 800a312:	4604      	mov	r4, r0
 800a314:	b140      	cbz	r0, 800a328 <is_uxrce_rmw_identifier_valid+0x18>
 800a316:	f005 fb01 	bl	800f91c <rmw_get_implementation_identifier>
 800a31a:	4601      	mov	r1, r0
 800a31c:	4620      	mov	r0, r4
 800a31e:	f7f5 ffdf 	bl	80002e0 <strcmp>
 800a322:	fab0 f080 	clz	r0, r0
 800a326:	0940      	lsrs	r0, r0, #5
 800a328:	bd10      	pop	{r4, pc}
 800a32a:	bf00      	nop

0800a32c <get_message_typesupport_handle>:
 800a32c:	6883      	ldr	r3, [r0, #8]
 800a32e:	4718      	bx	r3

0800a330 <get_message_typesupport_handle_function>:
 800a330:	b510      	push	{r4, lr}
 800a332:	4604      	mov	r4, r0
 800a334:	6800      	ldr	r0, [r0, #0]
 800a336:	f7f5 ffd3 	bl	80002e0 <strcmp>
 800a33a:	2800      	cmp	r0, #0
 800a33c:	bf0c      	ite	eq
 800a33e:	4620      	moveq	r0, r4
 800a340:	2000      	movne	r0, #0
 800a342:	bd10      	pop	{r4, pc}

0800a344 <rosidl_runtime_c__uint8__Sequence__init>:
 800a344:	b530      	push	{r4, r5, lr}
 800a346:	4604      	mov	r4, r0
 800a348:	b087      	sub	sp, #28
 800a34a:	b130      	cbz	r0, 800a35a <rosidl_runtime_c__uint8__Sequence__init+0x16>
 800a34c:	460d      	mov	r5, r1
 800a34e:	b931      	cbnz	r1, 800a35e <rosidl_runtime_c__uint8__Sequence__init+0x1a>
 800a350:	460b      	mov	r3, r1
 800a352:	2001      	movs	r0, #1
 800a354:	60a5      	str	r5, [r4, #8]
 800a356:	e9c4 3500 	strd	r3, r5, [r4]
 800a35a:	b007      	add	sp, #28
 800a35c:	bd30      	pop	{r4, r5, pc}
 800a35e:	a801      	add	r0, sp, #4
 800a360:	f7ff fb08 	bl	8009974 <rcutils_get_default_allocator>
 800a364:	9b01      	ldr	r3, [sp, #4]
 800a366:	9905      	ldr	r1, [sp, #20]
 800a368:	4628      	mov	r0, r5
 800a36a:	4798      	blx	r3
 800a36c:	4603      	mov	r3, r0
 800a36e:	2800      	cmp	r0, #0
 800a370:	d1ef      	bne.n	800a352 <rosidl_runtime_c__uint8__Sequence__init+0xe>
 800a372:	e7f2      	b.n	800a35a <rosidl_runtime_c__uint8__Sequence__init+0x16>

0800a374 <rosidl_runtime_c__uint8__Sequence__fini>:
 800a374:	b188      	cbz	r0, 800a39a <rosidl_runtime_c__uint8__Sequence__fini+0x26>
 800a376:	6803      	ldr	r3, [r0, #0]
 800a378:	b510      	push	{r4, lr}
 800a37a:	4604      	mov	r4, r0
 800a37c:	b086      	sub	sp, #24
 800a37e:	b153      	cbz	r3, 800a396 <rosidl_runtime_c__uint8__Sequence__fini+0x22>
 800a380:	a801      	add	r0, sp, #4
 800a382:	f7ff faf7 	bl	8009974 <rcutils_get_default_allocator>
 800a386:	9b02      	ldr	r3, [sp, #8]
 800a388:	9905      	ldr	r1, [sp, #20]
 800a38a:	6820      	ldr	r0, [r4, #0]
 800a38c:	4798      	blx	r3
 800a38e:	2300      	movs	r3, #0
 800a390:	e9c4 3300 	strd	r3, r3, [r4]
 800a394:	60a3      	str	r3, [r4, #8]
 800a396:	b006      	add	sp, #24
 800a398:	bd10      	pop	{r4, pc}
 800a39a:	4770      	bx	lr

0800a39c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800a39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a0:	6805      	ldr	r5, [r0, #0]
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	460e      	mov	r6, r1
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f7f5 ff9a 	bl	80002e0 <strcmp>
 800a3ac:	b1c8      	cbz	r0, 800a3e2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800a3ae:	4b11      	ldr	r3, [pc, #68]	; (800a3f4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	429d      	cmp	r5, r3
 800a3b4:	d112      	bne.n	800a3dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800a3b6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800a3ba:	f8d8 4000 	ldr.w	r4, [r8]
 800a3be:	b16c      	cbz	r4, 800a3dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800a3c0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800a3c4:	2700      	movs	r7, #0
 800a3c6:	3d04      	subs	r5, #4
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800a3ce:	f7f5 ff87 	bl	80002e0 <strcmp>
 800a3d2:	00bb      	lsls	r3, r7, #2
 800a3d4:	b140      	cbz	r0, 800a3e8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800a3d6:	3701      	adds	r7, #1
 800a3d8:	42bc      	cmp	r4, r7
 800a3da:	d1f5      	bne.n	800a3c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800a3dc:	2000      	movs	r0, #0
 800a3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a3ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f0:	58d3      	ldr	r3, [r2, r3]
 800a3f2:	4718      	bx	r3
 800a3f4:	2000010c 	.word	0x2000010c

0800a3f8 <example_interfaces__msg__UInt8MultiArray__get_type_hash>:
 800a3f8:	4800      	ldr	r0, [pc, #0]	; (800a3fc <example_interfaces__msg__UInt8MultiArray__get_type_hash+0x4>)
 800a3fa:	4770      	bx	lr
 800a3fc:	20000260 	.word	0x20000260

0800a400 <example_interfaces__msg__UInt8MultiArray__get_type_description>:
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	4e0c      	ldr	r6, [pc, #48]	; (800a434 <example_interfaces__msg__UInt8MultiArray__get_type_description+0x34>)
 800a404:	7835      	ldrb	r5, [r6, #0]
 800a406:	b10d      	cbz	r5, 800a40c <example_interfaces__msg__UInt8MultiArray__get_type_description+0xc>
 800a408:	480b      	ldr	r0, [pc, #44]	; (800a438 <example_interfaces__msg__UInt8MultiArray__get_type_description+0x38>)
 800a40a:	bd70      	pop	{r4, r5, r6, pc}
 800a40c:	4628      	mov	r0, r5
 800a40e:	4c0b      	ldr	r4, [pc, #44]	; (800a43c <example_interfaces__msg__UInt8MultiArray__get_type_description+0x3c>)
 800a410:	f005 ff1a 	bl	8010248 <example_interfaces__msg__MultiArrayDimension__get_type_description>
 800a414:	300c      	adds	r0, #12
 800a416:	c807      	ldmia	r0, {r0, r1, r2}
 800a418:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a41c:	4628      	mov	r0, r5
 800a41e:	3418      	adds	r4, #24
 800a420:	f005 ffca 	bl	80103b8 <example_interfaces__msg__MultiArrayLayout__get_type_description>
 800a424:	300c      	adds	r0, #12
 800a426:	2301      	movs	r3, #1
 800a428:	c807      	ldmia	r0, {r0, r1, r2}
 800a42a:	7033      	strb	r3, [r6, #0]
 800a42c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a430:	4801      	ldr	r0, [pc, #4]	; (800a438 <example_interfaces__msg__UInt8MultiArray__get_type_description+0x38>)
 800a432:	bd70      	pop	{r4, r5, r6, pc}
 800a434:	2000e8dd 	.word	0x2000e8dd
 800a438:	08017ab0 	.word	0x08017ab0
 800a43c:	20000214 	.word	0x20000214

0800a440 <example_interfaces__msg__UInt8MultiArray__get_type_description_sources>:
 800a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a442:	4e17      	ldr	r6, [pc, #92]	; (800a4a0 <example_interfaces__msg__UInt8MultiArray__get_type_description_sources+0x60>)
 800a444:	7837      	ldrb	r7, [r6, #0]
 800a446:	b10f      	cbz	r7, 800a44c <example_interfaces__msg__UInt8MultiArray__get_type_description_sources+0xc>
 800a448:	4816      	ldr	r0, [pc, #88]	; (800a4a4 <example_interfaces__msg__UInt8MultiArray__get_type_description_sources+0x64>)
 800a44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a44c:	4d16      	ldr	r5, [pc, #88]	; (800a4a8 <example_interfaces__msg__UInt8MultiArray__get_type_description_sources+0x68>)
 800a44e:	4c17      	ldr	r4, [pc, #92]	; (800a4ac <example_interfaces__msg__UInt8MultiArray__get_type_description_sources+0x6c>)
 800a450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a458:	682b      	ldr	r3, [r5, #0]
 800a45a:	4625      	mov	r5, r4
 800a45c:	4638      	mov	r0, r7
 800a45e:	3428      	adds	r4, #40	; 0x28
 800a460:	f845 3b04 	str.w	r3, [r5], #4
 800a464:	f005 fefc 	bl	8010260 <example_interfaces__msg__MultiArrayDimension__get_individual_type_description_source>
 800a468:	4684      	mov	ip, r0
 800a46a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a46e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a470:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a476:	f8dc 3000 	ldr.w	r3, [ip]
 800a47a:	4638      	mov	r0, r7
 800a47c:	602b      	str	r3, [r5, #0]
 800a47e:	f005 ffb3 	bl	80103e8 <example_interfaces__msg__MultiArrayLayout__get_individual_type_description_source>
 800a482:	2301      	movs	r3, #1
 800a484:	4684      	mov	ip, r0
 800a486:	7033      	strb	r3, [r6, #0]
 800a488:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a48c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a48e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a494:	f8dc 3000 	ldr.w	r3, [ip]
 800a498:	4802      	ldr	r0, [pc, #8]	; (800a4a4 <example_interfaces__msg__UInt8MultiArray__get_type_description_sources+0x64>)
 800a49a:	6023      	str	r3, [r4, #0]
 800a49c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	2000e8dc 	.word	0x2000e8dc
 800a4a4:	08017af8 	.word	0x08017af8
 800a4a8:	08017ad4 	.word	0x08017ad4
 800a4ac:	2000e8e0 	.word	0x2000e8e0

0800a4b0 <example_interfaces__msg__UInt8MultiArray__init>:
 800a4b0:	b570      	push	{r4, r5, r6, lr}
 800a4b2:	4605      	mov	r5, r0
 800a4b4:	b1b0      	cbz	r0, 800a4e4 <example_interfaces__msg__UInt8MultiArray__init+0x34>
 800a4b6:	f005 ffc3 	bl	8010440 <example_interfaces__msg__MultiArrayLayout__init>
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	b148      	cbz	r0, 800a4d2 <example_interfaces__msg__UInt8MultiArray__init+0x22>
 800a4be:	f105 0610 	add.w	r6, r5, #16
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f7ff ff3d 	bl	800a344 <rosidl_runtime_c__uint8__Sequence__init>
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	b168      	cbz	r0, 800a4ea <example_interfaces__msg__UInt8MultiArray__init+0x3a>
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	bd70      	pop	{r4, r5, r6, pc}
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	f005 ffc6 	bl	8010464 <example_interfaces__msg__MultiArrayLayout__fini>
 800a4d8:	f105 0010 	add.w	r0, r5, #16
 800a4dc:	f7ff ff4a 	bl	800a374 <rosidl_runtime_c__uint8__Sequence__fini>
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	bd70      	pop	{r4, r5, r6, pc}
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	bd70      	pop	{r4, r5, r6, pc}
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	f005 ffba 	bl	8010464 <example_interfaces__msg__MultiArrayLayout__fini>
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	f7ff ff3f 	bl	800a374 <rosidl_runtime_c__uint8__Sequence__fini>
 800a4f6:	e7ea      	b.n	800a4ce <example_interfaces__msg__UInt8MultiArray__init+0x1e>

0800a4f8 <example_interfaces__msg__UInt8MultiArray__fini>:
 800a4f8:	b148      	cbz	r0, 800a50e <example_interfaces__msg__UInt8MultiArray__fini+0x16>
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	f005 ffb1 	bl	8010464 <example_interfaces__msg__MultiArrayLayout__fini>
 800a502:	f104 0010 	add.w	r0, r4, #16
 800a506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a50a:	f7ff bf33 	b.w	800a374 <rosidl_runtime_c__uint8__Sequence__fini>
 800a50e:	4770      	bx	lr

0800a510 <example_interfaces__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 800a510:	6840      	ldr	r0, [r0, #4]
 800a512:	4770      	bx	lr

0800a514 <example_interfaces__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 800a514:	6800      	ldr	r0, [r0, #0]
 800a516:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a51a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a51e:	4770      	bx	lr

0800a520 <example_interfaces__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 800a520:	6803      	ldr	r3, [r0, #0]
 800a522:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a526:	4694      	mov	ip, r2
 800a528:	b500      	push	{lr}
 800a52a:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800a52e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a532:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a536:	f8de 3000 	ldr.w	r3, [lr]
 800a53a:	f8cc 3000 	str.w	r3, [ip]
 800a53e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a542:	bf00      	nop

0800a544 <example_interfaces__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 800a544:	6803      	ldr	r3, [r0, #0]
 800a546:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a54a:	b500      	push	{lr}
 800a54c:	4696      	mov	lr, r2
 800a54e:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800a552:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a556:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a55a:	f8de 3000 	ldr.w	r3, [lr]
 800a55e:	f8cc 3000 	str.w	r3, [ip]
 800a562:	f85d fb04 	ldr.w	pc, [sp], #4
 800a566:	bf00      	nop

0800a568 <example_interfaces__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 800a568:	f005 bf6a 	b.w	8010440 <example_interfaces__msg__MultiArrayLayout__init>

0800a56c <example_interfaces__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 800a56c:	f005 bf7a 	b.w	8010464 <example_interfaces__msg__MultiArrayLayout__fini>

0800a570 <example_interfaces__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 800a570:	b510      	push	{r4, lr}
 800a572:	4604      	mov	r4, r0
 800a574:	b082      	sub	sp, #8
 800a576:	9101      	str	r1, [sp, #4]
 800a578:	f005 fef2 	bl	8010360 <example_interfaces__msg__MultiArrayDimension__Sequence__fini>
 800a57c:	9901      	ldr	r1, [sp, #4]
 800a57e:	4620      	mov	r0, r4
 800a580:	b002      	add	sp, #8
 800a582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a586:	f005 bee7 	b.w	8010358 <example_interfaces__msg__MultiArrayDimension__Sequence__init>
 800a58a:	bf00      	nop

0800a58c <example_interfaces__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 800a58c:	6800      	ldr	r0, [r0, #0]
 800a58e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800a592:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800a596:	4770      	bx	lr

0800a598 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayLayout>:
 800a598:	b508      	push	{r3, lr}
 800a59a:	f005 ff6b 	bl	8010474 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayDimension>
 800a59e:	4b06      	ldr	r3, [pc, #24]	; (800a5b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayLayout+0x20>)
 800a5a0:	4906      	ldr	r1, [pc, #24]	; (800a5bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayLayout+0x24>)
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	60c8      	str	r0, [r1, #12]
 800a5a6:	b10a      	cbz	r2, 800a5ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayLayout+0x14>
 800a5a8:	4803      	ldr	r0, [pc, #12]	; (800a5b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayLayout+0x20>)
 800a5aa:	bd08      	pop	{r3, pc}
 800a5ac:	4a04      	ldr	r2, [pc, #16]	; (800a5c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayLayout+0x28>)
 800a5ae:	4802      	ldr	r0, [pc, #8]	; (800a5b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayLayout+0x20>)
 800a5b0:	6812      	ldr	r2, [r2, #0]
 800a5b2:	601a      	str	r2, [r3, #0]
 800a5b4:	bd08      	pop	{r3, pc}
 800a5b6:	bf00      	nop
 800a5b8:	2000048c 	.word	0x2000048c
 800a5bc:	20000414 	.word	0x20000414
 800a5c0:	20000110 	.word	0x20000110

0800a5c4 <_MultiArrayLayout__max_serialized_size>:
 800a5c4:	2104      	movs	r1, #4
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	b508      	push	{r3, lr}
 800a5ca:	f7fe ff0b 	bl	80093e4 <ucdr_alignment>
 800a5ce:	3004      	adds	r0, #4
 800a5d0:	bd08      	pop	{r3, pc}
 800a5d2:	bf00      	nop

0800a5d4 <get_serialized_size_example_interfaces__msg__MultiArrayLayout.part.0>:
 800a5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5d8:	4689      	mov	r9, r1
 800a5da:	4607      	mov	r7, r0
 800a5dc:	2104      	movs	r1, #4
 800a5de:	4648      	mov	r0, r9
 800a5e0:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800a5e4:	f7fe fefe 	bl	80093e4 <ucdr_alignment>
 800a5e8:	f109 0304 	add.w	r3, r9, #4
 800a5ec:	18c6      	adds	r6, r0, r3
 800a5ee:	f1b8 0f00 	cmp.w	r8, #0
 800a5f2:	d018      	beq.n	800a626 <get_serialized_size_example_interfaces__msg__MultiArrayLayout.part.0+0x52>
 800a5f4:	2500      	movs	r5, #0
 800a5f6:	f005 ffdb 	bl	80105b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayDimension>
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800a600:	6843      	ldr	r3, [r0, #4]
 800a602:	4631      	mov	r1, r6
 800a604:	3501      	adds	r5, #1
 800a606:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 800a60a:	695b      	ldr	r3, [r3, #20]
 800a60c:	4798      	blx	r3
 800a60e:	4604      	mov	r4, r0
 800a610:	4630      	mov	r0, r6
 800a612:	2c04      	cmp	r4, #4
 800a614:	4621      	mov	r1, r4
 800a616:	bf28      	it	cs
 800a618:	2104      	movcs	r1, #4
 800a61a:	f7fe fee3 	bl	80093e4 <ucdr_alignment>
 800a61e:	45a8      	cmp	r8, r5
 800a620:	4404      	add	r4, r0
 800a622:	4426      	add	r6, r4
 800a624:	d1e7      	bne.n	800a5f6 <get_serialized_size_example_interfaces__msg__MultiArrayLayout.part.0+0x22>
 800a626:	f1c9 0904 	rsb	r9, r9, #4
 800a62a:	4630      	mov	r0, r6
 800a62c:	2104      	movs	r1, #4
 800a62e:	444e      	add	r6, r9
 800a630:	f7fe fed8 	bl	80093e4 <ucdr_alignment>
 800a634:	4430      	add	r0, r6
 800a636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a63a:	bf00      	nop

0800a63c <get_serialized_size_example_interfaces__msg__MultiArrayLayout>:
 800a63c:	b108      	cbz	r0, 800a642 <get_serialized_size_example_interfaces__msg__MultiArrayLayout+0x6>
 800a63e:	f7ff bfc9 	b.w	800a5d4 <get_serialized_size_example_interfaces__msg__MultiArrayLayout.part.0>
 800a642:	4770      	bx	lr

0800a644 <_MultiArrayLayout__get_serialized_size>:
 800a644:	b110      	cbz	r0, 800a64c <_MultiArrayLayout__get_serialized_size+0x8>
 800a646:	2100      	movs	r1, #0
 800a648:	f7ff bfc4 	b.w	800a5d4 <get_serialized_size_example_interfaces__msg__MultiArrayLayout.part.0>
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop

0800a650 <_MultiArrayLayout__cdr_deserialize>:
 800a650:	b349      	cbz	r1, 800a6a6 <_MultiArrayLayout__cdr_deserialize+0x56>
 800a652:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a654:	b083      	sub	sp, #12
 800a656:	460e      	mov	r6, r1
 800a658:	4607      	mov	r7, r0
 800a65a:	a901      	add	r1, sp, #4
 800a65c:	f000 fcfe 	bl	800b05c <ucdr_deserialize_uint32_t>
 800a660:	9b01      	ldr	r3, [sp, #4]
 800a662:	68b2      	ldr	r2, [r6, #8]
 800a664:	429a      	cmp	r2, r3
 800a666:	d31b      	bcc.n	800a6a0 <_MultiArrayLayout__cdr_deserialize+0x50>
 800a668:	6073      	str	r3, [r6, #4]
 800a66a:	b18b      	cbz	r3, 800a690 <_MultiArrayLayout__cdr_deserialize+0x40>
 800a66c:	2400      	movs	r4, #0
 800a66e:	4625      	mov	r5, r4
 800a670:	e002      	b.n	800a678 <_MultiArrayLayout__cdr_deserialize+0x28>
 800a672:	9b01      	ldr	r3, [sp, #4]
 800a674:	429d      	cmp	r5, r3
 800a676:	d20b      	bcs.n	800a690 <_MultiArrayLayout__cdr_deserialize+0x40>
 800a678:	f005 ff9a 	bl	80105b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayDimension>
 800a67c:	6831      	ldr	r1, [r6, #0]
 800a67e:	6843      	ldr	r3, [r0, #4]
 800a680:	4638      	mov	r0, r7
 800a682:	4421      	add	r1, r4
 800a684:	3501      	adds	r5, #1
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	3414      	adds	r4, #20
 800a68a:	4798      	blx	r3
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d1f0      	bne.n	800a672 <_MultiArrayLayout__cdr_deserialize+0x22>
 800a690:	f106 010c 	add.w	r1, r6, #12
 800a694:	4638      	mov	r0, r7
 800a696:	b003      	add	sp, #12
 800a698:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a69c:	f000 bcde 	b.w	800b05c <ucdr_deserialize_uint32_t>
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	b003      	add	sp, #12
 800a6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop

0800a6ac <_MultiArrayLayout__cdr_serialize>:
 800a6ac:	b308      	cbz	r0, 800a6f2 <_MultiArrayLayout__cdr_serialize+0x46>
 800a6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b0:	6847      	ldr	r7, [r0, #4]
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	460e      	mov	r6, r1
 800a6b6:	4608      	mov	r0, r1
 800a6b8:	4639      	mov	r1, r7
 800a6ba:	f000 fb9f 	bl	800adfc <ucdr_serialize_uint32_t>
 800a6be:	b190      	cbz	r0, 800a6e6 <_MultiArrayLayout__cdr_serialize+0x3a>
 800a6c0:	b18f      	cbz	r7, 800a6e6 <_MultiArrayLayout__cdr_serialize+0x3a>
 800a6c2:	2400      	movs	r4, #0
 800a6c4:	e001      	b.n	800a6ca <_MultiArrayLayout__cdr_serialize+0x1e>
 800a6c6:	42a7      	cmp	r7, r4
 800a6c8:	d00d      	beq.n	800a6e6 <_MultiArrayLayout__cdr_serialize+0x3a>
 800a6ca:	f005 ff71 	bl	80105b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayDimension>
 800a6ce:	682a      	ldr	r2, [r5, #0]
 800a6d0:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 800a6d4:	6843      	ldr	r3, [r0, #4]
 800a6d6:	4631      	mov	r1, r6
 800a6d8:	3401      	adds	r4, #1
 800a6da:	eb02 008c 	add.w	r0, r2, ip, lsl #2
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	4798      	blx	r3
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d1ef      	bne.n	800a6c6 <_MultiArrayLayout__cdr_serialize+0x1a>
 800a6e6:	68e9      	ldr	r1, [r5, #12]
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a6ee:	f000 bb85 	b.w	800adfc <ucdr_serialize_uint32_t>
 800a6f2:	4770      	bx	lr

0800a6f4 <max_serialized_size_example_interfaces__msg__MultiArrayLayout>:
 800a6f4:	b508      	push	{r3, lr}
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	4608      	mov	r0, r1
 800a6fc:	2104      	movs	r1, #4
 800a6fe:	701a      	strb	r2, [r3, #0]
 800a700:	f7fe fe70 	bl	80093e4 <ucdr_alignment>
 800a704:	3004      	adds	r0, #4
 800a706:	bd08      	pop	{r3, pc}

0800a708 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayLayout>:
 800a708:	4800      	ldr	r0, [pc, #0]	; (800a70c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayLayout+0x4>)
 800a70a:	4770      	bx	lr
 800a70c:	200004a4 	.word	0x200004a4

0800a710 <ucdr_serialize_endian_array_char>:
 800a710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a714:	4619      	mov	r1, r3
 800a716:	461f      	mov	r7, r3
 800a718:	4605      	mov	r5, r0
 800a71a:	4690      	mov	r8, r2
 800a71c:	f7fe fe0a 	bl	8009334 <ucdr_check_buffer_available_for>
 800a720:	b9e0      	cbnz	r0, 800a75c <ucdr_serialize_endian_array_char+0x4c>
 800a722:	463e      	mov	r6, r7
 800a724:	e00b      	b.n	800a73e <ucdr_serialize_endian_array_char+0x2e>
 800a726:	4441      	add	r1, r8
 800a728:	68a8      	ldr	r0, [r5, #8]
 800a72a:	4622      	mov	r2, r4
 800a72c:	1b36      	subs	r6, r6, r4
 800a72e:	f008 faab 	bl	8012c88 <memcpy>
 800a732:	68ab      	ldr	r3, [r5, #8]
 800a734:	6928      	ldr	r0, [r5, #16]
 800a736:	4423      	add	r3, r4
 800a738:	4420      	add	r0, r4
 800a73a:	60ab      	str	r3, [r5, #8]
 800a73c:	6128      	str	r0, [r5, #16]
 800a73e:	4631      	mov	r1, r6
 800a740:	2201      	movs	r2, #1
 800a742:	4628      	mov	r0, r5
 800a744:	f7fe fe80 	bl	8009448 <ucdr_check_final_buffer_behavior_array>
 800a748:	1bb9      	subs	r1, r7, r6
 800a74a:	4604      	mov	r4, r0
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d1ea      	bne.n	800a726 <ucdr_serialize_endian_array_char+0x16>
 800a750:	2301      	movs	r3, #1
 800a752:	7da8      	ldrb	r0, [r5, #22]
 800a754:	756b      	strb	r3, [r5, #21]
 800a756:	4058      	eors	r0, r3
 800a758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a75c:	463a      	mov	r2, r7
 800a75e:	4641      	mov	r1, r8
 800a760:	68a8      	ldr	r0, [r5, #8]
 800a762:	f008 fa91 	bl	8012c88 <memcpy>
 800a766:	68aa      	ldr	r2, [r5, #8]
 800a768:	692b      	ldr	r3, [r5, #16]
 800a76a:	443a      	add	r2, r7
 800a76c:	443b      	add	r3, r7
 800a76e:	60aa      	str	r2, [r5, #8]
 800a770:	612b      	str	r3, [r5, #16]
 800a772:	e7ed      	b.n	800a750 <ucdr_serialize_endian_array_char+0x40>

0800a774 <ucdr_deserialize_endian_array_char>:
 800a774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a778:	4619      	mov	r1, r3
 800a77a:	461f      	mov	r7, r3
 800a77c:	4605      	mov	r5, r0
 800a77e:	4690      	mov	r8, r2
 800a780:	f7fe fdd8 	bl	8009334 <ucdr_check_buffer_available_for>
 800a784:	b9e8      	cbnz	r0, 800a7c2 <ucdr_deserialize_endian_array_char+0x4e>
 800a786:	463e      	mov	r6, r7
 800a788:	e00c      	b.n	800a7a4 <ucdr_deserialize_endian_array_char+0x30>
 800a78a:	eb08 0003 	add.w	r0, r8, r3
 800a78e:	68a9      	ldr	r1, [r5, #8]
 800a790:	4622      	mov	r2, r4
 800a792:	1b36      	subs	r6, r6, r4
 800a794:	f008 fa78 	bl	8012c88 <memcpy>
 800a798:	68ab      	ldr	r3, [r5, #8]
 800a79a:	6928      	ldr	r0, [r5, #16]
 800a79c:	4423      	add	r3, r4
 800a79e:	4420      	add	r0, r4
 800a7a0:	60ab      	str	r3, [r5, #8]
 800a7a2:	6128      	str	r0, [r5, #16]
 800a7a4:	4631      	mov	r1, r6
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	f7fe fe4d 	bl	8009448 <ucdr_check_final_buffer_behavior_array>
 800a7ae:	1bbb      	subs	r3, r7, r6
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d1e9      	bne.n	800a78a <ucdr_deserialize_endian_array_char+0x16>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	7da8      	ldrb	r0, [r5, #22]
 800a7ba:	756b      	strb	r3, [r5, #21]
 800a7bc:	4058      	eors	r0, r3
 800a7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c2:	463a      	mov	r2, r7
 800a7c4:	68a9      	ldr	r1, [r5, #8]
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	f008 fa5e 	bl	8012c88 <memcpy>
 800a7cc:	68aa      	ldr	r2, [r5, #8]
 800a7ce:	692b      	ldr	r3, [r5, #16]
 800a7d0:	443a      	add	r2, r7
 800a7d2:	443b      	add	r3, r7
 800a7d4:	60aa      	str	r2, [r5, #8]
 800a7d6:	612b      	str	r3, [r5, #16]
 800a7d8:	e7ed      	b.n	800a7b6 <ucdr_deserialize_endian_array_char+0x42>
 800a7da:	bf00      	nop

0800a7dc <ucdr_serialize_array_uint8_t>:
 800a7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e0:	4688      	mov	r8, r1
 800a7e2:	4611      	mov	r1, r2
 800a7e4:	4617      	mov	r7, r2
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	f7fe fda4 	bl	8009334 <ucdr_check_buffer_available_for>
 800a7ec:	b9e0      	cbnz	r0, 800a828 <ucdr_serialize_array_uint8_t+0x4c>
 800a7ee:	463e      	mov	r6, r7
 800a7f0:	e00b      	b.n	800a80a <ucdr_serialize_array_uint8_t+0x2e>
 800a7f2:	4441      	add	r1, r8
 800a7f4:	68a8      	ldr	r0, [r5, #8]
 800a7f6:	4622      	mov	r2, r4
 800a7f8:	1b36      	subs	r6, r6, r4
 800a7fa:	f008 fa45 	bl	8012c88 <memcpy>
 800a7fe:	68ab      	ldr	r3, [r5, #8]
 800a800:	6928      	ldr	r0, [r5, #16]
 800a802:	4423      	add	r3, r4
 800a804:	4420      	add	r0, r4
 800a806:	60ab      	str	r3, [r5, #8]
 800a808:	6128      	str	r0, [r5, #16]
 800a80a:	4631      	mov	r1, r6
 800a80c:	2201      	movs	r2, #1
 800a80e:	4628      	mov	r0, r5
 800a810:	f7fe fe1a 	bl	8009448 <ucdr_check_final_buffer_behavior_array>
 800a814:	1bb9      	subs	r1, r7, r6
 800a816:	4604      	mov	r4, r0
 800a818:	2800      	cmp	r0, #0
 800a81a:	d1ea      	bne.n	800a7f2 <ucdr_serialize_array_uint8_t+0x16>
 800a81c:	2301      	movs	r3, #1
 800a81e:	7da8      	ldrb	r0, [r5, #22]
 800a820:	756b      	strb	r3, [r5, #21]
 800a822:	4058      	eors	r0, r3
 800a824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a828:	463a      	mov	r2, r7
 800a82a:	4641      	mov	r1, r8
 800a82c:	68a8      	ldr	r0, [r5, #8]
 800a82e:	f008 fa2b 	bl	8012c88 <memcpy>
 800a832:	68aa      	ldr	r2, [r5, #8]
 800a834:	692b      	ldr	r3, [r5, #16]
 800a836:	443a      	add	r2, r7
 800a838:	443b      	add	r3, r7
 800a83a:	60aa      	str	r2, [r5, #8]
 800a83c:	612b      	str	r3, [r5, #16]
 800a83e:	e7ed      	b.n	800a81c <ucdr_serialize_array_uint8_t+0x40>

0800a840 <ucdr_serialize_endian_array_uint8_t>:
 800a840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a844:	4619      	mov	r1, r3
 800a846:	461f      	mov	r7, r3
 800a848:	4605      	mov	r5, r0
 800a84a:	4690      	mov	r8, r2
 800a84c:	f7fe fd72 	bl	8009334 <ucdr_check_buffer_available_for>
 800a850:	b9e0      	cbnz	r0, 800a88c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800a852:	463e      	mov	r6, r7
 800a854:	e00b      	b.n	800a86e <ucdr_serialize_endian_array_uint8_t+0x2e>
 800a856:	4441      	add	r1, r8
 800a858:	68a8      	ldr	r0, [r5, #8]
 800a85a:	4622      	mov	r2, r4
 800a85c:	1b36      	subs	r6, r6, r4
 800a85e:	f008 fa13 	bl	8012c88 <memcpy>
 800a862:	68ab      	ldr	r3, [r5, #8]
 800a864:	6928      	ldr	r0, [r5, #16]
 800a866:	4423      	add	r3, r4
 800a868:	4420      	add	r0, r4
 800a86a:	60ab      	str	r3, [r5, #8]
 800a86c:	6128      	str	r0, [r5, #16]
 800a86e:	4631      	mov	r1, r6
 800a870:	2201      	movs	r2, #1
 800a872:	4628      	mov	r0, r5
 800a874:	f7fe fde8 	bl	8009448 <ucdr_check_final_buffer_behavior_array>
 800a878:	1bb9      	subs	r1, r7, r6
 800a87a:	4604      	mov	r4, r0
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d1ea      	bne.n	800a856 <ucdr_serialize_endian_array_uint8_t+0x16>
 800a880:	2301      	movs	r3, #1
 800a882:	7da8      	ldrb	r0, [r5, #22]
 800a884:	756b      	strb	r3, [r5, #21]
 800a886:	4058      	eors	r0, r3
 800a888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a88c:	463a      	mov	r2, r7
 800a88e:	4641      	mov	r1, r8
 800a890:	68a8      	ldr	r0, [r5, #8]
 800a892:	f008 f9f9 	bl	8012c88 <memcpy>
 800a896:	68aa      	ldr	r2, [r5, #8]
 800a898:	692b      	ldr	r3, [r5, #16]
 800a89a:	443a      	add	r2, r7
 800a89c:	443b      	add	r3, r7
 800a89e:	60aa      	str	r2, [r5, #8]
 800a8a0:	612b      	str	r3, [r5, #16]
 800a8a2:	e7ed      	b.n	800a880 <ucdr_serialize_endian_array_uint8_t+0x40>

0800a8a4 <ucdr_deserialize_array_uint8_t>:
 800a8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a8:	4688      	mov	r8, r1
 800a8aa:	4611      	mov	r1, r2
 800a8ac:	4617      	mov	r7, r2
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	f7fe fd40 	bl	8009334 <ucdr_check_buffer_available_for>
 800a8b4:	b9e8      	cbnz	r0, 800a8f2 <ucdr_deserialize_array_uint8_t+0x4e>
 800a8b6:	463e      	mov	r6, r7
 800a8b8:	e00c      	b.n	800a8d4 <ucdr_deserialize_array_uint8_t+0x30>
 800a8ba:	eb08 0003 	add.w	r0, r8, r3
 800a8be:	68a9      	ldr	r1, [r5, #8]
 800a8c0:	4622      	mov	r2, r4
 800a8c2:	1b36      	subs	r6, r6, r4
 800a8c4:	f008 f9e0 	bl	8012c88 <memcpy>
 800a8c8:	68ab      	ldr	r3, [r5, #8]
 800a8ca:	6928      	ldr	r0, [r5, #16]
 800a8cc:	4423      	add	r3, r4
 800a8ce:	4420      	add	r0, r4
 800a8d0:	60ab      	str	r3, [r5, #8]
 800a8d2:	6128      	str	r0, [r5, #16]
 800a8d4:	4631      	mov	r1, r6
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	4628      	mov	r0, r5
 800a8da:	f7fe fdb5 	bl	8009448 <ucdr_check_final_buffer_behavior_array>
 800a8de:	1bbb      	subs	r3, r7, r6
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	d1e9      	bne.n	800a8ba <ucdr_deserialize_array_uint8_t+0x16>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	7da8      	ldrb	r0, [r5, #22]
 800a8ea:	756b      	strb	r3, [r5, #21]
 800a8ec:	4058      	eors	r0, r3
 800a8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f2:	463a      	mov	r2, r7
 800a8f4:	68a9      	ldr	r1, [r5, #8]
 800a8f6:	4640      	mov	r0, r8
 800a8f8:	f008 f9c6 	bl	8012c88 <memcpy>
 800a8fc:	68aa      	ldr	r2, [r5, #8]
 800a8fe:	692b      	ldr	r3, [r5, #16]
 800a900:	443a      	add	r2, r7
 800a902:	443b      	add	r3, r7
 800a904:	60aa      	str	r2, [r5, #8]
 800a906:	612b      	str	r3, [r5, #16]
 800a908:	e7ed      	b.n	800a8e6 <ucdr_deserialize_array_uint8_t+0x42>
 800a90a:	bf00      	nop

0800a90c <ucdr_deserialize_endian_array_uint8_t>:
 800a90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a910:	4619      	mov	r1, r3
 800a912:	461f      	mov	r7, r3
 800a914:	4605      	mov	r5, r0
 800a916:	4690      	mov	r8, r2
 800a918:	f7fe fd0c 	bl	8009334 <ucdr_check_buffer_available_for>
 800a91c:	b9e8      	cbnz	r0, 800a95a <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800a91e:	463e      	mov	r6, r7
 800a920:	e00c      	b.n	800a93c <ucdr_deserialize_endian_array_uint8_t+0x30>
 800a922:	eb08 0003 	add.w	r0, r8, r3
 800a926:	68a9      	ldr	r1, [r5, #8]
 800a928:	4622      	mov	r2, r4
 800a92a:	1b36      	subs	r6, r6, r4
 800a92c:	f008 f9ac 	bl	8012c88 <memcpy>
 800a930:	68ab      	ldr	r3, [r5, #8]
 800a932:	6928      	ldr	r0, [r5, #16]
 800a934:	4423      	add	r3, r4
 800a936:	4420      	add	r0, r4
 800a938:	60ab      	str	r3, [r5, #8]
 800a93a:	6128      	str	r0, [r5, #16]
 800a93c:	4631      	mov	r1, r6
 800a93e:	2201      	movs	r2, #1
 800a940:	4628      	mov	r0, r5
 800a942:	f7fe fd81 	bl	8009448 <ucdr_check_final_buffer_behavior_array>
 800a946:	1bbb      	subs	r3, r7, r6
 800a948:	4604      	mov	r4, r0
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d1e9      	bne.n	800a922 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800a94e:	2301      	movs	r3, #1
 800a950:	7da8      	ldrb	r0, [r5, #22]
 800a952:	756b      	strb	r3, [r5, #21]
 800a954:	4058      	eors	r0, r3
 800a956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a95a:	463a      	mov	r2, r7
 800a95c:	68a9      	ldr	r1, [r5, #8]
 800a95e:	4640      	mov	r0, r8
 800a960:	f008 f992 	bl	8012c88 <memcpy>
 800a964:	68aa      	ldr	r2, [r5, #8]
 800a966:	692b      	ldr	r3, [r5, #16]
 800a968:	443a      	add	r2, r7
 800a96a:	443b      	add	r3, r7
 800a96c:	60aa      	str	r2, [r5, #8]
 800a96e:	612b      	str	r3, [r5, #16]
 800a970:	e7ed      	b.n	800a94e <ucdr_deserialize_endian_array_uint8_t+0x42>
 800a972:	bf00      	nop

0800a974 <ucdr_serialize_bool>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	460d      	mov	r5, r1
 800a978:	2101      	movs	r1, #1
 800a97a:	4604      	mov	r4, r0
 800a97c:	f7fe fce6 	bl	800934c <ucdr_check_final_buffer_behavior>
 800a980:	b148      	cbz	r0, 800a996 <ucdr_serialize_bool+0x22>
 800a982:	68a3      	ldr	r3, [r4, #8]
 800a984:	2101      	movs	r1, #1
 800a986:	701d      	strb	r5, [r3, #0]
 800a988:	68a2      	ldr	r2, [r4, #8]
 800a98a:	6923      	ldr	r3, [r4, #16]
 800a98c:	440a      	add	r2, r1
 800a98e:	7561      	strb	r1, [r4, #21]
 800a990:	440b      	add	r3, r1
 800a992:	60a2      	str	r2, [r4, #8]
 800a994:	6123      	str	r3, [r4, #16]
 800a996:	7da0      	ldrb	r0, [r4, #22]
 800a998:	f080 0001 	eor.w	r0, r0, #1
 800a99c:	bd38      	pop	{r3, r4, r5, pc}
 800a99e:	bf00      	nop

0800a9a0 <ucdr_deserialize_bool>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	460d      	mov	r5, r1
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	f7fe fcd0 	bl	800934c <ucdr_check_final_buffer_behavior>
 800a9ac:	b160      	cbz	r0, 800a9c8 <ucdr_deserialize_bool+0x28>
 800a9ae:	68a2      	ldr	r2, [r4, #8]
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	6923      	ldr	r3, [r4, #16]
 800a9b4:	f812 0b01 	ldrb.w	r0, [r2], #1
 800a9b8:	440b      	add	r3, r1
 800a9ba:	3800      	subs	r0, #0
 800a9bc:	bf18      	it	ne
 800a9be:	2001      	movne	r0, #1
 800a9c0:	7028      	strb	r0, [r5, #0]
 800a9c2:	60a2      	str	r2, [r4, #8]
 800a9c4:	6123      	str	r3, [r4, #16]
 800a9c6:	7561      	strb	r1, [r4, #21]
 800a9c8:	7da0      	ldrb	r0, [r4, #22]
 800a9ca:	f080 0001 	eor.w	r0, r0, #1
 800a9ce:	bd38      	pop	{r3, r4, r5, pc}

0800a9d0 <ucdr_serialize_uint8_t>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	460d      	mov	r5, r1
 800a9d4:	2101      	movs	r1, #1
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	f7fe fcb8 	bl	800934c <ucdr_check_final_buffer_behavior>
 800a9dc:	b148      	cbz	r0, 800a9f2 <ucdr_serialize_uint8_t+0x22>
 800a9de:	68a3      	ldr	r3, [r4, #8]
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	701d      	strb	r5, [r3, #0]
 800a9e4:	68a2      	ldr	r2, [r4, #8]
 800a9e6:	6923      	ldr	r3, [r4, #16]
 800a9e8:	440a      	add	r2, r1
 800a9ea:	7561      	strb	r1, [r4, #21]
 800a9ec:	440b      	add	r3, r1
 800a9ee:	60a2      	str	r2, [r4, #8]
 800a9f0:	6123      	str	r3, [r4, #16]
 800a9f2:	7da0      	ldrb	r0, [r4, #22]
 800a9f4:	f080 0001 	eor.w	r0, r0, #1
 800a9f8:	bd38      	pop	{r3, r4, r5, pc}
 800a9fa:	bf00      	nop

0800a9fc <ucdr_deserialize_uint8_t>:
 800a9fc:	b538      	push	{r3, r4, r5, lr}
 800a9fe:	460d      	mov	r5, r1
 800aa00:	2101      	movs	r1, #1
 800aa02:	4604      	mov	r4, r0
 800aa04:	f7fe fca2 	bl	800934c <ucdr_check_final_buffer_behavior>
 800aa08:	b150      	cbz	r0, 800aa20 <ucdr_deserialize_uint8_t+0x24>
 800aa0a:	68a3      	ldr	r3, [r4, #8]
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	702b      	strb	r3, [r5, #0]
 800aa12:	68a2      	ldr	r2, [r4, #8]
 800aa14:	6923      	ldr	r3, [r4, #16]
 800aa16:	440a      	add	r2, r1
 800aa18:	7561      	strb	r1, [r4, #21]
 800aa1a:	440b      	add	r3, r1
 800aa1c:	60a2      	str	r2, [r4, #8]
 800aa1e:	6123      	str	r3, [r4, #16]
 800aa20:	7da0      	ldrb	r0, [r4, #22]
 800aa22:	f080 0001 	eor.w	r0, r0, #1
 800aa26:	bd38      	pop	{r3, r4, r5, pc}

0800aa28 <ucdr_serialize_uint16_t>:
 800aa28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	b082      	sub	sp, #8
 800aa30:	4604      	mov	r4, r0
 800aa32:	2102      	movs	r1, #2
 800aa34:	f8ad 3006 	strh.w	r3, [sp, #6]
 800aa38:	f7fe fcdc 	bl	80093f4 <ucdr_buffer_alignment>
 800aa3c:	4601      	mov	r1, r0
 800aa3e:	4620      	mov	r0, r4
 800aa40:	7d67      	ldrb	r7, [r4, #21]
 800aa42:	f7fe fd1f 	bl	8009484 <ucdr_advance_buffer>
 800aa46:	2102      	movs	r1, #2
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f7fe fc73 	bl	8009334 <ucdr_check_buffer_available_for>
 800aa4e:	bb78      	cbnz	r0, 800aab0 <ucdr_serialize_uint16_t+0x88>
 800aa50:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800aa54:	42ab      	cmp	r3, r5
 800aa56:	d926      	bls.n	800aaa6 <ucdr_serialize_uint16_t+0x7e>
 800aa58:	1b5e      	subs	r6, r3, r5
 800aa5a:	60a3      	str	r3, [r4, #8]
 800aa5c:	6923      	ldr	r3, [r4, #16]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f1c6 0802 	rsb	r8, r6, #2
 800aa64:	4433      	add	r3, r6
 800aa66:	4641      	mov	r1, r8
 800aa68:	6123      	str	r3, [r4, #16]
 800aa6a:	f7fe fc6f 	bl	800934c <ucdr_check_final_buffer_behavior>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d03b      	beq.n	800aaea <ucdr_serialize_uint16_t+0xc2>
 800aa72:	7d23      	ldrb	r3, [r4, #20]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d04a      	beq.n	800ab0e <ucdr_serialize_uint16_t+0xe6>
 800aa78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aa7c:	702b      	strb	r3, [r5, #0]
 800aa7e:	2e00      	cmp	r6, #0
 800aa80:	d040      	beq.n	800ab04 <ucdr_serialize_uint16_t+0xdc>
 800aa82:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aa86:	706b      	strb	r3, [r5, #1]
 800aa88:	6923      	ldr	r3, [r4, #16]
 800aa8a:	2102      	movs	r1, #2
 800aa8c:	68a2      	ldr	r2, [r4, #8]
 800aa8e:	3302      	adds	r3, #2
 800aa90:	7da0      	ldrb	r0, [r4, #22]
 800aa92:	4442      	add	r2, r8
 800aa94:	7561      	strb	r1, [r4, #21]
 800aa96:	1b9e      	subs	r6, r3, r6
 800aa98:	f080 0001 	eor.w	r0, r0, #1
 800aa9c:	60a2      	str	r2, [r4, #8]
 800aa9e:	6126      	str	r6, [r4, #16]
 800aaa0:	b002      	add	sp, #8
 800aaa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa6:	2102      	movs	r1, #2
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f7fe fc4f 	bl	800934c <ucdr_check_final_buffer_behavior>
 800aaae:	b190      	cbz	r0, 800aad6 <ucdr_serialize_uint16_t+0xae>
 800aab0:	7d23      	ldrb	r3, [r4, #20]
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	68a3      	ldr	r3, [r4, #8]
 800aab6:	d014      	beq.n	800aae2 <ucdr_serialize_uint16_t+0xba>
 800aab8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800aabc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aac0:	7019      	strb	r1, [r3, #0]
 800aac2:	68a3      	ldr	r3, [r4, #8]
 800aac4:	705a      	strb	r2, [r3, #1]
 800aac6:	2102      	movs	r1, #2
 800aac8:	68a2      	ldr	r2, [r4, #8]
 800aaca:	6923      	ldr	r3, [r4, #16]
 800aacc:	440a      	add	r2, r1
 800aace:	7561      	strb	r1, [r4, #21]
 800aad0:	440b      	add	r3, r1
 800aad2:	60a2      	str	r2, [r4, #8]
 800aad4:	6123      	str	r3, [r4, #16]
 800aad6:	7da0      	ldrb	r0, [r4, #22]
 800aad8:	f080 0001 	eor.w	r0, r0, #1
 800aadc:	b002      	add	sp, #8
 800aade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800aae6:	801a      	strh	r2, [r3, #0]
 800aae8:	e7ed      	b.n	800aac6 <ucdr_serialize_uint16_t+0x9e>
 800aaea:	68a2      	ldr	r2, [r4, #8]
 800aaec:	6923      	ldr	r3, [r4, #16]
 800aaee:	7da0      	ldrb	r0, [r4, #22]
 800aaf0:	1b92      	subs	r2, r2, r6
 800aaf2:	1b9b      	subs	r3, r3, r6
 800aaf4:	7567      	strb	r7, [r4, #21]
 800aaf6:	f080 0001 	eor.w	r0, r0, #1
 800aafa:	60a2      	str	r2, [r4, #8]
 800aafc:	6123      	str	r3, [r4, #16]
 800aafe:	b002      	add	sp, #8
 800ab00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab04:	68a3      	ldr	r3, [r4, #8]
 800ab06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ab0a:	701a      	strb	r2, [r3, #0]
 800ab0c:	e7bc      	b.n	800aa88 <ucdr_serialize_uint16_t+0x60>
 800ab0e:	4628      	mov	r0, r5
 800ab10:	f10d 0506 	add.w	r5, sp, #6
 800ab14:	4632      	mov	r2, r6
 800ab16:	4629      	mov	r1, r5
 800ab18:	f008 f8b6 	bl	8012c88 <memcpy>
 800ab1c:	4642      	mov	r2, r8
 800ab1e:	19a9      	adds	r1, r5, r6
 800ab20:	68a0      	ldr	r0, [r4, #8]
 800ab22:	f008 f8b1 	bl	8012c88 <memcpy>
 800ab26:	e7af      	b.n	800aa88 <ucdr_serialize_uint16_t+0x60>

0800ab28 <ucdr_serialize_endian_uint16_t>:
 800ab28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	b083      	sub	sp, #12
 800ab30:	460d      	mov	r5, r1
 800ab32:	2102      	movs	r1, #2
 800ab34:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ab38:	f7fe fc5c 	bl	80093f4 <ucdr_buffer_alignment>
 800ab3c:	4601      	mov	r1, r0
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ab44:	f7fe fc9e 	bl	8009484 <ucdr_advance_buffer>
 800ab48:	2102      	movs	r1, #2
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f7fe fbf2 	bl	8009334 <ucdr_check_buffer_available_for>
 800ab50:	bb70      	cbnz	r0, 800abb0 <ucdr_serialize_endian_uint16_t+0x88>
 800ab52:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ab56:	42be      	cmp	r6, r7
 800ab58:	d925      	bls.n	800aba6 <ucdr_serialize_endian_uint16_t+0x7e>
 800ab5a:	6923      	ldr	r3, [r4, #16]
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	60a6      	str	r6, [r4, #8]
 800ab60:	1bf6      	subs	r6, r6, r7
 800ab62:	4433      	add	r3, r6
 800ab64:	f1c6 0902 	rsb	r9, r6, #2
 800ab68:	6123      	str	r3, [r4, #16]
 800ab6a:	4649      	mov	r1, r9
 800ab6c:	f7fe fbee 	bl	800934c <ucdr_check_final_buffer_behavior>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d039      	beq.n	800abe8 <ucdr_serialize_endian_uint16_t+0xc0>
 800ab74:	2d01      	cmp	r5, #1
 800ab76:	d04a      	beq.n	800ac0e <ucdr_serialize_endian_uint16_t+0xe6>
 800ab78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ab7c:	703b      	strb	r3, [r7, #0]
 800ab7e:	2e00      	cmp	r6, #0
 800ab80:	d040      	beq.n	800ac04 <ucdr_serialize_endian_uint16_t+0xdc>
 800ab82:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ab86:	707b      	strb	r3, [r7, #1]
 800ab88:	6923      	ldr	r3, [r4, #16]
 800ab8a:	2102      	movs	r1, #2
 800ab8c:	68a2      	ldr	r2, [r4, #8]
 800ab8e:	7da0      	ldrb	r0, [r4, #22]
 800ab90:	3302      	adds	r3, #2
 800ab92:	444a      	add	r2, r9
 800ab94:	7561      	strb	r1, [r4, #21]
 800ab96:	1b9b      	subs	r3, r3, r6
 800ab98:	f080 0001 	eor.w	r0, r0, #1
 800ab9c:	60a2      	str	r2, [r4, #8]
 800ab9e:	6123      	str	r3, [r4, #16]
 800aba0:	b003      	add	sp, #12
 800aba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aba6:	2102      	movs	r1, #2
 800aba8:	4620      	mov	r0, r4
 800abaa:	f7fe fbcf 	bl	800934c <ucdr_check_final_buffer_behavior>
 800abae:	b188      	cbz	r0, 800abd4 <ucdr_serialize_endian_uint16_t+0xac>
 800abb0:	2d01      	cmp	r5, #1
 800abb2:	68a3      	ldr	r3, [r4, #8]
 800abb4:	d014      	beq.n	800abe0 <ucdr_serialize_endian_uint16_t+0xb8>
 800abb6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800abba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800abbe:	7019      	strb	r1, [r3, #0]
 800abc0:	68a3      	ldr	r3, [r4, #8]
 800abc2:	705a      	strb	r2, [r3, #1]
 800abc4:	2102      	movs	r1, #2
 800abc6:	68a2      	ldr	r2, [r4, #8]
 800abc8:	6923      	ldr	r3, [r4, #16]
 800abca:	440a      	add	r2, r1
 800abcc:	7561      	strb	r1, [r4, #21]
 800abce:	440b      	add	r3, r1
 800abd0:	60a2      	str	r2, [r4, #8]
 800abd2:	6123      	str	r3, [r4, #16]
 800abd4:	7da0      	ldrb	r0, [r4, #22]
 800abd6:	f080 0001 	eor.w	r0, r0, #1
 800abda:	b003      	add	sp, #12
 800abdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abe0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800abe4:	801a      	strh	r2, [r3, #0]
 800abe6:	e7ed      	b.n	800abc4 <ucdr_serialize_endian_uint16_t+0x9c>
 800abe8:	68a2      	ldr	r2, [r4, #8]
 800abea:	6923      	ldr	r3, [r4, #16]
 800abec:	7da0      	ldrb	r0, [r4, #22]
 800abee:	1b92      	subs	r2, r2, r6
 800abf0:	1b9b      	subs	r3, r3, r6
 800abf2:	f884 8015 	strb.w	r8, [r4, #21]
 800abf6:	f080 0001 	eor.w	r0, r0, #1
 800abfa:	60a2      	str	r2, [r4, #8]
 800abfc:	6123      	str	r3, [r4, #16]
 800abfe:	b003      	add	sp, #12
 800ac00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac04:	68a3      	ldr	r3, [r4, #8]
 800ac06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ac0a:	701a      	strb	r2, [r3, #0]
 800ac0c:	e7bc      	b.n	800ab88 <ucdr_serialize_endian_uint16_t+0x60>
 800ac0e:	f10d 0506 	add.w	r5, sp, #6
 800ac12:	4632      	mov	r2, r6
 800ac14:	4638      	mov	r0, r7
 800ac16:	4629      	mov	r1, r5
 800ac18:	f008 f836 	bl	8012c88 <memcpy>
 800ac1c:	464a      	mov	r2, r9
 800ac1e:	19a9      	adds	r1, r5, r6
 800ac20:	68a0      	ldr	r0, [r4, #8]
 800ac22:	f008 f831 	bl	8012c88 <memcpy>
 800ac26:	e7af      	b.n	800ab88 <ucdr_serialize_endian_uint16_t+0x60>

0800ac28 <ucdr_deserialize_uint16_t>:
 800ac28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	460d      	mov	r5, r1
 800ac30:	2102      	movs	r1, #2
 800ac32:	f7fe fbdf 	bl	80093f4 <ucdr_buffer_alignment>
 800ac36:	4601      	mov	r1, r0
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ac3e:	f7fe fc21 	bl	8009484 <ucdr_advance_buffer>
 800ac42:	2102      	movs	r1, #2
 800ac44:	4620      	mov	r0, r4
 800ac46:	f7fe fb75 	bl	8009334 <ucdr_check_buffer_available_for>
 800ac4a:	bb60      	cbnz	r0, 800aca6 <ucdr_deserialize_uint16_t+0x7e>
 800ac4c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ac50:	42be      	cmp	r6, r7
 800ac52:	d923      	bls.n	800ac9c <ucdr_deserialize_uint16_t+0x74>
 800ac54:	6923      	ldr	r3, [r4, #16]
 800ac56:	4620      	mov	r0, r4
 800ac58:	60a6      	str	r6, [r4, #8]
 800ac5a:	1bf6      	subs	r6, r6, r7
 800ac5c:	4433      	add	r3, r6
 800ac5e:	f1c6 0902 	rsb	r9, r6, #2
 800ac62:	6123      	str	r3, [r4, #16]
 800ac64:	4649      	mov	r1, r9
 800ac66:	f7fe fb71 	bl	800934c <ucdr_check_final_buffer_behavior>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d034      	beq.n	800acd8 <ucdr_deserialize_uint16_t+0xb0>
 800ac6e:	7d23      	ldrb	r3, [r4, #20]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d042      	beq.n	800acfa <ucdr_deserialize_uint16_t+0xd2>
 800ac74:	787b      	ldrb	r3, [r7, #1]
 800ac76:	702b      	strb	r3, [r5, #0]
 800ac78:	2e00      	cmp	r6, #0
 800ac7a:	d03a      	beq.n	800acf2 <ucdr_deserialize_uint16_t+0xca>
 800ac7c:	783b      	ldrb	r3, [r7, #0]
 800ac7e:	706b      	strb	r3, [r5, #1]
 800ac80:	6923      	ldr	r3, [r4, #16]
 800ac82:	2102      	movs	r1, #2
 800ac84:	68a2      	ldr	r2, [r4, #8]
 800ac86:	3302      	adds	r3, #2
 800ac88:	7da0      	ldrb	r0, [r4, #22]
 800ac8a:	444a      	add	r2, r9
 800ac8c:	7561      	strb	r1, [r4, #21]
 800ac8e:	1b9b      	subs	r3, r3, r6
 800ac90:	f080 0001 	eor.w	r0, r0, #1
 800ac94:	60a2      	str	r2, [r4, #8]
 800ac96:	6123      	str	r3, [r4, #16]
 800ac98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac9c:	2102      	movs	r1, #2
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f7fe fb54 	bl	800934c <ucdr_check_final_buffer_behavior>
 800aca4:	b180      	cbz	r0, 800acc8 <ucdr_deserialize_uint16_t+0xa0>
 800aca6:	7d23      	ldrb	r3, [r4, #20]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	68a3      	ldr	r3, [r4, #8]
 800acac:	d011      	beq.n	800acd2 <ucdr_deserialize_uint16_t+0xaa>
 800acae:	785b      	ldrb	r3, [r3, #1]
 800acb0:	702b      	strb	r3, [r5, #0]
 800acb2:	68a3      	ldr	r3, [r4, #8]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	706b      	strb	r3, [r5, #1]
 800acb8:	2102      	movs	r1, #2
 800acba:	68a2      	ldr	r2, [r4, #8]
 800acbc:	6923      	ldr	r3, [r4, #16]
 800acbe:	440a      	add	r2, r1
 800acc0:	7561      	strb	r1, [r4, #21]
 800acc2:	440b      	add	r3, r1
 800acc4:	60a2      	str	r2, [r4, #8]
 800acc6:	6123      	str	r3, [r4, #16]
 800acc8:	7da0      	ldrb	r0, [r4, #22]
 800acca:	f080 0001 	eor.w	r0, r0, #1
 800acce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd2:	881b      	ldrh	r3, [r3, #0]
 800acd4:	802b      	strh	r3, [r5, #0]
 800acd6:	e7ef      	b.n	800acb8 <ucdr_deserialize_uint16_t+0x90>
 800acd8:	68a2      	ldr	r2, [r4, #8]
 800acda:	6923      	ldr	r3, [r4, #16]
 800acdc:	1b92      	subs	r2, r2, r6
 800acde:	7da0      	ldrb	r0, [r4, #22]
 800ace0:	1b9b      	subs	r3, r3, r6
 800ace2:	f884 8015 	strb.w	r8, [r4, #21]
 800ace6:	f080 0001 	eor.w	r0, r0, #1
 800acea:	60a2      	str	r2, [r4, #8]
 800acec:	6123      	str	r3, [r4, #16]
 800acee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acf2:	68a3      	ldr	r3, [r4, #8]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	706b      	strb	r3, [r5, #1]
 800acf8:	e7c2      	b.n	800ac80 <ucdr_deserialize_uint16_t+0x58>
 800acfa:	4639      	mov	r1, r7
 800acfc:	4632      	mov	r2, r6
 800acfe:	4628      	mov	r0, r5
 800ad00:	f007 ffc2 	bl	8012c88 <memcpy>
 800ad04:	464a      	mov	r2, r9
 800ad06:	19a8      	adds	r0, r5, r6
 800ad08:	68a1      	ldr	r1, [r4, #8]
 800ad0a:	f007 ffbd 	bl	8012c88 <memcpy>
 800ad0e:	e7b7      	b.n	800ac80 <ucdr_deserialize_uint16_t+0x58>

0800ad10 <ucdr_deserialize_endian_uint16_t>:
 800ad10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad14:	4604      	mov	r4, r0
 800ad16:	460e      	mov	r6, r1
 800ad18:	2102      	movs	r1, #2
 800ad1a:	4615      	mov	r5, r2
 800ad1c:	f7fe fb6a 	bl	80093f4 <ucdr_buffer_alignment>
 800ad20:	4601      	mov	r1, r0
 800ad22:	4620      	mov	r0, r4
 800ad24:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ad28:	f7fe fbac 	bl	8009484 <ucdr_advance_buffer>
 800ad2c:	2102      	movs	r1, #2
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f7fe fb00 	bl	8009334 <ucdr_check_buffer_available_for>
 800ad34:	bb70      	cbnz	r0, 800ad94 <ucdr_deserialize_endian_uint16_t+0x84>
 800ad36:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800ad3a:	454f      	cmp	r7, r9
 800ad3c:	d925      	bls.n	800ad8a <ucdr_deserialize_endian_uint16_t+0x7a>
 800ad3e:	6923      	ldr	r3, [r4, #16]
 800ad40:	4620      	mov	r0, r4
 800ad42:	60a7      	str	r7, [r4, #8]
 800ad44:	eba7 0709 	sub.w	r7, r7, r9
 800ad48:	443b      	add	r3, r7
 800ad4a:	f1c7 0a02 	rsb	sl, r7, #2
 800ad4e:	6123      	str	r3, [r4, #16]
 800ad50:	4651      	mov	r1, sl
 800ad52:	f7fe fafb 	bl	800934c <ucdr_check_final_buffer_behavior>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d034      	beq.n	800adc4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800ad5a:	2e01      	cmp	r6, #1
 800ad5c:	d043      	beq.n	800ade6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800ad5e:	f899 3001 	ldrb.w	r3, [r9, #1]
 800ad62:	702b      	strb	r3, [r5, #0]
 800ad64:	2f00      	cmp	r7, #0
 800ad66:	d03a      	beq.n	800adde <ucdr_deserialize_endian_uint16_t+0xce>
 800ad68:	f899 3000 	ldrb.w	r3, [r9]
 800ad6c:	706b      	strb	r3, [r5, #1]
 800ad6e:	6923      	ldr	r3, [r4, #16]
 800ad70:	2102      	movs	r1, #2
 800ad72:	68a2      	ldr	r2, [r4, #8]
 800ad74:	3302      	adds	r3, #2
 800ad76:	7da0      	ldrb	r0, [r4, #22]
 800ad78:	4452      	add	r2, sl
 800ad7a:	7561      	strb	r1, [r4, #21]
 800ad7c:	1bdb      	subs	r3, r3, r7
 800ad7e:	f080 0001 	eor.w	r0, r0, #1
 800ad82:	60a2      	str	r2, [r4, #8]
 800ad84:	6123      	str	r3, [r4, #16]
 800ad86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad8a:	2102      	movs	r1, #2
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f7fe fadd 	bl	800934c <ucdr_check_final_buffer_behavior>
 800ad92:	b178      	cbz	r0, 800adb4 <ucdr_deserialize_endian_uint16_t+0xa4>
 800ad94:	2e01      	cmp	r6, #1
 800ad96:	68a3      	ldr	r3, [r4, #8]
 800ad98:	d011      	beq.n	800adbe <ucdr_deserialize_endian_uint16_t+0xae>
 800ad9a:	785b      	ldrb	r3, [r3, #1]
 800ad9c:	702b      	strb	r3, [r5, #0]
 800ad9e:	68a3      	ldr	r3, [r4, #8]
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	706b      	strb	r3, [r5, #1]
 800ada4:	2102      	movs	r1, #2
 800ada6:	68a2      	ldr	r2, [r4, #8]
 800ada8:	6923      	ldr	r3, [r4, #16]
 800adaa:	440a      	add	r2, r1
 800adac:	7561      	strb	r1, [r4, #21]
 800adae:	440b      	add	r3, r1
 800adb0:	60a2      	str	r2, [r4, #8]
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	7da0      	ldrb	r0, [r4, #22]
 800adb6:	f080 0001 	eor.w	r0, r0, #1
 800adba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	802b      	strh	r3, [r5, #0]
 800adc2:	e7ef      	b.n	800ada4 <ucdr_deserialize_endian_uint16_t+0x94>
 800adc4:	68a2      	ldr	r2, [r4, #8]
 800adc6:	6923      	ldr	r3, [r4, #16]
 800adc8:	1bd2      	subs	r2, r2, r7
 800adca:	7da0      	ldrb	r0, [r4, #22]
 800adcc:	1bdb      	subs	r3, r3, r7
 800adce:	f884 8015 	strb.w	r8, [r4, #21]
 800add2:	f080 0001 	eor.w	r0, r0, #1
 800add6:	60a2      	str	r2, [r4, #8]
 800add8:	6123      	str	r3, [r4, #16]
 800adda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adde:	68a3      	ldr	r3, [r4, #8]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	706b      	strb	r3, [r5, #1]
 800ade4:	e7c3      	b.n	800ad6e <ucdr_deserialize_endian_uint16_t+0x5e>
 800ade6:	4649      	mov	r1, r9
 800ade8:	463a      	mov	r2, r7
 800adea:	4628      	mov	r0, r5
 800adec:	f007 ff4c 	bl	8012c88 <memcpy>
 800adf0:	4652      	mov	r2, sl
 800adf2:	19e8      	adds	r0, r5, r7
 800adf4:	68a1      	ldr	r1, [r4, #8]
 800adf6:	f007 ff47 	bl	8012c88 <memcpy>
 800adfa:	e7b8      	b.n	800ad6e <ucdr_deserialize_endian_uint16_t+0x5e>

0800adfc <ucdr_serialize_uint32_t>:
 800adfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae00:	b082      	sub	sp, #8
 800ae02:	4604      	mov	r4, r0
 800ae04:	9101      	str	r1, [sp, #4]
 800ae06:	2104      	movs	r1, #4
 800ae08:	f7fe faf4 	bl	80093f4 <ucdr_buffer_alignment>
 800ae0c:	4601      	mov	r1, r0
 800ae0e:	4620      	mov	r0, r4
 800ae10:	7d67      	ldrb	r7, [r4, #21]
 800ae12:	f7fe fb37 	bl	8009484 <ucdr_advance_buffer>
 800ae16:	2104      	movs	r1, #4
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f7fe fa8b 	bl	8009334 <ucdr_check_buffer_available_for>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d139      	bne.n	800ae96 <ucdr_serialize_uint32_t+0x9a>
 800ae22:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ae26:	42ab      	cmp	r3, r5
 800ae28:	d930      	bls.n	800ae8c <ucdr_serialize_uint32_t+0x90>
 800ae2a:	1b5e      	subs	r6, r3, r5
 800ae2c:	60a3      	str	r3, [r4, #8]
 800ae2e:	6923      	ldr	r3, [r4, #16]
 800ae30:	4620      	mov	r0, r4
 800ae32:	f1c6 0804 	rsb	r8, r6, #4
 800ae36:	4433      	add	r3, r6
 800ae38:	4641      	mov	r1, r8
 800ae3a:	6123      	str	r3, [r4, #16]
 800ae3c:	f7fe fa86 	bl	800934c <ucdr_check_final_buffer_behavior>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	d04c      	beq.n	800aede <ucdr_serialize_uint32_t+0xe2>
 800ae44:	7d23      	ldrb	r3, [r4, #20]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d063      	beq.n	800af12 <ucdr_serialize_uint32_t+0x116>
 800ae4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ae4e:	702b      	strb	r3, [r5, #0]
 800ae50:	2e00      	cmp	r6, #0
 800ae52:	d051      	beq.n	800aef8 <ucdr_serialize_uint32_t+0xfc>
 800ae54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ae58:	2e01      	cmp	r6, #1
 800ae5a:	706b      	strb	r3, [r5, #1]
 800ae5c:	d050      	beq.n	800af00 <ucdr_serialize_uint32_t+0x104>
 800ae5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ae62:	2e02      	cmp	r6, #2
 800ae64:	70ab      	strb	r3, [r5, #2]
 800ae66:	d04f      	beq.n	800af08 <ucdr_serialize_uint32_t+0x10c>
 800ae68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ae6c:	70eb      	strb	r3, [r5, #3]
 800ae6e:	6923      	ldr	r3, [r4, #16]
 800ae70:	2104      	movs	r1, #4
 800ae72:	68a2      	ldr	r2, [r4, #8]
 800ae74:	3304      	adds	r3, #4
 800ae76:	7da0      	ldrb	r0, [r4, #22]
 800ae78:	4442      	add	r2, r8
 800ae7a:	7561      	strb	r1, [r4, #21]
 800ae7c:	1b9e      	subs	r6, r3, r6
 800ae7e:	f080 0001 	eor.w	r0, r0, #1
 800ae82:	60a2      	str	r2, [r4, #8]
 800ae84:	6126      	str	r6, [r4, #16]
 800ae86:	b002      	add	sp, #8
 800ae88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae8c:	2104      	movs	r1, #4
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f7fe fa5c 	bl	800934c <ucdr_check_final_buffer_behavior>
 800ae94:	b1d0      	cbz	r0, 800aecc <ucdr_serialize_uint32_t+0xd0>
 800ae96:	7d23      	ldrb	r3, [r4, #20]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	68a3      	ldr	r3, [r4, #8]
 800ae9c:	d01c      	beq.n	800aed8 <ucdr_serialize_uint32_t+0xdc>
 800ae9e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800aea2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aea6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800aeaa:	7018      	strb	r0, [r3, #0]
 800aeac:	68a3      	ldr	r3, [r4, #8]
 800aeae:	705a      	strb	r2, [r3, #1]
 800aeb0:	68a3      	ldr	r3, [r4, #8]
 800aeb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aeb6:	7099      	strb	r1, [r3, #2]
 800aeb8:	68a3      	ldr	r3, [r4, #8]
 800aeba:	70da      	strb	r2, [r3, #3]
 800aebc:	2104      	movs	r1, #4
 800aebe:	68a2      	ldr	r2, [r4, #8]
 800aec0:	6923      	ldr	r3, [r4, #16]
 800aec2:	440a      	add	r2, r1
 800aec4:	7561      	strb	r1, [r4, #21]
 800aec6:	440b      	add	r3, r1
 800aec8:	60a2      	str	r2, [r4, #8]
 800aeca:	6123      	str	r3, [r4, #16]
 800aecc:	7da0      	ldrb	r0, [r4, #22]
 800aece:	f080 0001 	eor.w	r0, r0, #1
 800aed2:	b002      	add	sp, #8
 800aed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed8:	9a01      	ldr	r2, [sp, #4]
 800aeda:	601a      	str	r2, [r3, #0]
 800aedc:	e7ee      	b.n	800aebc <ucdr_serialize_uint32_t+0xc0>
 800aede:	68a2      	ldr	r2, [r4, #8]
 800aee0:	6923      	ldr	r3, [r4, #16]
 800aee2:	7da0      	ldrb	r0, [r4, #22]
 800aee4:	1b92      	subs	r2, r2, r6
 800aee6:	1b9b      	subs	r3, r3, r6
 800aee8:	7567      	strb	r7, [r4, #21]
 800aeea:	f080 0001 	eor.w	r0, r0, #1
 800aeee:	60a2      	str	r2, [r4, #8]
 800aef0:	6123      	str	r3, [r4, #16]
 800aef2:	b002      	add	sp, #8
 800aef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aef8:	68a3      	ldr	r3, [r4, #8]
 800aefa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aefe:	701a      	strb	r2, [r3, #0]
 800af00:	68a3      	ldr	r3, [r4, #8]
 800af02:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800af06:	701a      	strb	r2, [r3, #0]
 800af08:	68a3      	ldr	r3, [r4, #8]
 800af0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800af0e:	701a      	strb	r2, [r3, #0]
 800af10:	e7ad      	b.n	800ae6e <ucdr_serialize_uint32_t+0x72>
 800af12:	4628      	mov	r0, r5
 800af14:	ad01      	add	r5, sp, #4
 800af16:	4632      	mov	r2, r6
 800af18:	4629      	mov	r1, r5
 800af1a:	f007 feb5 	bl	8012c88 <memcpy>
 800af1e:	4642      	mov	r2, r8
 800af20:	19a9      	adds	r1, r5, r6
 800af22:	68a0      	ldr	r0, [r4, #8]
 800af24:	f007 feb0 	bl	8012c88 <memcpy>
 800af28:	e7a1      	b.n	800ae6e <ucdr_serialize_uint32_t+0x72>
 800af2a:	bf00      	nop

0800af2c <ucdr_serialize_endian_uint32_t>:
 800af2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800af30:	4604      	mov	r4, r0
 800af32:	b083      	sub	sp, #12
 800af34:	460d      	mov	r5, r1
 800af36:	2104      	movs	r1, #4
 800af38:	9201      	str	r2, [sp, #4]
 800af3a:	f7fe fa5b 	bl	80093f4 <ucdr_buffer_alignment>
 800af3e:	4601      	mov	r1, r0
 800af40:	4620      	mov	r0, r4
 800af42:	f894 8015 	ldrb.w	r8, [r4, #21]
 800af46:	f7fe fa9d 	bl	8009484 <ucdr_advance_buffer>
 800af4a:	2104      	movs	r1, #4
 800af4c:	4620      	mov	r0, r4
 800af4e:	f7fe f9f1 	bl	8009334 <ucdr_check_buffer_available_for>
 800af52:	2800      	cmp	r0, #0
 800af54:	d138      	bne.n	800afc8 <ucdr_serialize_endian_uint32_t+0x9c>
 800af56:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800af5a:	42b7      	cmp	r7, r6
 800af5c:	d92f      	bls.n	800afbe <ucdr_serialize_endian_uint32_t+0x92>
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	4620      	mov	r0, r4
 800af62:	60a7      	str	r7, [r4, #8]
 800af64:	1bbf      	subs	r7, r7, r6
 800af66:	443b      	add	r3, r7
 800af68:	f1c7 0904 	rsb	r9, r7, #4
 800af6c:	6123      	str	r3, [r4, #16]
 800af6e:	4649      	mov	r1, r9
 800af70:	f7fe f9ec 	bl	800934c <ucdr_check_final_buffer_behavior>
 800af74:	2800      	cmp	r0, #0
 800af76:	d04a      	beq.n	800b00e <ucdr_serialize_endian_uint32_t+0xe2>
 800af78:	2d01      	cmp	r5, #1
 800af7a:	d063      	beq.n	800b044 <ucdr_serialize_endian_uint32_t+0x118>
 800af7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800af80:	7033      	strb	r3, [r6, #0]
 800af82:	2f00      	cmp	r7, #0
 800af84:	d051      	beq.n	800b02a <ucdr_serialize_endian_uint32_t+0xfe>
 800af86:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800af8a:	2f01      	cmp	r7, #1
 800af8c:	7073      	strb	r3, [r6, #1]
 800af8e:	d050      	beq.n	800b032 <ucdr_serialize_endian_uint32_t+0x106>
 800af90:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800af94:	2f02      	cmp	r7, #2
 800af96:	70b3      	strb	r3, [r6, #2]
 800af98:	d04f      	beq.n	800b03a <ucdr_serialize_endian_uint32_t+0x10e>
 800af9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800af9e:	70f3      	strb	r3, [r6, #3]
 800afa0:	6923      	ldr	r3, [r4, #16]
 800afa2:	2104      	movs	r1, #4
 800afa4:	68a2      	ldr	r2, [r4, #8]
 800afa6:	7da0      	ldrb	r0, [r4, #22]
 800afa8:	3304      	adds	r3, #4
 800afaa:	444a      	add	r2, r9
 800afac:	7561      	strb	r1, [r4, #21]
 800afae:	1bdb      	subs	r3, r3, r7
 800afb0:	f080 0001 	eor.w	r0, r0, #1
 800afb4:	60a2      	str	r2, [r4, #8]
 800afb6:	6123      	str	r3, [r4, #16]
 800afb8:	b003      	add	sp, #12
 800afba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afbe:	2104      	movs	r1, #4
 800afc0:	4620      	mov	r0, r4
 800afc2:	f7fe f9c3 	bl	800934c <ucdr_check_final_buffer_behavior>
 800afc6:	b1c8      	cbz	r0, 800affc <ucdr_serialize_endian_uint32_t+0xd0>
 800afc8:	2d01      	cmp	r5, #1
 800afca:	68a3      	ldr	r3, [r4, #8]
 800afcc:	d01c      	beq.n	800b008 <ucdr_serialize_endian_uint32_t+0xdc>
 800afce:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800afd2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800afd6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800afda:	7018      	strb	r0, [r3, #0]
 800afdc:	68a3      	ldr	r3, [r4, #8]
 800afde:	705a      	strb	r2, [r3, #1]
 800afe0:	68a3      	ldr	r3, [r4, #8]
 800afe2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800afe6:	7099      	strb	r1, [r3, #2]
 800afe8:	68a3      	ldr	r3, [r4, #8]
 800afea:	70da      	strb	r2, [r3, #3]
 800afec:	2104      	movs	r1, #4
 800afee:	68a2      	ldr	r2, [r4, #8]
 800aff0:	6923      	ldr	r3, [r4, #16]
 800aff2:	440a      	add	r2, r1
 800aff4:	7561      	strb	r1, [r4, #21]
 800aff6:	440b      	add	r3, r1
 800aff8:	60a2      	str	r2, [r4, #8]
 800affa:	6123      	str	r3, [r4, #16]
 800affc:	7da0      	ldrb	r0, [r4, #22]
 800affe:	f080 0001 	eor.w	r0, r0, #1
 800b002:	b003      	add	sp, #12
 800b004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b008:	9a01      	ldr	r2, [sp, #4]
 800b00a:	601a      	str	r2, [r3, #0]
 800b00c:	e7ee      	b.n	800afec <ucdr_serialize_endian_uint32_t+0xc0>
 800b00e:	68a2      	ldr	r2, [r4, #8]
 800b010:	6923      	ldr	r3, [r4, #16]
 800b012:	7da0      	ldrb	r0, [r4, #22]
 800b014:	1bd2      	subs	r2, r2, r7
 800b016:	1bdb      	subs	r3, r3, r7
 800b018:	f884 8015 	strb.w	r8, [r4, #21]
 800b01c:	f080 0001 	eor.w	r0, r0, #1
 800b020:	60a2      	str	r2, [r4, #8]
 800b022:	6123      	str	r3, [r4, #16]
 800b024:	b003      	add	sp, #12
 800b026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b02a:	68a3      	ldr	r3, [r4, #8]
 800b02c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b030:	701a      	strb	r2, [r3, #0]
 800b032:	68a3      	ldr	r3, [r4, #8]
 800b034:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b038:	701a      	strb	r2, [r3, #0]
 800b03a:	68a3      	ldr	r3, [r4, #8]
 800b03c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b040:	701a      	strb	r2, [r3, #0]
 800b042:	e7ad      	b.n	800afa0 <ucdr_serialize_endian_uint32_t+0x74>
 800b044:	ad01      	add	r5, sp, #4
 800b046:	463a      	mov	r2, r7
 800b048:	4630      	mov	r0, r6
 800b04a:	4629      	mov	r1, r5
 800b04c:	f007 fe1c 	bl	8012c88 <memcpy>
 800b050:	464a      	mov	r2, r9
 800b052:	19e9      	adds	r1, r5, r7
 800b054:	68a0      	ldr	r0, [r4, #8]
 800b056:	f007 fe17 	bl	8012c88 <memcpy>
 800b05a:	e7a1      	b.n	800afa0 <ucdr_serialize_endian_uint32_t+0x74>

0800b05c <ucdr_deserialize_uint32_t>:
 800b05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b060:	4604      	mov	r4, r0
 800b062:	460d      	mov	r5, r1
 800b064:	2104      	movs	r1, #4
 800b066:	f7fe f9c5 	bl	80093f4 <ucdr_buffer_alignment>
 800b06a:	4601      	mov	r1, r0
 800b06c:	4620      	mov	r0, r4
 800b06e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b072:	f7fe fa07 	bl	8009484 <ucdr_advance_buffer>
 800b076:	2104      	movs	r1, #4
 800b078:	4620      	mov	r0, r4
 800b07a:	f7fe f95b 	bl	8009334 <ucdr_check_buffer_available_for>
 800b07e:	2800      	cmp	r0, #0
 800b080:	d138      	bne.n	800b0f4 <ucdr_deserialize_uint32_t+0x98>
 800b082:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b086:	42b7      	cmp	r7, r6
 800b088:	d92f      	bls.n	800b0ea <ucdr_deserialize_uint32_t+0x8e>
 800b08a:	6923      	ldr	r3, [r4, #16]
 800b08c:	4620      	mov	r0, r4
 800b08e:	60a7      	str	r7, [r4, #8]
 800b090:	1bbf      	subs	r7, r7, r6
 800b092:	443b      	add	r3, r7
 800b094:	f1c7 0904 	rsb	r9, r7, #4
 800b098:	6123      	str	r3, [r4, #16]
 800b09a:	4649      	mov	r1, r9
 800b09c:	f7fe f956 	bl	800934c <ucdr_check_final_buffer_behavior>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d046      	beq.n	800b132 <ucdr_deserialize_uint32_t+0xd6>
 800b0a4:	7d23      	ldrb	r3, [r4, #20]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d05c      	beq.n	800b164 <ucdr_deserialize_uint32_t+0x108>
 800b0aa:	78f3      	ldrb	r3, [r6, #3]
 800b0ac:	702b      	strb	r3, [r5, #0]
 800b0ae:	2f00      	cmp	r7, #0
 800b0b0:	d04c      	beq.n	800b14c <ucdr_deserialize_uint32_t+0xf0>
 800b0b2:	78b3      	ldrb	r3, [r6, #2]
 800b0b4:	2f01      	cmp	r7, #1
 800b0b6:	706b      	strb	r3, [r5, #1]
 800b0b8:	f105 0302 	add.w	r3, r5, #2
 800b0bc:	d04a      	beq.n	800b154 <ucdr_deserialize_uint32_t+0xf8>
 800b0be:	7873      	ldrb	r3, [r6, #1]
 800b0c0:	2f02      	cmp	r7, #2
 800b0c2:	70ab      	strb	r3, [r5, #2]
 800b0c4:	f105 0303 	add.w	r3, r5, #3
 800b0c8:	d048      	beq.n	800b15c <ucdr_deserialize_uint32_t+0x100>
 800b0ca:	7833      	ldrb	r3, [r6, #0]
 800b0cc:	70eb      	strb	r3, [r5, #3]
 800b0ce:	6923      	ldr	r3, [r4, #16]
 800b0d0:	2104      	movs	r1, #4
 800b0d2:	68a2      	ldr	r2, [r4, #8]
 800b0d4:	3304      	adds	r3, #4
 800b0d6:	7da0      	ldrb	r0, [r4, #22]
 800b0d8:	444a      	add	r2, r9
 800b0da:	7561      	strb	r1, [r4, #21]
 800b0dc:	1bdb      	subs	r3, r3, r7
 800b0de:	f080 0001 	eor.w	r0, r0, #1
 800b0e2:	60a2      	str	r2, [r4, #8]
 800b0e4:	6123      	str	r3, [r4, #16]
 800b0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0ea:	2104      	movs	r1, #4
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	f7fe f92d 	bl	800934c <ucdr_check_final_buffer_behavior>
 800b0f2:	b1b0      	cbz	r0, 800b122 <ucdr_deserialize_uint32_t+0xc6>
 800b0f4:	7d23      	ldrb	r3, [r4, #20]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	68a3      	ldr	r3, [r4, #8]
 800b0fa:	d017      	beq.n	800b12c <ucdr_deserialize_uint32_t+0xd0>
 800b0fc:	78db      	ldrb	r3, [r3, #3]
 800b0fe:	702b      	strb	r3, [r5, #0]
 800b100:	68a3      	ldr	r3, [r4, #8]
 800b102:	789b      	ldrb	r3, [r3, #2]
 800b104:	706b      	strb	r3, [r5, #1]
 800b106:	68a3      	ldr	r3, [r4, #8]
 800b108:	785b      	ldrb	r3, [r3, #1]
 800b10a:	70ab      	strb	r3, [r5, #2]
 800b10c:	68a3      	ldr	r3, [r4, #8]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	70eb      	strb	r3, [r5, #3]
 800b112:	2104      	movs	r1, #4
 800b114:	68a2      	ldr	r2, [r4, #8]
 800b116:	6923      	ldr	r3, [r4, #16]
 800b118:	440a      	add	r2, r1
 800b11a:	7561      	strb	r1, [r4, #21]
 800b11c:	440b      	add	r3, r1
 800b11e:	60a2      	str	r2, [r4, #8]
 800b120:	6123      	str	r3, [r4, #16]
 800b122:	7da0      	ldrb	r0, [r4, #22]
 800b124:	f080 0001 	eor.w	r0, r0, #1
 800b128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	602b      	str	r3, [r5, #0]
 800b130:	e7ef      	b.n	800b112 <ucdr_deserialize_uint32_t+0xb6>
 800b132:	68a2      	ldr	r2, [r4, #8]
 800b134:	6923      	ldr	r3, [r4, #16]
 800b136:	1bd2      	subs	r2, r2, r7
 800b138:	7da0      	ldrb	r0, [r4, #22]
 800b13a:	1bdb      	subs	r3, r3, r7
 800b13c:	f884 8015 	strb.w	r8, [r4, #21]
 800b140:	f080 0001 	eor.w	r0, r0, #1
 800b144:	60a2      	str	r2, [r4, #8]
 800b146:	6123      	str	r3, [r4, #16]
 800b148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b14c:	68a3      	ldr	r3, [r4, #8]
 800b14e:	789b      	ldrb	r3, [r3, #2]
 800b150:	706b      	strb	r3, [r5, #1]
 800b152:	1cab      	adds	r3, r5, #2
 800b154:	68a2      	ldr	r2, [r4, #8]
 800b156:	7852      	ldrb	r2, [r2, #1]
 800b158:	f803 2b01 	strb.w	r2, [r3], #1
 800b15c:	68a2      	ldr	r2, [r4, #8]
 800b15e:	7812      	ldrb	r2, [r2, #0]
 800b160:	701a      	strb	r2, [r3, #0]
 800b162:	e7b4      	b.n	800b0ce <ucdr_deserialize_uint32_t+0x72>
 800b164:	4631      	mov	r1, r6
 800b166:	463a      	mov	r2, r7
 800b168:	4628      	mov	r0, r5
 800b16a:	f007 fd8d 	bl	8012c88 <memcpy>
 800b16e:	464a      	mov	r2, r9
 800b170:	19e8      	adds	r0, r5, r7
 800b172:	68a1      	ldr	r1, [r4, #8]
 800b174:	f007 fd88 	bl	8012c88 <memcpy>
 800b178:	e7a9      	b.n	800b0ce <ucdr_deserialize_uint32_t+0x72>
 800b17a:	bf00      	nop

0800b17c <ucdr_deserialize_endian_uint32_t>:
 800b17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b180:	4604      	mov	r4, r0
 800b182:	460e      	mov	r6, r1
 800b184:	2104      	movs	r1, #4
 800b186:	4615      	mov	r5, r2
 800b188:	f7fe f934 	bl	80093f4 <ucdr_buffer_alignment>
 800b18c:	4601      	mov	r1, r0
 800b18e:	4620      	mov	r0, r4
 800b190:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b194:	f7fe f976 	bl	8009484 <ucdr_advance_buffer>
 800b198:	2104      	movs	r1, #4
 800b19a:	4620      	mov	r0, r4
 800b19c:	f7fe f8ca 	bl	8009334 <ucdr_check_buffer_available_for>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d13c      	bne.n	800b21e <ucdr_deserialize_endian_uint32_t+0xa2>
 800b1a4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b1a8:	42bb      	cmp	r3, r7
 800b1aa:	d933      	bls.n	800b214 <ucdr_deserialize_endian_uint32_t+0x98>
 800b1ac:	eba3 0907 	sub.w	r9, r3, r7
 800b1b0:	60a3      	str	r3, [r4, #8]
 800b1b2:	6923      	ldr	r3, [r4, #16]
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f1c9 0a04 	rsb	sl, r9, #4
 800b1ba:	444b      	add	r3, r9
 800b1bc:	4651      	mov	r1, sl
 800b1be:	6123      	str	r3, [r4, #16]
 800b1c0:	f7fe f8c4 	bl	800934c <ucdr_check_final_buffer_behavior>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d048      	beq.n	800b25a <ucdr_deserialize_endian_uint32_t+0xde>
 800b1c8:	2e01      	cmp	r6, #1
 800b1ca:	d061      	beq.n	800b290 <ucdr_deserialize_endian_uint32_t+0x114>
 800b1cc:	78fb      	ldrb	r3, [r7, #3]
 800b1ce:	702b      	strb	r3, [r5, #0]
 800b1d0:	f1b9 0f00 	cmp.w	r9, #0
 800b1d4:	d050      	beq.n	800b278 <ucdr_deserialize_endian_uint32_t+0xfc>
 800b1d6:	78bb      	ldrb	r3, [r7, #2]
 800b1d8:	f1b9 0f01 	cmp.w	r9, #1
 800b1dc:	706b      	strb	r3, [r5, #1]
 800b1de:	f105 0302 	add.w	r3, r5, #2
 800b1e2:	d04d      	beq.n	800b280 <ucdr_deserialize_endian_uint32_t+0x104>
 800b1e4:	787b      	ldrb	r3, [r7, #1]
 800b1e6:	f1b9 0f02 	cmp.w	r9, #2
 800b1ea:	70ab      	strb	r3, [r5, #2]
 800b1ec:	f105 0303 	add.w	r3, r5, #3
 800b1f0:	d04a      	beq.n	800b288 <ucdr_deserialize_endian_uint32_t+0x10c>
 800b1f2:	783b      	ldrb	r3, [r7, #0]
 800b1f4:	70eb      	strb	r3, [r5, #3]
 800b1f6:	6923      	ldr	r3, [r4, #16]
 800b1f8:	2104      	movs	r1, #4
 800b1fa:	68a2      	ldr	r2, [r4, #8]
 800b1fc:	3304      	adds	r3, #4
 800b1fe:	7da0      	ldrb	r0, [r4, #22]
 800b200:	4452      	add	r2, sl
 800b202:	7561      	strb	r1, [r4, #21]
 800b204:	eba3 0309 	sub.w	r3, r3, r9
 800b208:	f080 0001 	eor.w	r0, r0, #1
 800b20c:	60a2      	str	r2, [r4, #8]
 800b20e:	6123      	str	r3, [r4, #16]
 800b210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b214:	2104      	movs	r1, #4
 800b216:	4620      	mov	r0, r4
 800b218:	f7fe f898 	bl	800934c <ucdr_check_final_buffer_behavior>
 800b21c:	b1a8      	cbz	r0, 800b24a <ucdr_deserialize_endian_uint32_t+0xce>
 800b21e:	2e01      	cmp	r6, #1
 800b220:	68a3      	ldr	r3, [r4, #8]
 800b222:	d017      	beq.n	800b254 <ucdr_deserialize_endian_uint32_t+0xd8>
 800b224:	78db      	ldrb	r3, [r3, #3]
 800b226:	702b      	strb	r3, [r5, #0]
 800b228:	68a3      	ldr	r3, [r4, #8]
 800b22a:	789b      	ldrb	r3, [r3, #2]
 800b22c:	706b      	strb	r3, [r5, #1]
 800b22e:	68a3      	ldr	r3, [r4, #8]
 800b230:	785b      	ldrb	r3, [r3, #1]
 800b232:	70ab      	strb	r3, [r5, #2]
 800b234:	68a3      	ldr	r3, [r4, #8]
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	70eb      	strb	r3, [r5, #3]
 800b23a:	2104      	movs	r1, #4
 800b23c:	68a2      	ldr	r2, [r4, #8]
 800b23e:	6923      	ldr	r3, [r4, #16]
 800b240:	440a      	add	r2, r1
 800b242:	7561      	strb	r1, [r4, #21]
 800b244:	440b      	add	r3, r1
 800b246:	60a2      	str	r2, [r4, #8]
 800b248:	6123      	str	r3, [r4, #16]
 800b24a:	7da0      	ldrb	r0, [r4, #22]
 800b24c:	f080 0001 	eor.w	r0, r0, #1
 800b250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	602b      	str	r3, [r5, #0]
 800b258:	e7ef      	b.n	800b23a <ucdr_deserialize_endian_uint32_t+0xbe>
 800b25a:	68a2      	ldr	r2, [r4, #8]
 800b25c:	6923      	ldr	r3, [r4, #16]
 800b25e:	eba2 0209 	sub.w	r2, r2, r9
 800b262:	7da0      	ldrb	r0, [r4, #22]
 800b264:	eba3 0309 	sub.w	r3, r3, r9
 800b268:	f884 8015 	strb.w	r8, [r4, #21]
 800b26c:	f080 0001 	eor.w	r0, r0, #1
 800b270:	60a2      	str	r2, [r4, #8]
 800b272:	6123      	str	r3, [r4, #16]
 800b274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b278:	68a3      	ldr	r3, [r4, #8]
 800b27a:	789b      	ldrb	r3, [r3, #2]
 800b27c:	706b      	strb	r3, [r5, #1]
 800b27e:	1cab      	adds	r3, r5, #2
 800b280:	68a2      	ldr	r2, [r4, #8]
 800b282:	7852      	ldrb	r2, [r2, #1]
 800b284:	f803 2b01 	strb.w	r2, [r3], #1
 800b288:	68a2      	ldr	r2, [r4, #8]
 800b28a:	7812      	ldrb	r2, [r2, #0]
 800b28c:	701a      	strb	r2, [r3, #0]
 800b28e:	e7b2      	b.n	800b1f6 <ucdr_deserialize_endian_uint32_t+0x7a>
 800b290:	4639      	mov	r1, r7
 800b292:	464a      	mov	r2, r9
 800b294:	4628      	mov	r0, r5
 800b296:	f007 fcf7 	bl	8012c88 <memcpy>
 800b29a:	4652      	mov	r2, sl
 800b29c:	eb05 0009 	add.w	r0, r5, r9
 800b2a0:	68a1      	ldr	r1, [r4, #8]
 800b2a2:	f007 fcf1 	bl	8012c88 <memcpy>
 800b2a6:	e7a6      	b.n	800b1f6 <ucdr_deserialize_endian_uint32_t+0x7a>

0800b2a8 <ucdr_serialize_uint64_t>:
 800b2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	2108      	movs	r1, #8
 800b2b2:	e9cd 2300 	strd	r2, r3, [sp]
 800b2b6:	f7fe f89d 	bl	80093f4 <ucdr_buffer_alignment>
 800b2ba:	4601      	mov	r1, r0
 800b2bc:	4620      	mov	r0, r4
 800b2be:	7d67      	ldrb	r7, [r4, #21]
 800b2c0:	f7fe f8e0 	bl	8009484 <ucdr_advance_buffer>
 800b2c4:	2108      	movs	r1, #8
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f7fe f834 	bl	8009334 <ucdr_check_buffer_available_for>
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d14e      	bne.n	800b36e <ucdr_serialize_uint64_t+0xc6>
 800b2d0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b2d4:	42ab      	cmp	r3, r5
 800b2d6:	d945      	bls.n	800b364 <ucdr_serialize_uint64_t+0xbc>
 800b2d8:	1b5e      	subs	r6, r3, r5
 800b2da:	60a3      	str	r3, [r4, #8]
 800b2dc:	6923      	ldr	r3, [r4, #16]
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f1c6 0808 	rsb	r8, r6, #8
 800b2e4:	4433      	add	r3, r6
 800b2e6:	4641      	mov	r1, r8
 800b2e8:	6123      	str	r3, [r4, #16]
 800b2ea:	f7fe f82f 	bl	800934c <ucdr_check_final_buffer_behavior>
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	d074      	beq.n	800b3dc <ucdr_serialize_uint64_t+0x134>
 800b2f2:	7d23      	ldrb	r3, [r4, #20]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	f000 809b 	beq.w	800b430 <ucdr_serialize_uint64_t+0x188>
 800b2fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b2fe:	702b      	strb	r3, [r5, #0]
 800b300:	2e00      	cmp	r6, #0
 800b302:	d078      	beq.n	800b3f6 <ucdr_serialize_uint64_t+0x14e>
 800b304:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b308:	2e01      	cmp	r6, #1
 800b30a:	706b      	strb	r3, [r5, #1]
 800b30c:	d077      	beq.n	800b3fe <ucdr_serialize_uint64_t+0x156>
 800b30e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b312:	2e02      	cmp	r6, #2
 800b314:	70ab      	strb	r3, [r5, #2]
 800b316:	d076      	beq.n	800b406 <ucdr_serialize_uint64_t+0x15e>
 800b318:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b31c:	2e03      	cmp	r6, #3
 800b31e:	70eb      	strb	r3, [r5, #3]
 800b320:	d075      	beq.n	800b40e <ucdr_serialize_uint64_t+0x166>
 800b322:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b326:	2e04      	cmp	r6, #4
 800b328:	712b      	strb	r3, [r5, #4]
 800b32a:	d074      	beq.n	800b416 <ucdr_serialize_uint64_t+0x16e>
 800b32c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b330:	2e05      	cmp	r6, #5
 800b332:	716b      	strb	r3, [r5, #5]
 800b334:	d073      	beq.n	800b41e <ucdr_serialize_uint64_t+0x176>
 800b336:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b33a:	2e06      	cmp	r6, #6
 800b33c:	71ab      	strb	r3, [r5, #6]
 800b33e:	d072      	beq.n	800b426 <ucdr_serialize_uint64_t+0x17e>
 800b340:	f89d 3000 	ldrb.w	r3, [sp]
 800b344:	71eb      	strb	r3, [r5, #7]
 800b346:	6923      	ldr	r3, [r4, #16]
 800b348:	2108      	movs	r1, #8
 800b34a:	68a2      	ldr	r2, [r4, #8]
 800b34c:	3308      	adds	r3, #8
 800b34e:	7da0      	ldrb	r0, [r4, #22]
 800b350:	4442      	add	r2, r8
 800b352:	7561      	strb	r1, [r4, #21]
 800b354:	1b9e      	subs	r6, r3, r6
 800b356:	f080 0001 	eor.w	r0, r0, #1
 800b35a:	60a2      	str	r2, [r4, #8]
 800b35c:	6126      	str	r6, [r4, #16]
 800b35e:	b002      	add	sp, #8
 800b360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b364:	2108      	movs	r1, #8
 800b366:	4620      	mov	r0, r4
 800b368:	f7fd fff0 	bl	800934c <ucdr_check_final_buffer_behavior>
 800b36c:	b350      	cbz	r0, 800b3c4 <ucdr_serialize_uint64_t+0x11c>
 800b36e:	7d23      	ldrb	r3, [r4, #20]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d02d      	beq.n	800b3d0 <ucdr_serialize_uint64_t+0x128>
 800b374:	68a3      	ldr	r3, [r4, #8]
 800b376:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800b37a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b37e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800b382:	7018      	strb	r0, [r3, #0]
 800b384:	68a3      	ldr	r3, [r4, #8]
 800b386:	705a      	strb	r2, [r3, #1]
 800b388:	68a3      	ldr	r3, [r4, #8]
 800b38a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b38e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800b392:	7099      	strb	r1, [r3, #2]
 800b394:	68a3      	ldr	r3, [r4, #8]
 800b396:	70da      	strb	r2, [r3, #3]
 800b398:	68a3      	ldr	r3, [r4, #8]
 800b39a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b39e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800b3a2:	7118      	strb	r0, [r3, #4]
 800b3a4:	68a3      	ldr	r3, [r4, #8]
 800b3a6:	715a      	strb	r2, [r3, #5]
 800b3a8:	68a3      	ldr	r3, [r4, #8]
 800b3aa:	f89d 2000 	ldrb.w	r2, [sp]
 800b3ae:	7199      	strb	r1, [r3, #6]
 800b3b0:	68a3      	ldr	r3, [r4, #8]
 800b3b2:	71da      	strb	r2, [r3, #7]
 800b3b4:	2108      	movs	r1, #8
 800b3b6:	68a2      	ldr	r2, [r4, #8]
 800b3b8:	6923      	ldr	r3, [r4, #16]
 800b3ba:	440a      	add	r2, r1
 800b3bc:	7561      	strb	r1, [r4, #21]
 800b3be:	440b      	add	r3, r1
 800b3c0:	60a2      	str	r2, [r4, #8]
 800b3c2:	6123      	str	r3, [r4, #16]
 800b3c4:	7da0      	ldrb	r0, [r4, #22]
 800b3c6:	f080 0001 	eor.w	r0, r0, #1
 800b3ca:	b002      	add	sp, #8
 800b3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d0:	466b      	mov	r3, sp
 800b3d2:	68a2      	ldr	r2, [r4, #8]
 800b3d4:	cb03      	ldmia	r3!, {r0, r1}
 800b3d6:	6010      	str	r0, [r2, #0]
 800b3d8:	6051      	str	r1, [r2, #4]
 800b3da:	e7eb      	b.n	800b3b4 <ucdr_serialize_uint64_t+0x10c>
 800b3dc:	68a2      	ldr	r2, [r4, #8]
 800b3de:	6923      	ldr	r3, [r4, #16]
 800b3e0:	7da0      	ldrb	r0, [r4, #22]
 800b3e2:	1b92      	subs	r2, r2, r6
 800b3e4:	1b9b      	subs	r3, r3, r6
 800b3e6:	7567      	strb	r7, [r4, #21]
 800b3e8:	f080 0001 	eor.w	r0, r0, #1
 800b3ec:	60a2      	str	r2, [r4, #8]
 800b3ee:	6123      	str	r3, [r4, #16]
 800b3f0:	b002      	add	sp, #8
 800b3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f6:	68a3      	ldr	r3, [r4, #8]
 800b3f8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b3fc:	701a      	strb	r2, [r3, #0]
 800b3fe:	68a3      	ldr	r3, [r4, #8]
 800b400:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b404:	701a      	strb	r2, [r3, #0]
 800b406:	68a3      	ldr	r3, [r4, #8]
 800b408:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b40c:	701a      	strb	r2, [r3, #0]
 800b40e:	68a3      	ldr	r3, [r4, #8]
 800b410:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b414:	701a      	strb	r2, [r3, #0]
 800b416:	68a3      	ldr	r3, [r4, #8]
 800b418:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b41c:	701a      	strb	r2, [r3, #0]
 800b41e:	68a3      	ldr	r3, [r4, #8]
 800b420:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b424:	701a      	strb	r2, [r3, #0]
 800b426:	68a3      	ldr	r3, [r4, #8]
 800b428:	f89d 2000 	ldrb.w	r2, [sp]
 800b42c:	701a      	strb	r2, [r3, #0]
 800b42e:	e78a      	b.n	800b346 <ucdr_serialize_uint64_t+0x9e>
 800b430:	4628      	mov	r0, r5
 800b432:	466d      	mov	r5, sp
 800b434:	4632      	mov	r2, r6
 800b436:	4629      	mov	r1, r5
 800b438:	f007 fc26 	bl	8012c88 <memcpy>
 800b43c:	4642      	mov	r2, r8
 800b43e:	19a9      	adds	r1, r5, r6
 800b440:	68a0      	ldr	r0, [r4, #8]
 800b442:	f007 fc21 	bl	8012c88 <memcpy>
 800b446:	e77e      	b.n	800b346 <ucdr_serialize_uint64_t+0x9e>

0800b448 <ucdr_serialize_int16_t>:
 800b448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b44c:	460b      	mov	r3, r1
 800b44e:	b082      	sub	sp, #8
 800b450:	4604      	mov	r4, r0
 800b452:	2102      	movs	r1, #2
 800b454:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b458:	f7fd ffcc 	bl	80093f4 <ucdr_buffer_alignment>
 800b45c:	4601      	mov	r1, r0
 800b45e:	4620      	mov	r0, r4
 800b460:	7d67      	ldrb	r7, [r4, #21]
 800b462:	f7fe f80f 	bl	8009484 <ucdr_advance_buffer>
 800b466:	2102      	movs	r1, #2
 800b468:	4620      	mov	r0, r4
 800b46a:	f7fd ff63 	bl	8009334 <ucdr_check_buffer_available_for>
 800b46e:	bb78      	cbnz	r0, 800b4d0 <ucdr_serialize_int16_t+0x88>
 800b470:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b474:	42ab      	cmp	r3, r5
 800b476:	d926      	bls.n	800b4c6 <ucdr_serialize_int16_t+0x7e>
 800b478:	1b5e      	subs	r6, r3, r5
 800b47a:	60a3      	str	r3, [r4, #8]
 800b47c:	6923      	ldr	r3, [r4, #16]
 800b47e:	4620      	mov	r0, r4
 800b480:	f1c6 0802 	rsb	r8, r6, #2
 800b484:	4433      	add	r3, r6
 800b486:	4641      	mov	r1, r8
 800b488:	6123      	str	r3, [r4, #16]
 800b48a:	f7fd ff5f 	bl	800934c <ucdr_check_final_buffer_behavior>
 800b48e:	2800      	cmp	r0, #0
 800b490:	d03b      	beq.n	800b50a <ucdr_serialize_int16_t+0xc2>
 800b492:	7d23      	ldrb	r3, [r4, #20]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d04a      	beq.n	800b52e <ucdr_serialize_int16_t+0xe6>
 800b498:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b49c:	702b      	strb	r3, [r5, #0]
 800b49e:	2e00      	cmp	r6, #0
 800b4a0:	d040      	beq.n	800b524 <ucdr_serialize_int16_t+0xdc>
 800b4a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b4a6:	706b      	strb	r3, [r5, #1]
 800b4a8:	6923      	ldr	r3, [r4, #16]
 800b4aa:	2102      	movs	r1, #2
 800b4ac:	68a2      	ldr	r2, [r4, #8]
 800b4ae:	3302      	adds	r3, #2
 800b4b0:	7da0      	ldrb	r0, [r4, #22]
 800b4b2:	4442      	add	r2, r8
 800b4b4:	7561      	strb	r1, [r4, #21]
 800b4b6:	1b9e      	subs	r6, r3, r6
 800b4b8:	f080 0001 	eor.w	r0, r0, #1
 800b4bc:	60a2      	str	r2, [r4, #8]
 800b4be:	6126      	str	r6, [r4, #16]
 800b4c0:	b002      	add	sp, #8
 800b4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c6:	2102      	movs	r1, #2
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f7fd ff3f 	bl	800934c <ucdr_check_final_buffer_behavior>
 800b4ce:	b190      	cbz	r0, 800b4f6 <ucdr_serialize_int16_t+0xae>
 800b4d0:	7d23      	ldrb	r3, [r4, #20]
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	68a3      	ldr	r3, [r4, #8]
 800b4d6:	d014      	beq.n	800b502 <ucdr_serialize_int16_t+0xba>
 800b4d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800b4dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4e0:	7019      	strb	r1, [r3, #0]
 800b4e2:	68a3      	ldr	r3, [r4, #8]
 800b4e4:	705a      	strb	r2, [r3, #1]
 800b4e6:	2102      	movs	r1, #2
 800b4e8:	68a2      	ldr	r2, [r4, #8]
 800b4ea:	6923      	ldr	r3, [r4, #16]
 800b4ec:	440a      	add	r2, r1
 800b4ee:	7561      	strb	r1, [r4, #21]
 800b4f0:	440b      	add	r3, r1
 800b4f2:	60a2      	str	r2, [r4, #8]
 800b4f4:	6123      	str	r3, [r4, #16]
 800b4f6:	7da0      	ldrb	r0, [r4, #22]
 800b4f8:	f080 0001 	eor.w	r0, r0, #1
 800b4fc:	b002      	add	sp, #8
 800b4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b502:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b506:	801a      	strh	r2, [r3, #0]
 800b508:	e7ed      	b.n	800b4e6 <ucdr_serialize_int16_t+0x9e>
 800b50a:	68a2      	ldr	r2, [r4, #8]
 800b50c:	6923      	ldr	r3, [r4, #16]
 800b50e:	7da0      	ldrb	r0, [r4, #22]
 800b510:	1b92      	subs	r2, r2, r6
 800b512:	1b9b      	subs	r3, r3, r6
 800b514:	7567      	strb	r7, [r4, #21]
 800b516:	f080 0001 	eor.w	r0, r0, #1
 800b51a:	60a2      	str	r2, [r4, #8]
 800b51c:	6123      	str	r3, [r4, #16]
 800b51e:	b002      	add	sp, #8
 800b520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b524:	68a3      	ldr	r3, [r4, #8]
 800b526:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b52a:	701a      	strb	r2, [r3, #0]
 800b52c:	e7bc      	b.n	800b4a8 <ucdr_serialize_int16_t+0x60>
 800b52e:	4628      	mov	r0, r5
 800b530:	f10d 0506 	add.w	r5, sp, #6
 800b534:	4632      	mov	r2, r6
 800b536:	4629      	mov	r1, r5
 800b538:	f007 fba6 	bl	8012c88 <memcpy>
 800b53c:	4642      	mov	r2, r8
 800b53e:	19a9      	adds	r1, r5, r6
 800b540:	68a0      	ldr	r0, [r4, #8]
 800b542:	f007 fba1 	bl	8012c88 <memcpy>
 800b546:	e7af      	b.n	800b4a8 <ucdr_serialize_int16_t+0x60>

0800b548 <ucdr_deserialize_int16_t>:
 800b548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b54c:	4604      	mov	r4, r0
 800b54e:	460d      	mov	r5, r1
 800b550:	2102      	movs	r1, #2
 800b552:	f7fd ff4f 	bl	80093f4 <ucdr_buffer_alignment>
 800b556:	4601      	mov	r1, r0
 800b558:	4620      	mov	r0, r4
 800b55a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b55e:	f7fd ff91 	bl	8009484 <ucdr_advance_buffer>
 800b562:	2102      	movs	r1, #2
 800b564:	4620      	mov	r0, r4
 800b566:	f7fd fee5 	bl	8009334 <ucdr_check_buffer_available_for>
 800b56a:	bb60      	cbnz	r0, 800b5c6 <ucdr_deserialize_int16_t+0x7e>
 800b56c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b570:	42be      	cmp	r6, r7
 800b572:	d923      	bls.n	800b5bc <ucdr_deserialize_int16_t+0x74>
 800b574:	6923      	ldr	r3, [r4, #16]
 800b576:	4620      	mov	r0, r4
 800b578:	60a6      	str	r6, [r4, #8]
 800b57a:	1bf6      	subs	r6, r6, r7
 800b57c:	4433      	add	r3, r6
 800b57e:	f1c6 0902 	rsb	r9, r6, #2
 800b582:	6123      	str	r3, [r4, #16]
 800b584:	4649      	mov	r1, r9
 800b586:	f7fd fee1 	bl	800934c <ucdr_check_final_buffer_behavior>
 800b58a:	2800      	cmp	r0, #0
 800b58c:	d034      	beq.n	800b5f8 <ucdr_deserialize_int16_t+0xb0>
 800b58e:	7d23      	ldrb	r3, [r4, #20]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d042      	beq.n	800b61a <ucdr_deserialize_int16_t+0xd2>
 800b594:	787b      	ldrb	r3, [r7, #1]
 800b596:	702b      	strb	r3, [r5, #0]
 800b598:	2e00      	cmp	r6, #0
 800b59a:	d03a      	beq.n	800b612 <ucdr_deserialize_int16_t+0xca>
 800b59c:	783b      	ldrb	r3, [r7, #0]
 800b59e:	706b      	strb	r3, [r5, #1]
 800b5a0:	6923      	ldr	r3, [r4, #16]
 800b5a2:	2102      	movs	r1, #2
 800b5a4:	68a2      	ldr	r2, [r4, #8]
 800b5a6:	3302      	adds	r3, #2
 800b5a8:	7da0      	ldrb	r0, [r4, #22]
 800b5aa:	444a      	add	r2, r9
 800b5ac:	7561      	strb	r1, [r4, #21]
 800b5ae:	1b9b      	subs	r3, r3, r6
 800b5b0:	f080 0001 	eor.w	r0, r0, #1
 800b5b4:	60a2      	str	r2, [r4, #8]
 800b5b6:	6123      	str	r3, [r4, #16]
 800b5b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5bc:	2102      	movs	r1, #2
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f7fd fec4 	bl	800934c <ucdr_check_final_buffer_behavior>
 800b5c4:	b180      	cbz	r0, 800b5e8 <ucdr_deserialize_int16_t+0xa0>
 800b5c6:	7d23      	ldrb	r3, [r4, #20]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	68a3      	ldr	r3, [r4, #8]
 800b5cc:	d011      	beq.n	800b5f2 <ucdr_deserialize_int16_t+0xaa>
 800b5ce:	785b      	ldrb	r3, [r3, #1]
 800b5d0:	702b      	strb	r3, [r5, #0]
 800b5d2:	68a3      	ldr	r3, [r4, #8]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	706b      	strb	r3, [r5, #1]
 800b5d8:	2102      	movs	r1, #2
 800b5da:	68a2      	ldr	r2, [r4, #8]
 800b5dc:	6923      	ldr	r3, [r4, #16]
 800b5de:	440a      	add	r2, r1
 800b5e0:	7561      	strb	r1, [r4, #21]
 800b5e2:	440b      	add	r3, r1
 800b5e4:	60a2      	str	r2, [r4, #8]
 800b5e6:	6123      	str	r3, [r4, #16]
 800b5e8:	7da0      	ldrb	r0, [r4, #22]
 800b5ea:	f080 0001 	eor.w	r0, r0, #1
 800b5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	802b      	strh	r3, [r5, #0]
 800b5f6:	e7ef      	b.n	800b5d8 <ucdr_deserialize_int16_t+0x90>
 800b5f8:	68a2      	ldr	r2, [r4, #8]
 800b5fa:	6923      	ldr	r3, [r4, #16]
 800b5fc:	1b92      	subs	r2, r2, r6
 800b5fe:	7da0      	ldrb	r0, [r4, #22]
 800b600:	1b9b      	subs	r3, r3, r6
 800b602:	f884 8015 	strb.w	r8, [r4, #21]
 800b606:	f080 0001 	eor.w	r0, r0, #1
 800b60a:	60a2      	str	r2, [r4, #8]
 800b60c:	6123      	str	r3, [r4, #16]
 800b60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b612:	68a3      	ldr	r3, [r4, #8]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	706b      	strb	r3, [r5, #1]
 800b618:	e7c2      	b.n	800b5a0 <ucdr_deserialize_int16_t+0x58>
 800b61a:	4639      	mov	r1, r7
 800b61c:	4632      	mov	r2, r6
 800b61e:	4628      	mov	r0, r5
 800b620:	f007 fb32 	bl	8012c88 <memcpy>
 800b624:	464a      	mov	r2, r9
 800b626:	19a8      	adds	r0, r5, r6
 800b628:	68a1      	ldr	r1, [r4, #8]
 800b62a:	f007 fb2d 	bl	8012c88 <memcpy>
 800b62e:	e7b7      	b.n	800b5a0 <ucdr_deserialize_int16_t+0x58>

0800b630 <ucdr_deserialize_int32_t>:
 800b630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b634:	4604      	mov	r4, r0
 800b636:	460d      	mov	r5, r1
 800b638:	2104      	movs	r1, #4
 800b63a:	f7fd fedb 	bl	80093f4 <ucdr_buffer_alignment>
 800b63e:	4601      	mov	r1, r0
 800b640:	4620      	mov	r0, r4
 800b642:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b646:	f7fd ff1d 	bl	8009484 <ucdr_advance_buffer>
 800b64a:	2104      	movs	r1, #4
 800b64c:	4620      	mov	r0, r4
 800b64e:	f7fd fe71 	bl	8009334 <ucdr_check_buffer_available_for>
 800b652:	2800      	cmp	r0, #0
 800b654:	d138      	bne.n	800b6c8 <ucdr_deserialize_int32_t+0x98>
 800b656:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b65a:	42b7      	cmp	r7, r6
 800b65c:	d92f      	bls.n	800b6be <ucdr_deserialize_int32_t+0x8e>
 800b65e:	6923      	ldr	r3, [r4, #16]
 800b660:	4620      	mov	r0, r4
 800b662:	60a7      	str	r7, [r4, #8]
 800b664:	1bbf      	subs	r7, r7, r6
 800b666:	443b      	add	r3, r7
 800b668:	f1c7 0904 	rsb	r9, r7, #4
 800b66c:	6123      	str	r3, [r4, #16]
 800b66e:	4649      	mov	r1, r9
 800b670:	f7fd fe6c 	bl	800934c <ucdr_check_final_buffer_behavior>
 800b674:	2800      	cmp	r0, #0
 800b676:	d046      	beq.n	800b706 <ucdr_deserialize_int32_t+0xd6>
 800b678:	7d23      	ldrb	r3, [r4, #20]
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d05c      	beq.n	800b738 <ucdr_deserialize_int32_t+0x108>
 800b67e:	78f3      	ldrb	r3, [r6, #3]
 800b680:	702b      	strb	r3, [r5, #0]
 800b682:	2f00      	cmp	r7, #0
 800b684:	d04c      	beq.n	800b720 <ucdr_deserialize_int32_t+0xf0>
 800b686:	78b3      	ldrb	r3, [r6, #2]
 800b688:	2f01      	cmp	r7, #1
 800b68a:	706b      	strb	r3, [r5, #1]
 800b68c:	f105 0302 	add.w	r3, r5, #2
 800b690:	d04a      	beq.n	800b728 <ucdr_deserialize_int32_t+0xf8>
 800b692:	7873      	ldrb	r3, [r6, #1]
 800b694:	2f02      	cmp	r7, #2
 800b696:	70ab      	strb	r3, [r5, #2]
 800b698:	f105 0303 	add.w	r3, r5, #3
 800b69c:	d048      	beq.n	800b730 <ucdr_deserialize_int32_t+0x100>
 800b69e:	7833      	ldrb	r3, [r6, #0]
 800b6a0:	70eb      	strb	r3, [r5, #3]
 800b6a2:	6923      	ldr	r3, [r4, #16]
 800b6a4:	2104      	movs	r1, #4
 800b6a6:	68a2      	ldr	r2, [r4, #8]
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	7da0      	ldrb	r0, [r4, #22]
 800b6ac:	444a      	add	r2, r9
 800b6ae:	7561      	strb	r1, [r4, #21]
 800b6b0:	1bdb      	subs	r3, r3, r7
 800b6b2:	f080 0001 	eor.w	r0, r0, #1
 800b6b6:	60a2      	str	r2, [r4, #8]
 800b6b8:	6123      	str	r3, [r4, #16]
 800b6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6be:	2104      	movs	r1, #4
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	f7fd fe43 	bl	800934c <ucdr_check_final_buffer_behavior>
 800b6c6:	b1b0      	cbz	r0, 800b6f6 <ucdr_deserialize_int32_t+0xc6>
 800b6c8:	7d23      	ldrb	r3, [r4, #20]
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	68a3      	ldr	r3, [r4, #8]
 800b6ce:	d017      	beq.n	800b700 <ucdr_deserialize_int32_t+0xd0>
 800b6d0:	78db      	ldrb	r3, [r3, #3]
 800b6d2:	702b      	strb	r3, [r5, #0]
 800b6d4:	68a3      	ldr	r3, [r4, #8]
 800b6d6:	789b      	ldrb	r3, [r3, #2]
 800b6d8:	706b      	strb	r3, [r5, #1]
 800b6da:	68a3      	ldr	r3, [r4, #8]
 800b6dc:	785b      	ldrb	r3, [r3, #1]
 800b6de:	70ab      	strb	r3, [r5, #2]
 800b6e0:	68a3      	ldr	r3, [r4, #8]
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	70eb      	strb	r3, [r5, #3]
 800b6e6:	2104      	movs	r1, #4
 800b6e8:	68a2      	ldr	r2, [r4, #8]
 800b6ea:	6923      	ldr	r3, [r4, #16]
 800b6ec:	440a      	add	r2, r1
 800b6ee:	7561      	strb	r1, [r4, #21]
 800b6f0:	440b      	add	r3, r1
 800b6f2:	60a2      	str	r2, [r4, #8]
 800b6f4:	6123      	str	r3, [r4, #16]
 800b6f6:	7da0      	ldrb	r0, [r4, #22]
 800b6f8:	f080 0001 	eor.w	r0, r0, #1
 800b6fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	602b      	str	r3, [r5, #0]
 800b704:	e7ef      	b.n	800b6e6 <ucdr_deserialize_int32_t+0xb6>
 800b706:	68a2      	ldr	r2, [r4, #8]
 800b708:	6923      	ldr	r3, [r4, #16]
 800b70a:	1bd2      	subs	r2, r2, r7
 800b70c:	7da0      	ldrb	r0, [r4, #22]
 800b70e:	1bdb      	subs	r3, r3, r7
 800b710:	f884 8015 	strb.w	r8, [r4, #21]
 800b714:	f080 0001 	eor.w	r0, r0, #1
 800b718:	60a2      	str	r2, [r4, #8]
 800b71a:	6123      	str	r3, [r4, #16]
 800b71c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b720:	68a3      	ldr	r3, [r4, #8]
 800b722:	789b      	ldrb	r3, [r3, #2]
 800b724:	706b      	strb	r3, [r5, #1]
 800b726:	1cab      	adds	r3, r5, #2
 800b728:	68a2      	ldr	r2, [r4, #8]
 800b72a:	7852      	ldrb	r2, [r2, #1]
 800b72c:	f803 2b01 	strb.w	r2, [r3], #1
 800b730:	68a2      	ldr	r2, [r4, #8]
 800b732:	7812      	ldrb	r2, [r2, #0]
 800b734:	701a      	strb	r2, [r3, #0]
 800b736:	e7b4      	b.n	800b6a2 <ucdr_deserialize_int32_t+0x72>
 800b738:	4631      	mov	r1, r6
 800b73a:	463a      	mov	r2, r7
 800b73c:	4628      	mov	r0, r5
 800b73e:	f007 faa3 	bl	8012c88 <memcpy>
 800b742:	464a      	mov	r2, r9
 800b744:	19e8      	adds	r0, r5, r7
 800b746:	68a1      	ldr	r1, [r4, #8]
 800b748:	f007 fa9e 	bl	8012c88 <memcpy>
 800b74c:	e7a9      	b.n	800b6a2 <ucdr_deserialize_int32_t+0x72>
 800b74e:	bf00      	nop

0800b750 <uxr_buffer_delete_entity>:
 800b750:	b510      	push	{r4, lr}
 800b752:	2300      	movs	r3, #0
 800b754:	b08e      	sub	sp, #56	; 0x38
 800b756:	4604      	mov	r4, r0
 800b758:	9103      	str	r1, [sp, #12]
 800b75a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b75e:	2303      	movs	r3, #3
 800b760:	2204      	movs	r2, #4
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	ab06      	add	r3, sp, #24
 800b766:	f001 f86d 	bl	800c844 <uxr_prepare_stream_to_write_submessage>
 800b76a:	b918      	cbnz	r0, 800b774 <uxr_buffer_delete_entity+0x24>
 800b76c:	4604      	mov	r4, r0
 800b76e:	4620      	mov	r0, r4
 800b770:	b00e      	add	sp, #56	; 0x38
 800b772:	bd10      	pop	{r4, pc}
 800b774:	9902      	ldr	r1, [sp, #8]
 800b776:	aa05      	add	r2, sp, #20
 800b778:	4620      	mov	r0, r4
 800b77a:	f001 f99f 	bl	800cabc <uxr_init_base_object_request>
 800b77e:	4604      	mov	r4, r0
 800b780:	a905      	add	r1, sp, #20
 800b782:	a806      	add	r0, sp, #24
 800b784:	f002 fb08 	bl	800dd98 <uxr_serialize_DELETE_Payload>
 800b788:	4620      	mov	r0, r4
 800b78a:	b00e      	add	sp, #56	; 0x38
 800b78c:	bd10      	pop	{r4, pc}
 800b78e:	bf00      	nop

0800b790 <uxr_common_create_entity>:
 800b790:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800b794:	b510      	push	{r4, lr}
 800b796:	f1bc 0f01 	cmp.w	ip, #1
 800b79a:	b08c      	sub	sp, #48	; 0x30
 800b79c:	4604      	mov	r4, r0
 800b79e:	9202      	str	r2, [sp, #8]
 800b7a0:	bf0c      	ite	eq
 800b7a2:	f003 0201 	andeq.w	r2, r3, #1
 800b7a6:	2200      	movne	r2, #0
 800b7a8:	330e      	adds	r3, #14
 800b7aa:	9103      	str	r1, [sp, #12]
 800b7ac:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800b7b0:	441a      	add	r2, r3
 800b7b2:	ab04      	add	r3, sp, #16
 800b7b4:	9101      	str	r1, [sp, #4]
 800b7b6:	2101      	movs	r1, #1
 800b7b8:	b292      	uxth	r2, r2
 800b7ba:	9100      	str	r1, [sp, #0]
 800b7bc:	9903      	ldr	r1, [sp, #12]
 800b7be:	f001 f841 	bl	800c844 <uxr_prepare_stream_to_write_submessage>
 800b7c2:	b918      	cbnz	r0, 800b7cc <uxr_common_create_entity+0x3c>
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	b00c      	add	sp, #48	; 0x30
 800b7ca:	bd10      	pop	{r4, pc}
 800b7cc:	9902      	ldr	r1, [sp, #8]
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b7d2:	f001 f973 	bl	800cabc <uxr_init_base_object_request>
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b7da:	a804      	add	r0, sp, #16
 800b7dc:	f002 fa36 	bl	800dc4c <uxr_serialize_CREATE_Payload>
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	b00c      	add	sp, #48	; 0x30
 800b7e4:	bd10      	pop	{r4, pc}
 800b7e6:	bf00      	nop

0800b7e8 <uxr_buffer_create_participant_bin>:
 800b7e8:	b570      	push	{r4, r5, r6, lr}
 800b7ea:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800b7ee:	4605      	mov	r5, r0
 800b7f0:	ac11      	add	r4, sp, #68	; 0x44
 800b7f2:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800b7fc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b800:	7223      	strb	r3, [r4, #8]
 800b802:	2300      	movs	r3, #0
 800b804:	2201      	movs	r2, #1
 800b806:	f88d 3014 	strb.w	r3, [sp, #20]
 800b80a:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800b80c:	7122      	strb	r2, [r4, #4]
 800b80e:	b1cb      	cbz	r3, 800b844 <uxr_buffer_create_participant_bin+0x5c>
 800b810:	f88d 201c 	strb.w	r2, [sp, #28]
 800b814:	9308      	str	r3, [sp, #32]
 800b816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b81a:	a915      	add	r1, sp, #84	; 0x54
 800b81c:	a809      	add	r0, sp, #36	; 0x24
 800b81e:	f7fd fddd 	bl	80093dc <ucdr_init_buffer>
 800b822:	a905      	add	r1, sp, #20
 800b824:	a809      	add	r0, sp, #36	; 0x24
 800b826:	f001 fee7 	bl	800d5f8 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800b82a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b82c:	9600      	str	r6, [sp, #0]
 800b82e:	4628      	mov	r0, r5
 800b830:	9401      	str	r4, [sp, #4]
 800b832:	60e3      	str	r3, [r4, #12]
 800b834:	b29b      	uxth	r3, r3
 800b836:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b83a:	f7ff ffa9 	bl	800b790 <uxr_common_create_entity>
 800b83e:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800b842:	bd70      	pop	{r4, r5, r6, pc}
 800b844:	f88d 301c 	strb.w	r3, [sp, #28]
 800b848:	e7e5      	b.n	800b816 <uxr_buffer_create_participant_bin+0x2e>
 800b84a:	bf00      	nop

0800b84c <uxr_buffer_create_topic_bin>:
 800b84c:	b570      	push	{r4, r5, r6, lr}
 800b84e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800b852:	4605      	mov	r5, r0
 800b854:	4618      	mov	r0, r3
 800b856:	9105      	str	r1, [sp, #20]
 800b858:	a997      	add	r1, sp, #604	; 0x25c
 800b85a:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800b85e:	ac13      	add	r4, sp, #76	; 0x4c
 800b860:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b864:	2302      	movs	r3, #2
 800b866:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800b86a:	f000 f8ed 	bl	800ba48 <uxr_object_id_to_raw>
 800b86e:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800b870:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b874:	a917      	add	r1, sp, #92	; 0x5c
 800b876:	a80b      	add	r0, sp, #44	; 0x2c
 800b878:	9306      	str	r3, [sp, #24]
 800b87a:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800b87c:	930a      	str	r3, [sp, #40]	; 0x28
 800b87e:	2303      	movs	r3, #3
 800b880:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800b884:	2301      	movs	r3, #1
 800b886:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b88a:	2300      	movs	r3, #0
 800b88c:	f88d 301c 	strb.w	r3, [sp, #28]
 800b890:	f7fd fda4 	bl	80093dc <ucdr_init_buffer>
 800b894:	a906      	add	r1, sp, #24
 800b896:	a80b      	add	r0, sp, #44	; 0x2c
 800b898:	f001 fed0 	bl	800d63c <uxr_serialize_OBJK_Topic_Binary>
 800b89c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b89e:	4628      	mov	r0, r5
 800b8a0:	9600      	str	r6, [sp, #0]
 800b8a2:	9316      	str	r3, [sp, #88]	; 0x58
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	9401      	str	r4, [sp, #4]
 800b8a8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b8ac:	f7ff ff70 	bl	800b790 <uxr_common_create_entity>
 800b8b0:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800b8b4:	bd70      	pop	{r4, r5, r6, pc}
 800b8b6:	bf00      	nop

0800b8b8 <uxr_buffer_create_publisher_bin>:
 800b8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ba:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800b8be:	2603      	movs	r6, #3
 800b8c0:	4605      	mov	r5, r0
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	9105      	str	r1, [sp, #20]
 800b8c6:	a992      	add	r1, sp, #584	; 0x248
 800b8c8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800b8cc:	ac0e      	add	r4, sp, #56	; 0x38
 800b8ce:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800b8d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b8d6:	f000 f8b7 	bl	800ba48 <uxr_object_id_to_raw>
 800b8da:	2300      	movs	r3, #0
 800b8dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8e0:	a912      	add	r1, sp, #72	; 0x48
 800b8e2:	a806      	add	r0, sp, #24
 800b8e4:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800b8e8:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800b8ec:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800b8f0:	f7fd fd74 	bl	80093dc <ucdr_init_buffer>
 800b8f4:	a993      	add	r1, sp, #588	; 0x24c
 800b8f6:	a806      	add	r0, sp, #24
 800b8f8:	f001 ff54 	bl	800d7a4 <uxr_serialize_OBJK_Publisher_Binary>
 800b8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8fe:	4628      	mov	r0, r5
 800b900:	9700      	str	r7, [sp, #0]
 800b902:	9311      	str	r3, [sp, #68]	; 0x44
 800b904:	b29b      	uxth	r3, r3
 800b906:	9401      	str	r4, [sp, #4]
 800b908:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b90c:	f7ff ff40 	bl	800b790 <uxr_common_create_entity>
 800b910:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800b914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b916:	bf00      	nop

0800b918 <uxr_buffer_create_datawriter_bin>:
 800b918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b91c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b920:	4606      	mov	r6, r0
 800b922:	4618      	mov	r0, r3
 800b924:	2703      	movs	r7, #3
 800b926:	ac1d      	add	r4, sp, #116	; 0x74
 800b928:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800b92c:	9105      	str	r1, [sp, #20]
 800b92e:	a9a1      	add	r1, sp, #644	; 0x284
 800b930:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800b934:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b938:	2305      	movs	r3, #5
 800b93a:	7123      	strb	r3, [r4, #4]
 800b93c:	f000 f884 	bl	800ba48 <uxr_object_id_to_raw>
 800b940:	a90e      	add	r1, sp, #56	; 0x38
 800b942:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800b944:	7227      	strb	r7, [r4, #8]
 800b946:	f000 f87f 	bl	800ba48 <uxr_object_id_to_raw>
 800b94a:	2300      	movs	r3, #0
 800b94c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800b950:	3d00      	subs	r5, #0
 800b952:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800b956:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800b95a:	bf18      	it	ne
 800b95c:	2501      	movne	r5, #1
 800b95e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800b962:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800b966:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800b96a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b96e:	2301      	movs	r3, #1
 800b970:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800b974:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800b978:	bb8a      	cbnz	r2, 800b9de <uxr_buffer_create_datawriter_bin+0xc6>
 800b97a:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800b97e:	f04f 0c13 	mov.w	ip, #19
 800b982:	250b      	movs	r5, #11
 800b984:	2221      	movs	r2, #33	; 0x21
 800b986:	2111      	movs	r1, #17
 800b988:	2009      	movs	r0, #9
 800b98a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b98e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800b992:	b923      	cbnz	r3, 800b99e <uxr_buffer_create_datawriter_bin+0x86>
 800b994:	4672      	mov	r2, lr
 800b996:	4661      	mov	r1, ip
 800b998:	4628      	mov	r0, r5
 800b99a:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800b99e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d025      	beq.n	800b9f2 <uxr_buffer_create_datawriter_bin+0xda>
 800b9a6:	2b03      	cmp	r3, #3
 800b9a8:	d029      	beq.n	800b9fe <uxr_buffer_create_datawriter_bin+0xe6>
 800b9aa:	b32b      	cbz	r3, 800b9f8 <uxr_buffer_create_datawriter_bin+0xe0>
 800b9ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9b0:	a921      	add	r1, sp, #132	; 0x84
 800b9b2:	a806      	add	r0, sp, #24
 800b9b4:	f7fd fd12 	bl	80093dc <ucdr_init_buffer>
 800b9b8:	a90e      	add	r1, sp, #56	; 0x38
 800b9ba:	a806      	add	r0, sp, #24
 800b9bc:	f001 ff68 	bl	800d890 <uxr_serialize_OBJK_DataWriter_Binary>
 800b9c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9c2:	f8cd 8000 	str.w	r8, [sp]
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	9401      	str	r4, [sp, #4]
 800b9ca:	60e3      	str	r3, [r4, #12]
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b9d2:	f7ff fedd 	bl	800b790 <uxr_common_create_entity>
 800b9d6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9de:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800b9e2:	f04f 0c12 	mov.w	ip, #18
 800b9e6:	250a      	movs	r5, #10
 800b9e8:	2220      	movs	r2, #32
 800b9ea:	2110      	movs	r1, #16
 800b9ec:	2008      	movs	r0, #8
 800b9ee:	2702      	movs	r7, #2
 800b9f0:	e7cd      	b.n	800b98e <uxr_buffer_create_datawriter_bin+0x76>
 800b9f2:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800b9f6:	e7d9      	b.n	800b9ac <uxr_buffer_create_datawriter_bin+0x94>
 800b9f8:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800b9fc:	e7d6      	b.n	800b9ac <uxr_buffer_create_datawriter_bin+0x94>
 800b9fe:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800ba02:	e7d3      	b.n	800b9ac <uxr_buffer_create_datawriter_bin+0x94>

0800ba04 <uxr_object_id>:
 800ba04:	b082      	sub	sp, #8
 800ba06:	2300      	movs	r3, #0
 800ba08:	f88d 1006 	strb.w	r1, [sp, #6]
 800ba0c:	f360 030f 	bfi	r3, r0, #0, #16
 800ba10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ba14:	f362 431f 	bfi	r3, r2, #16, #16
 800ba18:	4618      	mov	r0, r3
 800ba1a:	b002      	add	sp, #8
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop

0800ba20 <uxr_object_id_from_raw>:
 800ba20:	7843      	ldrb	r3, [r0, #1]
 800ba22:	b082      	sub	sp, #8
 800ba24:	7801      	ldrb	r1, [r0, #0]
 800ba26:	2000      	movs	r0, #0
 800ba28:	091a      	lsrs	r2, r3, #4
 800ba2a:	f003 030f 	and.w	r3, r3, #15
 800ba2e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800ba32:	f88d 3006 	strb.w	r3, [sp, #6]
 800ba36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ba3a:	f362 000f 	bfi	r0, r2, #0, #16
 800ba3e:	f363 401f 	bfi	r0, r3, #16, #16
 800ba42:	b002      	add	sp, #8
 800ba44:	4770      	bx	lr
 800ba46:	bf00      	nop

0800ba48 <uxr_object_id_to_raw>:
 800ba48:	4602      	mov	r2, r0
 800ba4a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ba4e:	b082      	sub	sp, #8
 800ba50:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800ba54:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ba58:	f881 c000 	strb.w	ip, [r1]
 800ba5c:	7048      	strb	r0, [r1, #1]
 800ba5e:	b002      	add	sp, #8
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop

0800ba64 <on_get_fragmentation_info>:
 800ba64:	b500      	push	{lr}
 800ba66:	b08b      	sub	sp, #44	; 0x2c
 800ba68:	4601      	mov	r1, r0
 800ba6a:	2204      	movs	r2, #4
 800ba6c:	a802      	add	r0, sp, #8
 800ba6e:	f7fd fcb5 	bl	80093dc <ucdr_init_buffer>
 800ba72:	f10d 0305 	add.w	r3, sp, #5
 800ba76:	f10d 0206 	add.w	r2, sp, #6
 800ba7a:	a901      	add	r1, sp, #4
 800ba7c:	a802      	add	r0, sp, #8
 800ba7e:	f001 f9a7 	bl	800cdd0 <uxr_read_submessage_header>
 800ba82:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ba86:	2b0d      	cmp	r3, #13
 800ba88:	d003      	beq.n	800ba92 <on_get_fragmentation_info+0x2e>
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	b00b      	add	sp, #44	; 0x2c
 800ba8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ba96:	f013 0f02 	tst.w	r3, #2
 800ba9a:	bf14      	ite	ne
 800ba9c:	2002      	movne	r0, #2
 800ba9e:	2001      	moveq	r0, #1
 800baa0:	b00b      	add	sp, #44	; 0x2c
 800baa2:	f85d fb04 	ldr.w	pc, [sp], #4
 800baa6:	bf00      	nop

0800baa8 <read_submessage_get_info>:
 800baa8:	b570      	push	{r4, r5, r6, lr}
 800baaa:	2500      	movs	r5, #0
 800baac:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800bab0:	460e      	mov	r6, r1
 800bab2:	4604      	mov	r4, r0
 800bab4:	f44f 7224 	mov.w	r2, #656	; 0x290
 800bab8:	4629      	mov	r1, r5
 800baba:	a810      	add	r0, sp, #64	; 0x40
 800babc:	9503      	str	r5, [sp, #12]
 800babe:	9504      	str	r5, [sp, #16]
 800bac0:	f007 f8f0 	bl	8012ca4 <memset>
 800bac4:	a903      	add	r1, sp, #12
 800bac6:	4630      	mov	r0, r6
 800bac8:	f002 f950 	bl	800dd6c <uxr_deserialize_GET_INFO_Payload>
 800bacc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800bad0:	4620      	mov	r0, r4
 800bad2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800bad6:	f000 ffe9 	bl	800caac <uxr_session_header_offset>
 800bada:	462b      	mov	r3, r5
 800badc:	220c      	movs	r2, #12
 800bade:	a905      	add	r1, sp, #20
 800bae0:	9000      	str	r0, [sp, #0]
 800bae2:	a808      	add	r0, sp, #32
 800bae4:	f7fd fc68 	bl	80093b8 <ucdr_init_buffer_origin_offset>
 800bae8:	a910      	add	r1, sp, #64	; 0x40
 800baea:	a808      	add	r0, sp, #32
 800baec:	f002 f9b2 	bl	800de54 <uxr_serialize_INFO_Payload>
 800baf0:	9b08      	ldr	r3, [sp, #32]
 800baf2:	462a      	mov	r2, r5
 800baf4:	4629      	mov	r1, r5
 800baf6:	4620      	mov	r0, r4
 800baf8:	f000 ff84 	bl	800ca04 <uxr_stamp_session_header>
 800bafc:	a808      	add	r0, sp, #32
 800bafe:	f7fd fc9b 	bl	8009438 <ucdr_buffer_length>
 800bb02:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bb04:	4602      	mov	r2, r0
 800bb06:	a905      	add	r1, sp, #20
 800bb08:	e9d3 0400 	ldrd	r0, r4, [r3]
 800bb0c:	47a0      	blx	r4
 800bb0e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800bb12:	bd70      	pop	{r4, r5, r6, pc}

0800bb14 <write_submessage_acknack.isra.0>:
 800bb14:	b570      	push	{r4, r5, r6, lr}
 800bb16:	b092      	sub	sp, #72	; 0x48
 800bb18:	4605      	mov	r5, r0
 800bb1a:	460e      	mov	r6, r1
 800bb1c:	4614      	mov	r4, r2
 800bb1e:	f000 ffc5 	bl	800caac <uxr_session_header_offset>
 800bb22:	a905      	add	r1, sp, #20
 800bb24:	9000      	str	r0, [sp, #0]
 800bb26:	2300      	movs	r3, #0
 800bb28:	a80a      	add	r0, sp, #40	; 0x28
 800bb2a:	2211      	movs	r2, #17
 800bb2c:	f7fd fc44 	bl	80093b8 <ucdr_init_buffer_origin_offset>
 800bb30:	2218      	movs	r2, #24
 800bb32:	2300      	movs	r3, #0
 800bb34:	210a      	movs	r1, #10
 800bb36:	fb02 5404 	mla	r4, r2, r4, r5
 800bb3a:	a80a      	add	r0, sp, #40	; 0x28
 800bb3c:	2205      	movs	r2, #5
 800bb3e:	3450      	adds	r4, #80	; 0x50
 800bb40:	f001 f92c 	bl	800cd9c <uxr_buffer_submessage_header>
 800bb44:	a903      	add	r1, sp, #12
 800bb46:	4620      	mov	r0, r4
 800bb48:	f004 ffa6 	bl	8010a98 <uxr_compute_acknack>
 800bb4c:	ba40      	rev16	r0, r0
 800bb4e:	a903      	add	r1, sp, #12
 800bb50:	f88d 6010 	strb.w	r6, [sp, #16]
 800bb54:	f8ad 000e 	strh.w	r0, [sp, #14]
 800bb58:	a80a      	add	r0, sp, #40	; 0x28
 800bb5a:	f002 f9ed 	bl	800df38 <uxr_serialize_ACKNACK_Payload>
 800bb5e:	2200      	movs	r2, #0
 800bb60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb62:	4628      	mov	r0, r5
 800bb64:	4611      	mov	r1, r2
 800bb66:	f000 ff4d 	bl	800ca04 <uxr_stamp_session_header>
 800bb6a:	a80a      	add	r0, sp, #40	; 0x28
 800bb6c:	f7fd fc64 	bl	8009438 <ucdr_buffer_length>
 800bb70:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800bb72:	4602      	mov	r2, r0
 800bb74:	a905      	add	r1, sp, #20
 800bb76:	e9d3 0400 	ldrd	r0, r4, [r3]
 800bb7a:	47a0      	blx	r4
 800bb7c:	b012      	add	sp, #72	; 0x48
 800bb7e:	bd70      	pop	{r4, r5, r6, pc}

0800bb80 <uxr_init_session>:
 800bb80:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800bbb8 <uxr_init_session+0x38>
 800bb84:	2300      	movs	r3, #0
 800bb86:	b510      	push	{r4, lr}
 800bb88:	4604      	mov	r4, r0
 800bb8a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800bb8e:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800bb92:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800bb96:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800bb9a:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800bb9e:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800bba2:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800bba6:	2181      	movs	r1, #129	; 0x81
 800bba8:	f000 fe90 	bl	800c8cc <uxr_init_session_info>
 800bbac:	f104 0008 	add.w	r0, r4, #8
 800bbb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbb4:	f001 b80e 	b.w	800cbd4 <uxr_init_stream_storage>
	...

0800bbc0 <uxr_set_status_callback>:
 800bbc0:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop

0800bbc8 <uxr_set_topic_callback>:
 800bbc8:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop

0800bbd0 <uxr_set_request_callback>:
 800bbd0:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop

0800bbd8 <uxr_set_reply_callback>:
 800bbd8:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop

0800bbe0 <uxr_create_output_best_effort_stream>:
 800bbe0:	b510      	push	{r4, lr}
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	b084      	sub	sp, #16
 800bbe6:	e9cd 2100 	strd	r2, r1, [sp]
 800bbea:	f000 ff5f 	bl	800caac <uxr_session_header_offset>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	f104 0008 	add.w	r0, r4, #8
 800bbf4:	e9dd 2100 	ldrd	r2, r1, [sp]
 800bbf8:	b004      	add	sp, #16
 800bbfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbfe:	f001 b82f 	b.w	800cc60 <uxr_add_output_best_effort_buffer>
 800bc02:	bf00      	nop

0800bc04 <uxr_create_output_reliable_stream>:
 800bc04:	b530      	push	{r4, r5, lr}
 800bc06:	b089      	sub	sp, #36	; 0x24
 800bc08:	4604      	mov	r4, r0
 800bc0a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800bc0e:	9303      	str	r3, [sp, #12]
 800bc10:	f000 ff4c 	bl	800caac <uxr_session_header_offset>
 800bc14:	4605      	mov	r5, r0
 800bc16:	9905      	ldr	r1, [sp, #20]
 800bc18:	f104 0008 	add.w	r0, r4, #8
 800bc1c:	9500      	str	r5, [sp, #0]
 800bc1e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800bc22:	f001 f831 	bl	800cc88 <uxr_add_output_reliable_buffer>
 800bc26:	2200      	movs	r2, #0
 800bc28:	fa5f fc80 	uxtb.w	ip, r0
 800bc2c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800bc30:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800bc34:	0e03      	lsrs	r3, r0, #24
 800bc36:	f36c 0207 	bfi	r2, ip, #0, #8
 800bc3a:	f364 220f 	bfi	r2, r4, #8, #8
 800bc3e:	f361 4217 	bfi	r2, r1, #16, #8
 800bc42:	f363 621f 	bfi	r2, r3, #24, #8
 800bc46:	4610      	mov	r0, r2
 800bc48:	b009      	add	sp, #36	; 0x24
 800bc4a:	bd30      	pop	{r4, r5, pc}

0800bc4c <uxr_create_input_best_effort_stream>:
 800bc4c:	b082      	sub	sp, #8
 800bc4e:	3008      	adds	r0, #8
 800bc50:	b002      	add	sp, #8
 800bc52:	f001 b833 	b.w	800ccbc <uxr_add_input_best_effort_buffer>
 800bc56:	bf00      	nop

0800bc58 <uxr_create_input_reliable_stream>:
 800bc58:	b510      	push	{r4, lr}
 800bc5a:	4c0c      	ldr	r4, [pc, #48]	; (800bc8c <uxr_create_input_reliable_stream+0x34>)
 800bc5c:	b084      	sub	sp, #16
 800bc5e:	3008      	adds	r0, #8
 800bc60:	9400      	str	r4, [sp, #0]
 800bc62:	f001 f841 	bl	800cce8 <uxr_add_input_reliable_buffer>
 800bc66:	2200      	movs	r2, #0
 800bc68:	fa5f fe80 	uxtb.w	lr, r0
 800bc6c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 800bc70:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800bc74:	0e03      	lsrs	r3, r0, #24
 800bc76:	f36e 0207 	bfi	r2, lr, #0, #8
 800bc7a:	f36c 220f 	bfi	r2, ip, #8, #8
 800bc7e:	f361 4217 	bfi	r2, r1, #16, #8
 800bc82:	f363 621f 	bfi	r2, r3, #24, #8
 800bc86:	4610      	mov	r0, r2
 800bc88:	b004      	add	sp, #16
 800bc8a:	bd10      	pop	{r4, pc}
 800bc8c:	0800ba65 	.word	0x0800ba65

0800bc90 <uxr_epoch_nanos>:
 800bc90:	b510      	push	{r4, lr}
 800bc92:	4604      	mov	r4, r0
 800bc94:	f001 f8e4 	bl	800ce60 <uxr_nanos>
 800bc98:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800bc9c:	1ac0      	subs	r0, r0, r3
 800bc9e:	eb61 0102 	sbc.w	r1, r1, r2
 800bca2:	bd10      	pop	{r4, pc}

0800bca4 <uxr_flash_output_streams>:
 800bca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bca8:	7e03      	ldrb	r3, [r0, #24]
 800bcaa:	b084      	sub	sp, #16
 800bcac:	4604      	mov	r4, r0
 800bcae:	b1fb      	cbz	r3, 800bcf0 <uxr_flash_output_streams+0x4c>
 800bcb0:	f04f 0900 	mov.w	r9, #0
 800bcb4:	f10d 0802 	add.w	r8, sp, #2
 800bcb8:	af03      	add	r7, sp, #12
 800bcba:	ae02      	add	r6, sp, #8
 800bcbc:	4648      	mov	r0, r9
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	3508      	adds	r5, #8
 800bcc8:	f000 ff2a 	bl	800cb20 <uxr_stream_id>
 800bccc:	4684      	mov	ip, r0
 800bcce:	4643      	mov	r3, r8
 800bcd0:	463a      	mov	r2, r7
 800bcd2:	4631      	mov	r1, r6
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	f8cd c004 	str.w	ip, [sp, #4]
 800bcda:	f004 ff67 	bl	8010bac <uxr_prepare_best_effort_buffer_to_send>
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d13d      	bne.n	800bd5e <uxr_flash_output_streams+0xba>
 800bce2:	f109 0901 	add.w	r9, r9, #1
 800bce6:	7e23      	ldrb	r3, [r4, #24]
 800bce8:	fa5f f089 	uxtb.w	r0, r9
 800bcec:	4283      	cmp	r3, r0
 800bcee:	d8e6      	bhi.n	800bcbe <uxr_flash_output_streams+0x1a>
 800bcf0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800bcf4:	b383      	cbz	r3, 800bd58 <uxr_flash_output_streams+0xb4>
 800bcf6:	f04f 0900 	mov.w	r9, #0
 800bcfa:	f10d 0802 	add.w	r8, sp, #2
 800bcfe:	af03      	add	r7, sp, #12
 800bd00:	ae02      	add	r6, sp, #8
 800bd02:	4648      	mov	r0, r9
 800bd04:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800bd08:	2201      	movs	r2, #1
 800bd0a:	2102      	movs	r1, #2
 800bd0c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800bd10:	f000 ff06 	bl	800cb20 <uxr_stream_id>
 800bd14:	9001      	str	r0, [sp, #4]
 800bd16:	3520      	adds	r5, #32
 800bd18:	e00c      	b.n	800bd34 <uxr_flash_output_streams+0x90>
 800bd1a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800bd1e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800bd22:	9b02      	ldr	r3, [sp, #8]
 800bd24:	f000 fe6e 	bl	800ca04 <uxr_stamp_session_header>
 800bd28:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bd2a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bd2e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 800bd32:	47d0      	blx	sl
 800bd34:	4643      	mov	r3, r8
 800bd36:	463a      	mov	r2, r7
 800bd38:	4631      	mov	r1, r6
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	f005 f958 	bl	8010ff0 <uxr_prepare_next_reliable_buffer_to_send>
 800bd40:	4603      	mov	r3, r0
 800bd42:	4620      	mov	r0, r4
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1e8      	bne.n	800bd1a <uxr_flash_output_streams+0x76>
 800bd48:	f109 0901 	add.w	r9, r9, #1
 800bd4c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800bd50:	fa5f f089 	uxtb.w	r0, r9
 800bd54:	4283      	cmp	r3, r0
 800bd56:	d8d5      	bhi.n	800bd04 <uxr_flash_output_streams+0x60>
 800bd58:	b004      	add	sp, #16
 800bd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd5e:	9b02      	ldr	r3, [sp, #8]
 800bd60:	4620      	mov	r0, r4
 800bd62:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800bd66:	f109 0901 	add.w	r9, r9, #1
 800bd6a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800bd6e:	f000 fe49 	bl	800ca04 <uxr_stamp_session_header>
 800bd72:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bd74:	9a03      	ldr	r2, [sp, #12]
 800bd76:	685d      	ldr	r5, [r3, #4]
 800bd78:	6818      	ldr	r0, [r3, #0]
 800bd7a:	9902      	ldr	r1, [sp, #8]
 800bd7c:	47a8      	blx	r5
 800bd7e:	7e23      	ldrb	r3, [r4, #24]
 800bd80:	fa5f f089 	uxtb.w	r0, r9
 800bd84:	4283      	cmp	r3, r0
 800bd86:	d89a      	bhi.n	800bcbe <uxr_flash_output_streams+0x1a>
 800bd88:	e7b2      	b.n	800bcf0 <uxr_flash_output_streams+0x4c>
 800bd8a:	bf00      	nop

0800bd8c <read_submessage_info>:
 800bd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd90:	460d      	mov	r5, r1
 800bd92:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800bd96:	4606      	mov	r6, r0
 800bd98:	4669      	mov	r1, sp
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	f001 fef8 	bl	800db90 <uxr_deserialize_BaseObjectReply>
 800bda0:	4604      	mov	r4, r0
 800bda2:	a902      	add	r1, sp, #8
 800bda4:	4628      	mov	r0, r5
 800bda6:	f89d 7005 	ldrb.w	r7, [sp, #5]
 800bdaa:	f7fe fdf9 	bl	800a9a0 <ucdr_deserialize_bool>
 800bdae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bdb2:	4004      	ands	r4, r0
 800bdb4:	b2e4      	uxtb	r4, r4
 800bdb6:	b95b      	cbnz	r3, 800bdd0 <read_submessage_info+0x44>
 800bdb8:	a987      	add	r1, sp, #540	; 0x21c
 800bdba:	4628      	mov	r0, r5
 800bdbc:	f7fe fdf0 	bl	800a9a0 <ucdr_deserialize_bool>
 800bdc0:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800bdc4:	4680      	mov	r8, r0
 800bdc6:	b94b      	cbnz	r3, 800bddc <read_submessage_info+0x50>
 800bdc8:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800bdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd0:	a903      	add	r1, sp, #12
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	f001 fd88 	bl	800d8e8 <uxr_deserialize_ObjectVariant>
 800bdd8:	4004      	ands	r4, r0
 800bdda:	e7ed      	b.n	800bdb8 <read_submessage_info+0x2c>
 800bddc:	a988      	add	r1, sp, #544	; 0x220
 800bdde:	4628      	mov	r0, r5
 800bde0:	f7fe fe0c 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800bde4:	ea14 0f08 	tst.w	r4, r8
 800bde8:	d0ee      	beq.n	800bdc8 <read_submessage_info+0x3c>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	d0ec      	beq.n	800bdc8 <read_submessage_info+0x3c>
 800bdee:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800bdf2:	2b0d      	cmp	r3, #13
 800bdf4:	d1e8      	bne.n	800bdc8 <read_submessage_info+0x3c>
 800bdf6:	a98a      	add	r1, sp, #552	; 0x228
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	f7ff fba5 	bl	800b548 <ucdr_deserialize_int16_t>
 800bdfe:	b138      	cbz	r0, 800be10 <read_submessage_info+0x84>
 800be00:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800be04:	2b00      	cmp	r3, #0
 800be06:	dd06      	ble.n	800be16 <read_submessage_info+0x8a>
 800be08:	2f00      	cmp	r7, #0
 800be0a:	bf14      	ite	ne
 800be0c:	2001      	movne	r0, #1
 800be0e:	2002      	moveq	r0, #2
 800be10:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 800be14:	e7d8      	b.n	800bdc8 <read_submessage_info+0x3c>
 800be16:	2000      	movs	r0, #0
 800be18:	e7fa      	b.n	800be10 <read_submessage_info+0x84>
 800be1a:	bf00      	nop

0800be1c <read_submessage_list>:
 800be1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be20:	4604      	mov	r4, r0
 800be22:	b097      	sub	sp, #92	; 0x5c
 800be24:	460d      	mov	r5, r1
 800be26:	4ec1      	ldr	r6, [pc, #772]	; (800c12c <read_submessage_list+0x310>)
 800be28:	9209      	str	r2, [sp, #36]	; 0x24
 800be2a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800be2e:	aa0c      	add	r2, sp, #48	; 0x30
 800be30:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800be34:	4628      	mov	r0, r5
 800be36:	f000 ffcb 	bl	800cdd0 <uxr_read_submessage_header>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	f000 8142 	beq.w	800c0c4 <read_submessage_list+0x2a8>
 800be40:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800be44:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800be48:	3b02      	subs	r3, #2
 800be4a:	2b0d      	cmp	r3, #13
 800be4c:	d8ed      	bhi.n	800be2a <read_submessage_list+0xe>
 800be4e:	a101      	add	r1, pc, #4	; (adr r1, 800be54 <read_submessage_list+0x38>)
 800be50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be54:	0800c0bb 	.word	0x0800c0bb
 800be58:	0800be2b 	.word	0x0800be2b
 800be5c:	0800c0ab 	.word	0x0800c0ab
 800be60:	0800c049 	.word	0x0800c049
 800be64:	0800c03f 	.word	0x0800c03f
 800be68:	0800be2b 	.word	0x0800be2b
 800be6c:	0800be2b 	.word	0x0800be2b
 800be70:	0800bf95 	.word	0x0800bf95
 800be74:	0800bf27 	.word	0x0800bf27
 800be78:	0800bee7 	.word	0x0800bee7
 800be7c:	0800be2b 	.word	0x0800be2b
 800be80:	0800be2b 	.word	0x0800be2b
 800be84:	0800be2b 	.word	0x0800be2b
 800be88:	0800be8d 	.word	0x0800be8d
 800be8c:	a910      	add	r1, sp, #64	; 0x40
 800be8e:	4628      	mov	r0, r5
 800be90:	f002 f8a6 	bl	800dfe0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800be94:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 800be98:	f1b8 0f00 	cmp.w	r8, #0
 800be9c:	f000 811a 	beq.w	800c0d4 <read_submessage_list+0x2b8>
 800bea0:	f000 ffde 	bl	800ce60 <uxr_nanos>
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 800beac:	2100      	movs	r1, #0
 800beae:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800beb0:	9006      	str	r0, [sp, #24]
 800beb2:	468c      	mov	ip, r1
 800beb4:	9815      	ldr	r0, [sp, #84]	; 0x54
 800beb6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800beba:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800bebc:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 800bec0:	468c      	mov	ip, r1
 800bec2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bec4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 800bec8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 800becc:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 800bed0:	fbc7 0106 	smlal	r0, r1, r7, r6
 800bed4:	e9cd 0100 	strd	r0, r1, [sp]
 800bed8:	4620      	mov	r0, r4
 800beda:	47c0      	blx	r8
 800bedc:	f04f 0301 	mov.w	r3, #1
 800bee0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800bee4:	e7a1      	b.n	800be2a <read_submessage_list+0xe>
 800bee6:	a910      	add	r1, sp, #64	; 0x40
 800bee8:	4628      	mov	r0, r5
 800beea:	f002 f865 	bl	800dfb8 <uxr_deserialize_HEARTBEAT_Payload>
 800beee:	2100      	movs	r1, #0
 800bef0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800bef4:	f000 fe42 	bl	800cb7c <uxr_stream_id_from_raw>
 800bef8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800befc:	900f      	str	r0, [sp, #60]	; 0x3c
 800befe:	f104 0008 	add.w	r0, r4, #8
 800bf02:	4641      	mov	r1, r8
 800bf04:	f000 ff28 	bl	800cd58 <uxr_get_input_reliable_stream>
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d08e      	beq.n	800be2a <read_submessage_list+0xe>
 800bf0c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800bf10:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800bf14:	f004 fdb4 	bl	8010a80 <uxr_process_heartbeat>
 800bf18:	4642      	mov	r2, r8
 800bf1a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f7ff fdf8 	bl	800bb14 <write_submessage_acknack.isra.0>
 800bf24:	e781      	b.n	800be2a <read_submessage_list+0xe>
 800bf26:	a910      	add	r1, sp, #64	; 0x40
 800bf28:	4628      	mov	r0, r5
 800bf2a:	f002 f81d 	bl	800df68 <uxr_deserialize_ACKNACK_Payload>
 800bf2e:	2100      	movs	r1, #0
 800bf30:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800bf34:	f000 fe22 	bl	800cb7c <uxr_stream_id_from_raw>
 800bf38:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800bf3c:	900d      	str	r0, [sp, #52]	; 0x34
 800bf3e:	f104 0008 	add.w	r0, r4, #8
 800bf42:	f000 fef3 	bl	800cd2c <uxr_get_output_reliable_stream>
 800bf46:	4680      	mov	r8, r0
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	f43f af6e 	beq.w	800be2a <read_submessage_list+0xe>
 800bf4e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800bf52:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800bf56:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800bf5a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800bf5e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800bf62:	b289      	uxth	r1, r1
 800bf64:	f005 f8ec 	bl	8011140 <uxr_process_acknack>
 800bf68:	4640      	mov	r0, r8
 800bf6a:	f005 f8ad 	bl	80110c8 <uxr_begin_output_nack_buffer_it>
 800bf6e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800bf72:	e005      	b.n	800bf80 <read_submessage_list+0x164>
 800bf74:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bf76:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800bf7a:	e9d3 0900 	ldrd	r0, r9, [r3]
 800bf7e:	47c8      	blx	r9
 800bf80:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800bf84:	aa0f      	add	r2, sp, #60	; 0x3c
 800bf86:	4651      	mov	r1, sl
 800bf88:	4640      	mov	r0, r8
 800bf8a:	f005 f89f 	bl	80110cc <uxr_next_reliable_nack_buffer_to_send>
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	d1f0      	bne.n	800bf74 <read_submessage_list+0x158>
 800bf92:	e74a      	b.n	800be2a <read_submessage_list+0xe>
 800bf94:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800bf98:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800bf9c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800bfa6:	4651      	mov	r1, sl
 800bfa8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800bfac:	f1a8 0804 	sub.w	r8, r8, #4
 800bfb0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800bfb4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800bfb8:	fa1f f888 	uxth.w	r8, r8
 800bfbc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bfc0:	f009 090e 	and.w	r9, r9, #14
 800bfc4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800bfc8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800bfcc:	f001 fd2e 	bl	800da2c <uxr_deserialize_BaseObjectRequest>
 800bfd0:	4650      	mov	r0, sl
 800bfd2:	a90f      	add	r1, sp, #60	; 0x3c
 800bfd4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800bfd8:	f000 fd90 	bl	800cafc <uxr_parse_base_object_request>
 800bfdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bfde:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800bfe2:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800bfe6:	9110      	str	r1, [sp, #64]	; 0x40
 800bfe8:	f1bb 0f00 	cmp.w	fp, #0
 800bfec:	d006      	beq.n	800bffc <read_submessage_list+0x1e0>
 800bfee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800bff2:	4652      	mov	r2, sl
 800bff4:	4620      	mov	r0, r4
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	2300      	movs	r3, #0
 800bffa:	47d8      	blx	fp
 800bffc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800bffe:	b182      	cbz	r2, 800c022 <read_submessage_list+0x206>
 800c000:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800c002:	f04f 0c00 	mov.w	ip, #0
 800c006:	3902      	subs	r1, #2
 800c008:	e003      	b.n	800c012 <read_submessage_list+0x1f6>
 800c00a:	f10c 0c01 	add.w	ip, ip, #1
 800c00e:	4594      	cmp	ip, r2
 800c010:	d007      	beq.n	800c022 <read_submessage_list+0x206>
 800c012:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 800c016:	4553      	cmp	r3, sl
 800c018:	d1f7      	bne.n	800c00a <read_submessage_list+0x1ee>
 800c01a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c01c:	2200      	movs	r2, #0
 800c01e:	f803 200c 	strb.w	r2, [r3, ip]
 800c022:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800c026:	464b      	mov	r3, r9
 800c028:	4642      	mov	r2, r8
 800c02a:	4620      	mov	r0, r4
 800c02c:	9102      	str	r1, [sp, #8]
 800c02e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c030:	9101      	str	r1, [sp, #4]
 800c032:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c034:	9100      	str	r1, [sp, #0]
 800c036:	4629      	mov	r1, r5
 800c038:	f005 f90a 	bl	8011250 <read_submessage_format>
 800c03c:	e6f5      	b.n	800be2a <read_submessage_list+0xe>
 800c03e:	4629      	mov	r1, r5
 800c040:	4620      	mov	r0, r4
 800c042:	f7ff fea3 	bl	800bd8c <read_submessage_info>
 800c046:	e6f0      	b.n	800be2a <read_submessage_list+0xe>
 800c048:	2a00      	cmp	r2, #0
 800c04a:	d03e      	beq.n	800c0ca <read_submessage_list+0x2ae>
 800c04c:	a910      	add	r1, sp, #64	; 0x40
 800c04e:	4628      	mov	r0, r5
 800c050:	f001 fee2 	bl	800de18 <uxr_deserialize_STATUS_Payload>
 800c054:	a90e      	add	r1, sp, #56	; 0x38
 800c056:	aa0d      	add	r2, sp, #52	; 0x34
 800c058:	a810      	add	r0, sp, #64	; 0x40
 800c05a:	f000 fd4f 	bl	800cafc <uxr_parse_base_object_request>
 800c05e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c060:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800c064:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800c068:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 800c06c:	910f      	str	r1, [sp, #60]	; 0x3c
 800c06e:	f1ba 0f00 	cmp.w	sl, #0
 800c072:	d006      	beq.n	800c082 <read_submessage_list+0x266>
 800c074:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c078:	4642      	mov	r2, r8
 800c07a:	4620      	mov	r0, r4
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	464b      	mov	r3, r9
 800c080:	47d0      	blx	sl
 800c082:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800c084:	2a00      	cmp	r2, #0
 800c086:	f43f aed0 	beq.w	800be2a <read_submessage_list+0xe>
 800c08a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c08c:	2100      	movs	r1, #0
 800c08e:	3802      	subs	r0, #2
 800c090:	e003      	b.n	800c09a <read_submessage_list+0x27e>
 800c092:	3101      	adds	r1, #1
 800c094:	4291      	cmp	r1, r2
 800c096:	f43f aec8 	beq.w	800be2a <read_submessage_list+0xe>
 800c09a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800c09e:	4543      	cmp	r3, r8
 800c0a0:	d1f7      	bne.n	800c092 <read_submessage_list+0x276>
 800c0a2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c0a4:	f803 9001 	strb.w	r9, [r3, r1]
 800c0a8:	e6bf      	b.n	800be2a <read_submessage_list+0xe>
 800c0aa:	2a00      	cmp	r2, #0
 800c0ac:	f47f aebd 	bne.w	800be2a <read_submessage_list+0xe>
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f000 fc66 	bl	800c984 <uxr_read_create_session_status>
 800c0b8:	e6b7      	b.n	800be2a <read_submessage_list+0xe>
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	4620      	mov	r0, r4
 800c0be:	f7ff fcf3 	bl	800baa8 <read_submessage_get_info>
 800c0c2:	e6b2      	b.n	800be2a <read_submessage_list+0xe>
 800c0c4:	b017      	add	sp, #92	; 0x5c
 800c0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 fc67 	bl	800c9a0 <uxr_read_delete_session_status>
 800c0d2:	e6aa      	b.n	800be2a <read_submessage_list+0xe>
 800c0d4:	f000 fec4 	bl	800ce60 <uxr_nanos>
 800c0d8:	4642      	mov	r2, r8
 800c0da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c0dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0de:	fbc7 3206 	smlal	r3, r2, r7, r6
 800c0e2:	1818      	adds	r0, r3, r0
 800c0e4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800c0e6:	eb42 0101 	adc.w	r1, r2, r1
 800c0ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c0ec:	4642      	mov	r2, r8
 800c0ee:	fbc7 3206 	smlal	r3, r2, r7, r6
 800c0f2:	469c      	mov	ip, r3
 800c0f4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 800c0f8:	fbc3 7806 	smlal	r7, r8, r3, r6
 800c0fc:	4643      	mov	r3, r8
 800c0fe:	eb1c 0c07 	adds.w	ip, ip, r7
 800c102:	eb42 0203 	adc.w	r2, r2, r3
 800c106:	ebb0 030c 	subs.w	r3, r0, ip
 800c10a:	eb61 0202 	sbc.w	r2, r1, r2
 800c10e:	2a00      	cmp	r2, #0
 800c110:	db08      	blt.n	800c124 <read_submessage_list+0x308>
 800c112:	085b      	lsrs	r3, r3, #1
 800c114:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 800c118:	1052      	asrs	r2, r2, #1
 800c11a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800c11e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 800c122:	e6db      	b.n	800bedc <read_submessage_list+0xc0>
 800c124:	3301      	adds	r3, #1
 800c126:	f142 0200 	adc.w	r2, r2, #0
 800c12a:	e7f2      	b.n	800c112 <read_submessage_list+0x2f6>
 800c12c:	3b9aca00 	.word	0x3b9aca00

0800c130 <listen_message_reliably>:
 800c130:	1e0b      	subs	r3, r1, #0
 800c132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c136:	bfb8      	it	lt
 800c138:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800c13c:	b09d      	sub	sp, #116	; 0x74
 800c13e:	4680      	mov	r8, r0
 800c140:	9305      	str	r3, [sp, #20]
 800c142:	f000 fe71 	bl	800ce28 <uxr_millis>
 800c146:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800c14a:	4681      	mov	r9, r0
 800c14c:	2a00      	cmp	r2, #0
 800c14e:	f000 809a 	beq.w	800c286 <listen_message_reliably+0x156>
 800c152:	2600      	movs	r6, #0
 800c154:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c158:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800c15c:	460f      	mov	r7, r1
 800c15e:	4630      	mov	r0, r6
 800c160:	9303      	str	r3, [sp, #12]
 800c162:	e00e      	b.n	800c182 <listen_message_reliably+0x52>
 800c164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c166:	3601      	adds	r6, #1
 800c168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c16a:	455a      	cmp	r2, fp
 800c16c:	9903      	ldr	r1, [sp, #12]
 800c16e:	b2f0      	uxtb	r0, r6
 800c170:	eb73 0101 	sbcs.w	r1, r3, r1
 800c174:	da01      	bge.n	800c17a <listen_message_reliably+0x4a>
 800c176:	4693      	mov	fp, r2
 800c178:	9303      	str	r3, [sp, #12]
 800c17a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800c17e:	4283      	cmp	r3, r0
 800c180:	d95f      	bls.n	800c242 <listen_message_reliably+0x112>
 800c182:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800c186:	2102      	movs	r1, #2
 800c188:	2201      	movs	r2, #1
 800c18a:	00e4      	lsls	r4, r4, #3
 800c18c:	f000 fcc8 	bl	800cb20 <uxr_stream_id>
 800c190:	4601      	mov	r1, r0
 800c192:	f104 0520 	add.w	r5, r4, #32
 800c196:	463b      	mov	r3, r7
 800c198:	464a      	mov	r2, r9
 800c19a:	9109      	str	r1, [sp, #36]	; 0x24
 800c19c:	4445      	add	r5, r8
 800c19e:	4628      	mov	r0, r5
 800c1a0:	f004 ff66 	bl	8011070 <uxr_update_output_stream_heartbeat_timestamp>
 800c1a4:	eb08 0304 	add.w	r3, r8, r4
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	d0db      	beq.n	800c164 <listen_message_reliably+0x34>
 800c1ac:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800c1b0:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800c1b4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c1b8:	4640      	mov	r0, r8
 800c1ba:	3501      	adds	r5, #1
 800c1bc:	4444      	add	r4, r8
 800c1be:	9304      	str	r3, [sp, #16]
 800c1c0:	f000 fc74 	bl	800caac <uxr_session_header_offset>
 800c1c4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	2211      	movs	r2, #17
 800c1cc:	a90c      	add	r1, sp, #48	; 0x30
 800c1ce:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800c1d2:	9000      	str	r0, [sp, #0]
 800c1d4:	4650      	mov	r0, sl
 800c1d6:	3601      	adds	r6, #1
 800c1d8:	f7fd f8ee 	bl	80093b8 <ucdr_init_buffer_origin_offset>
 800c1dc:	2300      	movs	r3, #0
 800c1de:	2205      	movs	r2, #5
 800c1e0:	210b      	movs	r1, #11
 800c1e2:	4650      	mov	r0, sl
 800c1e4:	f000 fdda 	bl	800cd9c <uxr_buffer_submessage_header>
 800c1e8:	2101      	movs	r1, #1
 800c1ea:	8968      	ldrh	r0, [r5, #10]
 800c1ec:	f005 f8fa 	bl	80113e4 <uxr_seq_num_add>
 800c1f0:	892b      	ldrh	r3, [r5, #8]
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	a90a      	add	r1, sp, #40	; 0x28
 800c1f6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800c1fa:	4650      	mov	r0, sl
 800c1fc:	9b04      	ldr	r3, [sp, #16]
 800c1fe:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800c202:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800c206:	f001 fec3 	bl	800df90 <uxr_serialize_HEARTBEAT_Payload>
 800c20a:	2200      	movs	r2, #0
 800c20c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c20e:	4640      	mov	r0, r8
 800c210:	4611      	mov	r1, r2
 800c212:	f000 fbf7 	bl	800ca04 <uxr_stamp_session_header>
 800c216:	4650      	mov	r0, sl
 800c218:	f7fd f90e 	bl	8009438 <ucdr_buffer_length>
 800c21c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800c220:	4602      	mov	r2, r0
 800c222:	a90c      	add	r1, sp, #48	; 0x30
 800c224:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c228:	47a8      	blx	r5
 800c22a:	9903      	ldr	r1, [sp, #12]
 800c22c:	b2f0      	uxtb	r0, r6
 800c22e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800c232:	455a      	cmp	r2, fp
 800c234:	eb73 0101 	sbcs.w	r1, r3, r1
 800c238:	db9d      	blt.n	800c176 <listen_message_reliably+0x46>
 800c23a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800c23e:	4283      	cmp	r3, r0
 800c240:	d89f      	bhi.n	800c182 <listen_message_reliably+0x52>
 800c242:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c246:	9a03      	ldr	r2, [sp, #12]
 800c248:	429a      	cmp	r2, r3
 800c24a:	bf08      	it	eq
 800c24c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800c250:	d019      	beq.n	800c286 <listen_message_reliably+0x156>
 800c252:	ebab 0309 	sub.w	r3, fp, r9
 800c256:	2b00      	cmp	r3, #0
 800c258:	9d05      	ldr	r5, [sp, #20]
 800c25a:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 800c25e:	aa08      	add	r2, sp, #32
 800c260:	bf08      	it	eq
 800c262:	2301      	moveq	r3, #1
 800c264:	a907      	add	r1, sp, #28
 800c266:	6884      	ldr	r4, [r0, #8]
 800c268:	429d      	cmp	r5, r3
 800c26a:	6800      	ldr	r0, [r0, #0]
 800c26c:	bfa8      	it	ge
 800c26e:	461d      	movge	r5, r3
 800c270:	462b      	mov	r3, r5
 800c272:	47a0      	blx	r4
 800c274:	b948      	cbnz	r0, 800c28a <listen_message_reliably+0x15a>
 800c276:	9b05      	ldr	r3, [sp, #20]
 800c278:	1b5b      	subs	r3, r3, r5
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	9305      	str	r3, [sp, #20]
 800c27e:	f73f af60 	bgt.w	800c142 <listen_message_reliably+0x12>
 800c282:	4604      	mov	r4, r0
 800c284:	e012      	b.n	800c2ac <listen_message_reliably+0x17c>
 800c286:	9b05      	ldr	r3, [sp, #20]
 800c288:	e7e5      	b.n	800c256 <listen_message_reliably+0x126>
 800c28a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800c28e:	4604      	mov	r4, r0
 800c290:	2500      	movs	r5, #0
 800c292:	a80c      	add	r0, sp, #48	; 0x30
 800c294:	f7fd f8a2 	bl	80093dc <ucdr_init_buffer>
 800c298:	f10d 031a 	add.w	r3, sp, #26
 800c29c:	aa06      	add	r2, sp, #24
 800c29e:	a90c      	add	r1, sp, #48	; 0x30
 800c2a0:	4640      	mov	r0, r8
 800c2a2:	f88d 5018 	strb.w	r5, [sp, #24]
 800c2a6:	f000 fbc1 	bl	800ca2c <uxr_read_session_header>
 800c2aa:	b918      	cbnz	r0, 800c2b4 <listen_message_reliably+0x184>
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	b01d      	add	sp, #116	; 0x74
 800c2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c2ba:	f000 fc5f 	bl	800cb7c <uxr_stream_id_from_raw>
 800c2be:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800c2c2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800c2c6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800c2ca:	2e01      	cmp	r6, #1
 800c2cc:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800c2d0:	d04b      	beq.n	800c36a <listen_message_reliably+0x23a>
 800c2d2:	2e02      	cmp	r6, #2
 800c2d4:	d00f      	beq.n	800c2f6 <listen_message_reliably+0x1c6>
 800c2d6:	2e00      	cmp	r6, #0
 800c2d8:	d1e8      	bne.n	800c2ac <listen_message_reliably+0x17c>
 800c2da:	4631      	mov	r1, r6
 800c2dc:	4630      	mov	r0, r6
 800c2de:	f000 fc4d 	bl	800cb7c <uxr_stream_id_from_raw>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	a90c      	add	r1, sp, #48	; 0x30
 800c2e6:	4640      	mov	r0, r8
 800c2e8:	920a      	str	r2, [sp, #40]	; 0x28
 800c2ea:	f7ff fd97 	bl	800be1c <read_submessage_list>
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	b01d      	add	sp, #116	; 0x74
 800c2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f6:	4629      	mov	r1, r5
 800c2f8:	f108 0008 	add.w	r0, r8, #8
 800c2fc:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800c300:	f000 fd2a 	bl	800cd58 <uxr_get_input_reliable_stream>
 800c304:	4607      	mov	r7, r0
 800c306:	b338      	cbz	r0, 800c358 <listen_message_reliably+0x228>
 800c308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c30a:	a80c      	add	r0, sp, #48	; 0x30
 800c30c:	9203      	str	r2, [sp, #12]
 800c30e:	f7fd f897 	bl	8009440 <ucdr_buffer_remaining>
 800c312:	4603      	mov	r3, r0
 800c314:	f10d 0019 	add.w	r0, sp, #25
 800c318:	9a03      	ldr	r2, [sp, #12]
 800c31a:	4651      	mov	r1, sl
 800c31c:	9000      	str	r0, [sp, #0]
 800c31e:	4638      	mov	r0, r7
 800c320:	f004 fab2 	bl	8010888 <uxr_receive_reliable_message>
 800c324:	b1c0      	cbz	r0, 800c358 <listen_message_reliably+0x228>
 800c326:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c32a:	b393      	cbz	r3, 800c392 <listen_message_reliably+0x262>
 800c32c:	ae14      	add	r6, sp, #80	; 0x50
 800c32e:	f04f 0a02 	mov.w	sl, #2
 800c332:	e00a      	b.n	800c34a <listen_message_reliably+0x21a>
 800c334:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800c338:	4631      	mov	r1, r6
 800c33a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800c33e:	4640      	mov	r0, r8
 800c340:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800c344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c346:	f7ff fd69 	bl	800be1c <read_submessage_list>
 800c34a:	2204      	movs	r2, #4
 800c34c:	4631      	mov	r1, r6
 800c34e:	4638      	mov	r0, r7
 800c350:	f004 fb1c 	bl	801098c <uxr_next_input_reliable_buffer_available>
 800c354:	2800      	cmp	r0, #0
 800c356:	d1ed      	bne.n	800c334 <listen_message_reliably+0x204>
 800c358:	4640      	mov	r0, r8
 800c35a:	462a      	mov	r2, r5
 800c35c:	4649      	mov	r1, r9
 800c35e:	f7ff fbd9 	bl	800bb14 <write_submessage_acknack.isra.0>
 800c362:	4620      	mov	r0, r4
 800c364:	b01d      	add	sp, #116	; 0x74
 800c366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c36a:	4629      	mov	r1, r5
 800c36c:	f108 0008 	add.w	r0, r8, #8
 800c370:	f000 fce8 	bl	800cd44 <uxr_get_input_best_effort_stream>
 800c374:	2800      	cmp	r0, #0
 800c376:	d099      	beq.n	800c2ac <listen_message_reliably+0x17c>
 800c378:	4651      	mov	r1, sl
 800c37a:	f004 f9fb 	bl	8010774 <uxr_receive_best_effort_message>
 800c37e:	2800      	cmp	r0, #0
 800c380:	d094      	beq.n	800c2ac <listen_message_reliably+0x17c>
 800c382:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800c386:	a90c      	add	r1, sp, #48	; 0x30
 800c388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c38a:	4640      	mov	r0, r8
 800c38c:	f7ff fd46 	bl	800be1c <read_submessage_list>
 800c390:	e78c      	b.n	800c2ac <listen_message_reliably+0x17c>
 800c392:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800c396:	a90c      	add	r1, sp, #48	; 0x30
 800c398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c39a:	4640      	mov	r0, r8
 800c39c:	f7ff fd3e 	bl	800be1c <read_submessage_list>
 800c3a0:	e7c4      	b.n	800c32c <listen_message_reliably+0x1fc>
 800c3a2:	bf00      	nop

0800c3a4 <uxr_run_session_until_confirm_delivery>:
 800c3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a8:	4606      	mov	r6, r0
 800c3aa:	460d      	mov	r5, r1
 800c3ac:	f000 fd3c 	bl	800ce28 <uxr_millis>
 800c3b0:	4607      	mov	r7, r0
 800c3b2:	4630      	mov	r0, r6
 800c3b4:	f106 0808 	add.w	r8, r6, #8
 800c3b8:	f7ff fc74 	bl	800bca4 <uxr_flash_output_streams>
 800c3bc:	2d00      	cmp	r5, #0
 800c3be:	db10      	blt.n	800c3e2 <uxr_run_session_until_confirm_delivery+0x3e>
 800c3c0:	462c      	mov	r4, r5
 800c3c2:	e006      	b.n	800c3d2 <uxr_run_session_until_confirm_delivery+0x2e>
 800c3c4:	f7ff feb4 	bl	800c130 <listen_message_reliably>
 800c3c8:	f000 fd2e 	bl	800ce28 <uxr_millis>
 800c3cc:	1bc3      	subs	r3, r0, r7
 800c3ce:	1aec      	subs	r4, r5, r3
 800c3d0:	d407      	bmi.n	800c3e2 <uxr_run_session_until_confirm_delivery+0x3e>
 800c3d2:	4640      	mov	r0, r8
 800c3d4:	f000 fccc 	bl	800cd70 <uxr_output_streams_confirmed>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	4621      	mov	r1, r4
 800c3dc:	4630      	mov	r0, r6
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d0f0      	beq.n	800c3c4 <uxr_run_session_until_confirm_delivery+0x20>
 800c3e2:	4640      	mov	r0, r8
 800c3e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e8:	f000 bcc2 	b.w	800cd70 <uxr_output_streams_confirmed>

0800c3ec <uxr_run_session_until_all_status>:
 800c3ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800c3f4:	4606      	mov	r6, r0
 800c3f6:	4688      	mov	r8, r1
 800c3f8:	4692      	mov	sl, r2
 800c3fa:	461f      	mov	r7, r3
 800c3fc:	f7ff fc52 	bl	800bca4 <uxr_flash_output_streams>
 800c400:	f1bb 0f00 	cmp.w	fp, #0
 800c404:	d004      	beq.n	800c410 <uxr_run_session_until_all_status+0x24>
 800c406:	465a      	mov	r2, fp
 800c408:	21ff      	movs	r1, #255	; 0xff
 800c40a:	4638      	mov	r0, r7
 800c40c:	f006 fc4a 	bl	8012ca4 <memset>
 800c410:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 800c414:	1e7d      	subs	r5, r7, #1
 800c416:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 800c41a:	f000 fd05 	bl	800ce28 <uxr_millis>
 800c41e:	4641      	mov	r1, r8
 800c420:	4681      	mov	r9, r0
 800c422:	4630      	mov	r0, r6
 800c424:	f7ff fe84 	bl	800c130 <listen_message_reliably>
 800c428:	f000 fcfe 	bl	800ce28 <uxr_millis>
 800c42c:	eba0 0009 	sub.w	r0, r0, r9
 800c430:	eba8 0100 	sub.w	r1, r8, r0
 800c434:	f1bb 0f00 	cmp.w	fp, #0
 800c438:	d029      	beq.n	800c48e <uxr_run_session_until_all_status+0xa2>
 800c43a:	46ae      	mov	lr, r5
 800c43c:	f04f 0c00 	mov.w	ip, #0
 800c440:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800c444:	2cff      	cmp	r4, #255	; 0xff
 800c446:	d015      	beq.n	800c474 <uxr_run_session_until_all_status+0x88>
 800c448:	f10c 0c01 	add.w	ip, ip, #1
 800c44c:	45e3      	cmp	fp, ip
 800c44e:	d8f7      	bhi.n	800c440 <uxr_run_session_until_all_status+0x54>
 800c450:	2300      	movs	r3, #0
 800c452:	67f3      	str	r3, [r6, #124]	; 0x7c
 800c454:	e000      	b.n	800c458 <uxr_run_session_until_all_status+0x6c>
 800c456:	b158      	cbz	r0, 800c470 <uxr_run_session_until_all_status+0x84>
 800c458:	462b      	mov	r3, r5
 800c45a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 800c45e:	3302      	adds	r3, #2
 800c460:	2801      	cmp	r0, #1
 800c462:	eba3 0307 	sub.w	r3, r3, r7
 800c466:	bf8c      	ite	hi
 800c468:	2000      	movhi	r0, #0
 800c46a:	2001      	movls	r0, #1
 800c46c:	459b      	cmp	fp, r3
 800c46e:	d8f2      	bhi.n	800c456 <uxr_run_session_until_all_status+0x6a>
 800c470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c474:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 800c478:	f10c 0c01 	add.w	ip, ip, #1
 800c47c:	45dc      	cmp	ip, fp
 800c47e:	d201      	bcs.n	800c484 <uxr_run_session_until_all_status+0x98>
 800c480:	2b00      	cmp	r3, #0
 800c482:	d0dd      	beq.n	800c440 <uxr_run_session_until_all_status+0x54>
 800c484:	2900      	cmp	r1, #0
 800c486:	dde3      	ble.n	800c450 <uxr_run_session_until_all_status+0x64>
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d1ca      	bne.n	800c422 <uxr_run_session_until_all_status+0x36>
 800c48c:	e7e0      	b.n	800c450 <uxr_run_session_until_all_status+0x64>
 800c48e:	2001      	movs	r0, #1
 800c490:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 800c494:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c498 <wait_session_status>:
 800c498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49c:	4604      	mov	r4, r0
 800c49e:	b09d      	sub	sp, #116	; 0x74
 800c4a0:	20ff      	movs	r0, #255	; 0xff
 800c4a2:	9303      	str	r3, [sp, #12]
 800c4a4:	7160      	strb	r0, [r4, #5]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	f000 80b6 	beq.w	800c618 <wait_session_status+0x180>
 800c4ac:	4689      	mov	r9, r1
 800c4ae:	4692      	mov	sl, r2
 800c4b0:	f04f 0b00 	mov.w	fp, #0
 800c4b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c4b6:	4652      	mov	r2, sl
 800c4b8:	4649      	mov	r1, r9
 800c4ba:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c4be:	47a8      	blx	r5
 800c4c0:	f000 fcb2 	bl	800ce28 <uxr_millis>
 800c4c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c4c8:	4605      	mov	r5, r0
 800c4ca:	e009      	b.n	800c4e0 <wait_session_status+0x48>
 800c4cc:	f000 fcac 	bl	800ce28 <uxr_millis>
 800c4d0:	1b40      	subs	r0, r0, r5
 800c4d2:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	dd40      	ble.n	800c55c <wait_session_status+0xc4>
 800c4da:	7960      	ldrb	r0, [r4, #5]
 800c4dc:	28ff      	cmp	r0, #255	; 0xff
 800c4de:	d145      	bne.n	800c56c <wait_session_status+0xd4>
 800c4e0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c4e2:	a908      	add	r1, sp, #32
 800c4e4:	6896      	ldr	r6, [r2, #8]
 800c4e6:	6810      	ldr	r0, [r2, #0]
 800c4e8:	aa09      	add	r2, sp, #36	; 0x24
 800c4ea:	47b0      	blx	r6
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	d0ed      	beq.n	800c4cc <wait_session_status+0x34>
 800c4f0:	a80c      	add	r0, sp, #48	; 0x30
 800c4f2:	2600      	movs	r6, #0
 800c4f4:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800c4f8:	f7fc ff70 	bl	80093dc <ucdr_init_buffer>
 800c4fc:	f10d 031e 	add.w	r3, sp, #30
 800c500:	aa07      	add	r2, sp, #28
 800c502:	a90c      	add	r1, sp, #48	; 0x30
 800c504:	4620      	mov	r0, r4
 800c506:	f88d 601c 	strb.w	r6, [sp, #28]
 800c50a:	f000 fa8f 	bl	800ca2c <uxr_read_session_header>
 800c50e:	2800      	cmp	r0, #0
 800c510:	d0dc      	beq.n	800c4cc <wait_session_status+0x34>
 800c512:	4631      	mov	r1, r6
 800c514:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800c518:	f000 fb30 	bl	800cb7c <uxr_stream_id_from_raw>
 800c51c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800c520:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800c524:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800c528:	2f01      	cmp	r7, #1
 800c52a:	9302      	str	r3, [sp, #8]
 800c52c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800c530:	d05c      	beq.n	800c5ec <wait_session_status+0x154>
 800c532:	2f02      	cmp	r7, #2
 800c534:	d020      	beq.n	800c578 <wait_session_status+0xe0>
 800c536:	2f00      	cmp	r7, #0
 800c538:	d1c8      	bne.n	800c4cc <wait_session_status+0x34>
 800c53a:	4639      	mov	r1, r7
 800c53c:	4638      	mov	r0, r7
 800c53e:	f000 fb1d 	bl	800cb7c <uxr_stream_id_from_raw>
 800c542:	a90c      	add	r1, sp, #48	; 0x30
 800c544:	4602      	mov	r2, r0
 800c546:	900b      	str	r0, [sp, #44]	; 0x2c
 800c548:	4620      	mov	r0, r4
 800c54a:	f7ff fc67 	bl	800be1c <read_submessage_list>
 800c54e:	f000 fc6b 	bl	800ce28 <uxr_millis>
 800c552:	1b40      	subs	r0, r0, r5
 800c554:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800c558:	2b00      	cmp	r3, #0
 800c55a:	dcbe      	bgt.n	800c4da <wait_session_status+0x42>
 800c55c:	f10b 0b01 	add.w	fp, fp, #1
 800c560:	9b03      	ldr	r3, [sp, #12]
 800c562:	7960      	ldrb	r0, [r4, #5]
 800c564:	455b      	cmp	r3, fp
 800c566:	d001      	beq.n	800c56c <wait_session_status+0xd4>
 800c568:	28ff      	cmp	r0, #255	; 0xff
 800c56a:	d0a3      	beq.n	800c4b4 <wait_session_status+0x1c>
 800c56c:	38ff      	subs	r0, #255	; 0xff
 800c56e:	bf18      	it	ne
 800c570:	2001      	movne	r0, #1
 800c572:	b01d      	add	sp, #116	; 0x74
 800c574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c578:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800c57c:	4631      	mov	r1, r6
 800c57e:	f104 0008 	add.w	r0, r4, #8
 800c582:	9304      	str	r3, [sp, #16]
 800c584:	f000 fbe8 	bl	800cd58 <uxr_get_input_reliable_stream>
 800c588:	4680      	mov	r8, r0
 800c58a:	b348      	cbz	r0, 800c5e0 <wait_session_status+0x148>
 800c58c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c58e:	a80c      	add	r0, sp, #48	; 0x30
 800c590:	9205      	str	r2, [sp, #20]
 800c592:	f7fc ff55 	bl	8009440 <ucdr_buffer_remaining>
 800c596:	4603      	mov	r3, r0
 800c598:	f10d 001d 	add.w	r0, sp, #29
 800c59c:	9a05      	ldr	r2, [sp, #20]
 800c59e:	9000      	str	r0, [sp, #0]
 800c5a0:	4640      	mov	r0, r8
 800c5a2:	9902      	ldr	r1, [sp, #8]
 800c5a4:	f004 f970 	bl	8010888 <uxr_receive_reliable_message>
 800c5a8:	b1d0      	cbz	r0, 800c5e0 <wait_session_status+0x148>
 800c5aa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d03a      	beq.n	800c628 <wait_session_status+0x190>
 800c5b2:	9f04      	ldr	r7, [sp, #16]
 800c5b4:	e00a      	b.n	800c5cc <wait_session_status+0x134>
 800c5b6:	f04f 0302 	mov.w	r3, #2
 800c5ba:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800c5be:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800c5c2:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800c5c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c5c8:	f7ff fc28 	bl	800be1c <read_submessage_list>
 800c5cc:	a914      	add	r1, sp, #80	; 0x50
 800c5ce:	2204      	movs	r2, #4
 800c5d0:	4640      	mov	r0, r8
 800c5d2:	f004 f9db 	bl	801098c <uxr_next_input_reliable_buffer_available>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	a914      	add	r1, sp, #80	; 0x50
 800c5da:	4620      	mov	r0, r4
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d1ea      	bne.n	800c5b6 <wait_session_status+0x11e>
 800c5e0:	4632      	mov	r2, r6
 800c5e2:	9904      	ldr	r1, [sp, #16]
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	f7ff fa95 	bl	800bb14 <write_submessage_acknack.isra.0>
 800c5ea:	e76f      	b.n	800c4cc <wait_session_status+0x34>
 800c5ec:	4631      	mov	r1, r6
 800c5ee:	f104 0008 	add.w	r0, r4, #8
 800c5f2:	f000 fba7 	bl	800cd44 <uxr_get_input_best_effort_stream>
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	f43f af68 	beq.w	800c4cc <wait_session_status+0x34>
 800c5fc:	9902      	ldr	r1, [sp, #8]
 800c5fe:	f004 f8b9 	bl	8010774 <uxr_receive_best_effort_message>
 800c602:	2800      	cmp	r0, #0
 800c604:	f43f af62 	beq.w	800c4cc <wait_session_status+0x34>
 800c608:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800c60c:	a90c      	add	r1, sp, #48	; 0x30
 800c60e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c610:	4620      	mov	r0, r4
 800c612:	f7ff fc03 	bl	800be1c <read_submessage_list>
 800c616:	e759      	b.n	800c4cc <wait_session_status+0x34>
 800c618:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c61a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c61e:	47a0      	blx	r4
 800c620:	2001      	movs	r0, #1
 800c622:	b01d      	add	sp, #116	; 0x74
 800c624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c628:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800c62c:	a90c      	add	r1, sp, #48	; 0x30
 800c62e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c630:	4620      	mov	r0, r4
 800c632:	f7ff fbf3 	bl	800be1c <read_submessage_list>
 800c636:	e7bc      	b.n	800c5b2 <wait_session_status+0x11a>

0800c638 <uxr_delete_session_retries>:
 800c638:	b530      	push	{r4, r5, lr}
 800c63a:	b08f      	sub	sp, #60	; 0x3c
 800c63c:	4604      	mov	r4, r0
 800c63e:	460d      	mov	r5, r1
 800c640:	f000 fa34 	bl	800caac <uxr_session_header_offset>
 800c644:	2300      	movs	r3, #0
 800c646:	2210      	movs	r2, #16
 800c648:	a902      	add	r1, sp, #8
 800c64a:	9000      	str	r0, [sp, #0]
 800c64c:	a806      	add	r0, sp, #24
 800c64e:	f7fc feb3 	bl	80093b8 <ucdr_init_buffer_origin_offset>
 800c652:	a906      	add	r1, sp, #24
 800c654:	4620      	mov	r0, r4
 800c656:	f000 f979 	bl	800c94c <uxr_buffer_delete_session>
 800c65a:	2200      	movs	r2, #0
 800c65c:	9b06      	ldr	r3, [sp, #24]
 800c65e:	4620      	mov	r0, r4
 800c660:	4611      	mov	r1, r2
 800c662:	f000 f9cf 	bl	800ca04 <uxr_stamp_session_header>
 800c666:	a806      	add	r0, sp, #24
 800c668:	f7fc fee6 	bl	8009438 <ucdr_buffer_length>
 800c66c:	462b      	mov	r3, r5
 800c66e:	4602      	mov	r2, r0
 800c670:	a902      	add	r1, sp, #8
 800c672:	4620      	mov	r0, r4
 800c674:	f7ff ff10 	bl	800c498 <wait_session_status>
 800c678:	b118      	cbz	r0, 800c682 <uxr_delete_session_retries+0x4a>
 800c67a:	7960      	ldrb	r0, [r4, #5]
 800c67c:	fab0 f080 	clz	r0, r0
 800c680:	0940      	lsrs	r0, r0, #5
 800c682:	b00f      	add	sp, #60	; 0x3c
 800c684:	bd30      	pop	{r4, r5, pc}
 800c686:	bf00      	nop

0800c688 <uxr_create_session>:
 800c688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68c:	f100 0b08 	add.w	fp, r0, #8
 800c690:	4604      	mov	r4, r0
 800c692:	b0ab      	sub	sp, #172	; 0xac
 800c694:	4658      	mov	r0, fp
 800c696:	465e      	mov	r6, fp
 800c698:	f000 faa6 	bl	800cbe8 <uxr_reset_stream_storage>
 800c69c:	4620      	mov	r0, r4
 800c69e:	f000 fa05 	bl	800caac <uxr_session_header_offset>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	221c      	movs	r2, #28
 800c6a6:	a90b      	add	r1, sp, #44	; 0x2c
 800c6a8:	9000      	str	r0, [sp, #0]
 800c6aa:	a812      	add	r0, sp, #72	; 0x48
 800c6ac:	f7fc fe84 	bl	80093b8 <ucdr_init_buffer_origin_offset>
 800c6b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c6b2:	a912      	add	r1, sp, #72	; 0x48
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	8a1a      	ldrh	r2, [r3, #16]
 800c6b8:	3a04      	subs	r2, #4
 800c6ba:	b292      	uxth	r2, r2
 800c6bc:	f000 f91c 	bl	800c8f8 <uxr_buffer_create_session>
 800c6c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f000 f98a 	bl	800c9dc <uxr_stamp_create_session_header>
 800c6c8:	a812      	add	r0, sp, #72	; 0x48
 800c6ca:	f7fc feb5 	bl	8009438 <ucdr_buffer_length>
 800c6ce:	23ff      	movs	r3, #255	; 0xff
 800c6d0:	4681      	mov	r9, r0
 800c6d2:	7163      	strb	r3, [r4, #5]
 800c6d4:	230a      	movs	r3, #10
 800c6d6:	9303      	str	r3, [sp, #12]
 800c6d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c6da:	464a      	mov	r2, r9
 800c6dc:	a90b      	add	r1, sp, #44	; 0x2c
 800c6de:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c6e2:	47a8      	blx	r5
 800c6e4:	f000 fba0 	bl	800ce28 <uxr_millis>
 800c6e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	e009      	b.n	800c704 <uxr_create_session+0x7c>
 800c6f0:	f000 fb9a 	bl	800ce28 <uxr_millis>
 800c6f4:	1b40      	subs	r0, r0, r5
 800c6f6:	7962      	ldrb	r2, [r4, #5]
 800c6f8:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	dd38      	ble.n	800c772 <uxr_create_session+0xea>
 800c700:	2aff      	cmp	r2, #255	; 0xff
 800c702:	d13c      	bne.n	800c77e <uxr_create_session+0xf6>
 800c704:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c706:	a907      	add	r1, sp, #28
 800c708:	6897      	ldr	r7, [r2, #8]
 800c70a:	6810      	ldr	r0, [r2, #0]
 800c70c:	aa08      	add	r2, sp, #32
 800c70e:	47b8      	blx	r7
 800c710:	2800      	cmp	r0, #0
 800c712:	d0ed      	beq.n	800c6f0 <uxr_create_session+0x68>
 800c714:	a81a      	add	r0, sp, #104	; 0x68
 800c716:	2700      	movs	r7, #0
 800c718:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800c71c:	f7fc fe5e 	bl	80093dc <ucdr_init_buffer>
 800c720:	f10d 031a 	add.w	r3, sp, #26
 800c724:	aa06      	add	r2, sp, #24
 800c726:	a91a      	add	r1, sp, #104	; 0x68
 800c728:	4620      	mov	r0, r4
 800c72a:	f88d 7018 	strb.w	r7, [sp, #24]
 800c72e:	f000 f97d 	bl	800ca2c <uxr_read_session_header>
 800c732:	2800      	cmp	r0, #0
 800c734:	d0dc      	beq.n	800c6f0 <uxr_create_session+0x68>
 800c736:	4639      	mov	r1, r7
 800c738:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c73c:	f000 fa1e 	bl	800cb7c <uxr_stream_id_from_raw>
 800c740:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800c744:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 800c748:	f3c0 2807 	ubfx	r8, r0, #8, #8
 800c74c:	2f01      	cmp	r7, #1
 800c74e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800c752:	d053      	beq.n	800c7fc <uxr_create_session+0x174>
 800c754:	2f02      	cmp	r7, #2
 800c756:	d018      	beq.n	800c78a <uxr_create_session+0x102>
 800c758:	2f00      	cmp	r7, #0
 800c75a:	d1c9      	bne.n	800c6f0 <uxr_create_session+0x68>
 800c75c:	4639      	mov	r1, r7
 800c75e:	4638      	mov	r0, r7
 800c760:	f000 fa0c 	bl	800cb7c <uxr_stream_id_from_raw>
 800c764:	a91a      	add	r1, sp, #104	; 0x68
 800c766:	4602      	mov	r2, r0
 800c768:	900a      	str	r0, [sp, #40]	; 0x28
 800c76a:	4620      	mov	r0, r4
 800c76c:	f7ff fb56 	bl	800be1c <read_submessage_list>
 800c770:	e7be      	b.n	800c6f0 <uxr_create_session+0x68>
 800c772:	9b03      	ldr	r3, [sp, #12]
 800c774:	3b01      	subs	r3, #1
 800c776:	9303      	str	r3, [sp, #12]
 800c778:	d001      	beq.n	800c77e <uxr_create_session+0xf6>
 800c77a:	2aff      	cmp	r2, #255	; 0xff
 800c77c:	d0ac      	beq.n	800c6d8 <uxr_create_session+0x50>
 800c77e:	2a00      	cmp	r2, #0
 800c780:	d051      	beq.n	800c826 <uxr_create_session+0x19e>
 800c782:	2000      	movs	r0, #0
 800c784:	b02b      	add	sp, #172	; 0xac
 800c786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c78a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c78e:	4641      	mov	r1, r8
 800c790:	4630      	mov	r0, r6
 800c792:	9304      	str	r3, [sp, #16]
 800c794:	f000 fae0 	bl	800cd58 <uxr_get_input_reliable_stream>
 800c798:	4682      	mov	sl, r0
 800c79a:	b348      	cbz	r0, 800c7f0 <uxr_create_session+0x168>
 800c79c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c79e:	a81a      	add	r0, sp, #104	; 0x68
 800c7a0:	9205      	str	r2, [sp, #20]
 800c7a2:	f7fc fe4d 	bl	8009440 <ucdr_buffer_remaining>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	f10d 0019 	add.w	r0, sp, #25
 800c7ac:	9a05      	ldr	r2, [sp, #20]
 800c7ae:	4659      	mov	r1, fp
 800c7b0:	9000      	str	r0, [sp, #0]
 800c7b2:	4650      	mov	r0, sl
 800c7b4:	f004 f868 	bl	8010888 <uxr_receive_reliable_message>
 800c7b8:	b1d0      	cbz	r0, 800c7f0 <uxr_create_session+0x168>
 800c7ba:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d038      	beq.n	800c834 <uxr_create_session+0x1ac>
 800c7c2:	9f04      	ldr	r7, [sp, #16]
 800c7c4:	e00a      	b.n	800c7dc <uxr_create_session+0x154>
 800c7c6:	f04f 0302 	mov.w	r3, #2
 800c7ca:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 800c7ce:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 800c7d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7d8:	f7ff fb20 	bl	800be1c <read_submessage_list>
 800c7dc:	a922      	add	r1, sp, #136	; 0x88
 800c7de:	2204      	movs	r2, #4
 800c7e0:	4650      	mov	r0, sl
 800c7e2:	f004 f8d3 	bl	801098c <uxr_next_input_reliable_buffer_available>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	a922      	add	r1, sp, #136	; 0x88
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d1ea      	bne.n	800c7c6 <uxr_create_session+0x13e>
 800c7f0:	4642      	mov	r2, r8
 800c7f2:	9904      	ldr	r1, [sp, #16]
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f7ff f98d 	bl	800bb14 <write_submessage_acknack.isra.0>
 800c7fa:	e779      	b.n	800c6f0 <uxr_create_session+0x68>
 800c7fc:	4641      	mov	r1, r8
 800c7fe:	4630      	mov	r0, r6
 800c800:	f000 faa0 	bl	800cd44 <uxr_get_input_best_effort_stream>
 800c804:	2800      	cmp	r0, #0
 800c806:	f43f af73 	beq.w	800c6f0 <uxr_create_session+0x68>
 800c80a:	4659      	mov	r1, fp
 800c80c:	f003 ffb2 	bl	8010774 <uxr_receive_best_effort_message>
 800c810:	2800      	cmp	r0, #0
 800c812:	f43f af6d 	beq.w	800c6f0 <uxr_create_session+0x68>
 800c816:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800c81a:	a91a      	add	r1, sp, #104	; 0x68
 800c81c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c81e:	4620      	mov	r0, r4
 800c820:	f7ff fafc 	bl	800be1c <read_submessage_list>
 800c824:	e764      	b.n	800c6f0 <uxr_create_session+0x68>
 800c826:	4630      	mov	r0, r6
 800c828:	f000 f9de 	bl	800cbe8 <uxr_reset_stream_storage>
 800c82c:	2001      	movs	r0, #1
 800c82e:	b02b      	add	sp, #172	; 0xac
 800c830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c834:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 800c838:	a91a      	add	r1, sp, #104	; 0x68
 800c83a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c83c:	4620      	mov	r0, r4
 800c83e:	f7ff faed 	bl	800be1c <read_submessage_list>
 800c842:	e7be      	b.n	800c7c2 <uxr_create_session+0x13a>

0800c844 <uxr_prepare_stream_to_write_submessage>:
 800c844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c848:	b082      	sub	sp, #8
 800c84a:	4604      	mov	r4, r0
 800c84c:	4610      	mov	r0, r2
 800c84e:	4615      	mov	r5, r2
 800c850:	461e      	mov	r6, r3
 800c852:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 800c856:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800c85a:	f105 0904 	add.w	r9, r5, #4
 800c85e:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800c862:	9101      	str	r1, [sp, #4]
 800c864:	f000 fada 	bl	800ce1c <uxr_submessage_padding>
 800c868:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c86c:	4481      	add	r9, r0
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d01d      	beq.n	800c8ae <uxr_prepare_stream_to_write_submessage+0x6a>
 800c872:	2b02      	cmp	r3, #2
 800c874:	d116      	bne.n	800c8a4 <uxr_prepare_stream_to_write_submessage+0x60>
 800c876:	f104 0008 	add.w	r0, r4, #8
 800c87a:	4651      	mov	r1, sl
 800c87c:	f000 fa56 	bl	800cd2c <uxr_get_output_reliable_stream>
 800c880:	4604      	mov	r4, r0
 800c882:	b158      	cbz	r0, 800c89c <uxr_prepare_stream_to_write_submessage+0x58>
 800c884:	4649      	mov	r1, r9
 800c886:	4632      	mov	r2, r6
 800c888:	f004 fa44 	bl	8010d14 <uxr_prepare_reliable_buffer_to_write>
 800c88c:	4604      	mov	r4, r0
 800c88e:	b12c      	cbz	r4, 800c89c <uxr_prepare_stream_to_write_submessage+0x58>
 800c890:	4643      	mov	r3, r8
 800c892:	b2aa      	uxth	r2, r5
 800c894:	4639      	mov	r1, r7
 800c896:	4630      	mov	r0, r6
 800c898:	f000 fa80 	bl	800cd9c <uxr_buffer_submessage_header>
 800c89c:	4620      	mov	r0, r4
 800c89e:	b002      	add	sp, #8
 800c8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a4:	2400      	movs	r4, #0
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	b002      	add	sp, #8
 800c8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ae:	f104 0008 	add.w	r0, r4, #8
 800c8b2:	4651      	mov	r1, sl
 800c8b4:	f000 fa32 	bl	800cd1c <uxr_get_output_best_effort_stream>
 800c8b8:	4604      	mov	r4, r0
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d0ee      	beq.n	800c89c <uxr_prepare_stream_to_write_submessage+0x58>
 800c8be:	4649      	mov	r1, r9
 800c8c0:	4632      	mov	r2, r6
 800c8c2:	f004 f953 	bl	8010b6c <uxr_prepare_best_effort_buffer_to_write>
 800c8c6:	4604      	mov	r4, r0
 800c8c8:	e7e1      	b.n	800c88e <uxr_prepare_stream_to_write_submessage+0x4a>
 800c8ca:	bf00      	nop

0800c8cc <uxr_init_session_info>:
 800c8cc:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 800c8d0:	23ff      	movs	r3, #255	; 0xff
 800c8d2:	7102      	strb	r2, [r0, #4]
 800c8d4:	f880 c001 	strb.w	ip, [r0, #1]
 800c8d8:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c8dc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800c8e0:	7001      	strb	r1, [r0, #0]
 800c8e2:	f880 c002 	strb.w	ip, [r0, #2]
 800c8e6:	7143      	strb	r3, [r0, #5]
 800c8e8:	70c2      	strb	r2, [r0, #3]
 800c8ea:	b500      	push	{lr}
 800c8ec:	f04f 0e09 	mov.w	lr, #9
 800c8f0:	f8a0 e006 	strh.w	lr, [r0, #6]
 800c8f4:	f85d fb04 	ldr.w	pc, [sp], #4

0800c8f8 <uxr_buffer_create_session>:
 800c8f8:	b530      	push	{r4, r5, lr}
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	b089      	sub	sp, #36	; 0x24
 800c8fe:	4d12      	ldr	r5, [pc, #72]	; (800c948 <uxr_buffer_create_session+0x50>)
 800c900:	460c      	mov	r4, r1
 800c902:	9307      	str	r3, [sp, #28]
 800c904:	4619      	mov	r1, r3
 800c906:	f8ad 201c 	strh.w	r2, [sp, #28]
 800c90a:	2201      	movs	r2, #1
 800c90c:	9301      	str	r3, [sp, #4]
 800c90e:	80c2      	strh	r2, [r0, #6]
 800c910:	f88d 2004 	strb.w	r2, [sp, #4]
 800c914:	682a      	ldr	r2, [r5, #0]
 800c916:	9303      	str	r3, [sp, #12]
 800c918:	9200      	str	r2, [sp, #0]
 800c91a:	88aa      	ldrh	r2, [r5, #4]
 800c91c:	9306      	str	r3, [sp, #24]
 800c91e:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c922:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800c926:	9202      	str	r2, [sp, #8]
 800c928:	7802      	ldrb	r2, [r0, #0]
 800c92a:	4620      	mov	r0, r4
 800c92c:	f88d 200c 	strb.w	r2, [sp, #12]
 800c930:	2210      	movs	r2, #16
 800c932:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800c936:	f000 fa31 	bl	800cd9c <uxr_buffer_submessage_header>
 800c93a:	4669      	mov	r1, sp
 800c93c:	4620      	mov	r0, r4
 800c93e:	f001 f983 	bl	800dc48 <uxr_serialize_CREATE_CLIENT_Payload>
 800c942:	b009      	add	sp, #36	; 0x24
 800c944:	bd30      	pop	{r4, r5, pc}
 800c946:	bf00      	nop
 800c948:	0801777c 	.word	0x0801777c

0800c94c <uxr_buffer_delete_session>:
 800c94c:	4a0c      	ldr	r2, [pc, #48]	; (800c980 <uxr_buffer_delete_session+0x34>)
 800c94e:	2302      	movs	r3, #2
 800c950:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800c954:	b510      	push	{r4, lr}
 800c956:	460c      	mov	r4, r1
 800c958:	b082      	sub	sp, #8
 800c95a:	8911      	ldrh	r1, [r2, #8]
 800c95c:	2204      	movs	r2, #4
 800c95e:	80c3      	strh	r3, [r0, #6]
 800c960:	2300      	movs	r3, #0
 800c962:	f8ad 1006 	strh.w	r1, [sp, #6]
 800c966:	4620      	mov	r0, r4
 800c968:	2103      	movs	r1, #3
 800c96a:	f8ad c004 	strh.w	ip, [sp, #4]
 800c96e:	f000 fa15 	bl	800cd9c <uxr_buffer_submessage_header>
 800c972:	a901      	add	r1, sp, #4
 800c974:	4620      	mov	r0, r4
 800c976:	f001 fa0f 	bl	800dd98 <uxr_serialize_DELETE_Payload>
 800c97a:	b002      	add	sp, #8
 800c97c:	bd10      	pop	{r4, pc}
 800c97e:	bf00      	nop
 800c980:	0801777c 	.word	0x0801777c

0800c984 <uxr_read_create_session_status>:
 800c984:	b510      	push	{r4, lr}
 800c986:	460b      	mov	r3, r1
 800c988:	b088      	sub	sp, #32
 800c98a:	4604      	mov	r4, r0
 800c98c:	a901      	add	r1, sp, #4
 800c98e:	4618      	mov	r0, r3
 800c990:	f001 fa12 	bl	800ddb8 <uxr_deserialize_STATUS_AGENT_Payload>
 800c994:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c998:	7163      	strb	r3, [r4, #5]
 800c99a:	b008      	add	sp, #32
 800c99c:	bd10      	pop	{r4, pc}
 800c99e:	bf00      	nop

0800c9a0 <uxr_read_delete_session_status>:
 800c9a0:	b510      	push	{r4, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	4604      	mov	r4, r0
 800c9a6:	4608      	mov	r0, r1
 800c9a8:	a902      	add	r1, sp, #8
 800c9aa:	f001 fa35 	bl	800de18 <uxr_deserialize_STATUS_Payload>
 800c9ae:	88e3      	ldrh	r3, [r4, #6]
 800c9b0:	2b02      	cmp	r3, #2
 800c9b2:	d001      	beq.n	800c9b8 <uxr_read_delete_session_status+0x18>
 800c9b4:	b004      	add	sp, #16
 800c9b6:	bd10      	pop	{r4, pc}
 800c9b8:	f10d 000a 	add.w	r0, sp, #10
 800c9bc:	f7ff f830 	bl	800ba20 <uxr_object_id_from_raw>
 800c9c0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800c9c4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800c9c8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	d1f0      	bne.n	800c9b4 <uxr_read_delete_session_status+0x14>
 800c9d2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c9d6:	7163      	strb	r3, [r4, #5]
 800c9d8:	e7ec      	b.n	800c9b4 <uxr_read_delete_session_status+0x14>
 800c9da:	bf00      	nop

0800c9dc <uxr_stamp_create_session_header>:
 800c9dc:	b510      	push	{r4, lr}
 800c9de:	2208      	movs	r2, #8
 800c9e0:	b08a      	sub	sp, #40	; 0x28
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	eb0d 0002 	add.w	r0, sp, r2
 800c9e8:	f7fc fcf8 	bl	80093dc <ucdr_init_buffer>
 800c9ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	a802      	add	r0, sp, #8
 800c9f4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800c9f8:	9400      	str	r4, [sp, #0]
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	f000 fbca 	bl	800d194 <uxr_serialize_message_header>
 800ca00:	b00a      	add	sp, #40	; 0x28
 800ca02:	bd10      	pop	{r4, pc}

0800ca04 <uxr_stamp_session_header>:
 800ca04:	b530      	push	{r4, r5, lr}
 800ca06:	b08d      	sub	sp, #52	; 0x34
 800ca08:	4604      	mov	r4, r0
 800ca0a:	460d      	mov	r5, r1
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	a804      	add	r0, sp, #16
 800ca10:	9203      	str	r2, [sp, #12]
 800ca12:	2208      	movs	r2, #8
 800ca14:	f7fc fce2 	bl	80093dc <ucdr_init_buffer>
 800ca18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca1c:	9b03      	ldr	r3, [sp, #12]
 800ca1e:	462a      	mov	r2, r5
 800ca20:	a804      	add	r0, sp, #16
 800ca22:	9400      	str	r4, [sp, #0]
 800ca24:	f000 fbb6 	bl	800d194 <uxr_serialize_message_header>
 800ca28:	b00d      	add	sp, #52	; 0x34
 800ca2a:	bd30      	pop	{r4, r5, pc}

0800ca2c <uxr_read_session_header>:
 800ca2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca30:	4607      	mov	r7, r0
 800ca32:	b084      	sub	sp, #16
 800ca34:	4608      	mov	r0, r1
 800ca36:	460c      	mov	r4, r1
 800ca38:	4615      	mov	r5, r2
 800ca3a:	461e      	mov	r6, r3
 800ca3c:	f7fc fd00 	bl	8009440 <ucdr_buffer_remaining>
 800ca40:	2808      	cmp	r0, #8
 800ca42:	d803      	bhi.n	800ca4c <uxr_read_session_header+0x20>
 800ca44:	2000      	movs	r0, #0
 800ca46:	b004      	add	sp, #16
 800ca48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca4c:	f10d 080c 	add.w	r8, sp, #12
 800ca50:	4633      	mov	r3, r6
 800ca52:	462a      	mov	r2, r5
 800ca54:	4620      	mov	r0, r4
 800ca56:	f10d 010b 	add.w	r1, sp, #11
 800ca5a:	f8cd 8000 	str.w	r8, [sp]
 800ca5e:	f000 fbb7 	bl	800d1d0 <uxr_deserialize_message_header>
 800ca62:	783a      	ldrb	r2, [r7, #0]
 800ca64:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d1eb      	bne.n	800ca44 <uxr_read_session_header+0x18>
 800ca6c:	061b      	lsls	r3, r3, #24
 800ca6e:	d41b      	bmi.n	800caa8 <uxr_read_session_header+0x7c>
 800ca70:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ca74:	787b      	ldrb	r3, [r7, #1]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d003      	beq.n	800ca82 <uxr_read_session_header+0x56>
 800ca7a:	2001      	movs	r0, #1
 800ca7c:	f080 0001 	eor.w	r0, r0, #1
 800ca80:	e7e1      	b.n	800ca46 <uxr_read_session_header+0x1a>
 800ca82:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800ca86:	1cb8      	adds	r0, r7, #2
 800ca88:	78bb      	ldrb	r3, [r7, #2]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d1f5      	bne.n	800ca7a <uxr_read_session_header+0x4e>
 800ca8e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ca92:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d1ef      	bne.n	800ca7a <uxr_read_session_header+0x4e>
 800ca9a:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ca9e:	7843      	ldrb	r3, [r0, #1]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d1ea      	bne.n	800ca7a <uxr_read_session_header+0x4e>
 800caa4:	2000      	movs	r0, #0
 800caa6:	e7e9      	b.n	800ca7c <uxr_read_session_header+0x50>
 800caa8:	2001      	movs	r0, #1
 800caaa:	e7cc      	b.n	800ca46 <uxr_read_session_header+0x1a>

0800caac <uxr_session_header_offset>:
 800caac:	f990 3000 	ldrsb.w	r3, [r0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	bfac      	ite	ge
 800cab4:	2008      	movge	r0, #8
 800cab6:	2004      	movlt	r0, #4
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop

0800cabc <uxr_init_base_object_request>:
 800cabc:	b510      	push	{r4, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800cac4:	9101      	str	r1, [sp, #4]
 800cac6:	88c3      	ldrh	r3, [r0, #6]
 800cac8:	f1a3 010a 	sub.w	r1, r3, #10
 800cacc:	b289      	uxth	r1, r1
 800cace:	42a1      	cmp	r1, r4
 800cad0:	d80f      	bhi.n	800caf2 <uxr_init_base_object_request+0x36>
 800cad2:	3301      	adds	r3, #1
 800cad4:	b29c      	uxth	r4, r3
 800cad6:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	80c4      	strh	r4, [r0, #6]
 800cade:	1c91      	adds	r1, r2, #2
 800cae0:	9801      	ldr	r0, [sp, #4]
 800cae2:	f882 c000 	strb.w	ip, [r2]
 800cae6:	7053      	strb	r3, [r2, #1]
 800cae8:	f7fe ffae 	bl	800ba48 <uxr_object_id_to_raw>
 800caec:	4620      	mov	r0, r4
 800caee:	b002      	add	sp, #8
 800caf0:	bd10      	pop	{r4, pc}
 800caf2:	230a      	movs	r3, #10
 800caf4:	f04f 0c00 	mov.w	ip, #0
 800caf8:	461c      	mov	r4, r3
 800cafa:	e7ef      	b.n	800cadc <uxr_init_base_object_request+0x20>

0800cafc <uxr_parse_base_object_request>:
 800cafc:	b570      	push	{r4, r5, r6, lr}
 800cafe:	4604      	mov	r4, r0
 800cb00:	3002      	adds	r0, #2
 800cb02:	460d      	mov	r5, r1
 800cb04:	4616      	mov	r6, r2
 800cb06:	f7fe ff8b 	bl	800ba20 <uxr_object_id_from_raw>
 800cb0a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800cb0e:	8028      	strh	r0, [r5, #0]
 800cb10:	806b      	strh	r3, [r5, #2]
 800cb12:	7822      	ldrb	r2, [r4, #0]
 800cb14:	7863      	ldrb	r3, [r4, #1]
 800cb16:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800cb1a:	8033      	strh	r3, [r6, #0]
 800cb1c:	bd70      	pop	{r4, r5, r6, pc}
 800cb1e:	bf00      	nop

0800cb20 <uxr_stream_id>:
 800cb20:	2901      	cmp	r1, #1
 800cb22:	4684      	mov	ip, r0
 800cb24:	b500      	push	{lr}
 800cb26:	b083      	sub	sp, #12
 800cb28:	d01f      	beq.n	800cb6a <uxr_stream_id+0x4a>
 800cb2a:	2902      	cmp	r1, #2
 800cb2c:	f04f 0e00 	mov.w	lr, #0
 800cb30:	d020      	beq.n	800cb74 <uxr_stream_id+0x54>
 800cb32:	2300      	movs	r3, #0
 800cb34:	2000      	movs	r0, #0
 800cb36:	f36e 0307 	bfi	r3, lr, #0, #8
 800cb3a:	f36c 230f 	bfi	r3, ip, #8, #8
 800cb3e:	f361 4317 	bfi	r3, r1, #16, #8
 800cb42:	f362 631f 	bfi	r3, r2, #24, #8
 800cb46:	fa5f fc83 	uxtb.w	ip, r3
 800cb4a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800cb4e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800cb52:	0e1b      	lsrs	r3, r3, #24
 800cb54:	f36c 0007 	bfi	r0, ip, #0, #8
 800cb58:	f361 200f 	bfi	r0, r1, #8, #8
 800cb5c:	f362 4017 	bfi	r0, r2, #16, #8
 800cb60:	f363 601f 	bfi	r0, r3, #24, #8
 800cb64:	b003      	add	sp, #12
 800cb66:	f85d fb04 	ldr.w	pc, [sp], #4
 800cb6a:	f100 0e01 	add.w	lr, r0, #1
 800cb6e:	fa5f fe8e 	uxtb.w	lr, lr
 800cb72:	e7de      	b.n	800cb32 <uxr_stream_id+0x12>
 800cb74:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 800cb78:	e7db      	b.n	800cb32 <uxr_stream_id+0x12>
 800cb7a:	bf00      	nop

0800cb7c <uxr_stream_id_from_raw>:
 800cb7c:	b082      	sub	sp, #8
 800cb7e:	b130      	cbz	r0, 800cb8e <uxr_stream_id_from_raw+0x12>
 800cb80:	0603      	lsls	r3, r0, #24
 800cb82:	d421      	bmi.n	800cbc8 <uxr_stream_id_from_raw+0x4c>
 800cb84:	1e42      	subs	r2, r0, #1
 800cb86:	f04f 0c01 	mov.w	ip, #1
 800cb8a:	b2d2      	uxtb	r2, r2
 800cb8c:	e001      	b.n	800cb92 <uxr_stream_id_from_raw+0x16>
 800cb8e:	4684      	mov	ip, r0
 800cb90:	4602      	mov	r2, r0
 800cb92:	2300      	movs	r3, #0
 800cb94:	f360 0307 	bfi	r3, r0, #0, #8
 800cb98:	2000      	movs	r0, #0
 800cb9a:	f362 230f 	bfi	r3, r2, #8, #8
 800cb9e:	f36c 4317 	bfi	r3, ip, #16, #8
 800cba2:	f361 631f 	bfi	r3, r1, #24, #8
 800cba6:	fa5f fc83 	uxtb.w	ip, r3
 800cbaa:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800cbae:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800cbb2:	0e1b      	lsrs	r3, r3, #24
 800cbb4:	f36c 0007 	bfi	r0, ip, #0, #8
 800cbb8:	f361 200f 	bfi	r0, r1, #8, #8
 800cbbc:	f362 4017 	bfi	r0, r2, #16, #8
 800cbc0:	f363 601f 	bfi	r0, r3, #24, #8
 800cbc4:	b002      	add	sp, #8
 800cbc6:	4770      	bx	lr
 800cbc8:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800cbcc:	f04f 0c02 	mov.w	ip, #2
 800cbd0:	e7df      	b.n	800cb92 <uxr_stream_id_from_raw+0x16>
 800cbd2:	bf00      	nop

0800cbd4 <uxr_init_stream_storage>:
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	7403      	strb	r3, [r0, #16]
 800cbd8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800cbdc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800cbe0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop

0800cbe8 <uxr_reset_stream_storage>:
 800cbe8:	b570      	push	{r4, r5, r6, lr}
 800cbea:	7c03      	ldrb	r3, [r0, #16]
 800cbec:	4604      	mov	r4, r0
 800cbee:	b14b      	cbz	r3, 800cc04 <uxr_reset_stream_storage+0x1c>
 800cbf0:	4606      	mov	r6, r0
 800cbf2:	2500      	movs	r5, #0
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	3501      	adds	r5, #1
 800cbf8:	f003 ffb2 	bl	8010b60 <uxr_reset_output_best_effort_stream>
 800cbfc:	7c23      	ldrb	r3, [r4, #16]
 800cbfe:	3610      	adds	r6, #16
 800cc00:	42ab      	cmp	r3, r5
 800cc02:	d8f7      	bhi.n	800cbf4 <uxr_reset_stream_storage+0xc>
 800cc04:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cc08:	b15b      	cbz	r3, 800cc22 <uxr_reset_stream_storage+0x3a>
 800cc0a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cc0e:	2500      	movs	r5, #0
 800cc10:	4630      	mov	r0, r6
 800cc12:	3501      	adds	r5, #1
 800cc14:	f003 fdaa 	bl	801076c <uxr_reset_input_best_effort_stream>
 800cc18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cc1c:	3602      	adds	r6, #2
 800cc1e:	42ab      	cmp	r3, r5
 800cc20:	d8f6      	bhi.n	800cc10 <uxr_reset_stream_storage+0x28>
 800cc22:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800cc26:	b15b      	cbz	r3, 800cc40 <uxr_reset_stream_storage+0x58>
 800cc28:	f104 0618 	add.w	r6, r4, #24
 800cc2c:	2500      	movs	r5, #0
 800cc2e:	4630      	mov	r0, r6
 800cc30:	3501      	adds	r5, #1
 800cc32:	f004 f841 	bl	8010cb8 <uxr_reset_output_reliable_stream>
 800cc36:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800cc3a:	3628      	adds	r6, #40	; 0x28
 800cc3c:	42ab      	cmp	r3, r5
 800cc3e:	d8f6      	bhi.n	800cc2e <uxr_reset_stream_storage+0x46>
 800cc40:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800cc44:	b15b      	cbz	r3, 800cc5e <uxr_reset_stream_storage+0x76>
 800cc46:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800cc4a:	2500      	movs	r5, #0
 800cc4c:	4630      	mov	r0, r6
 800cc4e:	3501      	adds	r5, #1
 800cc50:	f003 fdf8 	bl	8010844 <uxr_reset_input_reliable_stream>
 800cc54:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800cc58:	3618      	adds	r6, #24
 800cc5a:	42ab      	cmp	r3, r5
 800cc5c:	d8f6      	bhi.n	800cc4c <uxr_reset_stream_storage+0x64>
 800cc5e:	bd70      	pop	{r4, r5, r6, pc}

0800cc60 <uxr_add_output_best_effort_buffer>:
 800cc60:	b510      	push	{r4, lr}
 800cc62:	7c04      	ldrb	r4, [r0, #16]
 800cc64:	b082      	sub	sp, #8
 800cc66:	f104 0c01 	add.w	ip, r4, #1
 800cc6a:	f880 c010 	strb.w	ip, [r0, #16]
 800cc6e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800cc72:	f003 ff6b 	bl	8010b4c <uxr_init_output_best_effort_stream>
 800cc76:	2201      	movs	r2, #1
 800cc78:	4620      	mov	r0, r4
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	b002      	add	sp, #8
 800cc7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc82:	f7ff bf4d 	b.w	800cb20 <uxr_stream_id>
 800cc86:	bf00      	nop

0800cc88 <uxr_add_output_reliable_buffer>:
 800cc88:	b510      	push	{r4, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	4684      	mov	ip, r0
 800cc8e:	2028      	movs	r0, #40	; 0x28
 800cc90:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800cc94:	9400      	str	r4, [sp, #0]
 800cc96:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800cc9a:	fb00 c004 	mla	r0, r0, r4, ip
 800cc9e:	f104 0e01 	add.w	lr, r4, #1
 800cca2:	3018      	adds	r0, #24
 800cca4:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800cca8:	f003 ffd0 	bl	8010c4c <uxr_init_output_reliable_stream>
 800ccac:	2201      	movs	r2, #1
 800ccae:	2102      	movs	r1, #2
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	b004      	add	sp, #16
 800ccb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccb8:	f7ff bf32 	b.w	800cb20 <uxr_stream_id>

0800ccbc <uxr_add_input_best_effort_buffer>:
 800ccbc:	b510      	push	{r4, lr}
 800ccbe:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	1c62      	adds	r2, r4, #1
 800ccc6:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800ccca:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800ccce:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800ccd2:	f003 fd47 	bl	8010764 <uxr_init_input_best_effort_stream>
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	2101      	movs	r1, #1
 800ccda:	4620      	mov	r0, r4
 800ccdc:	b002      	add	sp, #8
 800ccde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cce2:	f7ff bf1d 	b.w	800cb20 <uxr_stream_id>
 800cce6:	bf00      	nop

0800cce8 <uxr_add_input_reliable_buffer>:
 800cce8:	b510      	push	{r4, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	4684      	mov	ip, r0
 800ccee:	2018      	movs	r0, #24
 800ccf0:	9c06      	ldr	r4, [sp, #24]
 800ccf2:	9400      	str	r4, [sp, #0]
 800ccf4:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800ccf8:	fb00 c004 	mla	r0, r0, r4, ip
 800ccfc:	f104 0e01 	add.w	lr, r4, #1
 800cd00:	3048      	adds	r0, #72	; 0x48
 800cd02:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800cd06:	f003 fd77 	bl	80107f8 <uxr_init_input_reliable_stream>
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	2102      	movs	r1, #2
 800cd0e:	4620      	mov	r0, r4
 800cd10:	b004      	add	sp, #16
 800cd12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd16:	f7ff bf03 	b.w	800cb20 <uxr_stream_id>
 800cd1a:	bf00      	nop

0800cd1c <uxr_get_output_best_effort_stream>:
 800cd1c:	7c03      	ldrb	r3, [r0, #16]
 800cd1e:	428b      	cmp	r3, r1
 800cd20:	bf8c      	ite	hi
 800cd22:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800cd26:	2000      	movls	r0, #0
 800cd28:	4770      	bx	lr
 800cd2a:	bf00      	nop

0800cd2c <uxr_get_output_reliable_stream>:
 800cd2c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800cd30:	428b      	cmp	r3, r1
 800cd32:	d904      	bls.n	800cd3e <uxr_get_output_reliable_stream+0x12>
 800cd34:	2328      	movs	r3, #40	; 0x28
 800cd36:	fb03 0001 	mla	r0, r3, r1, r0
 800cd3a:	3018      	adds	r0, #24
 800cd3c:	4770      	bx	lr
 800cd3e:	2000      	movs	r0, #0
 800cd40:	4770      	bx	lr
 800cd42:	bf00      	nop

0800cd44 <uxr_get_input_best_effort_stream>:
 800cd44:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800cd48:	428b      	cmp	r3, r1
 800cd4a:	d903      	bls.n	800cd54 <uxr_get_input_best_effort_stream+0x10>
 800cd4c:	3121      	adds	r1, #33	; 0x21
 800cd4e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cd52:	4770      	bx	lr
 800cd54:	2000      	movs	r0, #0
 800cd56:	4770      	bx	lr

0800cd58 <uxr_get_input_reliable_stream>:
 800cd58:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800cd5c:	428b      	cmp	r3, r1
 800cd5e:	d904      	bls.n	800cd6a <uxr_get_input_reliable_stream+0x12>
 800cd60:	2318      	movs	r3, #24
 800cd62:	fb03 0001 	mla	r0, r3, r1, r0
 800cd66:	3048      	adds	r0, #72	; 0x48
 800cd68:	4770      	bx	lr
 800cd6a:	2000      	movs	r0, #0
 800cd6c:	4770      	bx	lr
 800cd6e:	bf00      	nop

0800cd70 <uxr_output_streams_confirmed>:
 800cd70:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800cd74:	b183      	cbz	r3, 800cd98 <uxr_output_streams_confirmed+0x28>
 800cd76:	b570      	push	{r4, r5, r6, lr}
 800cd78:	4606      	mov	r6, r0
 800cd7a:	f100 0518 	add.w	r5, r0, #24
 800cd7e:	2400      	movs	r4, #0
 800cd80:	e000      	b.n	800cd84 <uxr_output_streams_confirmed+0x14>
 800cd82:	b140      	cbz	r0, 800cd96 <uxr_output_streams_confirmed+0x26>
 800cd84:	4628      	mov	r0, r5
 800cd86:	3401      	adds	r4, #1
 800cd88:	f004 fa0a 	bl	80111a0 <uxr_is_output_up_to_date>
 800cd8c:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800cd90:	3528      	adds	r5, #40	; 0x28
 800cd92:	42a3      	cmp	r3, r4
 800cd94:	d8f5      	bhi.n	800cd82 <uxr_output_streams_confirmed+0x12>
 800cd96:	bd70      	pop	{r4, r5, r6, pc}
 800cd98:	2001      	movs	r0, #1
 800cd9a:	4770      	bx	lr

0800cd9c <uxr_buffer_submessage_header>:
 800cd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9e:	460e      	mov	r6, r1
 800cda0:	2104      	movs	r1, #4
 800cda2:	4604      	mov	r4, r0
 800cda4:	4615      	mov	r5, r2
 800cda6:	461f      	mov	r7, r3
 800cda8:	f7fc fb34 	bl	8009414 <ucdr_align_to>
 800cdac:	2301      	movs	r3, #1
 800cdae:	4631      	mov	r1, r6
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	ea47 0203 	orr.w	r2, r7, r3
 800cdb6:	7523      	strb	r3, [r4, #20]
 800cdb8:	462b      	mov	r3, r5
 800cdba:	f000 fa29 	bl	800d210 <uxr_serialize_submessage_header>
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f7fc fb3e 	bl	8009440 <ucdr_buffer_remaining>
 800cdc4:	42a8      	cmp	r0, r5
 800cdc6:	bf34      	ite	cc
 800cdc8:	2000      	movcc	r0, #0
 800cdca:	2001      	movcs	r0, #1
 800cdcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdce:	bf00      	nop

0800cdd0 <uxr_read_submessage_header>:
 800cdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	460d      	mov	r5, r1
 800cdd8:	2104      	movs	r1, #4
 800cdda:	4616      	mov	r6, r2
 800cddc:	4698      	mov	r8, r3
 800cdde:	f7fc fb19 	bl	8009414 <ucdr_align_to>
 800cde2:	4620      	mov	r0, r4
 800cde4:	f7fc fb2c 	bl	8009440 <ucdr_buffer_remaining>
 800cde8:	2803      	cmp	r0, #3
 800cdea:	bf8c      	ite	hi
 800cdec:	2701      	movhi	r7, #1
 800cdee:	2700      	movls	r7, #0
 800cdf0:	d802      	bhi.n	800cdf8 <uxr_read_submessage_header+0x28>
 800cdf2:	4638      	mov	r0, r7
 800cdf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdf8:	4633      	mov	r3, r6
 800cdfa:	4642      	mov	r2, r8
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	4629      	mov	r1, r5
 800ce00:	f000 fa1a 	bl	800d238 <uxr_deserialize_submessage_header>
 800ce04:	f898 3000 	ldrb.w	r3, [r8]
 800ce08:	4638      	mov	r0, r7
 800ce0a:	f003 0201 	and.w	r2, r3, #1
 800ce0e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ce12:	f888 3000 	strb.w	r3, [r8]
 800ce16:	7522      	strb	r2, [r4, #20]
 800ce18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ce1c <uxr_submessage_padding>:
 800ce1c:	f010 0003 	ands.w	r0, r0, #3
 800ce20:	bf18      	it	ne
 800ce22:	f1c0 0004 	rsbne	r0, r0, #4
 800ce26:	4770      	bx	lr

0800ce28 <uxr_millis>:
 800ce28:	b510      	push	{r4, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	2001      	movs	r0, #1
 800ce2e:	4669      	mov	r1, sp
 800ce30:	f7f5 f802 	bl	8001e38 <clock_gettime>
 800ce34:	4908      	ldr	r1, [pc, #32]	; (800ce58 <uxr_millis+0x30>)
 800ce36:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800ce3a:	fba0 0301 	umull	r0, r3, r0, r1
 800ce3e:	1900      	adds	r0, r0, r4
 800ce40:	fb01 3102 	mla	r1, r1, r2, r3
 800ce44:	4a05      	ldr	r2, [pc, #20]	; (800ce5c <uxr_millis+0x34>)
 800ce46:	f04f 0300 	mov.w	r3, #0
 800ce4a:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800ce4e:	f7f3 fc15 	bl	800067c <__aeabi_ldivmod>
 800ce52:	b004      	add	sp, #16
 800ce54:	bd10      	pop	{r4, pc}
 800ce56:	bf00      	nop
 800ce58:	3b9aca00 	.word	0x3b9aca00
 800ce5c:	000f4240 	.word	0x000f4240

0800ce60 <uxr_nanos>:
 800ce60:	b510      	push	{r4, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	2001      	movs	r0, #1
 800ce66:	4669      	mov	r1, sp
 800ce68:	f7f4 ffe6 	bl	8001e38 <clock_gettime>
 800ce6c:	4a06      	ldr	r2, [pc, #24]	; (800ce88 <uxr_nanos+0x28>)
 800ce6e:	9800      	ldr	r0, [sp, #0]
 800ce70:	9902      	ldr	r1, [sp, #8]
 800ce72:	fba0 0302 	umull	r0, r3, r0, r2
 800ce76:	9c01      	ldr	r4, [sp, #4]
 800ce78:	1840      	adds	r0, r0, r1
 800ce7a:	fb02 3304 	mla	r3, r2, r4, r3
 800ce7e:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800ce82:	b004      	add	sp, #16
 800ce84:	bd10      	pop	{r4, pc}
 800ce86:	bf00      	nop
 800ce88:	3b9aca00 	.word	0x3b9aca00

0800ce8c <on_full_output_buffer_fragmented>:
 800ce8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce90:	460c      	mov	r4, r1
 800ce92:	b08a      	sub	sp, #40	; 0x28
 800ce94:	4606      	mov	r6, r0
 800ce96:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800ce9a:	f104 0008 	add.w	r0, r4, #8
 800ce9e:	f7ff ff45 	bl	800cd2c <uxr_get_output_reliable_stream>
 800cea2:	4605      	mov	r5, r0
 800cea4:	f004 f986 	bl	80111b4 <get_available_free_slots>
 800cea8:	b968      	cbnz	r0, 800cec6 <on_full_output_buffer_fragmented+0x3a>
 800ceaa:	4620      	mov	r0, r4
 800ceac:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800ceb0:	4798      	blx	r3
 800ceb2:	b918      	cbnz	r0, 800cebc <on_full_output_buffer_fragmented+0x30>
 800ceb4:	2001      	movs	r0, #1
 800ceb6:	b00a      	add	sp, #40	; 0x28
 800ceb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cebc:	4628      	mov	r0, r5
 800cebe:	f004 f979 	bl	80111b4 <get_available_free_slots>
 800cec2:	2800      	cmp	r0, #0
 800cec4:	d0f6      	beq.n	800ceb4 <on_full_output_buffer_fragmented+0x28>
 800cec6:	8929      	ldrh	r1, [r5, #8]
 800cec8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800cecc:	89eb      	ldrh	r3, [r5, #14]
 800cece:	7b28      	ldrb	r0, [r5, #12]
 800ced0:	686f      	ldr	r7, [r5, #4]
 800ced2:	1a12      	subs	r2, r2, r0
 800ced4:	fbb3 f0f1 	udiv	r0, r3, r1
 800ced8:	fbb7 f7f1 	udiv	r7, r7, r1
 800cedc:	fb01 3110 	mls	r1, r1, r0, r3
 800cee0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800cee4:	b289      	uxth	r1, r1
 800cee6:	fb07 f101 	mul.w	r1, r7, r1
 800ceea:	3f04      	subs	r7, #4
 800ceec:	443a      	add	r2, r7
 800ceee:	3104      	adds	r1, #4
 800cef0:	fa1f f882 	uxth.w	r8, r2
 800cef4:	463a      	mov	r2, r7
 800cef6:	eba3 0308 	sub.w	r3, r3, r8
 800cefa:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800cefe:	682b      	ldr	r3, [r5, #0]
 800cf00:	4419      	add	r1, r3
 800cf02:	2300      	movs	r3, #0
 800cf04:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800cf08:	9000      	str	r0, [sp, #0]
 800cf0a:	a802      	add	r0, sp, #8
 800cf0c:	f7fc fa54 	bl	80093b8 <ucdr_init_buffer_origin_offset>
 800cf10:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800cf14:	f102 0308 	add.w	r3, r2, #8
 800cf18:	42bb      	cmp	r3, r7
 800cf1a:	d927      	bls.n	800cf6c <on_full_output_buffer_fragmented+0xe0>
 800cf1c:	4642      	mov	r2, r8
 800cf1e:	2300      	movs	r3, #0
 800cf20:	210d      	movs	r1, #13
 800cf22:	a802      	add	r0, sp, #8
 800cf24:	f7ff ff3a 	bl	800cd9c <uxr_buffer_submessage_header>
 800cf28:	8929      	ldrh	r1, [r5, #8]
 800cf2a:	89eb      	ldrh	r3, [r5, #14]
 800cf2c:	686a      	ldr	r2, [r5, #4]
 800cf2e:	fbb3 f0f1 	udiv	r0, r3, r1
 800cf32:	fbb2 f2f1 	udiv	r2, r2, r1
 800cf36:	fb01 3310 	mls	r3, r1, r0, r3
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	fb02 f303 	mul.w	r3, r2, r3
 800cf40:	682a      	ldr	r2, [r5, #0]
 800cf42:	50d7      	str	r7, [r2, r3]
 800cf44:	2101      	movs	r1, #1
 800cf46:	89e8      	ldrh	r0, [r5, #14]
 800cf48:	f004 fa4c 	bl	80113e4 <uxr_seq_num_add>
 800cf4c:	9904      	ldr	r1, [sp, #16]
 800cf4e:	9a03      	ldr	r2, [sp, #12]
 800cf50:	81e8      	strh	r0, [r5, #14]
 800cf52:	4630      	mov	r0, r6
 800cf54:	1a52      	subs	r2, r2, r1
 800cf56:	f7fc fa41 	bl	80093dc <ucdr_init_buffer>
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	4622      	mov	r2, r4
 800cf5e:	490f      	ldr	r1, [pc, #60]	; (800cf9c <on_full_output_buffer_fragmented+0x110>)
 800cf60:	f7fc fa10 	bl	8009384 <ucdr_set_on_full_buffer_callback>
 800cf64:	2000      	movs	r0, #0
 800cf66:	b00a      	add	sp, #40	; 0x28
 800cf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf6c:	b292      	uxth	r2, r2
 800cf6e:	2302      	movs	r3, #2
 800cf70:	210d      	movs	r1, #13
 800cf72:	a802      	add	r0, sp, #8
 800cf74:	f7ff ff12 	bl	800cd9c <uxr_buffer_submessage_header>
 800cf78:	8928      	ldrh	r0, [r5, #8]
 800cf7a:	89eb      	ldrh	r3, [r5, #14]
 800cf7c:	6869      	ldr	r1, [r5, #4]
 800cf7e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800cf82:	fbb3 f7f0 	udiv	r7, r3, r0
 800cf86:	fbb1 f1f0 	udiv	r1, r1, r0
 800cf8a:	fb00 3317 	mls	r3, r0, r7, r3
 800cf8e:	3208      	adds	r2, #8
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	fb01 f303 	mul.w	r3, r1, r3
 800cf96:	6829      	ldr	r1, [r5, #0]
 800cf98:	50ca      	str	r2, [r1, r3]
 800cf9a:	e7d3      	b.n	800cf44 <on_full_output_buffer_fragmented+0xb8>
 800cf9c:	0800ce8d 	.word	0x0800ce8d

0800cfa0 <uxr_prepare_output_stream>:
 800cfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfa2:	b087      	sub	sp, #28
 800cfa4:	2707      	movs	r7, #7
 800cfa6:	2500      	movs	r5, #0
 800cfa8:	461c      	mov	r4, r3
 800cfaa:	4606      	mov	r6, r0
 800cfac:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800cfb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfb2:	e9cd 7500 	strd	r7, r5, [sp]
 800cfb6:	3204      	adds	r2, #4
 800cfb8:	f7ff fc44 	bl	800c844 <uxr_prepare_stream_to_write_submessage>
 800cfbc:	f080 0201 	eor.w	r2, r0, #1
 800cfc0:	b2d2      	uxtb	r2, r2
 800cfc2:	75a2      	strb	r2, [r4, #22]
 800cfc4:	b112      	cbz	r2, 800cfcc <uxr_prepare_output_stream+0x2c>
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	b007      	add	sp, #28
 800cfca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfcc:	aa05      	add	r2, sp, #20
 800cfce:	9902      	ldr	r1, [sp, #8]
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f7ff fd73 	bl	800cabc <uxr_init_base_object_request>
 800cfd6:	a905      	add	r1, sp, #20
 800cfd8:	4605      	mov	r5, r0
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f000 ff9c 	bl	800df18 <uxr_serialize_WRITE_DATA_Payload_Data>
 800cfe0:	69a6      	ldr	r6, [r4, #24]
 800cfe2:	69e7      	ldr	r7, [r4, #28]
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800cfea:	1a52      	subs	r2, r2, r1
 800cfec:	f7fc f9f6 	bl	80093dc <ucdr_init_buffer>
 800cff0:	4620      	mov	r0, r4
 800cff2:	463a      	mov	r2, r7
 800cff4:	4631      	mov	r1, r6
 800cff6:	f7fc f9c5 	bl	8009384 <ucdr_set_on_full_buffer_callback>
 800cffa:	4628      	mov	r0, r5
 800cffc:	b007      	add	sp, #28
 800cffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d000 <uxr_prepare_output_stream_fragmented>:
 800d000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d004:	b091      	sub	sp, #68	; 0x44
 800d006:	4605      	mov	r5, r0
 800d008:	3008      	adds	r0, #8
 800d00a:	461e      	mov	r6, r3
 800d00c:	9105      	str	r1, [sp, #20]
 800d00e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800d012:	9204      	str	r2, [sp, #16]
 800d014:	f7ff fe8a 	bl	800cd2c <uxr_get_output_reliable_stream>
 800d018:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	f000 8093 	beq.w	800d148 <uxr_prepare_output_stream_fragmented+0x148>
 800d022:	4604      	mov	r4, r0
 800d024:	2800      	cmp	r0, #0
 800d026:	f000 808f 	beq.w	800d148 <uxr_prepare_output_stream_fragmented+0x148>
 800d02a:	f004 f8c3 	bl	80111b4 <get_available_free_slots>
 800d02e:	2800      	cmp	r0, #0
 800d030:	f000 8085 	beq.w	800d13e <uxr_prepare_output_stream_fragmented+0x13e>
 800d034:	8923      	ldrh	r3, [r4, #8]
 800d036:	89e7      	ldrh	r7, [r4, #14]
 800d038:	6862      	ldr	r2, [r4, #4]
 800d03a:	fbb7 f9f3 	udiv	r9, r7, r3
 800d03e:	fbb2 f2f3 	udiv	r2, r2, r3
 800d042:	fb03 7919 	mls	r9, r3, r9, r7
 800d046:	6823      	ldr	r3, [r4, #0]
 800d048:	f1a2 0b04 	sub.w	fp, r2, #4
 800d04c:	9203      	str	r2, [sp, #12]
 800d04e:	fa1f f989 	uxth.w	r9, r9
 800d052:	fb02 f909 	mul.w	r9, r2, r9
 800d056:	f109 0904 	add.w	r9, r9, #4
 800d05a:	4499      	add	r9, r3
 800d05c:	7b23      	ldrb	r3, [r4, #12]
 800d05e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800d062:	4543      	cmp	r3, r8
 800d064:	d37c      	bcc.n	800d160 <uxr_prepare_output_stream_fragmented+0x160>
 800d066:	f1ab 0a04 	sub.w	sl, fp, #4
 800d06a:	465a      	mov	r2, fp
 800d06c:	4649      	mov	r1, r9
 800d06e:	a808      	add	r0, sp, #32
 800d070:	ebaa 0a03 	sub.w	sl, sl, r3
 800d074:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d076:	f8cd 8000 	str.w	r8, [sp]
 800d07a:	3308      	adds	r3, #8
 800d07c:	fa1f fa8a 	uxth.w	sl, sl
 800d080:	9302      	str	r3, [sp, #8]
 800d082:	2300      	movs	r3, #0
 800d084:	f7fc f998 	bl	80093b8 <ucdr_init_buffer_origin_offset>
 800d088:	9b02      	ldr	r3, [sp, #8]
 800d08a:	4652      	mov	r2, sl
 800d08c:	210d      	movs	r1, #13
 800d08e:	455b      	cmp	r3, fp
 800d090:	bf34      	ite	cc
 800d092:	2302      	movcc	r3, #2
 800d094:	2300      	movcs	r3, #0
 800d096:	a808      	add	r0, sp, #32
 800d098:	f7ff fe80 	bl	800cd9c <uxr_buffer_submessage_header>
 800d09c:	8921      	ldrh	r1, [r4, #8]
 800d09e:	6863      	ldr	r3, [r4, #4]
 800d0a0:	4638      	mov	r0, r7
 800d0a2:	fbb7 f2f1 	udiv	r2, r7, r1
 800d0a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d0aa:	fb01 7212 	mls	r2, r1, r2, r7
 800d0ae:	2101      	movs	r1, #1
 800d0b0:	b292      	uxth	r2, r2
 800d0b2:	fb02 f303 	mul.w	r3, r2, r3
 800d0b6:	6822      	ldr	r2, [r4, #0]
 800d0b8:	f842 b003 	str.w	fp, [r2, r3]
 800d0bc:	f004 f992 	bl	80113e4 <uxr_seq_num_add>
 800d0c0:	9b03      	ldr	r3, [sp, #12]
 800d0c2:	f108 0104 	add.w	r1, r8, #4
 800d0c6:	4607      	mov	r7, r0
 800d0c8:	f1a3 0208 	sub.w	r2, r3, #8
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	4449      	add	r1, r9
 800d0d0:	eba2 0208 	sub.w	r2, r2, r8
 800d0d4:	f7fc f982 	bl	80093dc <ucdr_init_buffer>
 800d0d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d0da:	2107      	movs	r1, #7
 800d0dc:	81e7      	strh	r7, [r4, #14]
 800d0de:	1d1a      	adds	r2, r3, #4
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	4630      	mov	r0, r6
 800d0e4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800d0e8:	bf28      	it	cs
 800d0ea:	461a      	movcs	r2, r3
 800d0ec:	b292      	uxth	r2, r2
 800d0ee:	f7ff fe55 	bl	800cd9c <uxr_buffer_submessage_header>
 800d0f2:	aa07      	add	r2, sp, #28
 800d0f4:	9904      	ldr	r1, [sp, #16]
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	f7ff fce0 	bl	800cabc <uxr_init_base_object_request>
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	b320      	cbz	r0, 800d14a <uxr_prepare_output_stream_fragmented+0x14a>
 800d100:	a907      	add	r1, sp, #28
 800d102:	4630      	mov	r0, r6
 800d104:	f000 ff08 	bl	800df18 <uxr_serialize_WRITE_DATA_Payload_Data>
 800d108:	4630      	mov	r0, r6
 800d10a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800d10e:	1a52      	subs	r2, r2, r1
 800d110:	f7fc f964 	bl	80093dc <ucdr_init_buffer>
 800d114:	9b05      	ldr	r3, [sp, #20]
 800d116:	9a02      	ldr	r2, [sp, #8]
 800d118:	4630      	mov	r0, r6
 800d11a:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800d11e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d120:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 800d124:	462a      	mov	r2, r5
 800d126:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800d12a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d12c:	4918      	ldr	r1, [pc, #96]	; (800d190 <uxr_prepare_output_stream_fragmented+0x190>)
 800d12e:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800d132:	f7fc f927 	bl	8009384 <ucdr_set_on_full_buffer_callback>
 800d136:	4620      	mov	r0, r4
 800d138:	b011      	add	sp, #68	; 0x44
 800d13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d140:	4628      	mov	r0, r5
 800d142:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d144:	4798      	blx	r3
 800d146:	b920      	cbnz	r0, 800d152 <uxr_prepare_output_stream_fragmented+0x152>
 800d148:	2400      	movs	r4, #0
 800d14a:	4620      	mov	r0, r4
 800d14c:	b011      	add	sp, #68	; 0x44
 800d14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d152:	4620      	mov	r0, r4
 800d154:	f004 f82e 	bl	80111b4 <get_available_free_slots>
 800d158:	2800      	cmp	r0, #0
 800d15a:	f47f af6b 	bne.w	800d034 <uxr_prepare_output_stream_fragmented+0x34>
 800d15e:	e7f3      	b.n	800d148 <uxr_prepare_output_stream_fragmented+0x148>
 800d160:	4638      	mov	r0, r7
 800d162:	2101      	movs	r1, #1
 800d164:	f004 f93e 	bl	80113e4 <uxr_seq_num_add>
 800d168:	8922      	ldrh	r2, [r4, #8]
 800d16a:	6863      	ldr	r3, [r4, #4]
 800d16c:	4607      	mov	r7, r0
 800d16e:	fbb3 f9f2 	udiv	r9, r3, r2
 800d172:	fbb0 f3f2 	udiv	r3, r0, r2
 800d176:	fb02 0313 	mls	r3, r2, r3, r0
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	fb03 f909 	mul.w	r9, r3, r9
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	f109 0904 	add.w	r9, r9, #4
 800d186:	4499      	add	r9, r3
 800d188:	7b23      	ldrb	r3, [r4, #12]
 800d18a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800d18e:	e76a      	b.n	800d066 <uxr_prepare_output_stream_fragmented+0x66>
 800d190:	0800ce8d 	.word	0x0800ce8d

0800d194 <uxr_serialize_message_header>:
 800d194:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d196:	4616      	mov	r6, r2
 800d198:	b083      	sub	sp, #12
 800d19a:	4604      	mov	r4, r0
 800d19c:	460d      	mov	r5, r1
 800d19e:	9301      	str	r3, [sp, #4]
 800d1a0:	9f08      	ldr	r7, [sp, #32]
 800d1a2:	f7fd fc15 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800d1a6:	4631      	mov	r1, r6
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f7fd fc11 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800d1ae:	9a01      	ldr	r2, [sp, #4]
 800d1b0:	2101      	movs	r1, #1
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f7fd fcb8 	bl	800ab28 <ucdr_serialize_endian_uint16_t>
 800d1b8:	062b      	lsls	r3, r5, #24
 800d1ba:	d501      	bpl.n	800d1c0 <uxr_serialize_message_header+0x2c>
 800d1bc:	b003      	add	sp, #12
 800d1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1c0:	2204      	movs	r2, #4
 800d1c2:	4639      	mov	r1, r7
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	b003      	add	sp, #12
 800d1c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d1cc:	f7fd bb06 	b.w	800a7dc <ucdr_serialize_array_uint8_t>

0800d1d0 <uxr_deserialize_message_header>:
 800d1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1d2:	4616      	mov	r6, r2
 800d1d4:	b083      	sub	sp, #12
 800d1d6:	4604      	mov	r4, r0
 800d1d8:	460d      	mov	r5, r1
 800d1da:	9301      	str	r3, [sp, #4]
 800d1dc:	9f08      	ldr	r7, [sp, #32]
 800d1de:	f7fd fc0d 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800d1e2:	4631      	mov	r1, r6
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f7fd fc09 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800d1ea:	9a01      	ldr	r2, [sp, #4]
 800d1ec:	2101      	movs	r1, #1
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	f7fd fd8e 	bl	800ad10 <ucdr_deserialize_endian_uint16_t>
 800d1f4:	f995 3000 	ldrsb.w	r3, [r5]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	da01      	bge.n	800d200 <uxr_deserialize_message_header+0x30>
 800d1fc:	b003      	add	sp, #12
 800d1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d200:	2204      	movs	r2, #4
 800d202:	4639      	mov	r1, r7
 800d204:	4620      	mov	r0, r4
 800d206:	b003      	add	sp, #12
 800d208:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d20c:	f7fd bb4a 	b.w	800a8a4 <ucdr_deserialize_array_uint8_t>

0800d210 <uxr_serialize_submessage_header>:
 800d210:	b530      	push	{r4, r5, lr}
 800d212:	4615      	mov	r5, r2
 800d214:	b083      	sub	sp, #12
 800d216:	4604      	mov	r4, r0
 800d218:	9301      	str	r3, [sp, #4]
 800d21a:	f7fd fbd9 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800d21e:	4629      	mov	r1, r5
 800d220:	4620      	mov	r0, r4
 800d222:	f7fd fbd5 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800d226:	9a01      	ldr	r2, [sp, #4]
 800d228:	2101      	movs	r1, #1
 800d22a:	4620      	mov	r0, r4
 800d22c:	b003      	add	sp, #12
 800d22e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d232:	f7fd bc79 	b.w	800ab28 <ucdr_serialize_endian_uint16_t>
 800d236:	bf00      	nop

0800d238 <uxr_deserialize_submessage_header>:
 800d238:	b530      	push	{r4, r5, lr}
 800d23a:	4615      	mov	r5, r2
 800d23c:	b083      	sub	sp, #12
 800d23e:	4604      	mov	r4, r0
 800d240:	9301      	str	r3, [sp, #4]
 800d242:	f7fd fbdb 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800d246:	4629      	mov	r1, r5
 800d248:	4620      	mov	r0, r4
 800d24a:	f7fd fbd7 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800d24e:	9a01      	ldr	r2, [sp, #4]
 800d250:	2101      	movs	r1, #1
 800d252:	4620      	mov	r0, r4
 800d254:	b003      	add	sp, #12
 800d256:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d25a:	f7fd bd59 	b.w	800ad10 <ucdr_deserialize_endian_uint16_t>
 800d25e:	bf00      	nop

0800d260 <uxr_serialize_CLIENT_Representation>:
 800d260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d264:	2204      	movs	r2, #4
 800d266:	460e      	mov	r6, r1
 800d268:	4605      	mov	r5, r0
 800d26a:	f7fd fab7 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800d26e:	4607      	mov	r7, r0
 800d270:	2202      	movs	r2, #2
 800d272:	1d31      	adds	r1, r6, #4
 800d274:	4628      	mov	r0, r5
 800d276:	f7fd fab1 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800d27a:	4038      	ands	r0, r7
 800d27c:	2202      	movs	r2, #2
 800d27e:	1db1      	adds	r1, r6, #6
 800d280:	b2c7      	uxtb	r7, r0
 800d282:	4628      	mov	r0, r5
 800d284:	f7fd faaa 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800d288:	2204      	movs	r2, #4
 800d28a:	4007      	ands	r7, r0
 800d28c:	f106 0108 	add.w	r1, r6, #8
 800d290:	4628      	mov	r0, r5
 800d292:	f7fd faa3 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800d296:	4007      	ands	r7, r0
 800d298:	7b31      	ldrb	r1, [r6, #12]
 800d29a:	4628      	mov	r0, r5
 800d29c:	f7fd fb98 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800d2a0:	7b71      	ldrb	r1, [r6, #13]
 800d2a2:	4007      	ands	r7, r0
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	f7fd fb65 	bl	800a974 <ucdr_serialize_bool>
 800d2aa:	7b73      	ldrb	r3, [r6, #13]
 800d2ac:	ea07 0800 	and.w	r8, r7, r0
 800d2b0:	b93b      	cbnz	r3, 800d2c2 <uxr_serialize_CLIENT_Representation+0x62>
 800d2b2:	8bb1      	ldrh	r1, [r6, #28]
 800d2b4:	4628      	mov	r0, r5
 800d2b6:	f7fd fbb7 	bl	800aa28 <ucdr_serialize_uint16_t>
 800d2ba:	ea08 0000 	and.w	r0, r8, r0
 800d2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2c2:	6931      	ldr	r1, [r6, #16]
 800d2c4:	4628      	mov	r0, r5
 800d2c6:	f7fd fd99 	bl	800adfc <ucdr_serialize_uint32_t>
 800d2ca:	6933      	ldr	r3, [r6, #16]
 800d2cc:	b1e3      	cbz	r3, 800d308 <uxr_serialize_CLIENT_Representation+0xa8>
 800d2ce:	b1c0      	cbz	r0, 800d302 <uxr_serialize_CLIENT_Representation+0xa2>
 800d2d0:	4637      	mov	r7, r6
 800d2d2:	f04f 0900 	mov.w	r9, #0
 800d2d6:	e000      	b.n	800d2da <uxr_serialize_CLIENT_Representation+0x7a>
 800d2d8:	b19c      	cbz	r4, 800d302 <uxr_serialize_CLIENT_Representation+0xa2>
 800d2da:	6979      	ldr	r1, [r7, #20]
 800d2dc:	4628      	mov	r0, r5
 800d2de:	f003 f96b 	bl	80105b8 <ucdr_serialize_string>
 800d2e2:	69b9      	ldr	r1, [r7, #24]
 800d2e4:	4604      	mov	r4, r0
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	f003 f966 	bl	80105b8 <ucdr_serialize_string>
 800d2ec:	f109 0901 	add.w	r9, r9, #1
 800d2f0:	6933      	ldr	r3, [r6, #16]
 800d2f2:	4004      	ands	r4, r0
 800d2f4:	3708      	adds	r7, #8
 800d2f6:	4599      	cmp	r9, r3
 800d2f8:	b2e4      	uxtb	r4, r4
 800d2fa:	d3ed      	bcc.n	800d2d8 <uxr_serialize_CLIENT_Representation+0x78>
 800d2fc:	ea08 0804 	and.w	r8, r8, r4
 800d300:	e7d7      	b.n	800d2b2 <uxr_serialize_CLIENT_Representation+0x52>
 800d302:	f04f 0800 	mov.w	r8, #0
 800d306:	e7d4      	b.n	800d2b2 <uxr_serialize_CLIENT_Representation+0x52>
 800d308:	ea08 0800 	and.w	r8, r8, r0
 800d30c:	e7d1      	b.n	800d2b2 <uxr_serialize_CLIENT_Representation+0x52>
 800d30e:	bf00      	nop

0800d310 <uxr_deserialize_CLIENT_Representation>:
 800d310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d314:	2204      	movs	r2, #4
 800d316:	460c      	mov	r4, r1
 800d318:	4605      	mov	r5, r0
 800d31a:	f7fd fac3 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800d31e:	4607      	mov	r7, r0
 800d320:	2202      	movs	r2, #2
 800d322:	1d21      	adds	r1, r4, #4
 800d324:	4628      	mov	r0, r5
 800d326:	f7fd fabd 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800d32a:	4038      	ands	r0, r7
 800d32c:	2202      	movs	r2, #2
 800d32e:	1da1      	adds	r1, r4, #6
 800d330:	b2c6      	uxtb	r6, r0
 800d332:	4628      	mov	r0, r5
 800d334:	f7fd fab6 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800d338:	2204      	movs	r2, #4
 800d33a:	4006      	ands	r6, r0
 800d33c:	f104 0108 	add.w	r1, r4, #8
 800d340:	4628      	mov	r0, r5
 800d342:	f7fd faaf 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800d346:	4006      	ands	r6, r0
 800d348:	f104 010c 	add.w	r1, r4, #12
 800d34c:	4628      	mov	r0, r5
 800d34e:	f7fd fb55 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800d352:	f104 010d 	add.w	r1, r4, #13
 800d356:	ea06 0700 	and.w	r7, r6, r0
 800d35a:	4628      	mov	r0, r5
 800d35c:	f7fd fb20 	bl	800a9a0 <ucdr_deserialize_bool>
 800d360:	7b63      	ldrb	r3, [r4, #13]
 800d362:	4007      	ands	r7, r0
 800d364:	b93b      	cbnz	r3, 800d376 <uxr_deserialize_CLIENT_Representation+0x66>
 800d366:	f104 011c 	add.w	r1, r4, #28
 800d36a:	4628      	mov	r0, r5
 800d36c:	f7fd fc5c 	bl	800ac28 <ucdr_deserialize_uint16_t>
 800d370:	4038      	ands	r0, r7
 800d372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d376:	f104 0110 	add.w	r1, r4, #16
 800d37a:	4628      	mov	r0, r5
 800d37c:	f7fd fe6e 	bl	800b05c <ucdr_deserialize_uint32_t>
 800d380:	6923      	ldr	r3, [r4, #16]
 800d382:	2b01      	cmp	r3, #1
 800d384:	d903      	bls.n	800d38e <uxr_deserialize_CLIENT_Representation+0x7e>
 800d386:	2301      	movs	r3, #1
 800d388:	2700      	movs	r7, #0
 800d38a:	75ab      	strb	r3, [r5, #22]
 800d38c:	e7eb      	b.n	800d366 <uxr_deserialize_CLIENT_Representation+0x56>
 800d38e:	b30b      	cbz	r3, 800d3d4 <uxr_deserialize_CLIENT_Representation+0xc4>
 800d390:	b1f0      	cbz	r0, 800d3d0 <uxr_deserialize_CLIENT_Representation+0xc0>
 800d392:	46a0      	mov	r8, r4
 800d394:	f04f 0900 	mov.w	r9, #0
 800d398:	e000      	b.n	800d39c <uxr_deserialize_CLIENT_Representation+0x8c>
 800d39a:	b1ce      	cbz	r6, 800d3d0 <uxr_deserialize_CLIENT_Representation+0xc0>
 800d39c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d3a0:	f108 0808 	add.w	r8, r8, #8
 800d3a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3a8:	4628      	mov	r0, r5
 800d3aa:	f003 f915 	bl	80105d8 <ucdr_deserialize_string>
 800d3ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d3b2:	4606      	mov	r6, r0
 800d3b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	f109 0901 	add.w	r9, r9, #1
 800d3be:	f003 f90b 	bl	80105d8 <ucdr_deserialize_string>
 800d3c2:	6923      	ldr	r3, [r4, #16]
 800d3c4:	4006      	ands	r6, r0
 800d3c6:	4599      	cmp	r9, r3
 800d3c8:	b2f6      	uxtb	r6, r6
 800d3ca:	d3e6      	bcc.n	800d39a <uxr_deserialize_CLIENT_Representation+0x8a>
 800d3cc:	4037      	ands	r7, r6
 800d3ce:	e7ca      	b.n	800d366 <uxr_deserialize_CLIENT_Representation+0x56>
 800d3d0:	2700      	movs	r7, #0
 800d3d2:	e7c8      	b.n	800d366 <uxr_deserialize_CLIENT_Representation+0x56>
 800d3d4:	4007      	ands	r7, r0
 800d3d6:	e7c6      	b.n	800d366 <uxr_deserialize_CLIENT_Representation+0x56>

0800d3d8 <uxr_serialize_AGENT_Representation>:
 800d3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3dc:	2204      	movs	r2, #4
 800d3de:	460f      	mov	r7, r1
 800d3e0:	4605      	mov	r5, r0
 800d3e2:	f7fd f9fb 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	2202      	movs	r2, #2
 800d3ea:	1d39      	adds	r1, r7, #4
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	f7fd f9f5 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800d3f2:	4020      	ands	r0, r4
 800d3f4:	2202      	movs	r2, #2
 800d3f6:	1db9      	adds	r1, r7, #6
 800d3f8:	b2c4      	uxtb	r4, r0
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f7fd f9ee 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800d400:	7a39      	ldrb	r1, [r7, #8]
 800d402:	4004      	ands	r4, r0
 800d404:	4628      	mov	r0, r5
 800d406:	f7fd fab5 	bl	800a974 <ucdr_serialize_bool>
 800d40a:	7a3b      	ldrb	r3, [r7, #8]
 800d40c:	ea00 0804 	and.w	r8, r0, r4
 800d410:	b913      	cbnz	r3, 800d418 <uxr_serialize_AGENT_Representation+0x40>
 800d412:	4640      	mov	r0, r8
 800d414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d418:	68f9      	ldr	r1, [r7, #12]
 800d41a:	4628      	mov	r0, r5
 800d41c:	f7fd fcee 	bl	800adfc <ucdr_serialize_uint32_t>
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	b303      	cbz	r3, 800d466 <uxr_serialize_AGENT_Representation+0x8e>
 800d424:	b1d0      	cbz	r0, 800d45c <uxr_serialize_AGENT_Representation+0x84>
 800d426:	463e      	mov	r6, r7
 800d428:	f04f 0900 	mov.w	r9, #0
 800d42c:	e000      	b.n	800d430 <uxr_serialize_AGENT_Representation+0x58>
 800d42e:	b1ac      	cbz	r4, 800d45c <uxr_serialize_AGENT_Representation+0x84>
 800d430:	6931      	ldr	r1, [r6, #16]
 800d432:	4628      	mov	r0, r5
 800d434:	f003 f8c0 	bl	80105b8 <ucdr_serialize_string>
 800d438:	6971      	ldr	r1, [r6, #20]
 800d43a:	4604      	mov	r4, r0
 800d43c:	4628      	mov	r0, r5
 800d43e:	f003 f8bb 	bl	80105b8 <ucdr_serialize_string>
 800d442:	f109 0901 	add.w	r9, r9, #1
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	4004      	ands	r4, r0
 800d44a:	3608      	adds	r6, #8
 800d44c:	4599      	cmp	r9, r3
 800d44e:	b2e4      	uxtb	r4, r4
 800d450:	d3ed      	bcc.n	800d42e <uxr_serialize_AGENT_Representation+0x56>
 800d452:	ea08 0804 	and.w	r8, r8, r4
 800d456:	4640      	mov	r0, r8
 800d458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d45c:	f04f 0800 	mov.w	r8, #0
 800d460:	4640      	mov	r0, r8
 800d462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d466:	ea08 0800 	and.w	r8, r8, r0
 800d46a:	e7d2      	b.n	800d412 <uxr_serialize_AGENT_Representation+0x3a>

0800d46c <uxr_serialize_DATAWRITER_Representation>:
 800d46c:	b570      	push	{r4, r5, r6, lr}
 800d46e:	460d      	mov	r5, r1
 800d470:	7809      	ldrb	r1, [r1, #0]
 800d472:	4606      	mov	r6, r0
 800d474:	f7fd faac 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800d478:	4604      	mov	r4, r0
 800d47a:	b130      	cbz	r0, 800d48a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d47c:	782b      	ldrb	r3, [r5, #0]
 800d47e:	2b02      	cmp	r3, #2
 800d480:	d00c      	beq.n	800d49c <uxr_serialize_DATAWRITER_Representation+0x30>
 800d482:	2b03      	cmp	r3, #3
 800d484:	d010      	beq.n	800d4a8 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800d486:	2b01      	cmp	r3, #1
 800d488:	d008      	beq.n	800d49c <uxr_serialize_DATAWRITER_Representation+0x30>
 800d48a:	2202      	movs	r2, #2
 800d48c:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800d490:	4630      	mov	r0, r6
 800d492:	f7fd f9a3 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800d496:	4020      	ands	r0, r4
 800d498:	b2c0      	uxtb	r0, r0
 800d49a:	bd70      	pop	{r4, r5, r6, pc}
 800d49c:	6869      	ldr	r1, [r5, #4]
 800d49e:	4630      	mov	r0, r6
 800d4a0:	f003 f88a 	bl	80105b8 <ucdr_serialize_string>
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	e7f0      	b.n	800d48a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d4a8:	4629      	mov	r1, r5
 800d4aa:	4630      	mov	r0, r6
 800d4ac:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800d4b0:	3104      	adds	r1, #4
 800d4b2:	f7fc f833 	bl	800951c <ucdr_serialize_sequence_uint8_t>
 800d4b6:	4604      	mov	r4, r0
 800d4b8:	e7e7      	b.n	800d48a <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d4ba:	bf00      	nop

0800d4bc <uxr_serialize_ObjectVariant.part.0>:
 800d4bc:	b570      	push	{r4, r5, r6, lr}
 800d4be:	780b      	ldrb	r3, [r1, #0]
 800d4c0:	460c      	mov	r4, r1
 800d4c2:	4605      	mov	r5, r0
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	2b0d      	cmp	r3, #13
 800d4c8:	d854      	bhi.n	800d574 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800d4ca:	e8df f003 	tbb	[pc, r3]
 800d4ce:	0730      	.short	0x0730
 800d4d0:	07071b1b 	.word	0x07071b1b
 800d4d4:	0c530707 	.word	0x0c530707
 800d4d8:	494e0c0c 	.word	0x494e0c0c
 800d4dc:	3104      	adds	r1, #4
 800d4de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d4e2:	f7ff bfc3 	b.w	800d46c <uxr_serialize_DATAWRITER_Representation>
 800d4e6:	7909      	ldrb	r1, [r1, #4]
 800d4e8:	f7fd fa72 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800d4ec:	b1e8      	cbz	r0, 800d52a <uxr_serialize_ObjectVariant.part.0+0x6e>
 800d4ee:	7923      	ldrb	r3, [r4, #4]
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d001      	beq.n	800d4f8 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d13d      	bne.n	800d574 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800d4f8:	68a1      	ldr	r1, [r4, #8]
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d500:	f003 b85a 	b.w	80105b8 <ucdr_serialize_string>
 800d504:	7909      	ldrb	r1, [r1, #4]
 800d506:	f7fd fa63 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800d50a:	4606      	mov	r6, r0
 800d50c:	b120      	cbz	r0, 800d518 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d50e:	7923      	ldrb	r3, [r4, #4]
 800d510:	2b02      	cmp	r3, #2
 800d512:	d039      	beq.n	800d588 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800d514:	2b03      	cmp	r3, #3
 800d516:	d02f      	beq.n	800d578 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800d518:	2202      	movs	r2, #2
 800d51a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800d51e:	4628      	mov	r0, r5
 800d520:	f7fd f95c 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800d524:	4030      	ands	r0, r6
 800d526:	b2c0      	uxtb	r0, r0
 800d528:	bd70      	pop	{r4, r5, r6, pc}
 800d52a:	2000      	movs	r0, #0
 800d52c:	bd70      	pop	{r4, r5, r6, pc}
 800d52e:	7909      	ldrb	r1, [r1, #4]
 800d530:	f7fd fa4e 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800d534:	4606      	mov	r6, r0
 800d536:	b158      	cbz	r0, 800d550 <uxr_serialize_ObjectVariant.part.0+0x94>
 800d538:	7923      	ldrb	r3, [r4, #4]
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	d003      	beq.n	800d546 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800d53e:	2b03      	cmp	r3, #3
 800d540:	d028      	beq.n	800d594 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800d542:	2b01      	cmp	r3, #1
 800d544:	d104      	bne.n	800d550 <uxr_serialize_ObjectVariant.part.0+0x94>
 800d546:	68a1      	ldr	r1, [r4, #8]
 800d548:	4628      	mov	r0, r5
 800d54a:	f003 f835 	bl	80105b8 <ucdr_serialize_string>
 800d54e:	4606      	mov	r6, r0
 800d550:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800d554:	4628      	mov	r0, r5
 800d556:	f7fd ff77 	bl	800b448 <ucdr_serialize_int16_t>
 800d55a:	4030      	ands	r0, r6
 800d55c:	b2c0      	uxtb	r0, r0
 800d55e:	bd70      	pop	{r4, r5, r6, pc}
 800d560:	3104      	adds	r1, #4
 800d562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d566:	f7ff be7b 	b.w	800d260 <uxr_serialize_CLIENT_Representation>
 800d56a:	3104      	adds	r1, #4
 800d56c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d570:	f7ff bf32 	b.w	800d3d8 <uxr_serialize_AGENT_Representation>
 800d574:	2001      	movs	r0, #1
 800d576:	bd70      	pop	{r4, r5, r6, pc}
 800d578:	68a2      	ldr	r2, [r4, #8]
 800d57a:	f104 010c 	add.w	r1, r4, #12
 800d57e:	4628      	mov	r0, r5
 800d580:	f7fb ffcc 	bl	800951c <ucdr_serialize_sequence_uint8_t>
 800d584:	4606      	mov	r6, r0
 800d586:	e7c7      	b.n	800d518 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d588:	68a1      	ldr	r1, [r4, #8]
 800d58a:	4628      	mov	r0, r5
 800d58c:	f003 f814 	bl	80105b8 <ucdr_serialize_string>
 800d590:	4606      	mov	r6, r0
 800d592:	e7c1      	b.n	800d518 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d594:	68a2      	ldr	r2, [r4, #8]
 800d596:	f104 010c 	add.w	r1, r4, #12
 800d59a:	4628      	mov	r0, r5
 800d59c:	f7fb ffbe 	bl	800951c <ucdr_serialize_sequence_uint8_t>
 800d5a0:	4606      	mov	r6, r0
 800d5a2:	e7d5      	b.n	800d550 <uxr_serialize_ObjectVariant.part.0+0x94>

0800d5a4 <uxr_deserialize_DATAWRITER_Representation>:
 800d5a4:	b570      	push	{r4, r5, r6, lr}
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	460d      	mov	r5, r1
 800d5aa:	f7fd fa27 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	b130      	cbz	r0, 800d5c0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d5b2:	782b      	ldrb	r3, [r5, #0]
 800d5b4:	2b02      	cmp	r3, #2
 800d5b6:	d00c      	beq.n	800d5d2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800d5b8:	2b03      	cmp	r3, #3
 800d5ba:	d012      	beq.n	800d5e2 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d008      	beq.n	800d5d2 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800d5c0:	2202      	movs	r2, #2
 800d5c2:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800d5c6:	4630      	mov	r0, r6
 800d5c8:	f7fd f96c 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800d5cc:	4020      	ands	r0, r4
 800d5ce:	b2c0      	uxtb	r0, r0
 800d5d0:	bd70      	pop	{r4, r5, r6, pc}
 800d5d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5d6:	6869      	ldr	r1, [r5, #4]
 800d5d8:	4630      	mov	r0, r6
 800d5da:	f002 fffd 	bl	80105d8 <ucdr_deserialize_string>
 800d5de:	4604      	mov	r4, r0
 800d5e0:	e7ee      	b.n	800d5c0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d5e2:	1d2b      	adds	r3, r5, #4
 800d5e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5e8:	f105 0108 	add.w	r1, r5, #8
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	f7fb ffa7 	bl	8009540 <ucdr_deserialize_sequence_uint8_t>
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	e7e4      	b.n	800d5c0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d5f6:	bf00      	nop

0800d5f8 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800d5f8:	b570      	push	{r4, r5, r6, lr}
 800d5fa:	460d      	mov	r5, r1
 800d5fc:	7809      	ldrb	r1, [r1, #0]
 800d5fe:	4606      	mov	r6, r0
 800d600:	f7fd f9b8 	bl	800a974 <ucdr_serialize_bool>
 800d604:	782b      	ldrb	r3, [r5, #0]
 800d606:	4604      	mov	r4, r0
 800d608:	b94b      	cbnz	r3, 800d61e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800d60a:	7a29      	ldrb	r1, [r5, #8]
 800d60c:	4630      	mov	r0, r6
 800d60e:	f7fd f9b1 	bl	800a974 <ucdr_serialize_bool>
 800d612:	7a2b      	ldrb	r3, [r5, #8]
 800d614:	4004      	ands	r4, r0
 800d616:	b2e4      	uxtb	r4, r4
 800d618:	b943      	cbnz	r3, 800d62c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800d61a:	4620      	mov	r0, r4
 800d61c:	bd70      	pop	{r4, r5, r6, pc}
 800d61e:	6869      	ldr	r1, [r5, #4]
 800d620:	4630      	mov	r0, r6
 800d622:	f002 ffc9 	bl	80105b8 <ucdr_serialize_string>
 800d626:	4004      	ands	r4, r0
 800d628:	b2e4      	uxtb	r4, r4
 800d62a:	e7ee      	b.n	800d60a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800d62c:	68e9      	ldr	r1, [r5, #12]
 800d62e:	4630      	mov	r0, r6
 800d630:	f002 ffc2 	bl	80105b8 <ucdr_serialize_string>
 800d634:	4004      	ands	r4, r0
 800d636:	4620      	mov	r0, r4
 800d638:	bd70      	pop	{r4, r5, r6, pc}
 800d63a:	bf00      	nop

0800d63c <uxr_serialize_OBJK_Topic_Binary>:
 800d63c:	b570      	push	{r4, r5, r6, lr}
 800d63e:	460d      	mov	r5, r1
 800d640:	4606      	mov	r6, r0
 800d642:	6809      	ldr	r1, [r1, #0]
 800d644:	f002 ffb8 	bl	80105b8 <ucdr_serialize_string>
 800d648:	4604      	mov	r4, r0
 800d64a:	7929      	ldrb	r1, [r5, #4]
 800d64c:	4630      	mov	r0, r6
 800d64e:	f7fd f991 	bl	800a974 <ucdr_serialize_bool>
 800d652:	792b      	ldrb	r3, [r5, #4]
 800d654:	4004      	ands	r4, r0
 800d656:	b2e4      	uxtb	r4, r4
 800d658:	b943      	cbnz	r3, 800d66c <uxr_serialize_OBJK_Topic_Binary+0x30>
 800d65a:	7b29      	ldrb	r1, [r5, #12]
 800d65c:	4630      	mov	r0, r6
 800d65e:	f7fd f989 	bl	800a974 <ucdr_serialize_bool>
 800d662:	7b2b      	ldrb	r3, [r5, #12]
 800d664:	4004      	ands	r4, r0
 800d666:	b93b      	cbnz	r3, 800d678 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800d668:	4620      	mov	r0, r4
 800d66a:	bd70      	pop	{r4, r5, r6, pc}
 800d66c:	68a9      	ldr	r1, [r5, #8]
 800d66e:	4630      	mov	r0, r6
 800d670:	f002 ffa2 	bl	80105b8 <ucdr_serialize_string>
 800d674:	4004      	ands	r4, r0
 800d676:	e7f0      	b.n	800d65a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800d678:	6929      	ldr	r1, [r5, #16]
 800d67a:	4630      	mov	r0, r6
 800d67c:	f002 ff9c 	bl	80105b8 <ucdr_serialize_string>
 800d680:	4004      	ands	r4, r0
 800d682:	b2e4      	uxtb	r4, r4
 800d684:	4620      	mov	r0, r4
 800d686:	bd70      	pop	{r4, r5, r6, pc}

0800d688 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800d688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d68c:	460c      	mov	r4, r1
 800d68e:	7809      	ldrb	r1, [r1, #0]
 800d690:	4606      	mov	r6, r0
 800d692:	f7fd f96f 	bl	800a974 <ucdr_serialize_bool>
 800d696:	7823      	ldrb	r3, [r4, #0]
 800d698:	4605      	mov	r5, r0
 800d69a:	b96b      	cbnz	r3, 800d6b8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800d69c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f7fd f967 	bl	800a974 <ucdr_serialize_bool>
 800d6a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d6aa:	4005      	ands	r5, r0
 800d6ac:	b2ed      	uxtb	r5, r5
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d169      	bne.n	800d786 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b8:	6861      	ldr	r1, [r4, #4]
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f7fd fb9e 	bl	800adfc <ucdr_serialize_uint32_t>
 800d6c0:	6863      	ldr	r3, [r4, #4]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d06b      	beq.n	800d79e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	d067      	beq.n	800d79a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d6ca:	68a1      	ldr	r1, [r4, #8]
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	f002 ff73 	bl	80105b8 <ucdr_serialize_string>
 800d6d2:	6863      	ldr	r3, [r4, #4]
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d953      	bls.n	800d780 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d6d8:	2800      	cmp	r0, #0
 800d6da:	d05e      	beq.n	800d79a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d6dc:	68e1      	ldr	r1, [r4, #12]
 800d6de:	4630      	mov	r0, r6
 800d6e0:	f002 ff6a 	bl	80105b8 <ucdr_serialize_string>
 800d6e4:	6863      	ldr	r3, [r4, #4]
 800d6e6:	2b02      	cmp	r3, #2
 800d6e8:	d94a      	bls.n	800d780 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	d055      	beq.n	800d79a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d6ee:	6921      	ldr	r1, [r4, #16]
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	f002 ff61 	bl	80105b8 <ucdr_serialize_string>
 800d6f6:	6863      	ldr	r3, [r4, #4]
 800d6f8:	2b03      	cmp	r3, #3
 800d6fa:	d941      	bls.n	800d780 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d04c      	beq.n	800d79a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d700:	6961      	ldr	r1, [r4, #20]
 800d702:	4630      	mov	r0, r6
 800d704:	f002 ff58 	bl	80105b8 <ucdr_serialize_string>
 800d708:	6863      	ldr	r3, [r4, #4]
 800d70a:	2b04      	cmp	r3, #4
 800d70c:	d938      	bls.n	800d780 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d70e:	2800      	cmp	r0, #0
 800d710:	d043      	beq.n	800d79a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d712:	69a1      	ldr	r1, [r4, #24]
 800d714:	4630      	mov	r0, r6
 800d716:	f002 ff4f 	bl	80105b8 <ucdr_serialize_string>
 800d71a:	6863      	ldr	r3, [r4, #4]
 800d71c:	2b05      	cmp	r3, #5
 800d71e:	d92f      	bls.n	800d780 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d720:	2800      	cmp	r0, #0
 800d722:	d03a      	beq.n	800d79a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d724:	69e1      	ldr	r1, [r4, #28]
 800d726:	4630      	mov	r0, r6
 800d728:	f002 ff46 	bl	80105b8 <ucdr_serialize_string>
 800d72c:	6863      	ldr	r3, [r4, #4]
 800d72e:	2b06      	cmp	r3, #6
 800d730:	d926      	bls.n	800d780 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d732:	b390      	cbz	r0, 800d79a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d734:	6a21      	ldr	r1, [r4, #32]
 800d736:	4630      	mov	r0, r6
 800d738:	f002 ff3e 	bl	80105b8 <ucdr_serialize_string>
 800d73c:	6863      	ldr	r3, [r4, #4]
 800d73e:	2b07      	cmp	r3, #7
 800d740:	d91e      	bls.n	800d780 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d742:	b350      	cbz	r0, 800d79a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d744:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d746:	4630      	mov	r0, r6
 800d748:	f002 ff36 	bl	80105b8 <ucdr_serialize_string>
 800d74c:	6863      	ldr	r3, [r4, #4]
 800d74e:	2b08      	cmp	r3, #8
 800d750:	d916      	bls.n	800d780 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d752:	b310      	cbz	r0, 800d79a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d754:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d756:	4630      	mov	r0, r6
 800d758:	f002 ff2e 	bl	80105b8 <ucdr_serialize_string>
 800d75c:	6863      	ldr	r3, [r4, #4]
 800d75e:	2b09      	cmp	r3, #9
 800d760:	d90e      	bls.n	800d780 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d762:	b1d0      	cbz	r0, 800d79a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d764:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800d768:	2709      	movs	r7, #9
 800d76a:	e000      	b.n	800d76e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800d76c:	b1a8      	cbz	r0, 800d79a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d76e:	f858 1b04 	ldr.w	r1, [r8], #4
 800d772:	4630      	mov	r0, r6
 800d774:	f002 ff20 	bl	80105b8 <ucdr_serialize_string>
 800d778:	3701      	adds	r7, #1
 800d77a:	6862      	ldr	r2, [r4, #4]
 800d77c:	4297      	cmp	r7, r2
 800d77e:	d3f5      	bcc.n	800d76c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800d780:	4005      	ands	r5, r0
 800d782:	b2ed      	uxtb	r5, r5
 800d784:	e78a      	b.n	800d69c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d786:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d788:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d78c:	4630      	mov	r0, r6
 800d78e:	f7fb fec5 	bl	800951c <ucdr_serialize_sequence_uint8_t>
 800d792:	4005      	ands	r5, r0
 800d794:	4628      	mov	r0, r5
 800d796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d79a:	2500      	movs	r5, #0
 800d79c:	e77e      	b.n	800d69c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d79e:	4028      	ands	r0, r5
 800d7a0:	b2c5      	uxtb	r5, r0
 800d7a2:	e77b      	b.n	800d69c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800d7a4 <uxr_serialize_OBJK_Publisher_Binary>:
 800d7a4:	b570      	push	{r4, r5, r6, lr}
 800d7a6:	460d      	mov	r5, r1
 800d7a8:	7809      	ldrb	r1, [r1, #0]
 800d7aa:	4606      	mov	r6, r0
 800d7ac:	f7fd f8e2 	bl	800a974 <ucdr_serialize_bool>
 800d7b0:	782b      	ldrb	r3, [r5, #0]
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	b94b      	cbnz	r3, 800d7ca <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800d7b6:	7a29      	ldrb	r1, [r5, #8]
 800d7b8:	4630      	mov	r0, r6
 800d7ba:	f7fd f8db 	bl	800a974 <ucdr_serialize_bool>
 800d7be:	7a2b      	ldrb	r3, [r5, #8]
 800d7c0:	4004      	ands	r4, r0
 800d7c2:	b2e4      	uxtb	r4, r4
 800d7c4:	b943      	cbnz	r3, 800d7d8 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	bd70      	pop	{r4, r5, r6, pc}
 800d7ca:	6869      	ldr	r1, [r5, #4]
 800d7cc:	4630      	mov	r0, r6
 800d7ce:	f002 fef3 	bl	80105b8 <ucdr_serialize_string>
 800d7d2:	4004      	ands	r4, r0
 800d7d4:	b2e4      	uxtb	r4, r4
 800d7d6:	e7ee      	b.n	800d7b6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800d7d8:	f105 010c 	add.w	r1, r5, #12
 800d7dc:	4630      	mov	r0, r6
 800d7de:	f7ff ff53 	bl	800d688 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800d7e2:	4004      	ands	r4, r0
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	bd70      	pop	{r4, r5, r6, pc}

0800d7e8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800d7e8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800d7ec:	4688      	mov	r8, r1
 800d7ee:	4681      	mov	r9, r0
 800d7f0:	8809      	ldrh	r1, [r1, #0]
 800d7f2:	f7fd f919 	bl	800aa28 <ucdr_serialize_uint16_t>
 800d7f6:	4606      	mov	r6, r0
 800d7f8:	f898 1002 	ldrb.w	r1, [r8, #2]
 800d7fc:	4648      	mov	r0, r9
 800d7fe:	f7fd f8b9 	bl	800a974 <ucdr_serialize_bool>
 800d802:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d806:	4006      	ands	r6, r0
 800d808:	b2f5      	uxtb	r5, r6
 800d80a:	b9eb      	cbnz	r3, 800d848 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800d80c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800d810:	4648      	mov	r0, r9
 800d812:	f7fd f8af 	bl	800a974 <ucdr_serialize_bool>
 800d816:	f898 3006 	ldrb.w	r3, [r8, #6]
 800d81a:	4005      	ands	r5, r0
 800d81c:	bb7b      	cbnz	r3, 800d87e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800d81e:	f898 100c 	ldrb.w	r1, [r8, #12]
 800d822:	4648      	mov	r0, r9
 800d824:	f7fd f8a6 	bl	800a974 <ucdr_serialize_bool>
 800d828:	f898 300c 	ldrb.w	r3, [r8, #12]
 800d82c:	4005      	ands	r5, r0
 800d82e:	b9f3      	cbnz	r3, 800d86e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800d830:	f898 1014 	ldrb.w	r1, [r8, #20]
 800d834:	4648      	mov	r0, r9
 800d836:	f7fd f89d 	bl	800a974 <ucdr_serialize_bool>
 800d83a:	f898 3014 	ldrb.w	r3, [r8, #20]
 800d83e:	4005      	ands	r5, r0
 800d840:	b94b      	cbnz	r3, 800d856 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800d842:	4628      	mov	r0, r5
 800d844:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800d848:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800d84c:	4648      	mov	r0, r9
 800d84e:	f7fd f8eb 	bl	800aa28 <ucdr_serialize_uint16_t>
 800d852:	4005      	ands	r5, r0
 800d854:	e7da      	b.n	800d80c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800d856:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800d85a:	f108 011c 	add.w	r1, r8, #28
 800d85e:	4648      	mov	r0, r9
 800d860:	f7fb fe5c 	bl	800951c <ucdr_serialize_sequence_uint8_t>
 800d864:	4028      	ands	r0, r5
 800d866:	b2c5      	uxtb	r5, r0
 800d868:	4628      	mov	r0, r5
 800d86a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800d86e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d872:	4648      	mov	r0, r9
 800d874:	f7fd fac2 	bl	800adfc <ucdr_serialize_uint32_t>
 800d878:	4028      	ands	r0, r5
 800d87a:	b2c5      	uxtb	r5, r0
 800d87c:	e7d8      	b.n	800d830 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800d87e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800d882:	4648      	mov	r0, r9
 800d884:	f7fd faba 	bl	800adfc <ucdr_serialize_uint32_t>
 800d888:	4028      	ands	r0, r5
 800d88a:	b2c5      	uxtb	r5, r0
 800d88c:	e7c7      	b.n	800d81e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800d88e:	bf00      	nop

0800d890 <uxr_serialize_OBJK_DataWriter_Binary>:
 800d890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d892:	2202      	movs	r2, #2
 800d894:	460d      	mov	r5, r1
 800d896:	4606      	mov	r6, r0
 800d898:	f7fc ffa0 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800d89c:	4604      	mov	r4, r0
 800d89e:	78a9      	ldrb	r1, [r5, #2]
 800d8a0:	4630      	mov	r0, r6
 800d8a2:	f7fd f867 	bl	800a974 <ucdr_serialize_bool>
 800d8a6:	78ab      	ldrb	r3, [r5, #2]
 800d8a8:	4004      	ands	r4, r0
 800d8aa:	b2e4      	uxtb	r4, r4
 800d8ac:	b90b      	cbnz	r3, 800d8b2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8b2:	f105 0108 	add.w	r1, r5, #8
 800d8b6:	4630      	mov	r0, r6
 800d8b8:	f7ff ff96 	bl	800d7e8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800d8bc:	4607      	mov	r7, r0
 800d8be:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	f7fd f856 	bl	800a974 <ucdr_serialize_bool>
 800d8c8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800d8cc:	4038      	ands	r0, r7
 800d8ce:	b2c7      	uxtb	r7, r0
 800d8d0:	b913      	cbnz	r3, 800d8d8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800d8d2:	403c      	ands	r4, r7
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8d8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f7fd fce3 	bl	800b2a8 <ucdr_serialize_uint64_t>
 800d8e2:	4007      	ands	r7, r0
 800d8e4:	e7f5      	b.n	800d8d2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800d8e6:	bf00      	nop

0800d8e8 <uxr_deserialize_ObjectVariant>:
 800d8e8:	b570      	push	{r4, r5, r6, lr}
 800d8ea:	4605      	mov	r5, r0
 800d8ec:	460e      	mov	r6, r1
 800d8ee:	f7fd f885 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800d8f2:	b168      	cbz	r0, 800d910 <uxr_deserialize_ObjectVariant+0x28>
 800d8f4:	7833      	ldrb	r3, [r6, #0]
 800d8f6:	4604      	mov	r4, r0
 800d8f8:	3b01      	subs	r3, #1
 800d8fa:	2b0d      	cmp	r3, #13
 800d8fc:	d809      	bhi.n	800d912 <uxr_deserialize_ObjectVariant+0x2a>
 800d8fe:	e8df f003 	tbb	[pc, r3]
 800d902:	0a41      	.short	0x0a41
 800d904:	0a0a2323 	.word	0x0a0a2323
 800d908:	10080a0a 	.word	0x10080a0a
 800d90c:	565c1010 	.word	0x565c1010
 800d910:	2400      	movs	r4, #0
 800d912:	4620      	mov	r0, r4
 800d914:	bd70      	pop	{r4, r5, r6, pc}
 800d916:	1d31      	adds	r1, r6, #4
 800d918:	4628      	mov	r0, r5
 800d91a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d91e:	f7ff be41 	b.w	800d5a4 <uxr_deserialize_DATAWRITER_Representation>
 800d922:	1d31      	adds	r1, r6, #4
 800d924:	4628      	mov	r0, r5
 800d926:	f7fd f869 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800d92a:	2800      	cmp	r0, #0
 800d92c:	d0f0      	beq.n	800d910 <uxr_deserialize_ObjectVariant+0x28>
 800d92e:	7933      	ldrb	r3, [r6, #4]
 800d930:	2b01      	cmp	r3, #1
 800d932:	d001      	beq.n	800d938 <uxr_deserialize_ObjectVariant+0x50>
 800d934:	2b02      	cmp	r3, #2
 800d936:	d1ec      	bne.n	800d912 <uxr_deserialize_ObjectVariant+0x2a>
 800d938:	68b1      	ldr	r1, [r6, #8]
 800d93a:	4628      	mov	r0, r5
 800d93c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d940:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d944:	f002 be48 	b.w	80105d8 <ucdr_deserialize_string>
 800d948:	1d31      	adds	r1, r6, #4
 800d94a:	4628      	mov	r0, r5
 800d94c:	f7fd f856 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800d950:	4604      	mov	r4, r0
 800d952:	b170      	cbz	r0, 800d972 <uxr_deserialize_ObjectVariant+0x8a>
 800d954:	7933      	ldrb	r3, [r6, #4]
 800d956:	2b02      	cmp	r3, #2
 800d958:	d04c      	beq.n	800d9f4 <uxr_deserialize_ObjectVariant+0x10c>
 800d95a:	2b03      	cmp	r3, #3
 800d95c:	d109      	bne.n	800d972 <uxr_deserialize_ObjectVariant+0x8a>
 800d95e:	f106 0308 	add.w	r3, r6, #8
 800d962:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d966:	f106 010c 	add.w	r1, r6, #12
 800d96a:	4628      	mov	r0, r5
 800d96c:	f7fb fde8 	bl	8009540 <ucdr_deserialize_sequence_uint8_t>
 800d970:	4604      	mov	r4, r0
 800d972:	2202      	movs	r2, #2
 800d974:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800d978:	4628      	mov	r0, r5
 800d97a:	f7fc ff93 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800d97e:	4020      	ands	r0, r4
 800d980:	b2c4      	uxtb	r4, r0
 800d982:	e7c6      	b.n	800d912 <uxr_deserialize_ObjectVariant+0x2a>
 800d984:	1d31      	adds	r1, r6, #4
 800d986:	4628      	mov	r0, r5
 800d988:	f7fd f838 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800d98c:	4604      	mov	r4, r0
 800d98e:	b130      	cbz	r0, 800d99e <uxr_deserialize_ObjectVariant+0xb6>
 800d990:	7933      	ldrb	r3, [r6, #4]
 800d992:	2b02      	cmp	r3, #2
 800d994:	d036      	beq.n	800da04 <uxr_deserialize_ObjectVariant+0x11c>
 800d996:	2b03      	cmp	r3, #3
 800d998:	d03c      	beq.n	800da14 <uxr_deserialize_ObjectVariant+0x12c>
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d032      	beq.n	800da04 <uxr_deserialize_ObjectVariant+0x11c>
 800d99e:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800d9a2:	4628      	mov	r0, r5
 800d9a4:	f7fd fdd0 	bl	800b548 <ucdr_deserialize_int16_t>
 800d9a8:	4020      	ands	r0, r4
 800d9aa:	b2c4      	uxtb	r4, r0
 800d9ac:	e7b1      	b.n	800d912 <uxr_deserialize_ObjectVariant+0x2a>
 800d9ae:	1d31      	adds	r1, r6, #4
 800d9b0:	4628      	mov	r0, r5
 800d9b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d9b6:	f7ff bcab 	b.w	800d310 <uxr_deserialize_CLIENT_Representation>
 800d9ba:	2204      	movs	r2, #4
 800d9bc:	4628      	mov	r0, r5
 800d9be:	18b1      	adds	r1, r6, r2
 800d9c0:	f7fc ff70 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800d9c4:	4604      	mov	r4, r0
 800d9c6:	2202      	movs	r2, #2
 800d9c8:	f106 0108 	add.w	r1, r6, #8
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	f7fc ff69 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800d9d2:	4004      	ands	r4, r0
 800d9d4:	2202      	movs	r2, #2
 800d9d6:	f106 010a 	add.w	r1, r6, #10
 800d9da:	4628      	mov	r0, r5
 800d9dc:	b2e4      	uxtb	r4, r4
 800d9de:	f7fc ff61 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	f106 010c 	add.w	r1, r6, #12
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	401c      	ands	r4, r3
 800d9ec:	f7fc ffd8 	bl	800a9a0 <ucdr_deserialize_bool>
 800d9f0:	4004      	ands	r4, r0
 800d9f2:	e78e      	b.n	800d912 <uxr_deserialize_ObjectVariant+0x2a>
 800d9f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9f8:	68b1      	ldr	r1, [r6, #8]
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	f002 fdec 	bl	80105d8 <ucdr_deserialize_string>
 800da00:	4604      	mov	r4, r0
 800da02:	e7b6      	b.n	800d972 <uxr_deserialize_ObjectVariant+0x8a>
 800da04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da08:	68b1      	ldr	r1, [r6, #8]
 800da0a:	4628      	mov	r0, r5
 800da0c:	f002 fde4 	bl	80105d8 <ucdr_deserialize_string>
 800da10:	4604      	mov	r4, r0
 800da12:	e7c4      	b.n	800d99e <uxr_deserialize_ObjectVariant+0xb6>
 800da14:	f106 0308 	add.w	r3, r6, #8
 800da18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da1c:	f106 010c 	add.w	r1, r6, #12
 800da20:	4628      	mov	r0, r5
 800da22:	f7fb fd8d 	bl	8009540 <ucdr_deserialize_sequence_uint8_t>
 800da26:	4604      	mov	r4, r0
 800da28:	e7b9      	b.n	800d99e <uxr_deserialize_ObjectVariant+0xb6>
 800da2a:	bf00      	nop

0800da2c <uxr_deserialize_BaseObjectRequest>:
 800da2c:	b570      	push	{r4, r5, r6, lr}
 800da2e:	2202      	movs	r2, #2
 800da30:	4605      	mov	r5, r0
 800da32:	460e      	mov	r6, r1
 800da34:	f7fc ff36 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800da38:	2202      	movs	r2, #2
 800da3a:	4604      	mov	r4, r0
 800da3c:	4628      	mov	r0, r5
 800da3e:	18b1      	adds	r1, r6, r2
 800da40:	f7fc ff30 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800da44:	4020      	ands	r0, r4
 800da46:	b2c0      	uxtb	r0, r0
 800da48:	bd70      	pop	{r4, r5, r6, pc}
 800da4a:	bf00      	nop

0800da4c <uxr_serialize_ActivityInfoVariant>:
 800da4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da50:	460e      	mov	r6, r1
 800da52:	7809      	ldrb	r1, [r1, #0]
 800da54:	4680      	mov	r8, r0
 800da56:	f7fc ffbb 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800da5a:	4607      	mov	r7, r0
 800da5c:	b138      	cbz	r0, 800da6e <uxr_serialize_ActivityInfoVariant+0x22>
 800da5e:	7833      	ldrb	r3, [r6, #0]
 800da60:	2b06      	cmp	r3, #6
 800da62:	f000 8081 	beq.w	800db68 <uxr_serialize_ActivityInfoVariant+0x11c>
 800da66:	2b0d      	cmp	r3, #13
 800da68:	d014      	beq.n	800da94 <uxr_serialize_ActivityInfoVariant+0x48>
 800da6a:	2b05      	cmp	r3, #5
 800da6c:	d002      	beq.n	800da74 <uxr_serialize_ActivityInfoVariant+0x28>
 800da6e:	4638      	mov	r0, r7
 800da70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da74:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800da78:	4640      	mov	r0, r8
 800da7a:	f7fd fce5 	bl	800b448 <ucdr_serialize_int16_t>
 800da7e:	4607      	mov	r7, r0
 800da80:	4640      	mov	r0, r8
 800da82:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 800da86:	f7fd fc0f 	bl	800b2a8 <ucdr_serialize_uint64_t>
 800da8a:	4038      	ands	r0, r7
 800da8c:	b2c7      	uxtb	r7, r0
 800da8e:	4638      	mov	r0, r7
 800da90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da94:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800da98:	4640      	mov	r0, r8
 800da9a:	f7fd fcd5 	bl	800b448 <ucdr_serialize_int16_t>
 800da9e:	68f1      	ldr	r1, [r6, #12]
 800daa0:	4607      	mov	r7, r0
 800daa2:	4640      	mov	r0, r8
 800daa4:	f7fd f9aa 	bl	800adfc <ucdr_serialize_uint32_t>
 800daa8:	68f3      	ldr	r3, [r6, #12]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d0ed      	beq.n	800da8a <uxr_serialize_ActivityInfoVariant+0x3e>
 800daae:	b318      	cbz	r0, 800daf8 <uxr_serialize_ActivityInfoVariant+0xac>
 800dab0:	f106 090c 	add.w	r9, r6, #12
 800dab4:	2400      	movs	r4, #0
 800dab6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800daba:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 800dabe:	7c29      	ldrb	r1, [r5, #16]
 800dac0:	4640      	mov	r0, r8
 800dac2:	f7fc ff85 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800dac6:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 800daca:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800dace:	2800      	cmp	r0, #0
 800dad0:	d051      	beq.n	800db76 <uxr_serialize_ActivityInfoVariant+0x12a>
 800dad2:	7c2b      	ldrb	r3, [r5, #16]
 800dad4:	00c9      	lsls	r1, r1, #3
 800dad6:	2b03      	cmp	r3, #3
 800dad8:	d854      	bhi.n	800db84 <uxr_serialize_ActivityInfoVariant+0x138>
 800dada:	e8df f003 	tbb	[pc, r3]
 800dade:	2133      	.short	0x2133
 800dae0:	020f      	.short	0x020f
 800dae2:	4449      	add	r1, r9
 800dae4:	4640      	mov	r0, r8
 800dae6:	6889      	ldr	r1, [r1, #8]
 800dae8:	f002 fd66 	bl	80105b8 <ucdr_serialize_string>
 800daec:	3401      	adds	r4, #1
 800daee:	68f2      	ldr	r2, [r6, #12]
 800daf0:	4294      	cmp	r4, r2
 800daf2:	d244      	bcs.n	800db7e <uxr_serialize_ActivityInfoVariant+0x132>
 800daf4:	2800      	cmp	r0, #0
 800daf6:	d1de      	bne.n	800dab6 <uxr_serialize_ActivityInfoVariant+0x6a>
 800daf8:	2700      	movs	r7, #0
 800dafa:	e7b8      	b.n	800da6e <uxr_serialize_ActivityInfoVariant+0x22>
 800dafc:	3108      	adds	r1, #8
 800dafe:	44a2      	add	sl, r4
 800db00:	2210      	movs	r2, #16
 800db02:	4640      	mov	r0, r8
 800db04:	4449      	add	r1, r9
 800db06:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800db0a:	f7fc fe67 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800db0e:	4605      	mov	r5, r0
 800db10:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 800db14:	4640      	mov	r0, r8
 800db16:	f7fd f971 	bl	800adfc <ucdr_serialize_uint32_t>
 800db1a:	4028      	ands	r0, r5
 800db1c:	b2c0      	uxtb	r0, r0
 800db1e:	e7e5      	b.n	800daec <uxr_serialize_ActivityInfoVariant+0xa0>
 800db20:	3108      	adds	r1, #8
 800db22:	44a2      	add	sl, r4
 800db24:	2204      	movs	r2, #4
 800db26:	4640      	mov	r0, r8
 800db28:	4449      	add	r1, r9
 800db2a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800db2e:	f7fc fe55 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800db32:	4605      	mov	r5, r0
 800db34:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 800db38:	4640      	mov	r0, r8
 800db3a:	f7fc ff75 	bl	800aa28 <ucdr_serialize_uint16_t>
 800db3e:	4028      	ands	r0, r5
 800db40:	b2c0      	uxtb	r0, r0
 800db42:	e7d3      	b.n	800daec <uxr_serialize_ActivityInfoVariant+0xa0>
 800db44:	3108      	adds	r1, #8
 800db46:	44a2      	add	sl, r4
 800db48:	2202      	movs	r2, #2
 800db4a:	4640      	mov	r0, r8
 800db4c:	4449      	add	r1, r9
 800db4e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 800db52:	f7fc fe43 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800db56:	4605      	mov	r5, r0
 800db58:	f89a 1016 	ldrb.w	r1, [sl, #22]
 800db5c:	4640      	mov	r0, r8
 800db5e:	f7fc ff37 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800db62:	4028      	ands	r0, r5
 800db64:	b2c0      	uxtb	r0, r0
 800db66:	e7c1      	b.n	800daec <uxr_serialize_ActivityInfoVariant+0xa0>
 800db68:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 800db6c:	4640      	mov	r0, r8
 800db6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db72:	f7fd bc69 	b.w	800b448 <ucdr_serialize_int16_t>
 800db76:	3401      	adds	r4, #1
 800db78:	68f2      	ldr	r2, [r6, #12]
 800db7a:	42a2      	cmp	r2, r4
 800db7c:	d8bc      	bhi.n	800daf8 <uxr_serialize_ActivityInfoVariant+0xac>
 800db7e:	4007      	ands	r7, r0
 800db80:	b2ff      	uxtb	r7, r7
 800db82:	e774      	b.n	800da6e <uxr_serialize_ActivityInfoVariant+0x22>
 800db84:	3401      	adds	r4, #1
 800db86:	68f3      	ldr	r3, [r6, #12]
 800db88:	3518      	adds	r5, #24
 800db8a:	429c      	cmp	r4, r3
 800db8c:	d397      	bcc.n	800dabe <uxr_serialize_ActivityInfoVariant+0x72>
 800db8e:	e76e      	b.n	800da6e <uxr_serialize_ActivityInfoVariant+0x22>

0800db90 <uxr_deserialize_BaseObjectReply>:
 800db90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db94:	2202      	movs	r2, #2
 800db96:	4606      	mov	r6, r0
 800db98:	460f      	mov	r7, r1
 800db9a:	f7fc fe83 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800db9e:	2202      	movs	r2, #2
 800dba0:	4605      	mov	r5, r0
 800dba2:	4630      	mov	r0, r6
 800dba4:	18b9      	adds	r1, r7, r2
 800dba6:	f7fc fe7d 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800dbaa:	4680      	mov	r8, r0
 800dbac:	1d39      	adds	r1, r7, #4
 800dbae:	4630      	mov	r0, r6
 800dbb0:	f7fc ff24 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800dbb4:	ea05 0508 	and.w	r5, r5, r8
 800dbb8:	4604      	mov	r4, r0
 800dbba:	1d79      	adds	r1, r7, #5
 800dbbc:	4630      	mov	r0, r6
 800dbbe:	402c      	ands	r4, r5
 800dbc0:	f7fc ff1c 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800dbc4:	4020      	ands	r0, r4
 800dbc6:	b2c0      	uxtb	r0, r0
 800dbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dbcc <uxr_serialize_ReadSpecification>:
 800dbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbce:	460e      	mov	r6, r1
 800dbd0:	4607      	mov	r7, r0
 800dbd2:	7809      	ldrb	r1, [r1, #0]
 800dbd4:	f7fc fefc 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800dbd8:	4604      	mov	r4, r0
 800dbda:	7871      	ldrb	r1, [r6, #1]
 800dbdc:	4638      	mov	r0, r7
 800dbde:	f7fc fef7 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800dbe2:	4004      	ands	r4, r0
 800dbe4:	78b1      	ldrb	r1, [r6, #2]
 800dbe6:	4638      	mov	r0, r7
 800dbe8:	f7fc fec4 	bl	800a974 <ucdr_serialize_bool>
 800dbec:	78b3      	ldrb	r3, [r6, #2]
 800dbee:	b2e4      	uxtb	r4, r4
 800dbf0:	4004      	ands	r4, r0
 800dbf2:	b943      	cbnz	r3, 800dc06 <uxr_serialize_ReadSpecification+0x3a>
 800dbf4:	7a31      	ldrb	r1, [r6, #8]
 800dbf6:	4638      	mov	r0, r7
 800dbf8:	f7fc febc 	bl	800a974 <ucdr_serialize_bool>
 800dbfc:	7a33      	ldrb	r3, [r6, #8]
 800dbfe:	4004      	ands	r4, r0
 800dc00:	b93b      	cbnz	r3, 800dc12 <uxr_serialize_ReadSpecification+0x46>
 800dc02:	4620      	mov	r0, r4
 800dc04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc06:	6871      	ldr	r1, [r6, #4]
 800dc08:	4638      	mov	r0, r7
 800dc0a:	f002 fcd5 	bl	80105b8 <ucdr_serialize_string>
 800dc0e:	4004      	ands	r4, r0
 800dc10:	e7f0      	b.n	800dbf4 <uxr_serialize_ReadSpecification+0x28>
 800dc12:	8971      	ldrh	r1, [r6, #10]
 800dc14:	4638      	mov	r0, r7
 800dc16:	f7fc ff07 	bl	800aa28 <ucdr_serialize_uint16_t>
 800dc1a:	4605      	mov	r5, r0
 800dc1c:	89b1      	ldrh	r1, [r6, #12]
 800dc1e:	4638      	mov	r0, r7
 800dc20:	f7fc ff02 	bl	800aa28 <ucdr_serialize_uint16_t>
 800dc24:	4005      	ands	r5, r0
 800dc26:	89f1      	ldrh	r1, [r6, #14]
 800dc28:	4638      	mov	r0, r7
 800dc2a:	b2ed      	uxtb	r5, r5
 800dc2c:	f7fc fefc 	bl	800aa28 <ucdr_serialize_uint16_t>
 800dc30:	8a31      	ldrh	r1, [r6, #16]
 800dc32:	4025      	ands	r5, r4
 800dc34:	4604      	mov	r4, r0
 800dc36:	4638      	mov	r0, r7
 800dc38:	4025      	ands	r5, r4
 800dc3a:	f7fc fef5 	bl	800aa28 <ucdr_serialize_uint16_t>
 800dc3e:	ea00 0405 	and.w	r4, r0, r5
 800dc42:	4620      	mov	r0, r4
 800dc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc46:	bf00      	nop

0800dc48 <uxr_serialize_CREATE_CLIENT_Payload>:
 800dc48:	f7ff bb0a 	b.w	800d260 <uxr_serialize_CLIENT_Representation>

0800dc4c <uxr_serialize_CREATE_Payload>:
 800dc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc4e:	2202      	movs	r2, #2
 800dc50:	4607      	mov	r7, r0
 800dc52:	460e      	mov	r6, r1
 800dc54:	f7fc fdc2 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800dc58:	2202      	movs	r2, #2
 800dc5a:	4605      	mov	r5, r0
 800dc5c:	4638      	mov	r0, r7
 800dc5e:	18b1      	adds	r1, r6, r2
 800dc60:	f7fc fdbc 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800dc64:	7931      	ldrb	r1, [r6, #4]
 800dc66:	4604      	mov	r4, r0
 800dc68:	4638      	mov	r0, r7
 800dc6a:	f7fc feb1 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800dc6e:	b170      	cbz	r0, 800dc8e <uxr_serialize_CREATE_Payload+0x42>
 800dc70:	7933      	ldrb	r3, [r6, #4]
 800dc72:	402c      	ands	r4, r5
 800dc74:	3b01      	subs	r3, #1
 800dc76:	b2e4      	uxtb	r4, r4
 800dc78:	2b0d      	cmp	r3, #13
 800dc7a:	d809      	bhi.n	800dc90 <uxr_serialize_CREATE_Payload+0x44>
 800dc7c:	e8df f003 	tbb	[pc, r3]
 800dc80:	23230a4c 	.word	0x23230a4c
 800dc84:	0a0a0a0a 	.word	0x0a0a0a0a
 800dc88:	12121208 	.word	0x12121208
 800dc8c:	3e45      	.short	0x3e45
 800dc8e:	2400      	movs	r4, #0
 800dc90:	4620      	mov	r0, r4
 800dc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc94:	f106 0108 	add.w	r1, r6, #8
 800dc98:	4638      	mov	r0, r7
 800dc9a:	f7ff fbe7 	bl	800d46c <uxr_serialize_DATAWRITER_Representation>
 800dc9e:	4004      	ands	r4, r0
 800dca0:	4620      	mov	r0, r4
 800dca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dca4:	7a31      	ldrb	r1, [r6, #8]
 800dca6:	4638      	mov	r0, r7
 800dca8:	f7fc fe92 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800dcac:	2800      	cmp	r0, #0
 800dcae:	d0ee      	beq.n	800dc8e <uxr_serialize_CREATE_Payload+0x42>
 800dcb0:	7a33      	ldrb	r3, [r6, #8]
 800dcb2:	2b01      	cmp	r3, #1
 800dcb4:	d001      	beq.n	800dcba <uxr_serialize_CREATE_Payload+0x6e>
 800dcb6:	2b02      	cmp	r3, #2
 800dcb8:	d1ea      	bne.n	800dc90 <uxr_serialize_CREATE_Payload+0x44>
 800dcba:	68f1      	ldr	r1, [r6, #12]
 800dcbc:	4638      	mov	r0, r7
 800dcbe:	f002 fc7b 	bl	80105b8 <ucdr_serialize_string>
 800dcc2:	4004      	ands	r4, r0
 800dcc4:	e7e4      	b.n	800dc90 <uxr_serialize_CREATE_Payload+0x44>
 800dcc6:	7a31      	ldrb	r1, [r6, #8]
 800dcc8:	4638      	mov	r0, r7
 800dcca:	f7fc fe81 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800dcce:	4605      	mov	r5, r0
 800dcd0:	b158      	cbz	r0, 800dcea <uxr_serialize_CREATE_Payload+0x9e>
 800dcd2:	7a33      	ldrb	r3, [r6, #8]
 800dcd4:	2b02      	cmp	r3, #2
 800dcd6:	d034      	beq.n	800dd42 <uxr_serialize_CREATE_Payload+0xf6>
 800dcd8:	2b03      	cmp	r3, #3
 800dcda:	d106      	bne.n	800dcea <uxr_serialize_CREATE_Payload+0x9e>
 800dcdc:	68f2      	ldr	r2, [r6, #12]
 800dcde:	f106 0110 	add.w	r1, r6, #16
 800dce2:	4638      	mov	r0, r7
 800dce4:	f7fb fc1a 	bl	800951c <ucdr_serialize_sequence_uint8_t>
 800dce8:	4605      	mov	r5, r0
 800dcea:	2202      	movs	r2, #2
 800dcec:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800dcf0:	4638      	mov	r0, r7
 800dcf2:	f7fc fd73 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800dcf6:	4028      	ands	r0, r5
 800dcf8:	4004      	ands	r4, r0
 800dcfa:	e7c9      	b.n	800dc90 <uxr_serialize_CREATE_Payload+0x44>
 800dcfc:	f106 0108 	add.w	r1, r6, #8
 800dd00:	4638      	mov	r0, r7
 800dd02:	f7ff faad 	bl	800d260 <uxr_serialize_CLIENT_Representation>
 800dd06:	4004      	ands	r4, r0
 800dd08:	e7c2      	b.n	800dc90 <uxr_serialize_CREATE_Payload+0x44>
 800dd0a:	f106 0108 	add.w	r1, r6, #8
 800dd0e:	4638      	mov	r0, r7
 800dd10:	f7ff fb62 	bl	800d3d8 <uxr_serialize_AGENT_Representation>
 800dd14:	4004      	ands	r4, r0
 800dd16:	e7bb      	b.n	800dc90 <uxr_serialize_CREATE_Payload+0x44>
 800dd18:	7a31      	ldrb	r1, [r6, #8]
 800dd1a:	4638      	mov	r0, r7
 800dd1c:	f7fc fe58 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800dd20:	4605      	mov	r5, r0
 800dd22:	b130      	cbz	r0, 800dd32 <uxr_serialize_CREATE_Payload+0xe6>
 800dd24:	7a33      	ldrb	r3, [r6, #8]
 800dd26:	2b02      	cmp	r3, #2
 800dd28:	d011      	beq.n	800dd4e <uxr_serialize_CREATE_Payload+0x102>
 800dd2a:	2b03      	cmp	r3, #3
 800dd2c:	d015      	beq.n	800dd5a <uxr_serialize_CREATE_Payload+0x10e>
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d00d      	beq.n	800dd4e <uxr_serialize_CREATE_Payload+0x102>
 800dd32:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800dd36:	4638      	mov	r0, r7
 800dd38:	f7fd fb86 	bl	800b448 <ucdr_serialize_int16_t>
 800dd3c:	4028      	ands	r0, r5
 800dd3e:	4004      	ands	r4, r0
 800dd40:	e7a6      	b.n	800dc90 <uxr_serialize_CREATE_Payload+0x44>
 800dd42:	68f1      	ldr	r1, [r6, #12]
 800dd44:	4638      	mov	r0, r7
 800dd46:	f002 fc37 	bl	80105b8 <ucdr_serialize_string>
 800dd4a:	4605      	mov	r5, r0
 800dd4c:	e7cd      	b.n	800dcea <uxr_serialize_CREATE_Payload+0x9e>
 800dd4e:	68f1      	ldr	r1, [r6, #12]
 800dd50:	4638      	mov	r0, r7
 800dd52:	f002 fc31 	bl	80105b8 <ucdr_serialize_string>
 800dd56:	4605      	mov	r5, r0
 800dd58:	e7eb      	b.n	800dd32 <uxr_serialize_CREATE_Payload+0xe6>
 800dd5a:	68f2      	ldr	r2, [r6, #12]
 800dd5c:	f106 0110 	add.w	r1, r6, #16
 800dd60:	4638      	mov	r0, r7
 800dd62:	f7fb fbdb 	bl	800951c <ucdr_serialize_sequence_uint8_t>
 800dd66:	4605      	mov	r5, r0
 800dd68:	e7e3      	b.n	800dd32 <uxr_serialize_CREATE_Payload+0xe6>
 800dd6a:	bf00      	nop

0800dd6c <uxr_deserialize_GET_INFO_Payload>:
 800dd6c:	b570      	push	{r4, r5, r6, lr}
 800dd6e:	2202      	movs	r2, #2
 800dd70:	4605      	mov	r5, r0
 800dd72:	460e      	mov	r6, r1
 800dd74:	f7fc fd96 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800dd78:	2202      	movs	r2, #2
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	18b1      	adds	r1, r6, r2
 800dd80:	f7fc fd90 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800dd84:	4603      	mov	r3, r0
 800dd86:	1d31      	adds	r1, r6, #4
 800dd88:	4628      	mov	r0, r5
 800dd8a:	401c      	ands	r4, r3
 800dd8c:	f7fd f966 	bl	800b05c <ucdr_deserialize_uint32_t>
 800dd90:	b2e4      	uxtb	r4, r4
 800dd92:	4020      	ands	r0, r4
 800dd94:	bd70      	pop	{r4, r5, r6, pc}
 800dd96:	bf00      	nop

0800dd98 <uxr_serialize_DELETE_Payload>:
 800dd98:	b570      	push	{r4, r5, r6, lr}
 800dd9a:	2202      	movs	r2, #2
 800dd9c:	4605      	mov	r5, r0
 800dd9e:	460e      	mov	r6, r1
 800dda0:	f7fc fd1c 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800dda4:	2202      	movs	r2, #2
 800dda6:	4604      	mov	r4, r0
 800dda8:	4628      	mov	r0, r5
 800ddaa:	18b1      	adds	r1, r6, r2
 800ddac:	f7fc fd16 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800ddb0:	4020      	ands	r0, r4
 800ddb2:	b2c0      	uxtb	r0, r0
 800ddb4:	bd70      	pop	{r4, r5, r6, pc}
 800ddb6:	bf00      	nop

0800ddb8 <uxr_deserialize_STATUS_AGENT_Payload>:
 800ddb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddbc:	460e      	mov	r6, r1
 800ddbe:	4605      	mov	r5, r0
 800ddc0:	f7fc fe1c 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	1c71      	adds	r1, r6, #1
 800ddc8:	4628      	mov	r0, r5
 800ddca:	f7fc fe17 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800ddce:	2204      	movs	r2, #4
 800ddd0:	4681      	mov	r9, r0
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	18b1      	adds	r1, r6, r2
 800ddd6:	f7fc fd65 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800ddda:	f106 0108 	add.w	r1, r6, #8
 800ddde:	4680      	mov	r8, r0
 800dde0:	2202      	movs	r2, #2
 800dde2:	4628      	mov	r0, r5
 800dde4:	f7fc fd5e 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800dde8:	ea04 0309 	and.w	r3, r4, r9
 800ddec:	4607      	mov	r7, r0
 800ddee:	2202      	movs	r2, #2
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	f106 010a 	add.w	r1, r6, #10
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	ea03 0408 	and.w	r4, r3, r8
 800ddfc:	f7fc fd52 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800de00:	4603      	mov	r3, r0
 800de02:	4628      	mov	r0, r5
 800de04:	403c      	ands	r4, r7
 800de06:	f106 010c 	add.w	r1, r6, #12
 800de0a:	461d      	mov	r5, r3
 800de0c:	f7fc fdc8 	bl	800a9a0 <ucdr_deserialize_bool>
 800de10:	4025      	ands	r5, r4
 800de12:	4028      	ands	r0, r5
 800de14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800de18 <uxr_deserialize_STATUS_Payload>:
 800de18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de1c:	2202      	movs	r2, #2
 800de1e:	4606      	mov	r6, r0
 800de20:	460f      	mov	r7, r1
 800de22:	f7fc fd3f 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800de26:	2202      	movs	r2, #2
 800de28:	4605      	mov	r5, r0
 800de2a:	4630      	mov	r0, r6
 800de2c:	18b9      	adds	r1, r7, r2
 800de2e:	f7fc fd39 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800de32:	4680      	mov	r8, r0
 800de34:	1d39      	adds	r1, r7, #4
 800de36:	4630      	mov	r0, r6
 800de38:	f7fc fde0 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800de3c:	ea05 0508 	and.w	r5, r5, r8
 800de40:	4604      	mov	r4, r0
 800de42:	1d79      	adds	r1, r7, #5
 800de44:	4630      	mov	r0, r6
 800de46:	402c      	ands	r4, r5
 800de48:	f7fc fdd8 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800de4c:	4020      	ands	r0, r4
 800de4e:	b2c0      	uxtb	r0, r0
 800de50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de54 <uxr_serialize_INFO_Payload>:
 800de54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de58:	2202      	movs	r2, #2
 800de5a:	460c      	mov	r4, r1
 800de5c:	4605      	mov	r5, r0
 800de5e:	f7fc fcbd 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800de62:	2202      	movs	r2, #2
 800de64:	4680      	mov	r8, r0
 800de66:	4628      	mov	r0, r5
 800de68:	18a1      	adds	r1, r4, r2
 800de6a:	f7fc fcb7 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800de6e:	4607      	mov	r7, r0
 800de70:	7921      	ldrb	r1, [r4, #4]
 800de72:	4628      	mov	r0, r5
 800de74:	f7fc fdac 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800de78:	ea08 0807 	and.w	r8, r8, r7
 800de7c:	4606      	mov	r6, r0
 800de7e:	7961      	ldrb	r1, [r4, #5]
 800de80:	4628      	mov	r0, r5
 800de82:	ea06 0608 	and.w	r6, r6, r8
 800de86:	f7fc fda3 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800de8a:	7a21      	ldrb	r1, [r4, #8]
 800de8c:	4030      	ands	r0, r6
 800de8e:	b2c7      	uxtb	r7, r0
 800de90:	4628      	mov	r0, r5
 800de92:	f7fc fd6f 	bl	800a974 <ucdr_serialize_bool>
 800de96:	7a23      	ldrb	r3, [r4, #8]
 800de98:	4606      	mov	r6, r0
 800de9a:	b96b      	cbnz	r3, 800deb8 <uxr_serialize_INFO_Payload+0x64>
 800de9c:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800dea0:	4628      	mov	r0, r5
 800dea2:	f7fc fd67 	bl	800a974 <ucdr_serialize_bool>
 800dea6:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800deaa:	4030      	ands	r0, r6
 800deac:	b2c6      	uxtb	r6, r0
 800deae:	b983      	cbnz	r3, 800ded2 <uxr_serialize_INFO_Payload+0x7e>
 800deb0:	ea06 0007 	and.w	r0, r6, r7
 800deb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deb8:	7b21      	ldrb	r1, [r4, #12]
 800deba:	4628      	mov	r0, r5
 800debc:	f7fc fd88 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800dec0:	b188      	cbz	r0, 800dee6 <uxr_serialize_INFO_Payload+0x92>
 800dec2:	f104 010c 	add.w	r1, r4, #12
 800dec6:	4628      	mov	r0, r5
 800dec8:	f7ff faf8 	bl	800d4bc <uxr_serialize_ObjectVariant.part.0>
 800decc:	4030      	ands	r0, r6
 800dece:	b2c6      	uxtb	r6, r0
 800ded0:	e7e4      	b.n	800de9c <uxr_serialize_INFO_Payload+0x48>
 800ded2:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800ded6:	4628      	mov	r0, r5
 800ded8:	f7ff fdb8 	bl	800da4c <uxr_serialize_ActivityInfoVariant>
 800dedc:	4006      	ands	r6, r0
 800dede:	ea06 0007 	and.w	r0, r6, r7
 800dee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee6:	4606      	mov	r6, r0
 800dee8:	e7d8      	b.n	800de9c <uxr_serialize_INFO_Payload+0x48>
 800deea:	bf00      	nop

0800deec <uxr_serialize_READ_DATA_Payload>:
 800deec:	b570      	push	{r4, r5, r6, lr}
 800deee:	2202      	movs	r2, #2
 800def0:	4605      	mov	r5, r0
 800def2:	460e      	mov	r6, r1
 800def4:	f7fc fc72 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800def8:	2202      	movs	r2, #2
 800defa:	4604      	mov	r4, r0
 800defc:	4628      	mov	r0, r5
 800defe:	18b1      	adds	r1, r6, r2
 800df00:	f7fc fc6c 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800df04:	4603      	mov	r3, r0
 800df06:	1d31      	adds	r1, r6, #4
 800df08:	4628      	mov	r0, r5
 800df0a:	401c      	ands	r4, r3
 800df0c:	f7ff fe5e 	bl	800dbcc <uxr_serialize_ReadSpecification>
 800df10:	b2e4      	uxtb	r4, r4
 800df12:	4020      	ands	r0, r4
 800df14:	bd70      	pop	{r4, r5, r6, pc}
 800df16:	bf00      	nop

0800df18 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800df18:	b570      	push	{r4, r5, r6, lr}
 800df1a:	2202      	movs	r2, #2
 800df1c:	4605      	mov	r5, r0
 800df1e:	460e      	mov	r6, r1
 800df20:	f7fc fc5c 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800df24:	2202      	movs	r2, #2
 800df26:	4604      	mov	r4, r0
 800df28:	4628      	mov	r0, r5
 800df2a:	18b1      	adds	r1, r6, r2
 800df2c:	f7fc fc56 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800df30:	4020      	ands	r0, r4
 800df32:	b2c0      	uxtb	r0, r0
 800df34:	bd70      	pop	{r4, r5, r6, pc}
 800df36:	bf00      	nop

0800df38 <uxr_serialize_ACKNACK_Payload>:
 800df38:	b570      	push	{r4, r5, r6, lr}
 800df3a:	460c      	mov	r4, r1
 800df3c:	4605      	mov	r5, r0
 800df3e:	460e      	mov	r6, r1
 800df40:	f834 1b02 	ldrh.w	r1, [r4], #2
 800df44:	f7fc fd70 	bl	800aa28 <ucdr_serialize_uint16_t>
 800df48:	2202      	movs	r2, #2
 800df4a:	4621      	mov	r1, r4
 800df4c:	4604      	mov	r4, r0
 800df4e:	4628      	mov	r0, r5
 800df50:	f7fc fc44 	bl	800a7dc <ucdr_serialize_array_uint8_t>
 800df54:	4603      	mov	r3, r0
 800df56:	7931      	ldrb	r1, [r6, #4]
 800df58:	4628      	mov	r0, r5
 800df5a:	401c      	ands	r4, r3
 800df5c:	f7fc fd38 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800df60:	b2e4      	uxtb	r4, r4
 800df62:	4020      	ands	r0, r4
 800df64:	bd70      	pop	{r4, r5, r6, pc}
 800df66:	bf00      	nop

0800df68 <uxr_deserialize_ACKNACK_Payload>:
 800df68:	b570      	push	{r4, r5, r6, lr}
 800df6a:	460e      	mov	r6, r1
 800df6c:	4605      	mov	r5, r0
 800df6e:	f7fc fe5b 	bl	800ac28 <ucdr_deserialize_uint16_t>
 800df72:	2202      	movs	r2, #2
 800df74:	4604      	mov	r4, r0
 800df76:	4628      	mov	r0, r5
 800df78:	18b1      	adds	r1, r6, r2
 800df7a:	f7fc fc93 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800df7e:	4603      	mov	r3, r0
 800df80:	1d31      	adds	r1, r6, #4
 800df82:	4628      	mov	r0, r5
 800df84:	401c      	ands	r4, r3
 800df86:	f7fc fd39 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800df8a:	b2e4      	uxtb	r4, r4
 800df8c:	4020      	ands	r0, r4
 800df8e:	bd70      	pop	{r4, r5, r6, pc}

0800df90 <uxr_serialize_HEARTBEAT_Payload>:
 800df90:	b570      	push	{r4, r5, r6, lr}
 800df92:	460d      	mov	r5, r1
 800df94:	4606      	mov	r6, r0
 800df96:	8809      	ldrh	r1, [r1, #0]
 800df98:	f7fc fd46 	bl	800aa28 <ucdr_serialize_uint16_t>
 800df9c:	8869      	ldrh	r1, [r5, #2]
 800df9e:	4604      	mov	r4, r0
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	f7fc fd41 	bl	800aa28 <ucdr_serialize_uint16_t>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	7929      	ldrb	r1, [r5, #4]
 800dfaa:	4630      	mov	r0, r6
 800dfac:	401c      	ands	r4, r3
 800dfae:	f7fc fd0f 	bl	800a9d0 <ucdr_serialize_uint8_t>
 800dfb2:	b2e4      	uxtb	r4, r4
 800dfb4:	4020      	ands	r0, r4
 800dfb6:	bd70      	pop	{r4, r5, r6, pc}

0800dfb8 <uxr_deserialize_HEARTBEAT_Payload>:
 800dfb8:	b570      	push	{r4, r5, r6, lr}
 800dfba:	460e      	mov	r6, r1
 800dfbc:	4605      	mov	r5, r0
 800dfbe:	f7fc fe33 	bl	800ac28 <ucdr_deserialize_uint16_t>
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	1cb1      	adds	r1, r6, #2
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	f7fc fe2e 	bl	800ac28 <ucdr_deserialize_uint16_t>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	1d31      	adds	r1, r6, #4
 800dfd0:	4628      	mov	r0, r5
 800dfd2:	401c      	ands	r4, r3
 800dfd4:	f7fc fd12 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800dfd8:	b2e4      	uxtb	r4, r4
 800dfda:	4020      	ands	r0, r4
 800dfdc:	bd70      	pop	{r4, r5, r6, pc}
 800dfde:	bf00      	nop

0800dfe0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800dfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe4:	460e      	mov	r6, r1
 800dfe6:	4605      	mov	r5, r0
 800dfe8:	f7fd fb22 	bl	800b630 <ucdr_deserialize_int32_t>
 800dfec:	4607      	mov	r7, r0
 800dfee:	1d31      	adds	r1, r6, #4
 800dff0:	4628      	mov	r0, r5
 800dff2:	f7fd f833 	bl	800b05c <ucdr_deserialize_uint32_t>
 800dff6:	4680      	mov	r8, r0
 800dff8:	f106 0108 	add.w	r1, r6, #8
 800dffc:	4628      	mov	r0, r5
 800dffe:	f7fd fb17 	bl	800b630 <ucdr_deserialize_int32_t>
 800e002:	ea07 0708 	and.w	r7, r7, r8
 800e006:	4604      	mov	r4, r0
 800e008:	f106 010c 	add.w	r1, r6, #12
 800e00c:	4628      	mov	r0, r5
 800e00e:	403c      	ands	r4, r7
 800e010:	f7fd f824 	bl	800b05c <ucdr_deserialize_uint32_t>
 800e014:	f106 0110 	add.w	r1, r6, #16
 800e018:	4004      	ands	r4, r0
 800e01a:	4628      	mov	r0, r5
 800e01c:	f7fd fb08 	bl	800b630 <ucdr_deserialize_int32_t>
 800e020:	4603      	mov	r3, r0
 800e022:	b2e4      	uxtb	r4, r4
 800e024:	4628      	mov	r0, r5
 800e026:	461d      	mov	r5, r3
 800e028:	f106 0114 	add.w	r1, r6, #20
 800e02c:	f7fd f816 	bl	800b05c <ucdr_deserialize_uint32_t>
 800e030:	402c      	ands	r4, r5
 800e032:	4020      	ands	r0, r4
 800e034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e038 <uxr_deserialize_SampleIdentity>:
 800e038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e03c:	4604      	mov	r4, r0
 800e03e:	460d      	mov	r5, r1
 800e040:	220c      	movs	r2, #12
 800e042:	f7fc fc2f 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800e046:	2203      	movs	r2, #3
 800e048:	f105 010c 	add.w	r1, r5, #12
 800e04c:	4607      	mov	r7, r0
 800e04e:	4620      	mov	r0, r4
 800e050:	f7fc fc28 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 800e054:	f105 010f 	add.w	r1, r5, #15
 800e058:	4680      	mov	r8, r0
 800e05a:	4620      	mov	r0, r4
 800e05c:	f7fc fcce 	bl	800a9fc <ucdr_deserialize_uint8_t>
 800e060:	f105 0110 	add.w	r1, r5, #16
 800e064:	4606      	mov	r6, r0
 800e066:	4620      	mov	r0, r4
 800e068:	f7fd fae2 	bl	800b630 <ucdr_deserialize_int32_t>
 800e06c:	ea07 0708 	and.w	r7, r7, r8
 800e070:	4603      	mov	r3, r0
 800e072:	4620      	mov	r0, r4
 800e074:	403e      	ands	r6, r7
 800e076:	f105 0114 	add.w	r1, r5, #20
 800e07a:	461c      	mov	r4, r3
 800e07c:	f7fc ffee 	bl	800b05c <ucdr_deserialize_uint32_t>
 800e080:	4034      	ands	r4, r6
 800e082:	4020      	ands	r0, r4
 800e084:	b2c0      	uxtb	r0, r0
 800e086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e08a:	bf00      	nop

0800e08c <rcl_convert_rmw_ret_to_rcl_ret>:
 800e08c:	280b      	cmp	r0, #11
 800e08e:	dc0d      	bgt.n	800e0ac <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800e090:	2800      	cmp	r0, #0
 800e092:	db09      	blt.n	800e0a8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e094:	280b      	cmp	r0, #11
 800e096:	d807      	bhi.n	800e0a8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e098:	e8df f000 	tbb	[pc, r0]
 800e09c:	07060607 	.word	0x07060607
 800e0a0:	06060606 	.word	0x06060606
 800e0a4:	07070606 	.word	0x07070606
 800e0a8:	2001      	movs	r0, #1
 800e0aa:	4770      	bx	lr
 800e0ac:	28cb      	cmp	r0, #203	; 0xcb
 800e0ae:	bf18      	it	ne
 800e0b0:	2001      	movne	r0, #1
 800e0b2:	4770      	bx	lr

0800e0b4 <rcl_get_zero_initialized_context>:
 800e0b4:	4a03      	ldr	r2, [pc, #12]	; (800e0c4 <rcl_get_zero_initialized_context+0x10>)
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e0bc:	e883 0003 	stmia.w	r3, {r0, r1}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	4770      	bx	lr
 800e0c4:	08017b44 	.word	0x08017b44

0800e0c8 <rcl_context_is_valid>:
 800e0c8:	b118      	cbz	r0, 800e0d2 <rcl_context_is_valid+0xa>
 800e0ca:	6840      	ldr	r0, [r0, #4]
 800e0cc:	3800      	subs	r0, #0
 800e0ce:	bf18      	it	ne
 800e0d0:	2001      	movne	r0, #1
 800e0d2:	4770      	bx	lr

0800e0d4 <__cleanup_context>:
 800e0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0d8:	4606      	mov	r6, r0
 800e0da:	2300      	movs	r3, #0
 800e0dc:	6800      	ldr	r0, [r0, #0]
 800e0de:	6073      	str	r3, [r6, #4]
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	d049      	beq.n	800e178 <__cleanup_context+0xa4>
 800e0e4:	6947      	ldr	r7, [r0, #20]
 800e0e6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e0ea:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800e0ee:	b137      	cbz	r7, 800e0fe <__cleanup_context+0x2a>
 800e0f0:	3014      	adds	r0, #20
 800e0f2:	f000 f9e7 	bl	800e4c4 <rcl_init_options_fini>
 800e0f6:	4607      	mov	r7, r0
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	d144      	bne.n	800e186 <__cleanup_context+0xb2>
 800e0fc:	6830      	ldr	r0, [r6, #0]
 800e0fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e100:	b143      	cbz	r3, 800e114 <__cleanup_context+0x40>
 800e102:	3028      	adds	r0, #40	; 0x28
 800e104:	f001 fe16 	bl	800fd34 <rmw_context_fini>
 800e108:	b118      	cbz	r0, 800e112 <__cleanup_context+0x3e>
 800e10a:	2f00      	cmp	r7, #0
 800e10c:	d03e      	beq.n	800e18c <__cleanup_context+0xb8>
 800e10e:	f7fb fc63 	bl	80099d8 <rcutils_reset_error>
 800e112:	6830      	ldr	r0, [r6, #0]
 800e114:	6a03      	ldr	r3, [r0, #32]
 800e116:	b1db      	cbz	r3, 800e150 <__cleanup_context+0x7c>
 800e118:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800e11c:	2a01      	cmp	r2, #1
 800e11e:	f17c 0100 	sbcs.w	r1, ip, #0
 800e122:	db11      	blt.n	800e148 <__cleanup_context+0x74>
 800e124:	2400      	movs	r4, #0
 800e126:	4625      	mov	r5, r4
 800e128:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e12c:	4649      	mov	r1, r9
 800e12e:	b1b8      	cbz	r0, 800e160 <__cleanup_context+0x8c>
 800e130:	47c0      	blx	r8
 800e132:	6833      	ldr	r3, [r6, #0]
 800e134:	3401      	adds	r4, #1
 800e136:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800e13a:	f145 0500 	adc.w	r5, r5, #0
 800e13e:	6a1b      	ldr	r3, [r3, #32]
 800e140:	4294      	cmp	r4, r2
 800e142:	eb75 010c 	sbcs.w	r1, r5, ip
 800e146:	dbef      	blt.n	800e128 <__cleanup_context+0x54>
 800e148:	4618      	mov	r0, r3
 800e14a:	4649      	mov	r1, r9
 800e14c:	47c0      	blx	r8
 800e14e:	6830      	ldr	r0, [r6, #0]
 800e150:	4649      	mov	r1, r9
 800e152:	47c0      	blx	r8
 800e154:	2300      	movs	r3, #0
 800e156:	4638      	mov	r0, r7
 800e158:	e9c6 3300 	strd	r3, r3, [r6]
 800e15c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e160:	3401      	adds	r4, #1
 800e162:	f145 0500 	adc.w	r5, r5, #0
 800e166:	4294      	cmp	r4, r2
 800e168:	eb75 010c 	sbcs.w	r1, r5, ip
 800e16c:	dbdc      	blt.n	800e128 <__cleanup_context+0x54>
 800e16e:	4618      	mov	r0, r3
 800e170:	4649      	mov	r1, r9
 800e172:	47c0      	blx	r8
 800e174:	6830      	ldr	r0, [r6, #0]
 800e176:	e7eb      	b.n	800e150 <__cleanup_context+0x7c>
 800e178:	4607      	mov	r7, r0
 800e17a:	2300      	movs	r3, #0
 800e17c:	4638      	mov	r0, r7
 800e17e:	e9c6 3300 	strd	r3, r3, [r6]
 800e182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e186:	f7fb fc27 	bl	80099d8 <rcutils_reset_error>
 800e18a:	e7b7      	b.n	800e0fc <__cleanup_context+0x28>
 800e18c:	f7ff ff7e 	bl	800e08c <rcl_convert_rmw_ret_to_rcl_ret>
 800e190:	4607      	mov	r7, r0
 800e192:	e7bc      	b.n	800e10e <__cleanup_context+0x3a>

0800e194 <rcl_init>:
 800e194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e198:	1e05      	subs	r5, r0, #0
 800e19a:	b0a7      	sub	sp, #156	; 0x9c
 800e19c:	460e      	mov	r6, r1
 800e19e:	4690      	mov	r8, r2
 800e1a0:	461f      	mov	r7, r3
 800e1a2:	f340 80a0 	ble.w	800e2e6 <rcl_init+0x152>
 800e1a6:	2900      	cmp	r1, #0
 800e1a8:	f000 80a0 	beq.w	800e2ec <rcl_init+0x158>
 800e1ac:	f1a1 0e04 	sub.w	lr, r1, #4
 800e1b0:	f04f 0c00 	mov.w	ip, #0
 800e1b4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800e1b8:	f10c 0c01 	add.w	ip, ip, #1
 800e1bc:	2c00      	cmp	r4, #0
 800e1be:	f000 8095 	beq.w	800e2ec <rcl_init+0x158>
 800e1c2:	4565      	cmp	r5, ip
 800e1c4:	d1f6      	bne.n	800e1b4 <rcl_init+0x20>
 800e1c6:	f1b8 0f00 	cmp.w	r8, #0
 800e1ca:	f000 808f 	beq.w	800e2ec <rcl_init+0x158>
 800e1ce:	f8d8 4000 	ldr.w	r4, [r8]
 800e1d2:	2c00      	cmp	r4, #0
 800e1d4:	f000 808a 	beq.w	800e2ec <rcl_init+0x158>
 800e1d8:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800e1dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e1e2:	6823      	ldr	r3, [r4, #0]
 800e1e4:	a821      	add	r0, sp, #132	; 0x84
 800e1e6:	f8cc 3000 	str.w	r3, [ip]
 800e1ea:	f7fb fbd1 	bl	8009990 <rcutils_allocator_is_valid>
 800e1ee:	f080 0001 	eor.w	r0, r0, #1
 800e1f2:	b2c0      	uxtb	r0, r0
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	d179      	bne.n	800e2ec <rcl_init+0x158>
 800e1f8:	2f00      	cmp	r7, #0
 800e1fa:	d077      	beq.n	800e2ec <rcl_init+0x158>
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d179      	bne.n	800e2f6 <rcl_init+0x162>
 800e202:	2198      	movs	r1, #152	; 0x98
 800e204:	2001      	movs	r0, #1
 800e206:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 800e20a:	4798      	blx	r3
 800e20c:	4604      	mov	r4, r0
 800e20e:	6038      	str	r0, [r7, #0]
 800e210:	2800      	cmp	r0, #0
 800e212:	f000 80cd 	beq.w	800e3b0 <rcl_init+0x21c>
 800e216:	a802      	add	r0, sp, #8
 800e218:	f001 f9e2 	bl	800f5e0 <rmw_get_zero_initialized_context>
 800e21c:	a902      	add	r1, sp, #8
 800e21e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e222:	2270      	movs	r2, #112	; 0x70
 800e224:	f004 fd30 	bl	8012c88 <memcpy>
 800e228:	f8d7 e000 	ldr.w	lr, [r7]
 800e22c:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800e230:	4674      	mov	r4, lr
 800e232:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e238:	f8dc 3000 	ldr.w	r3, [ip]
 800e23c:	f10e 0114 	add.w	r1, lr, #20
 800e240:	4640      	mov	r0, r8
 800e242:	6023      	str	r3, [r4, #0]
 800e244:	f000 f968 	bl	800e518 <rcl_init_options_copy>
 800e248:	4604      	mov	r4, r0
 800e24a:	2800      	cmp	r0, #0
 800e24c:	d144      	bne.n	800e2d8 <rcl_init+0x144>
 800e24e:	f8d7 9000 	ldr.w	r9, [r7]
 800e252:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 800e256:	f8c9 0020 	str.w	r0, [r9, #32]
 800e25a:	f8c9 5018 	str.w	r5, [r9, #24]
 800e25e:	f8c9 a01c 	str.w	sl, [r9, #28]
 800e262:	2d00      	cmp	r5, #0
 800e264:	d04e      	beq.n	800e304 <rcl_init+0x170>
 800e266:	2e00      	cmp	r6, #0
 800e268:	d04c      	beq.n	800e304 <rcl_init+0x170>
 800e26a:	2104      	movs	r1, #4
 800e26c:	4628      	mov	r0, r5
 800e26e:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 800e272:	4798      	blx	r3
 800e274:	f8c9 0020 	str.w	r0, [r9, #32]
 800e278:	f8d7 9000 	ldr.w	r9, [r7]
 800e27c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800e280:	46cb      	mov	fp, r9
 800e282:	b343      	cbz	r3, 800e2d6 <rcl_init+0x142>
 800e284:	2d01      	cmp	r5, #1
 800e286:	f17a 0300 	sbcs.w	r3, sl, #0
 800e28a:	db3b      	blt.n	800e304 <rcl_init+0x170>
 800e28c:	2400      	movs	r4, #0
 800e28e:	3e04      	subs	r6, #4
 800e290:	46a1      	mov	r9, r4
 800e292:	e00b      	b.n	800e2ac <rcl_init+0x118>
 800e294:	6831      	ldr	r1, [r6, #0]
 800e296:	f004 fcf7 	bl	8012c88 <memcpy>
 800e29a:	3401      	adds	r4, #1
 800e29c:	f149 0900 	adc.w	r9, r9, #0
 800e2a0:	45ca      	cmp	sl, r9
 800e2a2:	bf08      	it	eq
 800e2a4:	42a5      	cmpeq	r5, r4
 800e2a6:	d02b      	beq.n	800e300 <rcl_init+0x16c>
 800e2a8:	f8d7 b000 	ldr.w	fp, [r7]
 800e2ac:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800e2b0:	f7f2 f820 	bl	80002f4 <strlen>
 800e2b4:	1c42      	adds	r2, r0, #1
 800e2b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2b8:	4610      	mov	r0, r2
 800e2ba:	9925      	ldr	r1, [sp, #148]	; 0x94
 800e2bc:	f8db b020 	ldr.w	fp, [fp, #32]
 800e2c0:	9201      	str	r2, [sp, #4]
 800e2c2:	4798      	blx	r3
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 800e2ca:	6a1b      	ldr	r3, [r3, #32]
 800e2cc:	9a01      	ldr	r2, [sp, #4]
 800e2ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d1de      	bne.n	800e294 <rcl_init+0x100>
 800e2d6:	240a      	movs	r4, #10
 800e2d8:	4638      	mov	r0, r7
 800e2da:	f7ff fefb 	bl	800e0d4 <__cleanup_context>
 800e2de:	4620      	mov	r0, r4
 800e2e0:	b027      	add	sp, #156	; 0x9c
 800e2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2e6:	2900      	cmp	r1, #0
 800e2e8:	f43f af6d 	beq.w	800e1c6 <rcl_init+0x32>
 800e2ec:	240b      	movs	r4, #11
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	b027      	add	sp, #156	; 0x9c
 800e2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f6:	2464      	movs	r4, #100	; 0x64
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	b027      	add	sp, #156	; 0x9c
 800e2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e300:	f8d7 9000 	ldr.w	r9, [r7]
 800e304:	493f      	ldr	r1, [pc, #252]	; (800e404 <rcl_init+0x270>)
 800e306:	680b      	ldr	r3, [r1, #0]
 800e308:	3301      	adds	r3, #1
 800e30a:	d04c      	beq.n	800e3a6 <rcl_init+0x212>
 800e30c:	461a      	mov	r2, r3
 800e30e:	2000      	movs	r0, #0
 800e310:	600b      	str	r3, [r1, #0]
 800e312:	f8d9 5014 	ldr.w	r5, [r9, #20]
 800e316:	607b      	str	r3, [r7, #4]
 800e318:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e31a:	3301      	adds	r3, #1
 800e31c:	e9c5 2006 	strd	r2, r0, [r5, #24]
 800e320:	d05d      	beq.n	800e3de <rcl_init+0x24a>
 800e322:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800e326:	2b00      	cmp	r3, #0
 800e328:	d044      	beq.n	800e3b4 <rcl_init+0x220>
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d04e      	beq.n	800e3cc <rcl_init+0x238>
 800e32e:	f8d8 3000 	ldr.w	r3, [r8]
 800e332:	f105 0634 	add.w	r6, r5, #52	; 0x34
 800e336:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d05a      	beq.n	800e3f4 <rcl_init+0x260>
 800e33e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800e340:	b953      	cbnz	r3, 800e358 <rcl_init+0x1c4>
 800e342:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800e346:	2801      	cmp	r0, #1
 800e348:	d008      	beq.n	800e35c <rcl_init+0x1c8>
 800e34a:	a921      	add	r1, sp, #132	; 0x84
 800e34c:	4630      	mov	r0, r6
 800e34e:	f003 fd31 	bl	8011db4 <rcl_get_discovery_static_peers>
 800e352:	4604      	mov	r4, r0
 800e354:	2800      	cmp	r0, #0
 800e356:	d1bf      	bne.n	800e2d8 <rcl_init+0x144>
 800e358:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800e35c:	f003 fd20 	bl	8011da0 <rcl_automatic_discovery_range_to_string>
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	aa20      	add	r2, sp, #128	; 0x80
 800e364:	a91f      	add	r1, sp, #124	; 0x7c
 800e366:	695b      	ldr	r3, [r3, #20]
 800e368:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800e36a:	f000 fdf3 	bl	800ef54 <rcl_validate_enclave_name>
 800e36e:	4604      	mov	r4, r0
 800e370:	2800      	cmp	r0, #0
 800e372:	d1b1      	bne.n	800e2d8 <rcl_init+0x144>
 800e374:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e376:	bb83      	cbnz	r3, 800e3da <rcl_init+0x246>
 800e378:	6839      	ldr	r1, [r7, #0]
 800e37a:	694b      	ldr	r3, [r1, #20]
 800e37c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800e380:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800e382:	f000 fc97 	bl	800ecb4 <rcl_get_security_options_from_environment>
 800e386:	4604      	mov	r4, r0
 800e388:	2800      	cmp	r0, #0
 800e38a:	d1a5      	bne.n	800e2d8 <rcl_init+0x144>
 800e38c:	6839      	ldr	r1, [r7, #0]
 800e38e:	6948      	ldr	r0, [r1, #20]
 800e390:	3128      	adds	r1, #40	; 0x28
 800e392:	3018      	adds	r0, #24
 800e394:	f001 fb98 	bl	800fac8 <rmw_init>
 800e398:	4604      	mov	r4, r0
 800e39a:	2800      	cmp	r0, #0
 800e39c:	d0a7      	beq.n	800e2ee <rcl_init+0x15a>
 800e39e:	f7ff fe75 	bl	800e08c <rcl_convert_rmw_ret_to_rcl_ret>
 800e3a2:	4604      	mov	r4, r0
 800e3a4:	e798      	b.n	800e2d8 <rcl_init+0x144>
 800e3a6:	2201      	movs	r2, #1
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	600a      	str	r2, [r1, #0]
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	e7b0      	b.n	800e312 <rcl_init+0x17e>
 800e3b0:	240a      	movs	r4, #10
 800e3b2:	e79c      	b.n	800e2ee <rcl_init+0x15a>
 800e3b4:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800e3b8:	f000 f90c 	bl	800e5d4 <rcl_get_localhost_only>
 800e3bc:	4604      	mov	r4, r0
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	d18a      	bne.n	800e2d8 <rcl_init+0x144>
 800e3c2:	683a      	ldr	r2, [r7, #0]
 800e3c4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800e3c8:	6955      	ldr	r5, [r2, #20]
 800e3ca:	e7ae      	b.n	800e32a <rcl_init+0x196>
 800e3cc:	2302      	movs	r3, #2
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 800e3d6:	63ea      	str	r2, [r5, #60]	; 0x3c
 800e3d8:	e7c0      	b.n	800e35c <rcl_init+0x1c8>
 800e3da:	2401      	movs	r4, #1
 800e3dc:	e77c      	b.n	800e2d8 <rcl_init+0x144>
 800e3de:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800e3e2:	f003 fd4d 	bl	8011e80 <rcl_get_default_domain_id>
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	f47f af75 	bne.w	800e2d8 <rcl_init+0x144>
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	695d      	ldr	r5, [r3, #20]
 800e3f2:	e796      	b.n	800e322 <rcl_init+0x18e>
 800e3f4:	4630      	mov	r0, r6
 800e3f6:	f003 fc91 	bl	8011d1c <rcl_get_automatic_discovery_range>
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	d09e      	beq.n	800e33e <rcl_init+0x1aa>
 800e400:	e76a      	b.n	800e2d8 <rcl_init+0x144>
 800e402:	bf00      	nop
 800e404:	2000e94c 	.word	0x2000e94c

0800e408 <rcl_get_zero_initialized_init_options>:
 800e408:	2000      	movs	r0, #0
 800e40a:	4770      	bx	lr

0800e40c <rcl_init_options_init>:
 800e40c:	b084      	sub	sp, #16
 800e40e:	b570      	push	{r4, r5, r6, lr}
 800e410:	b09e      	sub	sp, #120	; 0x78
 800e412:	ad23      	add	r5, sp, #140	; 0x8c
 800e414:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e418:	2800      	cmp	r0, #0
 800e41a:	d046      	beq.n	800e4aa <rcl_init_options_init+0x9e>
 800e41c:	6803      	ldr	r3, [r0, #0]
 800e41e:	4604      	mov	r4, r0
 800e420:	b133      	cbz	r3, 800e430 <rcl_init_options_init+0x24>
 800e422:	2564      	movs	r5, #100	; 0x64
 800e424:	4628      	mov	r0, r5
 800e426:	b01e      	add	sp, #120	; 0x78
 800e428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e42c:	b004      	add	sp, #16
 800e42e:	4770      	bx	lr
 800e430:	4628      	mov	r0, r5
 800e432:	f7fb faad 	bl	8009990 <rcutils_allocator_is_valid>
 800e436:	2800      	cmp	r0, #0
 800e438:	d037      	beq.n	800e4aa <rcl_init_options_init+0x9e>
 800e43a:	46ae      	mov	lr, r5
 800e43c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800e440:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e444:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e448:	f8de 3000 	ldr.w	r3, [lr]
 800e44c:	2070      	movs	r0, #112	; 0x70
 800e44e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800e450:	f8cc 3000 	str.w	r3, [ip]
 800e454:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e456:	4798      	blx	r3
 800e458:	4606      	mov	r6, r0
 800e45a:	6020      	str	r0, [r4, #0]
 800e45c:	b338      	cbz	r0, 800e4ae <rcl_init_options_init+0xa2>
 800e45e:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800e462:	4686      	mov	lr, r0
 800e464:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e468:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e46c:	f8dc 3000 	ldr.w	r3, [ip]
 800e470:	a802      	add	r0, sp, #8
 800e472:	f8ce 3000 	str.w	r3, [lr]
 800e476:	f001 f8c7 	bl	800f608 <rmw_get_zero_initialized_init_options>
 800e47a:	2258      	movs	r2, #88	; 0x58
 800e47c:	a902      	add	r1, sp, #8
 800e47e:	f106 0018 	add.w	r0, r6, #24
 800e482:	f004 fc01 	bl	8012c88 <memcpy>
 800e486:	ab26      	add	r3, sp, #152	; 0x98
 800e488:	6826      	ldr	r6, [r4, #0]
 800e48a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e48e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e492:	f106 0018 	add.w	r0, r6, #24
 800e496:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800e49a:	f001 fa45 	bl	800f928 <rmw_init_options_init>
 800e49e:	4605      	mov	r5, r0
 800e4a0:	b938      	cbnz	r0, 800e4b2 <rcl_init_options_init+0xa6>
 800e4a2:	6823      	ldr	r3, [r4, #0]
 800e4a4:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 800e4a8:	e7bc      	b.n	800e424 <rcl_init_options_init+0x18>
 800e4aa:	250b      	movs	r5, #11
 800e4ac:	e7ba      	b.n	800e424 <rcl_init_options_init+0x18>
 800e4ae:	250a      	movs	r5, #10
 800e4b0:	e7b8      	b.n	800e424 <rcl_init_options_init+0x18>
 800e4b2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800e4b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e4b6:	6820      	ldr	r0, [r4, #0]
 800e4b8:	4798      	blx	r3
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	f7ff fde6 	bl	800e08c <rcl_convert_rmw_ret_to_rcl_ret>
 800e4c0:	4605      	mov	r5, r0
 800e4c2:	e7af      	b.n	800e424 <rcl_init_options_init+0x18>

0800e4c4 <rcl_init_options_fini>:
 800e4c4:	b530      	push	{r4, r5, lr}
 800e4c6:	b087      	sub	sp, #28
 800e4c8:	b1f0      	cbz	r0, 800e508 <rcl_init_options_fini+0x44>
 800e4ca:	6803      	ldr	r3, [r0, #0]
 800e4cc:	4604      	mov	r4, r0
 800e4ce:	b1db      	cbz	r3, 800e508 <rcl_init_options_fini+0x44>
 800e4d0:	469c      	mov	ip, r3
 800e4d2:	f10d 0e04 	add.w	lr, sp, #4
 800e4d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e4da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e4de:	f8dc 3000 	ldr.w	r3, [ip]
 800e4e2:	a801      	add	r0, sp, #4
 800e4e4:	f8ce 3000 	str.w	r3, [lr]
 800e4e8:	f7fb fa52 	bl	8009990 <rcutils_allocator_is_valid>
 800e4ec:	b160      	cbz	r0, 800e508 <rcl_init_options_fini+0x44>
 800e4ee:	6820      	ldr	r0, [r4, #0]
 800e4f0:	3018      	adds	r0, #24
 800e4f2:	f001 fab3 	bl	800fa5c <rmw_init_options_fini>
 800e4f6:	4605      	mov	r5, r0
 800e4f8:	b950      	cbnz	r0, 800e510 <rcl_init_options_fini+0x4c>
 800e4fa:	6820      	ldr	r0, [r4, #0]
 800e4fc:	9b02      	ldr	r3, [sp, #8]
 800e4fe:	9905      	ldr	r1, [sp, #20]
 800e500:	4798      	blx	r3
 800e502:	4628      	mov	r0, r5
 800e504:	b007      	add	sp, #28
 800e506:	bd30      	pop	{r4, r5, pc}
 800e508:	250b      	movs	r5, #11
 800e50a:	4628      	mov	r0, r5
 800e50c:	b007      	add	sp, #28
 800e50e:	bd30      	pop	{r4, r5, pc}
 800e510:	f7ff fdbc 	bl	800e08c <rcl_convert_rmw_ret_to_rcl_ret>
 800e514:	4605      	mov	r5, r0
 800e516:	e7f8      	b.n	800e50a <rcl_init_options_fini+0x46>

0800e518 <rcl_init_options_copy>:
 800e518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e51a:	b09d      	sub	sp, #116	; 0x74
 800e51c:	2800      	cmp	r0, #0
 800e51e:	d04d      	beq.n	800e5bc <rcl_init_options_copy+0xa4>
 800e520:	4604      	mov	r4, r0
 800e522:	6800      	ldr	r0, [r0, #0]
 800e524:	2800      	cmp	r0, #0
 800e526:	d049      	beq.n	800e5bc <rcl_init_options_copy+0xa4>
 800e528:	460d      	mov	r5, r1
 800e52a:	f7fb fa31 	bl	8009990 <rcutils_allocator_is_valid>
 800e52e:	2d00      	cmp	r5, #0
 800e530:	d044      	beq.n	800e5bc <rcl_init_options_copy+0xa4>
 800e532:	f080 0001 	eor.w	r0, r0, #1
 800e536:	b2c0      	uxtb	r0, r0
 800e538:	2800      	cmp	r0, #0
 800e53a:	d13f      	bne.n	800e5bc <rcl_init_options_copy+0xa4>
 800e53c:	682b      	ldr	r3, [r5, #0]
 800e53e:	b11b      	cbz	r3, 800e548 <rcl_init_options_copy+0x30>
 800e540:	2464      	movs	r4, #100	; 0x64
 800e542:	4620      	mov	r0, r4
 800e544:	b01d      	add	sp, #116	; 0x74
 800e546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e548:	6826      	ldr	r6, [r4, #0]
 800e54a:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 800e54e:	46b6      	mov	lr, r6
 800e550:	6837      	ldr	r7, [r6, #0]
 800e552:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e556:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e55a:	f8de 3000 	ldr.w	r3, [lr]
 800e55e:	2070      	movs	r0, #112	; 0x70
 800e560:	4619      	mov	r1, r3
 800e562:	f8cc 3000 	str.w	r3, [ip]
 800e566:	47b8      	blx	r7
 800e568:	4606      	mov	r6, r0
 800e56a:	6028      	str	r0, [r5, #0]
 800e56c:	b350      	cbz	r0, 800e5c4 <rcl_init_options_copy+0xac>
 800e56e:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 800e572:	4686      	mov	lr, r0
 800e574:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e578:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e57c:	f8dc 3000 	ldr.w	r3, [ip]
 800e580:	4668      	mov	r0, sp
 800e582:	f8ce 3000 	str.w	r3, [lr]
 800e586:	f001 f83f 	bl	800f608 <rmw_get_zero_initialized_init_options>
 800e58a:	2258      	movs	r2, #88	; 0x58
 800e58c:	4669      	mov	r1, sp
 800e58e:	f106 0018 	add.w	r0, r6, #24
 800e592:	f004 fb79 	bl	8012c88 <memcpy>
 800e596:	6820      	ldr	r0, [r4, #0]
 800e598:	6829      	ldr	r1, [r5, #0]
 800e59a:	3018      	adds	r0, #24
 800e59c:	3118      	adds	r1, #24
 800e59e:	f001 fa2b 	bl	800f9f8 <rmw_init_options_copy>
 800e5a2:	4604      	mov	r4, r0
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	d0cc      	beq.n	800e542 <rcl_init_options_copy+0x2a>
 800e5a8:	f7fb fa00 	bl	80099ac <rcutils_get_error_string>
 800e5ac:	f7fb fa14 	bl	80099d8 <rcutils_reset_error>
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	f7ff ff87 	bl	800e4c4 <rcl_init_options_fini>
 800e5b6:	b138      	cbz	r0, 800e5c8 <rcl_init_options_copy+0xb0>
 800e5b8:	4604      	mov	r4, r0
 800e5ba:	e7c2      	b.n	800e542 <rcl_init_options_copy+0x2a>
 800e5bc:	240b      	movs	r4, #11
 800e5be:	4620      	mov	r0, r4
 800e5c0:	b01d      	add	sp, #116	; 0x74
 800e5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5c4:	240a      	movs	r4, #10
 800e5c6:	e7bc      	b.n	800e542 <rcl_init_options_copy+0x2a>
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	b01d      	add	sp, #116	; 0x74
 800e5cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e5d0:	f7ff bd5c 	b.w	800e08c <rcl_convert_rmw_ret_to_rcl_ret>

0800e5d4 <rcl_get_localhost_only>:
 800e5d4:	b510      	push	{r4, lr}
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	b082      	sub	sp, #8
 800e5da:	9301      	str	r3, [sp, #4]
 800e5dc:	b1c0      	cbz	r0, 800e610 <rcl_get_localhost_only+0x3c>
 800e5de:	4604      	mov	r4, r0
 800e5e0:	a901      	add	r1, sp, #4
 800e5e2:	480d      	ldr	r0, [pc, #52]	; (800e618 <rcl_get_localhost_only+0x44>)
 800e5e4:	f000 fcfe 	bl	800efe4 <rcutils_get_env>
 800e5e8:	b110      	cbz	r0, 800e5f0 <rcl_get_localhost_only+0x1c>
 800e5ea:	2001      	movs	r0, #1
 800e5ec:	b002      	add	sp, #8
 800e5ee:	bd10      	pop	{r4, pc}
 800e5f0:	9b01      	ldr	r3, [sp, #4]
 800e5f2:	b10b      	cbz	r3, 800e5f8 <rcl_get_localhost_only+0x24>
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	b923      	cbnz	r3, 800e602 <rcl_get_localhost_only+0x2e>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	7023      	strb	r3, [r4, #0]
 800e5fe:	b002      	add	sp, #8
 800e600:	bd10      	pop	{r4, pc}
 800e602:	2b31      	cmp	r3, #49	; 0x31
 800e604:	bf0c      	ite	eq
 800e606:	2301      	moveq	r3, #1
 800e608:	2302      	movne	r3, #2
 800e60a:	7023      	strb	r3, [r4, #0]
 800e60c:	b002      	add	sp, #8
 800e60e:	bd10      	pop	{r4, pc}
 800e610:	200b      	movs	r0, #11
 800e612:	b002      	add	sp, #8
 800e614:	bd10      	pop	{r4, pc}
 800e616:	bf00      	nop
 800e618:	08017b4c 	.word	0x08017b4c

0800e61c <rcl_get_zero_initialized_node>:
 800e61c:	4a03      	ldr	r2, [pc, #12]	; (800e62c <rcl_get_zero_initialized_node+0x10>)
 800e61e:	4603      	mov	r3, r0
 800e620:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e624:	e883 0003 	stmia.w	r3, {r0, r1}
 800e628:	4618      	mov	r0, r3
 800e62a:	4770      	bx	lr
 800e62c:	08017b90 	.word	0x08017b90

0800e630 <rcl_node_init>:
 800e630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e634:	b0ab      	sub	sp, #172	; 0xac
 800e636:	4604      	mov	r4, r0
 800e638:	460e      	mov	r6, r1
 800e63a:	4615      	mov	r5, r2
 800e63c:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 800e640:	a825      	add	r0, sp, #148	; 0x94
 800e642:	461f      	mov	r7, r3
 800e644:	f003 fe42 	bl	80122cc <rcl_guard_condition_get_default_options>
 800e648:	f1b8 0f00 	cmp.w	r8, #0
 800e64c:	f000 80f3 	beq.w	800e836 <rcl_node_init+0x206>
 800e650:	4640      	mov	r0, r8
 800e652:	f7fb f99d 	bl	8009990 <rcutils_allocator_is_valid>
 800e656:	2d00      	cmp	r5, #0
 800e658:	bf18      	it	ne
 800e65a:	2c00      	cmpne	r4, #0
 800e65c:	f080 0001 	eor.w	r0, r0, #1
 800e660:	bf0c      	ite	eq
 800e662:	f04f 0c01 	moveq.w	ip, #1
 800e666:	f04f 0c00 	movne.w	ip, #0
 800e66a:	2e00      	cmp	r6, #0
 800e66c:	bf08      	it	eq
 800e66e:	f04c 0c01 	orreq.w	ip, ip, #1
 800e672:	ea4c 0c00 	orr.w	ip, ip, r0
 800e676:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 800e67a:	f040 80dc 	bne.w	800e836 <rcl_node_init+0x206>
 800e67e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800e682:	f1ba 0f00 	cmp.w	sl, #0
 800e686:	f040 80fc 	bne.w	800e882 <rcl_node_init+0x252>
 800e68a:	2f00      	cmp	r7, #0
 800e68c:	f000 80d3 	beq.w	800e836 <rcl_node_init+0x206>
 800e690:	4638      	mov	r0, r7
 800e692:	f7ff fd19 	bl	800e0c8 <rcl_context_is_valid>
 800e696:	4683      	mov	fp, r0
 800e698:	2800      	cmp	r0, #0
 800e69a:	f000 80d2 	beq.w	800e842 <rcl_node_init+0x212>
 800e69e:	4652      	mov	r2, sl
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	a924      	add	r1, sp, #144	; 0x90
 800e6a4:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 800e6a8:	f001 f8b4 	bl	800f814 <rmw_validate_node_name>
 800e6ac:	4682      	mov	sl, r0
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	f040 80c3 	bne.w	800e83a <rcl_node_init+0x20a>
 800e6b4:	9824      	ldr	r0, [sp, #144]	; 0x90
 800e6b6:	2800      	cmp	r0, #0
 800e6b8:	f040 80f1 	bne.w	800e89e <rcl_node_init+0x26e>
 800e6bc:	4628      	mov	r0, r5
 800e6be:	f7f1 fe19 	bl	80002f4 <strlen>
 800e6c2:	2800      	cmp	r0, #0
 800e6c4:	f040 80c0 	bne.w	800e848 <rcl_node_init+0x218>
 800e6c8:	4d79      	ldr	r5, [pc, #484]	; (800e8b0 <rcl_node_init+0x280>)
 800e6ca:	a924      	add	r1, sp, #144	; 0x90
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	f001 f882 	bl	800f7d8 <rmw_validate_namespace>
 800e6d4:	4682      	mov	sl, r0
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	f040 80af 	bne.w	800e83a <rcl_node_init+0x20a>
 800e6dc:	9824      	ldr	r0, [sp, #144]	; 0x90
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	f040 80d5 	bne.w	800e88e <rcl_node_init+0x25e>
 800e6e4:	f8d8 3000 	ldr.w	r3, [r8]
 800e6e8:	2080      	movs	r0, #128	; 0x80
 800e6ea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e6ee:	4798      	blx	r3
 800e6f0:	4682      	mov	sl, r0
 800e6f2:	6060      	str	r0, [r4, #4]
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	f000 80cf 	beq.w	800e898 <rcl_node_init+0x268>
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	a808      	add	r0, sp, #32
 800e700:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 800e704:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 800e708:	f000 f922 	bl	800e950 <rcl_node_get_default_options>
 800e70c:	a908      	add	r1, sp, #32
 800e70e:	4650      	mov	r0, sl
 800e710:	2270      	movs	r2, #112	; 0x70
 800e712:	f004 fab9 	bl	8012c88 <memcpy>
 800e716:	6861      	ldr	r1, [r4, #4]
 800e718:	4640      	mov	r0, r8
 800e71a:	6027      	str	r7, [r4, #0]
 800e71c:	f000 f926 	bl	800e96c <rcl_node_options_copy>
 800e720:	2800      	cmp	r0, #0
 800e722:	d158      	bne.n	800e7d6 <rcl_node_init+0x1a6>
 800e724:	4628      	mov	r0, r5
 800e726:	f7f1 fde5 	bl	80002f4 <strlen>
 800e72a:	4428      	add	r0, r5
 800e72c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800e730:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800e734:	2b2f      	cmp	r3, #47	; 0x2f
 800e736:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e73a:	9300      	str	r3, [sp, #0]
 800e73c:	bf0c      	ite	eq
 800e73e:	4b5d      	ldreq	r3, [pc, #372]	; (800e8b4 <rcl_node_init+0x284>)
 800e740:	4b5d      	ldrne	r3, [pc, #372]	; (800e8b8 <rcl_node_init+0x288>)
 800e742:	9302      	str	r3, [sp, #8]
 800e744:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e748:	9301      	str	r3, [sp, #4]
 800e74a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800e74e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800e752:	f000 fc6f 	bl	800f034 <rcutils_format_string_limit>
 800e756:	6823      	ldr	r3, [r4, #0]
 800e758:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 800e75c:	4631      	mov	r1, r6
 800e75e:	6818      	ldr	r0, [r3, #0]
 800e760:	462a      	mov	r2, r5
 800e762:	6866      	ldr	r6, [r4, #4]
 800e764:	3028      	adds	r0, #40	; 0x28
 800e766:	f001 fc09 	bl	800ff7c <rmw_create_node>
 800e76a:	6863      	ldr	r3, [r4, #4]
 800e76c:	6730      	str	r0, [r6, #112]	; 0x70
 800e76e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800e770:	2800      	cmp	r0, #0
 800e772:	d032      	beq.n	800e7da <rcl_node_init+0x1aa>
 800e774:	f001 fc92 	bl	801009c <rmw_node_get_graph_guard_condition>
 800e778:	4682      	mov	sl, r0
 800e77a:	b360      	cbz	r0, 800e7d6 <rcl_node_init+0x1a6>
 800e77c:	f8d8 3000 	ldr.w	r3, [r8]
 800e780:	2008      	movs	r0, #8
 800e782:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e786:	6866      	ldr	r6, [r4, #4]
 800e788:	4798      	blx	r3
 800e78a:	6863      	ldr	r3, [r4, #4]
 800e78c:	6770      	str	r0, [r6, #116]	; 0x74
 800e78e:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 800e792:	f1bb 0f00 	cmp.w	fp, #0
 800e796:	d020      	beq.n	800e7da <rcl_node_init+0x1aa>
 800e798:	a806      	add	r0, sp, #24
 800e79a:	ae25      	add	r6, sp, #148	; 0x94
 800e79c:	f003 fd0a 	bl	80121b4 <rcl_get_zero_initialized_guard_condition>
 800e7a0:	a806      	add	r0, sp, #24
 800e7a2:	6863      	ldr	r3, [r4, #4]
 800e7a4:	46c4      	mov	ip, r8
 800e7a6:	c803      	ldmia	r0, {r0, r1}
 800e7a8:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 800e7ac:	e88b 0003 	stmia.w	fp, {r0, r1}
 800e7b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e7b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e7b6:	f8dc 3000 	ldr.w	r3, [ip]
 800e7ba:	6033      	str	r3, [r6, #0]
 800e7bc:	ab2a      	add	r3, sp, #168	; 0xa8
 800e7be:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800e7c2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e7c6:	4651      	mov	r1, sl
 800e7c8:	463a      	mov	r2, r7
 800e7ca:	4670      	mov	r0, lr
 800e7cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800e7ce:	f003 fcfb 	bl	80121c8 <rcl_guard_condition_init_from_rmw>
 800e7d2:	4682      	mov	sl, r0
 800e7d4:	b328      	cbz	r0, 800e822 <rcl_node_init+0x1f2>
 800e7d6:	6863      	ldr	r3, [r4, #4]
 800e7d8:	b1f3      	cbz	r3, 800e818 <rcl_node_init+0x1e8>
 800e7da:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e7dc:	b128      	cbz	r0, 800e7ea <rcl_node_init+0x1ba>
 800e7de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e7e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e7e6:	4798      	blx	r3
 800e7e8:	6863      	ldr	r3, [r4, #4]
 800e7ea:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800e7ec:	b110      	cbz	r0, 800e7f4 <rcl_node_init+0x1c4>
 800e7ee:	f001 fbd7 	bl	800ffa0 <rmw_destroy_node>
 800e7f2:	6863      	ldr	r3, [r4, #4]
 800e7f4:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800e7f6:	b148      	cbz	r0, 800e80c <rcl_node_init+0x1dc>
 800e7f8:	f003 fd42 	bl	8012280 <rcl_guard_condition_fini>
 800e7fc:	6863      	ldr	r3, [r4, #4]
 800e7fe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e802:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800e804:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e808:	4798      	blx	r3
 800e80a:	6863      	ldr	r3, [r4, #4]
 800e80c:	4618      	mov	r0, r3
 800e80e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e812:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e816:	4798      	blx	r3
 800e818:	2300      	movs	r3, #0
 800e81a:	f04f 0a01 	mov.w	sl, #1
 800e81e:	e9c4 3300 	strd	r3, r3, [r4]
 800e822:	f1b9 0f00 	cmp.w	r9, #0
 800e826:	d008      	beq.n	800e83a <rcl_node_init+0x20a>
 800e828:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e82c:	4628      	mov	r0, r5
 800e82e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e832:	4798      	blx	r3
 800e834:	e001      	b.n	800e83a <rcl_node_init+0x20a>
 800e836:	f04f 0a0b 	mov.w	sl, #11
 800e83a:	4650      	mov	r0, sl
 800e83c:	b02b      	add	sp, #172	; 0xac
 800e83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e842:	f04f 0a65 	mov.w	sl, #101	; 0x65
 800e846:	e7f8      	b.n	800e83a <rcl_node_init+0x20a>
 800e848:	782b      	ldrb	r3, [r5, #0]
 800e84a:	2b2f      	cmp	r3, #47	; 0x2f
 800e84c:	f43f af3d 	beq.w	800e6ca <rcl_node_init+0x9a>
 800e850:	9503      	str	r5, [sp, #12]
 800e852:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	4b18      	ldr	r3, [pc, #96]	; (800e8bc <rcl_node_init+0x28c>)
 800e85a:	9302      	str	r3, [sp, #8]
 800e85c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e860:	9301      	str	r3, [sp, #4]
 800e862:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800e866:	f000 fbe5 	bl	800f034 <rcutils_format_string_limit>
 800e86a:	4605      	mov	r5, r0
 800e86c:	b1e0      	cbz	r0, 800e8a8 <rcl_node_init+0x278>
 800e86e:	2200      	movs	r2, #0
 800e870:	a924      	add	r1, sp, #144	; 0x90
 800e872:	9224      	str	r2, [sp, #144]	; 0x90
 800e874:	f000 ffb0 	bl	800f7d8 <rmw_validate_namespace>
 800e878:	4682      	mov	sl, r0
 800e87a:	2800      	cmp	r0, #0
 800e87c:	d1d4      	bne.n	800e828 <rcl_node_init+0x1f8>
 800e87e:	46d9      	mov	r9, fp
 800e880:	e72c      	b.n	800e6dc <rcl_node_init+0xac>
 800e882:	f04f 0a64 	mov.w	sl, #100	; 0x64
 800e886:	4650      	mov	r0, sl
 800e888:	b02b      	add	sp, #172	; 0xac
 800e88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e88e:	f04f 0aca 	mov.w	sl, #202	; 0xca
 800e892:	f000 ffb3 	bl	800f7fc <rmw_namespace_validation_result_string>
 800e896:	e7c4      	b.n	800e822 <rcl_node_init+0x1f2>
 800e898:	f04f 0a0a 	mov.w	sl, #10
 800e89c:	e7c1      	b.n	800e822 <rcl_node_init+0x1f2>
 800e89e:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 800e8a2:	f001 f80b 	bl	800f8bc <rmw_node_name_validation_result_string>
 800e8a6:	e7c8      	b.n	800e83a <rcl_node_init+0x20a>
 800e8a8:	f04f 0a0a 	mov.w	sl, #10
 800e8ac:	e7c5      	b.n	800e83a <rcl_node_init+0x20a>
 800e8ae:	bf00      	nop
 800e8b0:	08017b64 	.word	0x08017b64
 800e8b4:	08017a8c 	.word	0x08017a8c
 800e8b8:	08017b6c 	.word	0x08017b6c
 800e8bc:	08017b68 	.word	0x08017b68

0800e8c0 <rcl_node_is_valid>:
 800e8c0:	b130      	cbz	r0, 800e8d0 <rcl_node_is_valid+0x10>
 800e8c2:	6843      	ldr	r3, [r0, #4]
 800e8c4:	b123      	cbz	r3, 800e8d0 <rcl_node_is_valid+0x10>
 800e8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8c8:	b113      	cbz	r3, 800e8d0 <rcl_node_is_valid+0x10>
 800e8ca:	6800      	ldr	r0, [r0, #0]
 800e8cc:	f7ff bbfc 	b.w	800e0c8 <rcl_context_is_valid>
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	4770      	bx	lr

0800e8d4 <rcl_node_get_name>:
 800e8d4:	b120      	cbz	r0, 800e8e0 <rcl_node_get_name+0xc>
 800e8d6:	6840      	ldr	r0, [r0, #4]
 800e8d8:	b110      	cbz	r0, 800e8e0 <rcl_node_get_name+0xc>
 800e8da:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800e8dc:	b100      	cbz	r0, 800e8e0 <rcl_node_get_name+0xc>
 800e8de:	6880      	ldr	r0, [r0, #8]
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop

0800e8e4 <rcl_node_get_namespace>:
 800e8e4:	b120      	cbz	r0, 800e8f0 <rcl_node_get_namespace+0xc>
 800e8e6:	6840      	ldr	r0, [r0, #4]
 800e8e8:	b110      	cbz	r0, 800e8f0 <rcl_node_get_namespace+0xc>
 800e8ea:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800e8ec:	b100      	cbz	r0, 800e8f0 <rcl_node_get_namespace+0xc>
 800e8ee:	68c0      	ldr	r0, [r0, #12]
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop

0800e8f4 <rcl_node_get_options>:
 800e8f4:	b128      	cbz	r0, 800e902 <rcl_node_get_options+0xe>
 800e8f6:	6840      	ldr	r0, [r0, #4]
 800e8f8:	b118      	cbz	r0, 800e902 <rcl_node_get_options+0xe>
 800e8fa:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	bf08      	it	eq
 800e900:	2000      	moveq	r0, #0
 800e902:	4770      	bx	lr

0800e904 <rcl_node_get_rmw_handle>:
 800e904:	b110      	cbz	r0, 800e90c <rcl_node_get_rmw_handle+0x8>
 800e906:	6840      	ldr	r0, [r0, #4]
 800e908:	b100      	cbz	r0, 800e90c <rcl_node_get_rmw_handle+0x8>
 800e90a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800e90c:	4770      	bx	lr
 800e90e:	bf00      	nop

0800e910 <rcl_get_disable_loaned_message>:
 800e910:	b510      	push	{r4, lr}
 800e912:	2300      	movs	r3, #0
 800e914:	b082      	sub	sp, #8
 800e916:	9301      	str	r3, [sp, #4]
 800e918:	b1a0      	cbz	r0, 800e944 <rcl_get_disable_loaned_message+0x34>
 800e91a:	4604      	mov	r4, r0
 800e91c:	a901      	add	r1, sp, #4
 800e91e:	480b      	ldr	r0, [pc, #44]	; (800e94c <rcl_get_disable_loaned_message+0x3c>)
 800e920:	f000 fb60 	bl	800efe4 <rcutils_get_env>
 800e924:	b110      	cbz	r0, 800e92c <rcl_get_disable_loaned_message+0x1c>
 800e926:	2001      	movs	r0, #1
 800e928:	b002      	add	sp, #8
 800e92a:	bd10      	pop	{r4, pc}
 800e92c:	9a01      	ldr	r2, [sp, #4]
 800e92e:	2000      	movs	r0, #0
 800e930:	7813      	ldrb	r3, [r2, #0]
 800e932:	3b31      	subs	r3, #49	; 0x31
 800e934:	bf08      	it	eq
 800e936:	7853      	ldrbeq	r3, [r2, #1]
 800e938:	fab3 f383 	clz	r3, r3
 800e93c:	095b      	lsrs	r3, r3, #5
 800e93e:	7023      	strb	r3, [r4, #0]
 800e940:	b002      	add	sp, #8
 800e942:	bd10      	pop	{r4, pc}
 800e944:	200b      	movs	r0, #11
 800e946:	b002      	add	sp, #8
 800e948:	bd10      	pop	{r4, pc}
 800e94a:	bf00      	nop
 800e94c:	08017b74 	.word	0x08017b74

0800e950 <rcl_node_get_default_options>:
 800e950:	b510      	push	{r4, lr}
 800e952:	4604      	mov	r4, r0
 800e954:	2270      	movs	r2, #112	; 0x70
 800e956:	2100      	movs	r1, #0
 800e958:	f004 f9a4 	bl	8012ca4 <memset>
 800e95c:	4620      	mov	r0, r4
 800e95e:	f7fb f809 	bl	8009974 <rcutils_get_default_allocator>
 800e962:	2301      	movs	r3, #1
 800e964:	4620      	mov	r0, r4
 800e966:	7523      	strb	r3, [r4, #20]
 800e968:	bd10      	pop	{r4, pc}
 800e96a:	bf00      	nop

0800e96c <rcl_node_options_copy>:
 800e96c:	2800      	cmp	r0, #0
 800e96e:	bf18      	it	ne
 800e970:	4288      	cmpne	r0, r1
 800e972:	d01b      	beq.n	800e9ac <rcl_node_options_copy+0x40>
 800e974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e976:	fab1 f681 	clz	r6, r1
 800e97a:	460c      	mov	r4, r1
 800e97c:	0976      	lsrs	r6, r6, #5
 800e97e:	b199      	cbz	r1, 800e9a8 <rcl_node_options_copy+0x3c>
 800e980:	4605      	mov	r5, r0
 800e982:	8a87      	ldrh	r7, [r0, #20]
 800e984:	4684      	mov	ip, r0
 800e986:	468e      	mov	lr, r1
 800e988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e98a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e98e:	682b      	ldr	r3, [r5, #0]
 800e990:	2250      	movs	r2, #80	; 0x50
 800e992:	f10c 0118 	add.w	r1, ip, #24
 800e996:	f104 0018 	add.w	r0, r4, #24
 800e99a:	f8ce 3000 	str.w	r3, [lr]
 800e99e:	82a7      	strh	r7, [r4, #20]
 800e9a0:	f004 f972 	bl	8012c88 <memcpy>
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9a8:	200b      	movs	r0, #11
 800e9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9ac:	200b      	movs	r0, #11
 800e9ae:	4770      	bx	lr

0800e9b0 <rcl_node_resolve_name>:
 800e9b0:	b082      	sub	sp, #8
 800e9b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b6:	b091      	sub	sp, #68	; 0x44
 800e9b8:	ac1a      	add	r4, sp, #104	; 0x68
 800e9ba:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800e9be:	e884 000c 	stmia.w	r4, {r2, r3}
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	d03d      	beq.n	800ea42 <rcl_node_resolve_name+0x92>
 800e9c6:	460c      	mov	r4, r1
 800e9c8:	4605      	mov	r5, r0
 800e9ca:	f7ff ff93 	bl	800e8f4 <rcl_node_get_options>
 800e9ce:	2800      	cmp	r0, #0
 800e9d0:	d03a      	beq.n	800ea48 <rcl_node_resolve_name+0x98>
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	f7ff ff7e 	bl	800e8d4 <rcl_node_get_name>
 800e9d8:	4606      	mov	r6, r0
 800e9da:	4628      	mov	r0, r5
 800e9dc:	ad0b      	add	r5, sp, #44	; 0x2c
 800e9de:	f7ff ff81 	bl	800e8e4 <rcl_node_get_namespace>
 800e9e2:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800e9e6:	4607      	mov	r7, r0
 800e9e8:	46ac      	mov	ip, r5
 800e9ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e9ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e9f2:	f8de 3000 	ldr.w	r3, [lr]
 800e9f6:	f8cc 3000 	str.w	r3, [ip]
 800e9fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9fc:	b30b      	cbz	r3, 800ea42 <rcl_node_resolve_name+0x92>
 800e9fe:	4689      	mov	r9, r1
 800ea00:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800ea04:	f000 fc98 	bl	800f338 <rcutils_get_zero_initialized_string_map>
 800ea08:	ab10      	add	r3, sp, #64	; 0x40
 800ea0a:	9008      	str	r0, [sp, #32]
 800ea0c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800ea10:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ea14:	2100      	movs	r1, #0
 800ea16:	a808      	add	r0, sp, #32
 800ea18:	e895 000c 	ldmia.w	r5, {r2, r3}
 800ea1c:	f000 fcde 	bl	800f3dc <rcutils_string_map_init>
 800ea20:	4683      	mov	fp, r0
 800ea22:	b1a0      	cbz	r0, 800ea4e <rcl_node_resolve_name+0x9e>
 800ea24:	f7fa ffc2 	bl	80099ac <rcutils_get_error_string>
 800ea28:	f7fa ffd6 	bl	80099d8 <rcutils_reset_error>
 800ea2c:	f1bb 0f0a 	cmp.w	fp, #10
 800ea30:	bf18      	it	ne
 800ea32:	f04f 0b01 	movne.w	fp, #1
 800ea36:	4658      	mov	r0, fp
 800ea38:	b011      	add	sp, #68	; 0x44
 800ea3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3e:	b002      	add	sp, #8
 800ea40:	4770      	bx	lr
 800ea42:	f04f 0b0b 	mov.w	fp, #11
 800ea46:	e7f6      	b.n	800ea36 <rcl_node_resolve_name+0x86>
 800ea48:	f04f 0b01 	mov.w	fp, #1
 800ea4c:	e7f3      	b.n	800ea36 <rcl_node_resolve_name+0x86>
 800ea4e:	9009      	str	r0, [sp, #36]	; 0x24
 800ea50:	9007      	str	r0, [sp, #28]
 800ea52:	a808      	add	r0, sp, #32
 800ea54:	f003 fba8 	bl	80121a8 <rcl_get_default_topic_name_substitutions>
 800ea58:	4683      	mov	fp, r0
 800ea5a:	b180      	cbz	r0, 800ea7e <rcl_node_resolve_name+0xce>
 800ea5c:	280a      	cmp	r0, #10
 800ea5e:	a808      	add	r0, sp, #32
 800ea60:	bf18      	it	ne
 800ea62:	f04f 0b01 	movne.w	fp, #1
 800ea66:	f000 fcf7 	bl	800f458 <rcutils_string_map_fini>
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	2800      	cmp	r0, #0
 800ea6e:	d15b      	bne.n	800eb28 <rcl_node_resolve_name+0x178>
 800ea70:	4651      	mov	r1, sl
 800ea72:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea74:	47c8      	blx	r9
 800ea76:	4651      	mov	r1, sl
 800ea78:	4620      	mov	r0, r4
 800ea7a:	47c8      	blx	r9
 800ea7c:	e7db      	b.n	800ea36 <rcl_node_resolve_name+0x86>
 800ea7e:	ab09      	add	r3, sp, #36	; 0x24
 800ea80:	46ec      	mov	ip, sp
 800ea82:	9305      	str	r3, [sp, #20]
 800ea84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ea8a:	682b      	ldr	r3, [r5, #0]
 800ea8c:	463a      	mov	r2, r7
 800ea8e:	4631      	mov	r1, r6
 800ea90:	4620      	mov	r0, r4
 800ea92:	f8cc 3000 	str.w	r3, [ip]
 800ea96:	ab08      	add	r3, sp, #32
 800ea98:	f003 fa26 	bl	8011ee8 <rcl_expand_topic_name>
 800ea9c:	4683      	mov	fp, r0
 800ea9e:	b9d8      	cbnz	r0, 800ead8 <rcl_node_resolve_name+0x128>
 800eaa0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	9009      	str	r0, [sp, #36]	; 0x24
 800eaa6:	a90a      	add	r1, sp, #40	; 0x28
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f000 fdc5 	bl	800f638 <rmw_validate_full_topic_name>
 800eaae:	bb50      	cbnz	r0, 800eb06 <rcl_node_resolve_name+0x156>
 800eab0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800eab2:	2d00      	cmp	r5, #0
 800eab4:	d140      	bne.n	800eb38 <rcl_node_resolve_name+0x188>
 800eab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eab8:	a808      	add	r0, sp, #32
 800eaba:	601c      	str	r4, [r3, #0]
 800eabc:	f000 fccc 	bl	800f458 <rcutils_string_map_fini>
 800eac0:	4683      	mov	fp, r0
 800eac2:	2800      	cmp	r0, #0
 800eac4:	d043      	beq.n	800eb4e <rcl_node_resolve_name+0x19e>
 800eac6:	f7fa ff71 	bl	80099ac <rcutils_get_error_string>
 800eaca:	46a8      	mov	r8, r5
 800eacc:	f04f 0b01 	mov.w	fp, #1
 800ead0:	462c      	mov	r4, r5
 800ead2:	f7fa ff81 	bl	80099d8 <rcutils_reset_error>
 800ead6:	e00a      	b.n	800eaee <rcl_node_resolve_name+0x13e>
 800ead8:	2867      	cmp	r0, #103	; 0x67
 800eada:	bf14      	ite	ne
 800eadc:	f04f 0800 	movne.w	r8, #0
 800eae0:	f008 0801 	andeq.w	r8, r8, #1
 800eae4:	9c07      	ldr	r4, [sp, #28]
 800eae6:	a808      	add	r0, sp, #32
 800eae8:	f000 fcb6 	bl	800f458 <rcutils_string_map_fini>
 800eaec:	bb50      	cbnz	r0, 800eb44 <rcl_node_resolve_name+0x194>
 800eaee:	4651      	mov	r1, sl
 800eaf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eaf2:	47c8      	blx	r9
 800eaf4:	4651      	mov	r1, sl
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	47c8      	blx	r9
 800eafa:	f1b8 0f00 	cmp.w	r8, #0
 800eafe:	bf18      	it	ne
 800eb00:	f04f 0b68 	movne.w	fp, #104	; 0x68
 800eb04:	e797      	b.n	800ea36 <rcl_node_resolve_name+0x86>
 800eb06:	f7fa ff51 	bl	80099ac <rcutils_get_error_string>
 800eb0a:	f7fa ff65 	bl	80099d8 <rcutils_reset_error>
 800eb0e:	a808      	add	r0, sp, #32
 800eb10:	f000 fca2 	bl	800f458 <rcutils_string_map_fini>
 800eb14:	b998      	cbnz	r0, 800eb3e <rcl_node_resolve_name+0x18e>
 800eb16:	4651      	mov	r1, sl
 800eb18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb1a:	47c8      	blx	r9
 800eb1c:	4651      	mov	r1, sl
 800eb1e:	4620      	mov	r0, r4
 800eb20:	f04f 0b01 	mov.w	fp, #1
 800eb24:	47c8      	blx	r9
 800eb26:	e786      	b.n	800ea36 <rcl_node_resolve_name+0x86>
 800eb28:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800eb2c:	f7fa ff3e 	bl	80099ac <rcutils_get_error_string>
 800eb30:	f7fa ff52 	bl	80099d8 <rcutils_reset_error>
 800eb34:	4644      	mov	r4, r8
 800eb36:	e7da      	b.n	800eaee <rcl_node_resolve_name+0x13e>
 800eb38:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800eb3c:	e7d3      	b.n	800eae6 <rcl_node_resolve_name+0x136>
 800eb3e:	46d8      	mov	r8, fp
 800eb40:	f04f 0b01 	mov.w	fp, #1
 800eb44:	f7fa ff32 	bl	80099ac <rcutils_get_error_string>
 800eb48:	f7fa ff46 	bl	80099d8 <rcutils_reset_error>
 800eb4c:	e7cf      	b.n	800eaee <rcl_node_resolve_name+0x13e>
 800eb4e:	4651      	mov	r1, sl
 800eb50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb52:	47c8      	blx	r9
 800eb54:	4651      	mov	r1, sl
 800eb56:	4658      	mov	r0, fp
 800eb58:	47c8      	blx	r9
 800eb5a:	e76c      	b.n	800ea36 <rcl_node_resolve_name+0x86>

0800eb5c <exact_match_lookup>:
 800eb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb5e:	f102 0708 	add.w	r7, r2, #8
 800eb62:	460b      	mov	r3, r1
 800eb64:	b085      	sub	sp, #20
 800eb66:	4614      	mov	r4, r2
 800eb68:	4606      	mov	r6, r0
 800eb6a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800eb6e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800eb72:	4618      	mov	r0, r3
 800eb74:	4919      	ldr	r1, [pc, #100]	; (800ebdc <exact_match_lookup+0x80>)
 800eb76:	e894 000c 	ldmia.w	r4, {r2, r3}
 800eb7a:	f000 fa4d 	bl	800f018 <rcutils_join_path>
 800eb7e:	7833      	ldrb	r3, [r6, #0]
 800eb80:	4605      	mov	r5, r0
 800eb82:	2b2f      	cmp	r3, #47	; 0x2f
 800eb84:	d023      	beq.n	800ebce <exact_match_lookup+0x72>
 800eb86:	f104 030c 	add.w	r3, r4, #12
 800eb8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800eb8e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eb92:	1c70      	adds	r0, r6, #1
 800eb94:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800eb98:	f000 fa44 	bl	800f024 <rcutils_to_native_path>
 800eb9c:	4606      	mov	r6, r0
 800eb9e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800eba2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800eba6:	4631      	mov	r1, r6
 800eba8:	4628      	mov	r0, r5
 800ebaa:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ebae:	f000 fa33 	bl	800f018 <rcutils_join_path>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	4630      	mov	r0, r6
 800ebb6:	6862      	ldr	r2, [r4, #4]
 800ebb8:	461e      	mov	r6, r3
 800ebba:	6921      	ldr	r1, [r4, #16]
 800ebbc:	4790      	blx	r2
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	4635      	mov	r5, r6
 800ebc2:	6863      	ldr	r3, [r4, #4]
 800ebc4:	6921      	ldr	r1, [r4, #16]
 800ebc6:	4798      	blx	r3
 800ebc8:	4628      	mov	r0, r5
 800ebca:	b005      	add	sp, #20
 800ebcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebce:	7873      	ldrb	r3, [r6, #1]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d1d8      	bne.n	800eb86 <exact_match_lookup+0x2a>
 800ebd4:	4628      	mov	r0, r5
 800ebd6:	b005      	add	sp, #20
 800ebd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	08017bd4 	.word	0x08017bd4

0800ebe0 <rcl_get_secure_root>:
 800ebe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ebe4:	b085      	sub	sp, #20
 800ebe6:	b168      	cbz	r0, 800ec04 <rcl_get_secure_root+0x24>
 800ebe8:	4607      	mov	r7, r0
 800ebea:	4608      	mov	r0, r1
 800ebec:	460c      	mov	r4, r1
 800ebee:	f7fa fecf 	bl	8009990 <rcutils_allocator_is_valid>
 800ebf2:	b138      	cbz	r0, 800ec04 <rcl_get_secure_root+0x24>
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	482d      	ldr	r0, [pc, #180]	; (800ecac <rcl_get_secure_root+0xcc>)
 800ebf8:	a903      	add	r1, sp, #12
 800ebfa:	9303      	str	r3, [sp, #12]
 800ebfc:	f000 f9f2 	bl	800efe4 <rcutils_get_env>
 800ec00:	4605      	mov	r5, r0
 800ec02:	b120      	cbz	r0, 800ec0e <rcl_get_secure_root+0x2e>
 800ec04:	2500      	movs	r5, #0
 800ec06:	4628      	mov	r0, r5
 800ec08:	b005      	add	sp, #20
 800ec0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec0e:	9b03      	ldr	r3, [sp, #12]
 800ec10:	781a      	ldrb	r2, [r3, #0]
 800ec12:	2a00      	cmp	r2, #0
 800ec14:	d0f6      	beq.n	800ec04 <rcl_get_secure_root+0x24>
 800ec16:	f104 090c 	add.w	r9, r4, #12
 800ec1a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ec1e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ec22:	4618      	mov	r0, r3
 800ec24:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ec28:	f000 fb3e 	bl	800f2a8 <rcutils_strdup>
 800ec2c:	4680      	mov	r8, r0
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	d0e8      	beq.n	800ec04 <rcl_get_secure_root+0x24>
 800ec32:	a903      	add	r1, sp, #12
 800ec34:	481e      	ldr	r0, [pc, #120]	; (800ecb0 <rcl_get_secure_root+0xd0>)
 800ec36:	9503      	str	r5, [sp, #12]
 800ec38:	f000 f9d4 	bl	800efe4 <rcutils_get_env>
 800ec3c:	b160      	cbz	r0, 800ec58 <rcl_get_secure_root+0x78>
 800ec3e:	2600      	movs	r6, #0
 800ec40:	4630      	mov	r0, r6
 800ec42:	6863      	ldr	r3, [r4, #4]
 800ec44:	6921      	ldr	r1, [r4, #16]
 800ec46:	4798      	blx	r3
 800ec48:	4640      	mov	r0, r8
 800ec4a:	6863      	ldr	r3, [r4, #4]
 800ec4c:	6921      	ldr	r1, [r4, #16]
 800ec4e:	4798      	blx	r3
 800ec50:	4628      	mov	r0, r5
 800ec52:	b005      	add	sp, #20
 800ec54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec58:	9b03      	ldr	r3, [sp, #12]
 800ec5a:	781e      	ldrb	r6, [r3, #0]
 800ec5c:	b1f6      	cbz	r6, 800ec9c <rcl_get_secure_root+0xbc>
 800ec5e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ec62:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ec66:	4618      	mov	r0, r3
 800ec68:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ec6c:	f000 fb1c 	bl	800f2a8 <rcutils_strdup>
 800ec70:	4606      	mov	r6, r0
 800ec72:	2800      	cmp	r0, #0
 800ec74:	d0e3      	beq.n	800ec3e <rcl_get_secure_root+0x5e>
 800ec76:	4622      	mov	r2, r4
 800ec78:	4641      	mov	r1, r8
 800ec7a:	f7ff ff6f 	bl	800eb5c <exact_match_lookup>
 800ec7e:	4605      	mov	r5, r0
 800ec80:	2d00      	cmp	r5, #0
 800ec82:	d0dd      	beq.n	800ec40 <rcl_get_secure_root+0x60>
 800ec84:	4628      	mov	r0, r5
 800ec86:	f000 f9c5 	bl	800f014 <rcutils_is_directory>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d1d7      	bne.n	800ec40 <rcl_get_secure_root+0x60>
 800ec90:	4628      	mov	r0, r5
 800ec92:	6921      	ldr	r1, [r4, #16]
 800ec94:	461d      	mov	r5, r3
 800ec96:	6863      	ldr	r3, [r4, #4]
 800ec98:	4798      	blx	r3
 800ec9a:	e7d1      	b.n	800ec40 <rcl_get_secure_root+0x60>
 800ec9c:	4622      	mov	r2, r4
 800ec9e:	4638      	mov	r0, r7
 800eca0:	4641      	mov	r1, r8
 800eca2:	f7ff ff5b 	bl	800eb5c <exact_match_lookup>
 800eca6:	4605      	mov	r5, r0
 800eca8:	e7ea      	b.n	800ec80 <rcl_get_secure_root+0xa0>
 800ecaa:	bf00      	nop
 800ecac:	08017be0 	.word	0x08017be0
 800ecb0:	08017bf8 	.word	0x08017bf8

0800ecb4 <rcl_get_security_options_from_environment>:
 800ecb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb8:	b082      	sub	sp, #8
 800ecba:	2300      	movs	r3, #0
 800ecbc:	4606      	mov	r6, r0
 800ecbe:	460f      	mov	r7, r1
 800ecc0:	4821      	ldr	r0, [pc, #132]	; (800ed48 <rcl_get_security_options_from_environment+0x94>)
 800ecc2:	a901      	add	r1, sp, #4
 800ecc4:	4690      	mov	r8, r2
 800ecc6:	9301      	str	r3, [sp, #4]
 800ecc8:	f000 f98c 	bl	800efe4 <rcutils_get_env>
 800eccc:	b120      	cbz	r0, 800ecd8 <rcl_get_security_options_from_environment+0x24>
 800ecce:	2501      	movs	r5, #1
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	b002      	add	sp, #8
 800ecd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd8:	4604      	mov	r4, r0
 800ecda:	491c      	ldr	r1, [pc, #112]	; (800ed4c <rcl_get_security_options_from_environment+0x98>)
 800ecdc:	9801      	ldr	r0, [sp, #4]
 800ecde:	f7f1 faff 	bl	80002e0 <strcmp>
 800ece2:	4605      	mov	r5, r0
 800ece4:	b9f0      	cbnz	r0, 800ed24 <rcl_get_security_options_from_environment+0x70>
 800ece6:	9001      	str	r0, [sp, #4]
 800ece8:	f1b8 0f00 	cmp.w	r8, #0
 800ecec:	d021      	beq.n	800ed32 <rcl_get_security_options_from_environment+0x7e>
 800ecee:	a901      	add	r1, sp, #4
 800ecf0:	4817      	ldr	r0, [pc, #92]	; (800ed50 <rcl_get_security_options_from_environment+0x9c>)
 800ecf2:	f000 f977 	bl	800efe4 <rcutils_get_env>
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	d1e9      	bne.n	800ecce <rcl_get_security_options_from_environment+0x1a>
 800ecfa:	4916      	ldr	r1, [pc, #88]	; (800ed54 <rcl_get_security_options_from_environment+0xa0>)
 800ecfc:	9801      	ldr	r0, [sp, #4]
 800ecfe:	f7f1 faef 	bl	80002e0 <strcmp>
 800ed02:	4603      	mov	r3, r0
 800ed04:	4639      	mov	r1, r7
 800ed06:	4630      	mov	r0, r6
 800ed08:	fab3 f383 	clz	r3, r3
 800ed0c:	095b      	lsrs	r3, r3, #5
 800ed0e:	f888 3000 	strb.w	r3, [r8]
 800ed12:	f7ff ff65 	bl	800ebe0 <rcl_get_secure_root>
 800ed16:	b170      	cbz	r0, 800ed36 <rcl_get_security_options_from_environment+0x82>
 800ed18:	f8c8 0004 	str.w	r0, [r8, #4]
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	b002      	add	sp, #8
 800ed20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed24:	4625      	mov	r5, r4
 800ed26:	f888 4000 	strb.w	r4, [r8]
 800ed2a:	4628      	mov	r0, r5
 800ed2c:	b002      	add	sp, #8
 800ed2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed32:	250b      	movs	r5, #11
 800ed34:	e7cc      	b.n	800ecd0 <rcl_get_security_options_from_environment+0x1c>
 800ed36:	f898 5000 	ldrb.w	r5, [r8]
 800ed3a:	f1a5 0501 	sub.w	r5, r5, #1
 800ed3e:	fab5 f585 	clz	r5, r5
 800ed42:	096d      	lsrs	r5, r5, #5
 800ed44:	e7c4      	b.n	800ecd0 <rcl_get_security_options_from_environment+0x1c>
 800ed46:	bf00      	nop
 800ed48:	08017b98 	.word	0x08017b98
 800ed4c:	08017bac 	.word	0x08017bac
 800ed50:	08017bb4 	.word	0x08017bb4
 800ed54:	08017bcc 	.word	0x08017bcc

0800ed58 <rcl_get_system_time>:
 800ed58:	4608      	mov	r0, r1
 800ed5a:	f000 bbf1 	b.w	800f540 <rcutils_system_time_now>
 800ed5e:	bf00      	nop

0800ed60 <rcl_get_steady_time>:
 800ed60:	4608      	mov	r0, r1
 800ed62:	f000 bc15 	b.w	800f590 <rcutils_steady_time_now>
 800ed66:	bf00      	nop

0800ed68 <rcl_get_ros_time>:
 800ed68:	7a03      	ldrb	r3, [r0, #8]
 800ed6a:	b510      	push	{r4, lr}
 800ed6c:	460c      	mov	r4, r1
 800ed6e:	b143      	cbz	r3, 800ed82 <rcl_get_ros_time+0x1a>
 800ed70:	2105      	movs	r1, #5
 800ed72:	f000 f901 	bl	800ef78 <__atomic_load_8>
 800ed76:	4602      	mov	r2, r0
 800ed78:	460b      	mov	r3, r1
 800ed7a:	2000      	movs	r0, #0
 800ed7c:	e9c4 2300 	strd	r2, r3, [r4]
 800ed80:	bd10      	pop	{r4, pc}
 800ed82:	4608      	mov	r0, r1
 800ed84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed88:	f000 bbda 	b.w	800f540 <rcutils_system_time_now>

0800ed8c <rcl_clock_init>:
 800ed8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed8e:	4605      	mov	r5, r0
 800ed90:	4610      	mov	r0, r2
 800ed92:	4614      	mov	r4, r2
 800ed94:	460e      	mov	r6, r1
 800ed96:	f7fa fdfb 	bl	8009990 <rcutils_allocator_is_valid>
 800ed9a:	b128      	cbz	r0, 800eda8 <rcl_clock_init+0x1c>
 800ed9c:	2d03      	cmp	r5, #3
 800ed9e:	d803      	bhi.n	800eda8 <rcl_clock_init+0x1c>
 800eda0:	e8df f005 	tbb	[pc, r5]
 800eda4:	0659301f 	.word	0x0659301f
 800eda8:	f04f 0c0b 	mov.w	ip, #11
 800edac:	4660      	mov	r0, ip
 800edae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edb0:	2c00      	cmp	r4, #0
 800edb2:	d0f9      	beq.n	800eda8 <rcl_clock_init+0x1c>
 800edb4:	fab6 f386 	clz	r3, r6
 800edb8:	095b      	lsrs	r3, r3, #5
 800edba:	2e00      	cmp	r6, #0
 800edbc:	d0f4      	beq.n	800eda8 <rcl_clock_init+0x1c>
 800edbe:	6133      	str	r3, [r6, #16]
 800edc0:	469c      	mov	ip, r3
 800edc2:	f106 0514 	add.w	r5, r6, #20
 800edc6:	4f32      	ldr	r7, [pc, #200]	; (800ee90 <rcl_clock_init+0x104>)
 800edc8:	f04f 0e03 	mov.w	lr, #3
 800edcc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800edd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800edd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800edd4:	6823      	ldr	r3, [r4, #0]
 800edd6:	4660      	mov	r0, ip
 800edd8:	602b      	str	r3, [r5, #0]
 800edda:	60f7      	str	r7, [r6, #12]
 800eddc:	f886 e000 	strb.w	lr, [r6]
 800ede0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ede2:	2e00      	cmp	r6, #0
 800ede4:	d0e0      	beq.n	800eda8 <rcl_clock_init+0x1c>
 800ede6:	2300      	movs	r3, #0
 800ede8:	f106 0514 	add.w	r5, r6, #20
 800edec:	7033      	strb	r3, [r6, #0]
 800edee:	469c      	mov	ip, r3
 800edf0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800edf4:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800edf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800edfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800edfc:	6823      	ldr	r3, [r4, #0]
 800edfe:	4660      	mov	r0, ip
 800ee00:	602b      	str	r3, [r5, #0]
 800ee02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee04:	2c00      	cmp	r4, #0
 800ee06:	d0cf      	beq.n	800eda8 <rcl_clock_init+0x1c>
 800ee08:	fab6 f586 	clz	r5, r6
 800ee0c:	096d      	lsrs	r5, r5, #5
 800ee0e:	2e00      	cmp	r6, #0
 800ee10:	d0ca      	beq.n	800eda8 <rcl_clock_init+0x1c>
 800ee12:	46a6      	mov	lr, r4
 800ee14:	7035      	strb	r5, [r6, #0]
 800ee16:	f106 0c14 	add.w	ip, r6, #20
 800ee1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee1e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800ee22:	e9c6 5503 	strd	r5, r5, [r6, #12]
 800ee26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee2a:	f8de 3000 	ldr.w	r3, [lr]
 800ee2e:	2010      	movs	r0, #16
 800ee30:	f8cc 3000 	str.w	r3, [ip]
 800ee34:	6823      	ldr	r3, [r4, #0]
 800ee36:	6921      	ldr	r1, [r4, #16]
 800ee38:	4798      	blx	r3
 800ee3a:	6130      	str	r0, [r6, #16]
 800ee3c:	b320      	cbz	r0, 800ee88 <rcl_clock_init+0xfc>
 800ee3e:	2200      	movs	r2, #0
 800ee40:	2300      	movs	r3, #0
 800ee42:	46ac      	mov	ip, r5
 800ee44:	7205      	strb	r5, [r0, #8]
 800ee46:	e9c0 2300 	strd	r2, r3, [r0]
 800ee4a:	4a12      	ldr	r2, [pc, #72]	; (800ee94 <rcl_clock_init+0x108>)
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	4660      	mov	r0, ip
 800ee50:	60f2      	str	r2, [r6, #12]
 800ee52:	7033      	strb	r3, [r6, #0]
 800ee54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee56:	2c00      	cmp	r4, #0
 800ee58:	d0a6      	beq.n	800eda8 <rcl_clock_init+0x1c>
 800ee5a:	fab6 f386 	clz	r3, r6
 800ee5e:	095b      	lsrs	r3, r3, #5
 800ee60:	2e00      	cmp	r6, #0
 800ee62:	d0a1      	beq.n	800eda8 <rcl_clock_init+0x1c>
 800ee64:	6133      	str	r3, [r6, #16]
 800ee66:	469c      	mov	ip, r3
 800ee68:	f106 0514 	add.w	r5, r6, #20
 800ee6c:	f8df e028 	ldr.w	lr, [pc, #40]	; 800ee98 <rcl_clock_init+0x10c>
 800ee70:	2702      	movs	r7, #2
 800ee72:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800ee76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ee78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ee7a:	6823      	ldr	r3, [r4, #0]
 800ee7c:	4660      	mov	r0, ip
 800ee7e:	602b      	str	r3, [r5, #0]
 800ee80:	f8c6 e00c 	str.w	lr, [r6, #12]
 800ee84:	7037      	strb	r7, [r6, #0]
 800ee86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee88:	f04f 0c0a 	mov.w	ip, #10
 800ee8c:	e78e      	b.n	800edac <rcl_clock_init+0x20>
 800ee8e:	bf00      	nop
 800ee90:	0800ed61 	.word	0x0800ed61
 800ee94:	0800ed69 	.word	0x0800ed69
 800ee98:	0800ed59 	.word	0x0800ed59

0800ee9c <rcl_validate_enclave_name_with_size>:
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	d049      	beq.n	800ef34 <rcl_validate_enclave_name_with_size+0x98>
 800eea0:	b570      	push	{r4, r5, r6, lr}
 800eea2:	4615      	mov	r5, r2
 800eea4:	b0c2      	sub	sp, #264	; 0x108
 800eea6:	b19a      	cbz	r2, 800eed0 <rcl_validate_enclave_name_with_size+0x34>
 800eea8:	461e      	mov	r6, r3
 800eeaa:	466a      	mov	r2, sp
 800eeac:	ab01      	add	r3, sp, #4
 800eeae:	460c      	mov	r4, r1
 800eeb0:	f000 fc3e 	bl	800f730 <rmw_validate_namespace_with_size>
 800eeb4:	4684      	mov	ip, r0
 800eeb6:	b9b8      	cbnz	r0, 800eee8 <rcl_validate_enclave_name_with_size+0x4c>
 800eeb8:	9900      	ldr	r1, [sp, #0]
 800eeba:	b171      	cbz	r1, 800eeda <rcl_validate_enclave_name_with_size+0x3e>
 800eebc:	2907      	cmp	r1, #7
 800eebe:	d019      	beq.n	800eef4 <rcl_validate_enclave_name_with_size+0x58>
 800eec0:	1e4b      	subs	r3, r1, #1
 800eec2:	2b05      	cmp	r3, #5
 800eec4:	d83a      	bhi.n	800ef3c <rcl_validate_enclave_name_with_size+0xa0>
 800eec6:	e8df f003 	tbb	[pc, r3]
 800eeca:	2926      	.short	0x2926
 800eecc:	1d322f2c 	.word	0x1d322f2c
 800eed0:	f04f 0c0b 	mov.w	ip, #11
 800eed4:	4660      	mov	r0, ip
 800eed6:	b042      	add	sp, #264	; 0x108
 800eed8:	bd70      	pop	{r4, r5, r6, pc}
 800eeda:	2907      	cmp	r1, #7
 800eedc:	d00a      	beq.n	800eef4 <rcl_validate_enclave_name_with_size+0x58>
 800eede:	2300      	movs	r3, #0
 800eee0:	4660      	mov	r0, ip
 800eee2:	602b      	str	r3, [r5, #0]
 800eee4:	b042      	add	sp, #264	; 0x108
 800eee6:	bd70      	pop	{r4, r5, r6, pc}
 800eee8:	f7ff f8d0 	bl	800e08c <rcl_convert_rmw_ret_to_rcl_ret>
 800eeec:	4684      	mov	ip, r0
 800eeee:	4660      	mov	r0, ip
 800eef0:	b042      	add	sp, #264	; 0x108
 800eef2:	bd70      	pop	{r4, r5, r6, pc}
 800eef4:	2cff      	cmp	r4, #255	; 0xff
 800eef6:	d9f2      	bls.n	800eede <rcl_validate_enclave_name_with_size+0x42>
 800eef8:	6029      	str	r1, [r5, #0]
 800eefa:	2e00      	cmp	r6, #0
 800eefc:	d0ea      	beq.n	800eed4 <rcl_validate_enclave_name_with_size+0x38>
 800eefe:	23fe      	movs	r3, #254	; 0xfe
 800ef00:	6033      	str	r3, [r6, #0]
 800ef02:	e7e7      	b.n	800eed4 <rcl_validate_enclave_name_with_size+0x38>
 800ef04:	2306      	movs	r3, #6
 800ef06:	602b      	str	r3, [r5, #0]
 800ef08:	2e00      	cmp	r6, #0
 800ef0a:	d0e3      	beq.n	800eed4 <rcl_validate_enclave_name_with_size+0x38>
 800ef0c:	9b01      	ldr	r3, [sp, #4]
 800ef0e:	4660      	mov	r0, ip
 800ef10:	6033      	str	r3, [r6, #0]
 800ef12:	b042      	add	sp, #264	; 0x108
 800ef14:	bd70      	pop	{r4, r5, r6, pc}
 800ef16:	2301      	movs	r3, #1
 800ef18:	602b      	str	r3, [r5, #0]
 800ef1a:	e7f5      	b.n	800ef08 <rcl_validate_enclave_name_with_size+0x6c>
 800ef1c:	2302      	movs	r3, #2
 800ef1e:	602b      	str	r3, [r5, #0]
 800ef20:	e7f2      	b.n	800ef08 <rcl_validate_enclave_name_with_size+0x6c>
 800ef22:	2303      	movs	r3, #3
 800ef24:	602b      	str	r3, [r5, #0]
 800ef26:	e7ef      	b.n	800ef08 <rcl_validate_enclave_name_with_size+0x6c>
 800ef28:	2304      	movs	r3, #4
 800ef2a:	602b      	str	r3, [r5, #0]
 800ef2c:	e7ec      	b.n	800ef08 <rcl_validate_enclave_name_with_size+0x6c>
 800ef2e:	2305      	movs	r3, #5
 800ef30:	602b      	str	r3, [r5, #0]
 800ef32:	e7e9      	b.n	800ef08 <rcl_validate_enclave_name_with_size+0x6c>
 800ef34:	f04f 0c0b 	mov.w	ip, #11
 800ef38:	4660      	mov	r0, ip
 800ef3a:	4770      	bx	lr
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	4a04      	ldr	r2, [pc, #16]	; (800ef50 <rcl_validate_enclave_name_with_size+0xb4>)
 800ef40:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ef44:	a802      	add	r0, sp, #8
 800ef46:	f000 f961 	bl	800f20c <rcutils_snprintf>
 800ef4a:	f04f 0c01 	mov.w	ip, #1
 800ef4e:	e7c1      	b.n	800eed4 <rcl_validate_enclave_name_with_size+0x38>
 800ef50:	08017c18 	.word	0x08017c18

0800ef54 <rcl_validate_enclave_name>:
 800ef54:	b168      	cbz	r0, 800ef72 <rcl_validate_enclave_name+0x1e>
 800ef56:	b570      	push	{r4, r5, r6, lr}
 800ef58:	460d      	mov	r5, r1
 800ef5a:	4616      	mov	r6, r2
 800ef5c:	4604      	mov	r4, r0
 800ef5e:	f7f1 f9c9 	bl	80002f4 <strlen>
 800ef62:	4633      	mov	r3, r6
 800ef64:	4601      	mov	r1, r0
 800ef66:	462a      	mov	r2, r5
 800ef68:	4620      	mov	r0, r4
 800ef6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef6e:	f7ff bf95 	b.w	800ee9c <rcl_validate_enclave_name_with_size>
 800ef72:	200b      	movs	r0, #11
 800ef74:	4770      	bx	lr
 800ef76:	bf00      	nop

0800ef78 <__atomic_load_8>:
 800ef78:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800ef7c:	4a16      	ldr	r2, [pc, #88]	; (800efd8 <__atomic_load_8+0x60>)
 800ef7e:	4b17      	ldr	r3, [pc, #92]	; (800efdc <__atomic_load_8+0x64>)
 800ef80:	f04f 0c01 	mov.w	ip, #1
 800ef84:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800ef88:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800ef8c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800ef90:	fb02 f101 	mul.w	r1, r2, r1
 800ef94:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800ef98:	fba3 2301 	umull	r2, r3, r3, r1
 800ef9c:	091b      	lsrs	r3, r3, #4
 800ef9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800efa2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800efa6:	b4d0      	push	{r4, r6, r7}
 800efa8:	1ac9      	subs	r1, r1, r3
 800efaa:	4c0d      	ldr	r4, [pc, #52]	; (800efe0 <__atomic_load_8+0x68>)
 800efac:	1862      	adds	r2, r4, r1
 800efae:	e8d2 3f4f 	ldrexb	r3, [r2]
 800efb2:	e8c2 cf46 	strexb	r6, ip, [r2]
 800efb6:	2e00      	cmp	r6, #0
 800efb8:	d1f9      	bne.n	800efae <__atomic_load_8+0x36>
 800efba:	b2db      	uxtb	r3, r3
 800efbc:	f3bf 8f5b 	dmb	ish
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d1f4      	bne.n	800efae <__atomic_load_8+0x36>
 800efc4:	e9d0 6700 	ldrd	r6, r7, [r0]
 800efc8:	f3bf 8f5b 	dmb	ish
 800efcc:	5463      	strb	r3, [r4, r1]
 800efce:	4630      	mov	r0, r6
 800efd0:	4639      	mov	r1, r7
 800efd2:	bcd0      	pop	{r4, r6, r7}
 800efd4:	4770      	bx	lr
 800efd6:	bf00      	nop
 800efd8:	27d4eb2d 	.word	0x27d4eb2d
 800efdc:	b21642c9 	.word	0xb21642c9
 800efe0:	2000e950 	.word	0x2000e950

0800efe4 <rcutils_get_env>:
 800efe4:	b168      	cbz	r0, 800f002 <rcutils_get_env+0x1e>
 800efe6:	b510      	push	{r4, lr}
 800efe8:	460c      	mov	r4, r1
 800efea:	b129      	cbz	r1, 800eff8 <rcutils_get_env+0x14>
 800efec:	f003 fdcc 	bl	8012b88 <getenv>
 800eff0:	b120      	cbz	r0, 800effc <rcutils_get_env+0x18>
 800eff2:	6020      	str	r0, [r4, #0]
 800eff4:	2000      	movs	r0, #0
 800eff6:	bd10      	pop	{r4, pc}
 800eff8:	4803      	ldr	r0, [pc, #12]	; (800f008 <rcutils_get_env+0x24>)
 800effa:	bd10      	pop	{r4, pc}
 800effc:	4b03      	ldr	r3, [pc, #12]	; (800f00c <rcutils_get_env+0x28>)
 800effe:	6023      	str	r3, [r4, #0]
 800f000:	bd10      	pop	{r4, pc}
 800f002:	4803      	ldr	r0, [pc, #12]	; (800f010 <rcutils_get_env+0x2c>)
 800f004:	4770      	bx	lr
 800f006:	bf00      	nop
 800f008:	08017c94 	.word	0x08017c94
 800f00c:	08018498 	.word	0x08018498
 800f010:	08017c78 	.word	0x08017c78

0800f014 <rcutils_is_directory>:
 800f014:	2000      	movs	r0, #0
 800f016:	4770      	bx	lr

0800f018 <rcutils_join_path>:
 800f018:	b082      	sub	sp, #8
 800f01a:	2000      	movs	r0, #0
 800f01c:	e88d 000c 	stmia.w	sp, {r2, r3}
 800f020:	b002      	add	sp, #8
 800f022:	4770      	bx	lr

0800f024 <rcutils_to_native_path>:
 800f024:	b084      	sub	sp, #16
 800f026:	2000      	movs	r0, #0
 800f028:	f10d 0c04 	add.w	ip, sp, #4
 800f02c:	b004      	add	sp, #16
 800f02e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800f032:	4770      	bx	lr

0800f034 <rcutils_format_string_limit>:
 800f034:	b40f      	push	{r0, r1, r2, r3}
 800f036:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f038:	b083      	sub	sp, #12
 800f03a:	ac08      	add	r4, sp, #32
 800f03c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f03e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f042:	b326      	cbz	r6, 800f08e <rcutils_format_string_limit+0x5a>
 800f044:	a808      	add	r0, sp, #32
 800f046:	f7fa fca3 	bl	8009990 <rcutils_allocator_is_valid>
 800f04a:	b300      	cbz	r0, 800f08e <rcutils_format_string_limit+0x5a>
 800f04c:	2100      	movs	r1, #0
 800f04e:	ab0f      	add	r3, sp, #60	; 0x3c
 800f050:	4632      	mov	r2, r6
 800f052:	4608      	mov	r0, r1
 800f054:	e9cd 3300 	strd	r3, r3, [sp]
 800f058:	f000 f906 	bl	800f268 <rcutils_vsnprintf>
 800f05c:	1c43      	adds	r3, r0, #1
 800f05e:	4605      	mov	r5, r0
 800f060:	d015      	beq.n	800f08e <rcutils_format_string_limit+0x5a>
 800f062:	1c47      	adds	r7, r0, #1
 800f064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f066:	429f      	cmp	r7, r3
 800f068:	d901      	bls.n	800f06e <rcutils_format_string_limit+0x3a>
 800f06a:	1e5d      	subs	r5, r3, #1
 800f06c:	461f      	mov	r7, r3
 800f06e:	9b08      	ldr	r3, [sp, #32]
 800f070:	4638      	mov	r0, r7
 800f072:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f074:	4798      	blx	r3
 800f076:	4604      	mov	r4, r0
 800f078:	b148      	cbz	r0, 800f08e <rcutils_format_string_limit+0x5a>
 800f07a:	4632      	mov	r2, r6
 800f07c:	4639      	mov	r1, r7
 800f07e:	9b01      	ldr	r3, [sp, #4]
 800f080:	f000 f8f2 	bl	800f268 <rcutils_vsnprintf>
 800f084:	2800      	cmp	r0, #0
 800f086:	db09      	blt.n	800f09c <rcutils_format_string_limit+0x68>
 800f088:	2300      	movs	r3, #0
 800f08a:	5563      	strb	r3, [r4, r5]
 800f08c:	e000      	b.n	800f090 <rcutils_format_string_limit+0x5c>
 800f08e:	2400      	movs	r4, #0
 800f090:	4620      	mov	r0, r4
 800f092:	b003      	add	sp, #12
 800f094:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f098:	b004      	add	sp, #16
 800f09a:	4770      	bx	lr
 800f09c:	4620      	mov	r0, r4
 800f09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f0a2:	2400      	movs	r4, #0
 800f0a4:	4798      	blx	r3
 800f0a6:	e7f3      	b.n	800f090 <rcutils_format_string_limit+0x5c>

0800f0a8 <rcutils_repl_str>:
 800f0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ac:	ed2d 8b02 	vpush	{d8}
 800f0b0:	b087      	sub	sp, #28
 800f0b2:	2600      	movs	r6, #0
 800f0b4:	4680      	mov	r8, r0
 800f0b6:	468a      	mov	sl, r1
 800f0b8:	9000      	str	r0, [sp, #0]
 800f0ba:	4608      	mov	r0, r1
 800f0bc:	ee08 2a10 	vmov	s16, r2
 800f0c0:	4699      	mov	r9, r3
 800f0c2:	2510      	movs	r5, #16
 800f0c4:	f7f1 f916 	bl	80002f4 <strlen>
 800f0c8:	4637      	mov	r7, r6
 800f0ca:	46b3      	mov	fp, r6
 800f0cc:	9001      	str	r0, [sp, #4]
 800f0ce:	e01e      	b.n	800f10e <rcutils_repl_str+0x66>
 800f0d0:	f10b 0b01 	add.w	fp, fp, #1
 800f0d4:	9b01      	ldr	r3, [sp, #4]
 800f0d6:	455e      	cmp	r6, fp
 800f0d8:	eb04 0803 	add.w	r8, r4, r3
 800f0dc:	d211      	bcs.n	800f102 <rcutils_repl_str+0x5a>
 800f0de:	442e      	add	r6, r5
 800f0e0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f0e4:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f0e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0ec:	00b1      	lsls	r1, r6, #2
 800f0ee:	4798      	blx	r3
 800f0f0:	2800      	cmp	r0, #0
 800f0f2:	f000 8088 	beq.w	800f206 <rcutils_repl_str+0x15e>
 800f0f6:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800f0fa:	4607      	mov	r7, r0
 800f0fc:	bf28      	it	cs
 800f0fe:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800f102:	9a00      	ldr	r2, [sp, #0]
 800f104:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 800f108:	1aa4      	subs	r4, r4, r2
 800f10a:	f843 4c04 	str.w	r4, [r3, #-4]
 800f10e:	4651      	mov	r1, sl
 800f110:	4640      	mov	r0, r8
 800f112:	f004 fe3f 	bl	8013d94 <strstr>
 800f116:	4604      	mov	r4, r0
 800f118:	4638      	mov	r0, r7
 800f11a:	2c00      	cmp	r4, #0
 800f11c:	d1d8      	bne.n	800f0d0 <rcutils_repl_str+0x28>
 800f11e:	4640      	mov	r0, r8
 800f120:	f7f1 f8e8 	bl	80002f4 <strlen>
 800f124:	9b00      	ldr	r3, [sp, #0]
 800f126:	eba8 0803 	sub.w	r8, r8, r3
 800f12a:	eb08 0400 	add.w	r4, r8, r0
 800f12e:	9402      	str	r4, [sp, #8]
 800f130:	f1bb 0f00 	cmp.w	fp, #0
 800f134:	d045      	beq.n	800f1c2 <rcutils_repl_str+0x11a>
 800f136:	ee18 0a10 	vmov	r0, s16
 800f13a:	f7f1 f8db 	bl	80002f4 <strlen>
 800f13e:	9a01      	ldr	r2, [sp, #4]
 800f140:	4606      	mov	r6, r0
 800f142:	f8d9 3000 	ldr.w	r3, [r9]
 800f146:	1a82      	subs	r2, r0, r2
 800f148:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f14c:	fb0b 4202 	mla	r2, fp, r2, r4
 800f150:	1c50      	adds	r0, r2, #1
 800f152:	9205      	str	r2, [sp, #20]
 800f154:	4798      	blx	r3
 800f156:	4682      	mov	sl, r0
 800f158:	2800      	cmp	r0, #0
 800f15a:	d054      	beq.n	800f206 <rcutils_repl_str+0x15e>
 800f15c:	683a      	ldr	r2, [r7, #0]
 800f15e:	463d      	mov	r5, r7
 800f160:	9900      	ldr	r1, [sp, #0]
 800f162:	2401      	movs	r4, #1
 800f164:	f003 fd90 	bl	8012c88 <memcpy>
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 800f16e:	eb0a 0803 	add.w	r8, sl, r3
 800f172:	ee18 7a10 	vmov	r7, s16
 800f176:	f8dd a000 	ldr.w	sl, [sp]
 800f17a:	f8cd 9000 	str.w	r9, [sp]
 800f17e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f182:	4632      	mov	r2, r6
 800f184:	4639      	mov	r1, r7
 800f186:	4640      	mov	r0, r8
 800f188:	44b0      	add	r8, r6
 800f18a:	f003 fd7d 	bl	8012c88 <memcpy>
 800f18e:	f855 2b04 	ldr.w	r2, [r5], #4
 800f192:	45a3      	cmp	fp, r4
 800f194:	444a      	add	r2, r9
 800f196:	eb0a 0102 	add.w	r1, sl, r2
 800f19a:	d02a      	beq.n	800f1f2 <rcutils_repl_str+0x14a>
 800f19c:	6828      	ldr	r0, [r5, #0]
 800f19e:	1a82      	subs	r2, r0, r2
 800f1a0:	4640      	mov	r0, r8
 800f1a2:	4490      	add	r8, r2
 800f1a4:	f003 fd70 	bl	8012c88 <memcpy>
 800f1a8:	1c62      	adds	r2, r4, #1
 800f1aa:	45a3      	cmp	fp, r4
 800f1ac:	4614      	mov	r4, r2
 800f1ae:	d8e8      	bhi.n	800f182 <rcutils_repl_str+0xda>
 800f1b0:	f8dd 9000 	ldr.w	r9, [sp]
 800f1b4:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	9a05      	ldr	r2, [sp, #20]
 800f1bc:	f80a 3002 	strb.w	r3, [sl, r2]
 800f1c0:	e00b      	b.n	800f1da <rcutils_repl_str+0x132>
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	f8d9 3000 	ldr.w	r3, [r9]
 800f1c8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f1cc:	3001      	adds	r0, #1
 800f1ce:	4798      	blx	r3
 800f1d0:	4682      	mov	sl, r0
 800f1d2:	b110      	cbz	r0, 800f1da <rcutils_repl_str+0x132>
 800f1d4:	9900      	ldr	r1, [sp, #0]
 800f1d6:	f004 fdae 	bl	8013d36 <strcpy>
 800f1da:	4638      	mov	r0, r7
 800f1dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f1e0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f1e4:	4798      	blx	r3
 800f1e6:	4650      	mov	r0, sl
 800f1e8:	b007      	add	sp, #28
 800f1ea:	ecbd 8b02 	vpop	{d8}
 800f1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f2:	9b02      	ldr	r3, [sp, #8]
 800f1f4:	4640      	mov	r0, r8
 800f1f6:	f8dd 9000 	ldr.w	r9, [sp]
 800f1fa:	1a9a      	subs	r2, r3, r2
 800f1fc:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 800f200:	f003 fd42 	bl	8012c88 <memcpy>
 800f204:	e7d8      	b.n	800f1b8 <rcutils_repl_str+0x110>
 800f206:	f04f 0a00 	mov.w	sl, #0
 800f20a:	e7e6      	b.n	800f1da <rcutils_repl_str+0x132>

0800f20c <rcutils_snprintf>:
 800f20c:	b40c      	push	{r2, r3}
 800f20e:	b530      	push	{r4, r5, lr}
 800f210:	b083      	sub	sp, #12
 800f212:	ab06      	add	r3, sp, #24
 800f214:	f853 2b04 	ldr.w	r2, [r3], #4
 800f218:	9301      	str	r3, [sp, #4]
 800f21a:	b1e2      	cbz	r2, 800f256 <rcutils_snprintf+0x4a>
 800f21c:	fab0 f480 	clz	r4, r0
 800f220:	fab1 f581 	clz	r5, r1
 800f224:	ea50 0c01 	orrs.w	ip, r0, r1
 800f228:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800f22c:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800f230:	d008      	beq.n	800f244 <rcutils_snprintf+0x38>
 800f232:	b984      	cbnz	r4, 800f256 <rcutils_snprintf+0x4a>
 800f234:	b97d      	cbnz	r5, 800f256 <rcutils_snprintf+0x4a>
 800f236:	f005 fcc7 	bl	8014bc8 <vsniprintf>
 800f23a:	b003      	add	sp, #12
 800f23c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f240:	b002      	add	sp, #8
 800f242:	4770      	bx	lr
 800f244:	4661      	mov	r1, ip
 800f246:	4660      	mov	r0, ip
 800f248:	f005 fcbe 	bl	8014bc8 <vsniprintf>
 800f24c:	b003      	add	sp, #12
 800f24e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f252:	b002      	add	sp, #8
 800f254:	4770      	bx	lr
 800f256:	f003 fc0f 	bl	8012a78 <__errno>
 800f25a:	2216      	movs	r2, #22
 800f25c:	4603      	mov	r3, r0
 800f25e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f262:	601a      	str	r2, [r3, #0]
 800f264:	e7e9      	b.n	800f23a <rcutils_snprintf+0x2e>
 800f266:	bf00      	nop

0800f268 <rcutils_vsnprintf>:
 800f268:	b570      	push	{r4, r5, r6, lr}
 800f26a:	b1b2      	cbz	r2, 800f29a <rcutils_vsnprintf+0x32>
 800f26c:	fab0 f480 	clz	r4, r0
 800f270:	fab1 f581 	clz	r5, r1
 800f274:	ea50 0c01 	orrs.w	ip, r0, r1
 800f278:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800f27c:	ea4f 1555 	mov.w	r5, r5, lsr #5
 800f280:	d005      	beq.n	800f28e <rcutils_vsnprintf+0x26>
 800f282:	b954      	cbnz	r4, 800f29a <rcutils_vsnprintf+0x32>
 800f284:	b94d      	cbnz	r5, 800f29a <rcutils_vsnprintf+0x32>
 800f286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f28a:	f005 bc9d 	b.w	8014bc8 <vsniprintf>
 800f28e:	4661      	mov	r1, ip
 800f290:	4660      	mov	r0, ip
 800f292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f296:	f005 bc97 	b.w	8014bc8 <vsniprintf>
 800f29a:	f003 fbed 	bl	8012a78 <__errno>
 800f29e:	2316      	movs	r3, #22
 800f2a0:	6003      	str	r3, [r0, #0]
 800f2a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2a6:	bd70      	pop	{r4, r5, r6, pc}

0800f2a8 <rcutils_strdup>:
 800f2a8:	b084      	sub	sp, #16
 800f2aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ac:	ac07      	add	r4, sp, #28
 800f2ae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800f2b0:	4605      	mov	r5, r0
 800f2b2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800f2b6:	b1d0      	cbz	r0, 800f2ee <rcutils_strdup+0x46>
 800f2b8:	460c      	mov	r4, r1
 800f2ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2be:	2100      	movs	r1, #0
 800f2c0:	f7f0 ffbe 	bl	8000240 <memchr>
 800f2c4:	b180      	cbz	r0, 800f2e8 <rcutils_strdup+0x40>
 800f2c6:	1b46      	subs	r6, r0, r5
 800f2c8:	1c70      	adds	r0, r6, #1
 800f2ca:	4639      	mov	r1, r7
 800f2cc:	47a0      	blx	r4
 800f2ce:	4604      	mov	r4, r0
 800f2d0:	b128      	cbz	r0, 800f2de <rcutils_strdup+0x36>
 800f2d2:	4632      	mov	r2, r6
 800f2d4:	4629      	mov	r1, r5
 800f2d6:	f003 fcd7 	bl	8012c88 <memcpy>
 800f2da:	2300      	movs	r3, #0
 800f2dc:	55a3      	strb	r3, [r4, r6]
 800f2de:	4620      	mov	r0, r4
 800f2e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f2e4:	b004      	add	sp, #16
 800f2e6:	4770      	bx	lr
 800f2e8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800f2ec:	e7ed      	b.n	800f2ca <rcutils_strdup+0x22>
 800f2ee:	4604      	mov	r4, r0
 800f2f0:	e7f5      	b.n	800f2de <rcutils_strdup+0x36>
 800f2f2:	bf00      	nop

0800f2f4 <rcutils_strndup>:
 800f2f4:	b082      	sub	sp, #8
 800f2f6:	b570      	push	{r4, r5, r6, lr}
 800f2f8:	ac04      	add	r4, sp, #16
 800f2fa:	4606      	mov	r6, r0
 800f2fc:	e884 000c 	stmia.w	r4, {r2, r3}
 800f300:	b1b8      	cbz	r0, 800f332 <rcutils_strndup+0x3e>
 800f302:	460c      	mov	r4, r1
 800f304:	460a      	mov	r2, r1
 800f306:	2100      	movs	r1, #0
 800f308:	f7f0 ff9a 	bl	8000240 <memchr>
 800f30c:	b100      	cbz	r0, 800f310 <rcutils_strndup+0x1c>
 800f30e:	1b84      	subs	r4, r0, r6
 800f310:	9b04      	ldr	r3, [sp, #16]
 800f312:	1c60      	adds	r0, r4, #1
 800f314:	9908      	ldr	r1, [sp, #32]
 800f316:	4798      	blx	r3
 800f318:	4605      	mov	r5, r0
 800f31a:	b128      	cbz	r0, 800f328 <rcutils_strndup+0x34>
 800f31c:	4622      	mov	r2, r4
 800f31e:	4631      	mov	r1, r6
 800f320:	f003 fcb2 	bl	8012c88 <memcpy>
 800f324:	2300      	movs	r3, #0
 800f326:	552b      	strb	r3, [r5, r4]
 800f328:	4628      	mov	r0, r5
 800f32a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f32e:	b002      	add	sp, #8
 800f330:	4770      	bx	lr
 800f332:	4605      	mov	r5, r0
 800f334:	e7f8      	b.n	800f328 <rcutils_strndup+0x34>
 800f336:	bf00      	nop

0800f338 <rcutils_get_zero_initialized_string_map>:
 800f338:	2000      	movs	r0, #0
 800f33a:	4b01      	ldr	r3, [pc, #4]	; (800f340 <rcutils_get_zero_initialized_string_map+0x8>)
 800f33c:	6018      	str	r0, [r3, #0]
 800f33e:	4770      	bx	lr
 800f340:	2000e968 	.word	0x2000e968

0800f344 <rcutils_string_map_reserve>:
 800f344:	2800      	cmp	r0, #0
 800f346:	d03e      	beq.n	800f3c6 <rcutils_string_map_reserve+0x82>
 800f348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f34a:	6805      	ldr	r5, [r0, #0]
 800f34c:	4606      	mov	r6, r0
 800f34e:	460c      	mov	r4, r1
 800f350:	b12d      	cbz	r5, 800f35e <rcutils_string_map_reserve+0x1a>
 800f352:	68ab      	ldr	r3, [r5, #8]
 800f354:	42a3      	cmp	r3, r4
 800f356:	d904      	bls.n	800f362 <rcutils_string_map_reserve+0x1e>
 800f358:	461c      	mov	r4, r3
 800f35a:	2d00      	cmp	r5, #0
 800f35c:	d1f9      	bne.n	800f352 <rcutils_string_map_reserve+0xe>
 800f35e:	201f      	movs	r0, #31
 800f360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f362:	686b      	ldr	r3, [r5, #4]
 800f364:	42a3      	cmp	r3, r4
 800f366:	d02a      	beq.n	800f3be <rcutils_string_map_reserve+0x7a>
 800f368:	69e9      	ldr	r1, [r5, #28]
 800f36a:	b304      	cbz	r4, 800f3ae <rcutils_string_map_reserve+0x6a>
 800f36c:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 800f370:	d227      	bcs.n	800f3c2 <rcutils_string_map_reserve+0x7e>
 800f372:	00e7      	lsls	r7, r4, #3
 800f374:	460a      	mov	r2, r1
 800f376:	696b      	ldr	r3, [r5, #20]
 800f378:	6828      	ldr	r0, [r5, #0]
 800f37a:	4639      	mov	r1, r7
 800f37c:	4798      	blx	r3
 800f37e:	b300      	cbz	r0, 800f3c2 <rcutils_string_map_reserve+0x7e>
 800f380:	6835      	ldr	r5, [r6, #0]
 800f382:	686a      	ldr	r2, [r5, #4]
 800f384:	6028      	str	r0, [r5, #0]
 800f386:	42a2      	cmp	r2, r4
 800f388:	d216      	bcs.n	800f3b8 <rcutils_string_map_reserve+0x74>
 800f38a:	43d1      	mvns	r1, r2
 800f38c:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 800f390:	4421      	add	r1, r4
 800f392:	2909      	cmp	r1, #9
 800f394:	d919      	bls.n	800f3ca <rcutils_string_map_reserve+0x86>
 800f396:	0759      	lsls	r1, r3, #29
 800f398:	d117      	bne.n	800f3ca <rcutils_string_map_reserve+0x86>
 800f39a:	1aa1      	subs	r1, r4, r2
 800f39c:	2600      	movs	r6, #0
 800f39e:	2200      	movs	r2, #0
 800f3a0:	2700      	movs	r7, #0
 800f3a2:	3201      	adds	r2, #1
 800f3a4:	4291      	cmp	r1, r2
 800f3a6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f3aa:	d8fa      	bhi.n	800f3a2 <rcutils_string_map_reserve+0x5e>
 800f3ac:	e004      	b.n	800f3b8 <rcutils_string_map_reserve+0x74>
 800f3ae:	692b      	ldr	r3, [r5, #16]
 800f3b0:	6828      	ldr	r0, [r5, #0]
 800f3b2:	4798      	blx	r3
 800f3b4:	6835      	ldr	r5, [r6, #0]
 800f3b6:	602c      	str	r4, [r5, #0]
 800f3b8:	2000      	movs	r0, #0
 800f3ba:	606c      	str	r4, [r5, #4]
 800f3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3be:	2000      	movs	r0, #0
 800f3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3c2:	200a      	movs	r0, #10
 800f3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3c6:	200b      	movs	r0, #11
 800f3c8:	4770      	bx	lr
 800f3ca:	4438      	add	r0, r7
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	e9c3 2200 	strd	r2, r2, [r3]
 800f3d2:	3308      	adds	r3, #8
 800f3d4:	4283      	cmp	r3, r0
 800f3d6:	d1fa      	bne.n	800f3ce <rcutils_string_map_reserve+0x8a>
 800f3d8:	e7ee      	b.n	800f3b8 <rcutils_string_map_reserve+0x74>
 800f3da:	bf00      	nop

0800f3dc <rcutils_string_map_init>:
 800f3dc:	b082      	sub	sp, #8
 800f3de:	b570      	push	{r4, r5, r6, lr}
 800f3e0:	ac04      	add	r4, sp, #16
 800f3e2:	e884 000c 	stmia.w	r4, {r2, r3}
 800f3e6:	b378      	cbz	r0, 800f448 <rcutils_string_map_init+0x6c>
 800f3e8:	6806      	ldr	r6, [r0, #0]
 800f3ea:	4604      	mov	r4, r0
 800f3ec:	b12e      	cbz	r6, 800f3fa <rcutils_string_map_init+0x1e>
 800f3ee:	251e      	movs	r5, #30
 800f3f0:	4628      	mov	r0, r5
 800f3f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3f6:	b002      	add	sp, #8
 800f3f8:	4770      	bx	lr
 800f3fa:	a804      	add	r0, sp, #16
 800f3fc:	460d      	mov	r5, r1
 800f3fe:	f7fa fac7 	bl	8009990 <rcutils_allocator_is_valid>
 800f402:	b308      	cbz	r0, 800f448 <rcutils_string_map_init+0x6c>
 800f404:	9b04      	ldr	r3, [sp, #16]
 800f406:	2020      	movs	r0, #32
 800f408:	9908      	ldr	r1, [sp, #32]
 800f40a:	4798      	blx	r3
 800f40c:	6020      	str	r0, [r4, #0]
 800f40e:	b308      	cbz	r0, 800f454 <rcutils_string_map_init+0x78>
 800f410:	f10d 0e10 	add.w	lr, sp, #16
 800f414:	6086      	str	r6, [r0, #8]
 800f416:	f100 0c0c 	add.w	ip, r0, #12
 800f41a:	e9c0 6600 	strd	r6, r6, [r0]
 800f41e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f422:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f426:	f8de 3000 	ldr.w	r3, [lr]
 800f42a:	4629      	mov	r1, r5
 800f42c:	4620      	mov	r0, r4
 800f42e:	f8cc 3000 	str.w	r3, [ip]
 800f432:	f7ff ff87 	bl	800f344 <rcutils_string_map_reserve>
 800f436:	4605      	mov	r5, r0
 800f438:	2800      	cmp	r0, #0
 800f43a:	d0d9      	beq.n	800f3f0 <rcutils_string_map_init+0x14>
 800f43c:	9b05      	ldr	r3, [sp, #20]
 800f43e:	9908      	ldr	r1, [sp, #32]
 800f440:	6820      	ldr	r0, [r4, #0]
 800f442:	4798      	blx	r3
 800f444:	6026      	str	r6, [r4, #0]
 800f446:	e7d3      	b.n	800f3f0 <rcutils_string_map_init+0x14>
 800f448:	250b      	movs	r5, #11
 800f44a:	4628      	mov	r0, r5
 800f44c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f450:	b002      	add	sp, #8
 800f452:	4770      	bx	lr
 800f454:	250a      	movs	r5, #10
 800f456:	e7cb      	b.n	800f3f0 <rcutils_string_map_init+0x14>

0800f458 <rcutils_string_map_fini>:
 800f458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f45c:	b083      	sub	sp, #12
 800f45e:	2800      	cmp	r0, #0
 800f460:	d03e      	beq.n	800f4e0 <rcutils_string_map_fini+0x88>
 800f462:	6804      	ldr	r4, [r0, #0]
 800f464:	4606      	mov	r6, r0
 800f466:	2c00      	cmp	r4, #0
 800f468:	d036      	beq.n	800f4d8 <rcutils_string_map_fini+0x80>
 800f46a:	6863      	ldr	r3, [r4, #4]
 800f46c:	b34b      	cbz	r3, 800f4c2 <rcutils_string_map_fini+0x6a>
 800f46e:	2500      	movs	r5, #0
 800f470:	6822      	ldr	r2, [r4, #0]
 800f472:	462f      	mov	r7, r5
 800f474:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 800f478:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800f47c:	b1f0      	cbz	r0, 800f4bc <rcutils_string_map_fini+0x64>
 800f47e:	69e1      	ldr	r1, [r4, #28]
 800f480:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f484:	9101      	str	r1, [sp, #4]
 800f486:	47c8      	blx	r9
 800f488:	6823      	ldr	r3, [r4, #0]
 800f48a:	9901      	ldr	r1, [sp, #4]
 800f48c:	eb03 0208 	add.w	r2, r3, r8
 800f490:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 800f494:	3501      	adds	r5, #1
 800f496:	6850      	ldr	r0, [r2, #4]
 800f498:	47c8      	blx	r9
 800f49a:	68a3      	ldr	r3, [r4, #8]
 800f49c:	6822      	ldr	r2, [r4, #0]
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	4442      	add	r2, r8
 800f4a2:	6057      	str	r7, [r2, #4]
 800f4a4:	60a3      	str	r3, [r4, #8]
 800f4a6:	6834      	ldr	r4, [r6, #0]
 800f4a8:	6863      	ldr	r3, [r4, #4]
 800f4aa:	429d      	cmp	r5, r3
 800f4ac:	d209      	bcs.n	800f4c2 <rcutils_string_map_fini+0x6a>
 800f4ae:	6822      	ldr	r2, [r4, #0]
 800f4b0:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800f4b4:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 800f4b8:	2800      	cmp	r0, #0
 800f4ba:	d1e0      	bne.n	800f47e <rcutils_string_map_fini+0x26>
 800f4bc:	3501      	adds	r5, #1
 800f4be:	429d      	cmp	r5, r3
 800f4c0:	d3d8      	bcc.n	800f474 <rcutils_string_map_fini+0x1c>
 800f4c2:	2100      	movs	r1, #0
 800f4c4:	4630      	mov	r0, r6
 800f4c6:	f7ff ff3d 	bl	800f344 <rcutils_string_map_reserve>
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	b920      	cbnz	r0, 800f4d8 <rcutils_string_map_fini+0x80>
 800f4ce:	6830      	ldr	r0, [r6, #0]
 800f4d0:	6903      	ldr	r3, [r0, #16]
 800f4d2:	69c1      	ldr	r1, [r0, #28]
 800f4d4:	4798      	blx	r3
 800f4d6:	6034      	str	r4, [r6, #0]
 800f4d8:	4620      	mov	r0, r4
 800f4da:	b003      	add	sp, #12
 800f4dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4e0:	240b      	movs	r4, #11
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	b003      	add	sp, #12
 800f4e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4ea:	bf00      	nop

0800f4ec <rcutils_string_map_getn>:
 800f4ec:	b338      	cbz	r0, 800f53e <rcutils_string_map_getn+0x52>
 800f4ee:	6803      	ldr	r3, [r0, #0]
 800f4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4f4:	4688      	mov	r8, r1
 800f4f6:	b1d9      	cbz	r1, 800f530 <rcutils_string_map_getn+0x44>
 800f4f8:	fab3 f483 	clz	r4, r3
 800f4fc:	0964      	lsrs	r4, r4, #5
 800f4fe:	b1bb      	cbz	r3, 800f530 <rcutils_string_map_getn+0x44>
 800f500:	4691      	mov	r9, r2
 800f502:	e9d3 7600 	ldrd	r7, r6, [r3]
 800f506:	b19e      	cbz	r6, 800f530 <rcutils_string_map_getn+0x44>
 800f508:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 800f50c:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 800f510:	3401      	adds	r4, #1
 800f512:	4628      	mov	r0, r5
 800f514:	b155      	cbz	r5, 800f52c <rcutils_string_map_getn+0x40>
 800f516:	f7f0 feed 	bl	80002f4 <strlen>
 800f51a:	4602      	mov	r2, r0
 800f51c:	4629      	mov	r1, r5
 800f51e:	4640      	mov	r0, r8
 800f520:	454a      	cmp	r2, r9
 800f522:	bf38      	it	cc
 800f524:	464a      	movcc	r2, r9
 800f526:	f004 fc0e 	bl	8013d46 <strncmp>
 800f52a:	b120      	cbz	r0, 800f536 <rcutils_string_map_getn+0x4a>
 800f52c:	42a6      	cmp	r6, r4
 800f52e:	d1eb      	bne.n	800f508 <rcutils_string_map_getn+0x1c>
 800f530:	2000      	movs	r0, #0
 800f532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f536:	f8da 0004 	ldr.w	r0, [sl, #4]
 800f53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f53e:	4770      	bx	lr

0800f540 <rcutils_system_time_now>:
 800f540:	b310      	cbz	r0, 800f588 <rcutils_system_time_now+0x48>
 800f542:	b570      	push	{r4, r5, r6, lr}
 800f544:	b084      	sub	sp, #16
 800f546:	4604      	mov	r4, r0
 800f548:	2001      	movs	r0, #1
 800f54a:	4669      	mov	r1, sp
 800f54c:	f7f2 fc74 	bl	8001e38 <clock_gettime>
 800f550:	2800      	cmp	r0, #0
 800f552:	db16      	blt.n	800f582 <rcutils_system_time_now+0x42>
 800f554:	e9dd 3100 	ldrd	r3, r1, [sp]
 800f558:	2900      	cmp	r1, #0
 800f55a:	db12      	blt.n	800f582 <rcutils_system_time_now+0x42>
 800f55c:	ea53 0201 	orrs.w	r2, r3, r1
 800f560:	9d02      	ldr	r5, [sp, #8]
 800f562:	d101      	bne.n	800f568 <rcutils_system_time_now+0x28>
 800f564:	2d00      	cmp	r5, #0
 800f566:	db0c      	blt.n	800f582 <rcutils_system_time_now+0x42>
 800f568:	4e08      	ldr	r6, [pc, #32]	; (800f58c <rcutils_system_time_now+0x4c>)
 800f56a:	2000      	movs	r0, #0
 800f56c:	fba3 3206 	umull	r3, r2, r3, r6
 800f570:	195b      	adds	r3, r3, r5
 800f572:	fb06 2201 	mla	r2, r6, r1, r2
 800f576:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800f57a:	e9c4 3200 	strd	r3, r2, [r4]
 800f57e:	b004      	add	sp, #16
 800f580:	bd70      	pop	{r4, r5, r6, pc}
 800f582:	2002      	movs	r0, #2
 800f584:	b004      	add	sp, #16
 800f586:	bd70      	pop	{r4, r5, r6, pc}
 800f588:	200b      	movs	r0, #11
 800f58a:	4770      	bx	lr
 800f58c:	3b9aca00 	.word	0x3b9aca00

0800f590 <rcutils_steady_time_now>:
 800f590:	b310      	cbz	r0, 800f5d8 <rcutils_steady_time_now+0x48>
 800f592:	b570      	push	{r4, r5, r6, lr}
 800f594:	b084      	sub	sp, #16
 800f596:	4604      	mov	r4, r0
 800f598:	2000      	movs	r0, #0
 800f59a:	4669      	mov	r1, sp
 800f59c:	f7f2 fc4c 	bl	8001e38 <clock_gettime>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	db16      	blt.n	800f5d2 <rcutils_steady_time_now+0x42>
 800f5a4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800f5a8:	2900      	cmp	r1, #0
 800f5aa:	db12      	blt.n	800f5d2 <rcutils_steady_time_now+0x42>
 800f5ac:	ea53 0201 	orrs.w	r2, r3, r1
 800f5b0:	9d02      	ldr	r5, [sp, #8]
 800f5b2:	d101      	bne.n	800f5b8 <rcutils_steady_time_now+0x28>
 800f5b4:	2d00      	cmp	r5, #0
 800f5b6:	db0c      	blt.n	800f5d2 <rcutils_steady_time_now+0x42>
 800f5b8:	4e08      	ldr	r6, [pc, #32]	; (800f5dc <rcutils_steady_time_now+0x4c>)
 800f5ba:	2000      	movs	r0, #0
 800f5bc:	fba3 3206 	umull	r3, r2, r3, r6
 800f5c0:	195b      	adds	r3, r3, r5
 800f5c2:	fb06 2201 	mla	r2, r6, r1, r2
 800f5c6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800f5ca:	e9c4 3200 	strd	r3, r2, [r4]
 800f5ce:	b004      	add	sp, #16
 800f5d0:	bd70      	pop	{r4, r5, r6, pc}
 800f5d2:	2002      	movs	r0, #2
 800f5d4:	b004      	add	sp, #16
 800f5d6:	bd70      	pop	{r4, r5, r6, pc}
 800f5d8:	200b      	movs	r0, #11
 800f5da:	4770      	bx	lr
 800f5dc:	3b9aca00 	.word	0x3b9aca00

0800f5e0 <rmw_get_zero_initialized_context>:
 800f5e0:	b510      	push	{r4, lr}
 800f5e2:	4604      	mov	r4, r0
 800f5e4:	3010      	adds	r0, #16
 800f5e6:	f000 f80f 	bl	800f608 <rmw_get_zero_initialized_init_options>
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	60a3      	str	r3, [r4, #8]
 800f5f0:	66a3      	str	r3, [r4, #104]	; 0x68
 800f5f2:	66e3      	str	r3, [r4, #108]	; 0x6c
 800f5f4:	ed9f 7b02 	vldr	d7, [pc, #8]	; 800f600 <rmw_get_zero_initialized_context+0x20>
 800f5f8:	ed84 7b00 	vstr	d7, [r4]
 800f5fc:	bd10      	pop	{r4, pc}
 800f5fe:	bf00      	nop
	...

0800f608 <rmw_get_zero_initialized_init_options>:
 800f608:	b510      	push	{r4, lr}
 800f60a:	4604      	mov	r4, r0
 800f60c:	2258      	movs	r2, #88	; 0x58
 800f60e:	2100      	movs	r1, #0
 800f610:	f003 fb48 	bl	8012ca4 <memset>
 800f614:	f104 0010 	add.w	r0, r4, #16
 800f618:	f000 f80a 	bl	800f630 <rmw_get_default_security_options>
 800f61c:	f104 001c 	add.w	r0, r4, #28
 800f620:	f003 f83a 	bl	8012698 <rmw_get_zero_initialized_discovery_options>
 800f624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f628:	4620      	mov	r0, r4
 800f62a:	60e3      	str	r3, [r4, #12]
 800f62c:	bd10      	pop	{r4, pc}
 800f62e:	bf00      	nop

0800f630 <rmw_get_default_security_options>:
 800f630:	2200      	movs	r2, #0
 800f632:	7002      	strb	r2, [r0, #0]
 800f634:	6042      	str	r2, [r0, #4]
 800f636:	4770      	bx	lr

0800f638 <rmw_validate_full_topic_name>:
 800f638:	2800      	cmp	r0, #0
 800f63a:	d05d      	beq.n	800f6f8 <rmw_validate_full_topic_name+0xc0>
 800f63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f640:	460d      	mov	r5, r1
 800f642:	2900      	cmp	r1, #0
 800f644:	d05a      	beq.n	800f6fc <rmw_validate_full_topic_name+0xc4>
 800f646:	4604      	mov	r4, r0
 800f648:	4616      	mov	r6, r2
 800f64a:	f7f0 fe53 	bl	80002f4 <strlen>
 800f64e:	b150      	cbz	r0, 800f666 <rmw_validate_full_topic_name+0x2e>
 800f650:	7823      	ldrb	r3, [r4, #0]
 800f652:	2b2f      	cmp	r3, #47	; 0x2f
 800f654:	d00e      	beq.n	800f674 <rmw_validate_full_topic_name+0x3c>
 800f656:	2302      	movs	r3, #2
 800f658:	602b      	str	r3, [r5, #0]
 800f65a:	b146      	cbz	r6, 800f66e <rmw_validate_full_topic_name+0x36>
 800f65c:	2300      	movs	r3, #0
 800f65e:	4618      	mov	r0, r3
 800f660:	6033      	str	r3, [r6, #0]
 800f662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f666:	2301      	movs	r3, #1
 800f668:	602b      	str	r3, [r5, #0]
 800f66a:	2e00      	cmp	r6, #0
 800f66c:	d1f6      	bne.n	800f65c <rmw_validate_full_topic_name+0x24>
 800f66e:	2000      	movs	r0, #0
 800f670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f674:	1e43      	subs	r3, r0, #1
 800f676:	5ce2      	ldrb	r2, [r4, r3]
 800f678:	2a2f      	cmp	r2, #47	; 0x2f
 800f67a:	d041      	beq.n	800f700 <rmw_validate_full_topic_name+0xc8>
 800f67c:	1e62      	subs	r2, r4, #1
 800f67e:	f1c4 0e01 	rsb	lr, r4, #1
 800f682:	eb02 0800 	add.w	r8, r2, r0
 800f686:	eb0e 0702 	add.w	r7, lr, r2
 800f68a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800f68e:	f023 0120 	bic.w	r1, r3, #32
 800f692:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 800f696:	3941      	subs	r1, #65	; 0x41
 800f698:	2919      	cmp	r1, #25
 800f69a:	d90f      	bls.n	800f6bc <rmw_validate_full_topic_name+0x84>
 800f69c:	f1bc 0f0a 	cmp.w	ip, #10
 800f6a0:	d90c      	bls.n	800f6bc <rmw_validate_full_topic_name+0x84>
 800f6a2:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 800f6a6:	fab3 f383 	clz	r3, r3
 800f6aa:	095b      	lsrs	r3, r3, #5
 800f6ac:	b933      	cbnz	r3, 800f6bc <rmw_validate_full_topic_name+0x84>
 800f6ae:	2204      	movs	r2, #4
 800f6b0:	602a      	str	r2, [r5, #0]
 800f6b2:	2e00      	cmp	r6, #0
 800f6b4:	d0db      	beq.n	800f66e <rmw_validate_full_topic_name+0x36>
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	6037      	str	r7, [r6, #0]
 800f6ba:	e7d2      	b.n	800f662 <rmw_validate_full_topic_name+0x2a>
 800f6bc:	4542      	cmp	r2, r8
 800f6be:	d1e2      	bne.n	800f686 <rmw_validate_full_topic_name+0x4e>
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	4f1a      	ldr	r7, [pc, #104]	; (800f72c <rmw_validate_full_topic_name+0xf4>)
 800f6c4:	e004      	b.n	800f6d0 <rmw_validate_full_topic_name+0x98>
 800f6c6:	4298      	cmp	r0, r3
 800f6c8:	f104 0401 	add.w	r4, r4, #1
 800f6cc:	4613      	mov	r3, r2
 800f6ce:	d91c      	bls.n	800f70a <rmw_validate_full_topic_name+0xd2>
 800f6d0:	4298      	cmp	r0, r3
 800f6d2:	f103 0201 	add.w	r2, r3, #1
 800f6d6:	d0f6      	beq.n	800f6c6 <rmw_validate_full_topic_name+0x8e>
 800f6d8:	7821      	ldrb	r1, [r4, #0]
 800f6da:	292f      	cmp	r1, #47	; 0x2f
 800f6dc:	d1f3      	bne.n	800f6c6 <rmw_validate_full_topic_name+0x8e>
 800f6de:	7861      	ldrb	r1, [r4, #1]
 800f6e0:	292f      	cmp	r1, #47	; 0x2f
 800f6e2:	d01e      	beq.n	800f722 <rmw_validate_full_topic_name+0xea>
 800f6e4:	5dc9      	ldrb	r1, [r1, r7]
 800f6e6:	0749      	lsls	r1, r1, #29
 800f6e8:	d5ed      	bpl.n	800f6c6 <rmw_validate_full_topic_name+0x8e>
 800f6ea:	2206      	movs	r2, #6
 800f6ec:	602a      	str	r2, [r5, #0]
 800f6ee:	2e00      	cmp	r6, #0
 800f6f0:	d0bd      	beq.n	800f66e <rmw_validate_full_topic_name+0x36>
 800f6f2:	2000      	movs	r0, #0
 800f6f4:	6033      	str	r3, [r6, #0]
 800f6f6:	e7b4      	b.n	800f662 <rmw_validate_full_topic_name+0x2a>
 800f6f8:	200b      	movs	r0, #11
 800f6fa:	4770      	bx	lr
 800f6fc:	200b      	movs	r0, #11
 800f6fe:	e7b0      	b.n	800f662 <rmw_validate_full_topic_name+0x2a>
 800f700:	2203      	movs	r2, #3
 800f702:	602a      	str	r2, [r5, #0]
 800f704:	2e00      	cmp	r6, #0
 800f706:	d1f4      	bne.n	800f6f2 <rmw_validate_full_topic_name+0xba>
 800f708:	e7b1      	b.n	800f66e <rmw_validate_full_topic_name+0x36>
 800f70a:	28f7      	cmp	r0, #247	; 0xf7
 800f70c:	d803      	bhi.n	800f716 <rmw_validate_full_topic_name+0xde>
 800f70e:	2300      	movs	r3, #0
 800f710:	4618      	mov	r0, r3
 800f712:	602b      	str	r3, [r5, #0]
 800f714:	e7a5      	b.n	800f662 <rmw_validate_full_topic_name+0x2a>
 800f716:	2307      	movs	r3, #7
 800f718:	602b      	str	r3, [r5, #0]
 800f71a:	2e00      	cmp	r6, #0
 800f71c:	d0a7      	beq.n	800f66e <rmw_validate_full_topic_name+0x36>
 800f71e:	23f6      	movs	r3, #246	; 0xf6
 800f720:	e7e7      	b.n	800f6f2 <rmw_validate_full_topic_name+0xba>
 800f722:	2205      	movs	r2, #5
 800f724:	602a      	str	r2, [r5, #0]
 800f726:	2e00      	cmp	r6, #0
 800f728:	d1e3      	bne.n	800f6f2 <rmw_validate_full_topic_name+0xba>
 800f72a:	e7a0      	b.n	800f66e <rmw_validate_full_topic_name+0x36>
 800f72c:	0801853f 	.word	0x0801853f

0800f730 <rmw_validate_namespace_with_size>:
 800f730:	2800      	cmp	r0, #0
 800f732:	d043      	beq.n	800f7bc <rmw_validate_namespace_with_size+0x8c>
 800f734:	b570      	push	{r4, r5, r6, lr}
 800f736:	4614      	mov	r4, r2
 800f738:	b0c2      	sub	sp, #264	; 0x108
 800f73a:	b32a      	cbz	r2, 800f788 <rmw_validate_namespace_with_size+0x58>
 800f73c:	2901      	cmp	r1, #1
 800f73e:	460d      	mov	r5, r1
 800f740:	461e      	mov	r6, r3
 800f742:	d102      	bne.n	800f74a <rmw_validate_namespace_with_size+0x1a>
 800f744:	7803      	ldrb	r3, [r0, #0]
 800f746:	2b2f      	cmp	r3, #47	; 0x2f
 800f748:	d012      	beq.n	800f770 <rmw_validate_namespace_with_size+0x40>
 800f74a:	aa01      	add	r2, sp, #4
 800f74c:	4669      	mov	r1, sp
 800f74e:	f7ff ff73 	bl	800f638 <rmw_validate_full_topic_name>
 800f752:	b980      	cbnz	r0, 800f776 <rmw_validate_namespace_with_size+0x46>
 800f754:	9a00      	ldr	r2, [sp, #0]
 800f756:	b14a      	cbz	r2, 800f76c <rmw_validate_namespace_with_size+0x3c>
 800f758:	2a07      	cmp	r2, #7
 800f75a:	d007      	beq.n	800f76c <rmw_validate_namespace_with_size+0x3c>
 800f75c:	1e53      	subs	r3, r2, #1
 800f75e:	2b05      	cmp	r3, #5
 800f760:	d82e      	bhi.n	800f7c0 <rmw_validate_namespace_with_size+0x90>
 800f762:	e8df f003 	tbb	[pc, r3]
 800f766:	1f1c      	.short	0x1f1c
 800f768:	14282522 	.word	0x14282522
 800f76c:	2df5      	cmp	r5, #245	; 0xf5
 800f76e:	d804      	bhi.n	800f77a <rmw_validate_namespace_with_size+0x4a>
 800f770:	2300      	movs	r3, #0
 800f772:	4618      	mov	r0, r3
 800f774:	6023      	str	r3, [r4, #0]
 800f776:	b042      	add	sp, #264	; 0x108
 800f778:	bd70      	pop	{r4, r5, r6, pc}
 800f77a:	2307      	movs	r3, #7
 800f77c:	6023      	str	r3, [r4, #0]
 800f77e:	2e00      	cmp	r6, #0
 800f780:	d0f9      	beq.n	800f776 <rmw_validate_namespace_with_size+0x46>
 800f782:	23f4      	movs	r3, #244	; 0xf4
 800f784:	6033      	str	r3, [r6, #0]
 800f786:	e7f6      	b.n	800f776 <rmw_validate_namespace_with_size+0x46>
 800f788:	200b      	movs	r0, #11
 800f78a:	b042      	add	sp, #264	; 0x108
 800f78c:	bd70      	pop	{r4, r5, r6, pc}
 800f78e:	2306      	movs	r3, #6
 800f790:	6023      	str	r3, [r4, #0]
 800f792:	2e00      	cmp	r6, #0
 800f794:	d0ef      	beq.n	800f776 <rmw_validate_namespace_with_size+0x46>
 800f796:	9b01      	ldr	r3, [sp, #4]
 800f798:	6033      	str	r3, [r6, #0]
 800f79a:	b042      	add	sp, #264	; 0x108
 800f79c:	bd70      	pop	{r4, r5, r6, pc}
 800f79e:	2301      	movs	r3, #1
 800f7a0:	6023      	str	r3, [r4, #0]
 800f7a2:	e7f6      	b.n	800f792 <rmw_validate_namespace_with_size+0x62>
 800f7a4:	2302      	movs	r3, #2
 800f7a6:	6023      	str	r3, [r4, #0]
 800f7a8:	e7f3      	b.n	800f792 <rmw_validate_namespace_with_size+0x62>
 800f7aa:	2303      	movs	r3, #3
 800f7ac:	6023      	str	r3, [r4, #0]
 800f7ae:	e7f0      	b.n	800f792 <rmw_validate_namespace_with_size+0x62>
 800f7b0:	2304      	movs	r3, #4
 800f7b2:	6023      	str	r3, [r4, #0]
 800f7b4:	e7ed      	b.n	800f792 <rmw_validate_namespace_with_size+0x62>
 800f7b6:	2305      	movs	r3, #5
 800f7b8:	6023      	str	r3, [r4, #0]
 800f7ba:	e7ea      	b.n	800f792 <rmw_validate_namespace_with_size+0x62>
 800f7bc:	200b      	movs	r0, #11
 800f7be:	4770      	bx	lr
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f7c6:	4a03      	ldr	r2, [pc, #12]	; (800f7d4 <rmw_validate_namespace_with_size+0xa4>)
 800f7c8:	a802      	add	r0, sp, #8
 800f7ca:	f7ff fd1f 	bl	800f20c <rcutils_snprintf>
 800f7ce:	2001      	movs	r0, #1
 800f7d0:	e7d1      	b.n	800f776 <rmw_validate_namespace_with_size+0x46>
 800f7d2:	bf00      	nop
 800f7d4:	08017cb0 	.word	0x08017cb0

0800f7d8 <rmw_validate_namespace>:
 800f7d8:	b168      	cbz	r0, 800f7f6 <rmw_validate_namespace+0x1e>
 800f7da:	b570      	push	{r4, r5, r6, lr}
 800f7dc:	460d      	mov	r5, r1
 800f7de:	4616      	mov	r6, r2
 800f7e0:	4604      	mov	r4, r0
 800f7e2:	f7f0 fd87 	bl	80002f4 <strlen>
 800f7e6:	4633      	mov	r3, r6
 800f7e8:	4601      	mov	r1, r0
 800f7ea:	462a      	mov	r2, r5
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7f2:	f7ff bf9d 	b.w	800f730 <rmw_validate_namespace_with_size>
 800f7f6:	200b      	movs	r0, #11
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop

0800f7fc <rmw_namespace_validation_result_string>:
 800f7fc:	2807      	cmp	r0, #7
 800f7fe:	d803      	bhi.n	800f808 <rmw_namespace_validation_result_string+0xc>
 800f800:	4b02      	ldr	r3, [pc, #8]	; (800f80c <rmw_namespace_validation_result_string+0x10>)
 800f802:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f806:	4770      	bx	lr
 800f808:	4801      	ldr	r0, [pc, #4]	; (800f810 <rmw_namespace_validation_result_string+0x14>)
 800f80a:	4770      	bx	lr
 800f80c:	08017ea8 	.word	0x08017ea8
 800f810:	08017d00 	.word	0x08017d00

0800f814 <rmw_validate_node_name>:
 800f814:	2800      	cmp	r0, #0
 800f816:	d042      	beq.n	800f89e <rmw_validate_node_name+0x8a>
 800f818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f81c:	460d      	mov	r5, r1
 800f81e:	2900      	cmp	r1, #0
 800f820:	d03f      	beq.n	800f8a2 <rmw_validate_node_name+0x8e>
 800f822:	4604      	mov	r4, r0
 800f824:	4616      	mov	r6, r2
 800f826:	f7f0 fd65 	bl	80002f4 <strlen>
 800f82a:	b310      	cbz	r0, 800f872 <rmw_validate_node_name+0x5e>
 800f82c:	1e63      	subs	r3, r4, #1
 800f82e:	f1c4 0101 	rsb	r1, r4, #1
 800f832:	eb03 0800 	add.w	r8, r3, r0
 800f836:	18cf      	adds	r7, r1, r3
 800f838:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800f83c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800f840:	f02e 0c20 	bic.w	ip, lr, #32
 800f844:	2a09      	cmp	r2, #9
 800f846:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800f84a:	d905      	bls.n	800f858 <rmw_validate_node_name+0x44>
 800f84c:	f1bc 0f19 	cmp.w	ip, #25
 800f850:	d902      	bls.n	800f858 <rmw_validate_node_name+0x44>
 800f852:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800f856:	d114      	bne.n	800f882 <rmw_validate_node_name+0x6e>
 800f858:	4598      	cmp	r8, r3
 800f85a:	d1ec      	bne.n	800f836 <rmw_validate_node_name+0x22>
 800f85c:	7822      	ldrb	r2, [r4, #0]
 800f85e:	4b16      	ldr	r3, [pc, #88]	; (800f8b8 <rmw_validate_node_name+0xa4>)
 800f860:	5cd3      	ldrb	r3, [r2, r3]
 800f862:	f013 0304 	ands.w	r3, r3, #4
 800f866:	d113      	bne.n	800f890 <rmw_validate_node_name+0x7c>
 800f868:	28ff      	cmp	r0, #255	; 0xff
 800f86a:	d81c      	bhi.n	800f8a6 <rmw_validate_node_name+0x92>
 800f86c:	4618      	mov	r0, r3
 800f86e:	602b      	str	r3, [r5, #0]
 800f870:	e00c      	b.n	800f88c <rmw_validate_node_name+0x78>
 800f872:	2301      	movs	r3, #1
 800f874:	602b      	str	r3, [r5, #0]
 800f876:	b17e      	cbz	r6, 800f898 <rmw_validate_node_name+0x84>
 800f878:	2300      	movs	r3, #0
 800f87a:	4618      	mov	r0, r3
 800f87c:	6033      	str	r3, [r6, #0]
 800f87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f882:	2302      	movs	r3, #2
 800f884:	602b      	str	r3, [r5, #0]
 800f886:	b13e      	cbz	r6, 800f898 <rmw_validate_node_name+0x84>
 800f888:	2000      	movs	r0, #0
 800f88a:	6037      	str	r7, [r6, #0]
 800f88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f890:	2303      	movs	r3, #3
 800f892:	602b      	str	r3, [r5, #0]
 800f894:	2e00      	cmp	r6, #0
 800f896:	d1ef      	bne.n	800f878 <rmw_validate_node_name+0x64>
 800f898:	2000      	movs	r0, #0
 800f89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f89e:	200b      	movs	r0, #11
 800f8a0:	4770      	bx	lr
 800f8a2:	200b      	movs	r0, #11
 800f8a4:	e7f2      	b.n	800f88c <rmw_validate_node_name+0x78>
 800f8a6:	2204      	movs	r2, #4
 800f8a8:	602a      	str	r2, [r5, #0]
 800f8aa:	2e00      	cmp	r6, #0
 800f8ac:	d0f4      	beq.n	800f898 <rmw_validate_node_name+0x84>
 800f8ae:	22fe      	movs	r2, #254	; 0xfe
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	6032      	str	r2, [r6, #0]
 800f8b4:	e7ea      	b.n	800f88c <rmw_validate_node_name+0x78>
 800f8b6:	bf00      	nop
 800f8b8:	0801853f 	.word	0x0801853f

0800f8bc <rmw_node_name_validation_result_string>:
 800f8bc:	2804      	cmp	r0, #4
 800f8be:	d803      	bhi.n	800f8c8 <rmw_node_name_validation_result_string+0xc>
 800f8c0:	4b02      	ldr	r3, [pc, #8]	; (800f8cc <rmw_node_name_validation_result_string+0x10>)
 800f8c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800f8c6:	4770      	bx	lr
 800f8c8:	4801      	ldr	r0, [pc, #4]	; (800f8d0 <rmw_node_name_validation_result_string+0x14>)
 800f8ca:	4770      	bx	lr
 800f8cc:	08017fb4 	.word	0x08017fb4
 800f8d0:	08017ec8 	.word	0x08017ec8

0800f8d4 <get_memory>:
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	6840      	ldr	r0, [r0, #4]
 800f8d8:	b158      	cbz	r0, 800f8f2 <get_memory+0x1e>
 800f8da:	6842      	ldr	r2, [r0, #4]
 800f8dc:	605a      	str	r2, [r3, #4]
 800f8de:	b10a      	cbz	r2, 800f8e4 <get_memory+0x10>
 800f8e0:	2100      	movs	r1, #0
 800f8e2:	6011      	str	r1, [r2, #0]
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	6042      	str	r2, [r0, #4]
 800f8e8:	b102      	cbz	r2, 800f8ec <get_memory+0x18>
 800f8ea:	6010      	str	r0, [r2, #0]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	6002      	str	r2, [r0, #0]
 800f8f0:	6018      	str	r0, [r3, #0]
 800f8f2:	4770      	bx	lr

0800f8f4 <put_memory>:
 800f8f4:	680b      	ldr	r3, [r1, #0]
 800f8f6:	b10b      	cbz	r3, 800f8fc <put_memory+0x8>
 800f8f8:	684a      	ldr	r2, [r1, #4]
 800f8fa:	605a      	str	r2, [r3, #4]
 800f8fc:	684a      	ldr	r2, [r1, #4]
 800f8fe:	b102      	cbz	r2, 800f902 <put_memory+0xe>
 800f900:	6013      	str	r3, [r2, #0]
 800f902:	6803      	ldr	r3, [r0, #0]
 800f904:	428b      	cmp	r3, r1
 800f906:	6843      	ldr	r3, [r0, #4]
 800f908:	bf08      	it	eq
 800f90a:	6002      	streq	r2, [r0, #0]
 800f90c:	604b      	str	r3, [r1, #4]
 800f90e:	b103      	cbz	r3, 800f912 <put_memory+0x1e>
 800f910:	6019      	str	r1, [r3, #0]
 800f912:	2300      	movs	r3, #0
 800f914:	600b      	str	r3, [r1, #0]
 800f916:	6041      	str	r1, [r0, #4]
 800f918:	4770      	bx	lr
 800f91a:	bf00      	nop

0800f91c <rmw_get_implementation_identifier>:
 800f91c:	4b01      	ldr	r3, [pc, #4]	; (800f924 <rmw_get_implementation_identifier+0x8>)
 800f91e:	6818      	ldr	r0, [r3, #0]
 800f920:	4770      	bx	lr
 800f922:	bf00      	nop
 800f924:	08017fe0 	.word	0x08017fe0

0800f928 <rmw_init_options_init>:
 800f928:	b084      	sub	sp, #16
 800f92a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f92c:	b083      	sub	sp, #12
 800f92e:	ad09      	add	r5, sp, #36	; 0x24
 800f930:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f934:	b130      	cbz	r0, 800f944 <rmw_init_options_init+0x1c>
 800f936:	4604      	mov	r4, r0
 800f938:	4628      	mov	r0, r5
 800f93a:	f7fa f829 	bl	8009990 <rcutils_allocator_is_valid>
 800f93e:	b108      	cbz	r0, 800f944 <rmw_init_options_init+0x1c>
 800f940:	68a6      	ldr	r6, [r4, #8]
 800f942:	b12e      	cbz	r6, 800f950 <rmw_init_options_init+0x28>
 800f944:	200b      	movs	r0, #11
 800f946:	b003      	add	sp, #12
 800f948:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f94c:	b004      	add	sp, #16
 800f94e:	4770      	bx	lr
 800f950:	2200      	movs	r2, #0
 800f952:	2300      	movs	r3, #0
 800f954:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 800f958:	f8df e098 	ldr.w	lr, [pc, #152]	; 800f9f4 <rmw_init_options_init+0xcc>
 800f95c:	466f      	mov	r7, sp
 800f95e:	e9c4 2300 	strd	r2, r3, [r4]
 800f962:	4b20      	ldr	r3, [pc, #128]	; (800f9e4 <rmw_init_options_init+0xbc>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	60a3      	str	r3, [r4, #8]
 800f968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f96a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f96e:	682b      	ldr	r3, [r5, #0]
 800f970:	4638      	mov	r0, r7
 800f972:	f8cc 3000 	str.w	r3, [ip]
 800f976:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 800f97a:	60e6      	str	r6, [r4, #12]
 800f97c:	f7ff fe58 	bl	800f630 <rmw_get_default_security_options>
 800f980:	f104 0310 	add.w	r3, r4, #16
 800f984:	2203      	movs	r2, #3
 800f986:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f98a:	e883 0003 	stmia.w	r3, {r0, r1}
 800f98e:	4816      	ldr	r0, [pc, #88]	; (800f9e8 <rmw_init_options_init+0xc0>)
 800f990:	4916      	ldr	r1, [pc, #88]	; (800f9ec <rmw_init_options_init+0xc4>)
 800f992:	7626      	strb	r6, [r4, #24]
 800f994:	f7fa fb06 	bl	8009fa4 <rmw_uxrce_init_init_options_impl_memory>
 800f998:	4813      	ldr	r0, [pc, #76]	; (800f9e8 <rmw_init_options_init+0xc0>)
 800f99a:	f7ff ff9b 	bl	800f8d4 <get_memory>
 800f99e:	b1f0      	cbz	r0, 800f9de <rmw_init_options_init+0xb6>
 800f9a0:	4a13      	ldr	r2, [pc, #76]	; (800f9f0 <rmw_init_options_init+0xc8>)
 800f9a2:	6883      	ldr	r3, [r0, #8]
 800f9a4:	6851      	ldr	r1, [r2, #4]
 800f9a6:	6563      	str	r3, [r4, #84]	; 0x54
 800f9a8:	7810      	ldrb	r0, [r2, #0]
 800f9aa:	6159      	str	r1, [r3, #20]
 800f9ac:	68d1      	ldr	r1, [r2, #12]
 800f9ae:	7418      	strb	r0, [r3, #16]
 800f9b0:	61d9      	str	r1, [r3, #28]
 800f9b2:	6911      	ldr	r1, [r2, #16]
 800f9b4:	6219      	str	r1, [r3, #32]
 800f9b6:	6951      	ldr	r1, [r2, #20]
 800f9b8:	6892      	ldr	r2, [r2, #8]
 800f9ba:	6259      	str	r1, [r3, #36]	; 0x24
 800f9bc:	619a      	str	r2, [r3, #24]
 800f9be:	f7fd fa4f 	bl	800ce60 <uxr_nanos>
 800f9c2:	f004 f8cd 	bl	8013b60 <srand>
 800f9c6:	f004 f8f9 	bl	8013bbc <rand>
 800f9ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f9cc:	6298      	str	r0, [r3, #40]	; 0x28
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	d0f9      	beq.n	800f9c6 <rmw_init_options_init+0x9e>
 800f9d2:	2000      	movs	r0, #0
 800f9d4:	b003      	add	sp, #12
 800f9d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f9da:	b004      	add	sp, #16
 800f9dc:	4770      	bx	lr
 800f9de:	2001      	movs	r0, #1
 800f9e0:	e7b1      	b.n	800f946 <rmw_init_options_init+0x1e>
 800f9e2:	bf00      	nop
 800f9e4:	08017fe0 	.word	0x08017fe0
 800f9e8:	2000e84c 	.word	0x2000e84c
 800f9ec:	2000a0e8 	.word	0x2000a0e8
 800f9f0:	20009f74 	.word	0x20009f74
 800f9f4:	08017b64 	.word	0x08017b64

0800f9f8 <rmw_init_options_copy>:
 800f9f8:	b570      	push	{r4, r5, r6, lr}
 800f9fa:	b158      	cbz	r0, 800fa14 <rmw_init_options_copy+0x1c>
 800f9fc:	460d      	mov	r5, r1
 800f9fe:	b149      	cbz	r1, 800fa14 <rmw_init_options_copy+0x1c>
 800fa00:	4604      	mov	r4, r0
 800fa02:	6880      	ldr	r0, [r0, #8]
 800fa04:	b120      	cbz	r0, 800fa10 <rmw_init_options_copy+0x18>
 800fa06:	4b13      	ldr	r3, [pc, #76]	; (800fa54 <rmw_init_options_copy+0x5c>)
 800fa08:	6819      	ldr	r1, [r3, #0]
 800fa0a:	f7f0 fc69 	bl	80002e0 <strcmp>
 800fa0e:	b9d8      	cbnz	r0, 800fa48 <rmw_init_options_copy+0x50>
 800fa10:	68ae      	ldr	r6, [r5, #8]
 800fa12:	b116      	cbz	r6, 800fa1a <rmw_init_options_copy+0x22>
 800fa14:	260b      	movs	r6, #11
 800fa16:	4630      	mov	r0, r6
 800fa18:	bd70      	pop	{r4, r5, r6, pc}
 800fa1a:	2258      	movs	r2, #88	; 0x58
 800fa1c:	4621      	mov	r1, r4
 800fa1e:	4628      	mov	r0, r5
 800fa20:	f003 f932 	bl	8012c88 <memcpy>
 800fa24:	480c      	ldr	r0, [pc, #48]	; (800fa58 <rmw_init_options_copy+0x60>)
 800fa26:	f7ff ff55 	bl	800f8d4 <get_memory>
 800fa2a:	b180      	cbz	r0, 800fa4e <rmw_init_options_copy+0x56>
 800fa2c:	6883      	ldr	r3, [r0, #8]
 800fa2e:	656b      	str	r3, [r5, #84]	; 0x54
 800fa30:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800fa32:	f103 0410 	add.w	r4, r3, #16
 800fa36:	3510      	adds	r5, #16
 800fa38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fa40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fa44:	4630      	mov	r0, r6
 800fa46:	bd70      	pop	{r4, r5, r6, pc}
 800fa48:	260c      	movs	r6, #12
 800fa4a:	4630      	mov	r0, r6
 800fa4c:	bd70      	pop	{r4, r5, r6, pc}
 800fa4e:	2601      	movs	r6, #1
 800fa50:	e7e1      	b.n	800fa16 <rmw_init_options_copy+0x1e>
 800fa52:	bf00      	nop
 800fa54:	08017fe0 	.word	0x08017fe0
 800fa58:	2000e84c 	.word	0x2000e84c

0800fa5c <rmw_init_options_fini>:
 800fa5c:	b368      	cbz	r0, 800faba <rmw_init_options_fini+0x5e>
 800fa5e:	b510      	push	{r4, lr}
 800fa60:	4604      	mov	r4, r0
 800fa62:	b096      	sub	sp, #88	; 0x58
 800fa64:	3040      	adds	r0, #64	; 0x40
 800fa66:	f7f9 ff93 	bl	8009990 <rcutils_allocator_is_valid>
 800fa6a:	b1f0      	cbz	r0, 800faaa <rmw_init_options_fini+0x4e>
 800fa6c:	68a0      	ldr	r0, [r4, #8]
 800fa6e:	b120      	cbz	r0, 800fa7a <rmw_init_options_fini+0x1e>
 800fa70:	4b13      	ldr	r3, [pc, #76]	; (800fac0 <rmw_init_options_fini+0x64>)
 800fa72:	6819      	ldr	r1, [r3, #0]
 800fa74:	f7f0 fc34 	bl	80002e0 <strcmp>
 800fa78:	b9e8      	cbnz	r0, 800fab6 <rmw_init_options_fini+0x5a>
 800fa7a:	4b12      	ldr	r3, [pc, #72]	; (800fac4 <rmw_init_options_fini+0x68>)
 800fa7c:	6819      	ldr	r1, [r3, #0]
 800fa7e:	b1b9      	cbz	r1, 800fab0 <rmw_init_options_fini+0x54>
 800fa80:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800fa82:	e001      	b.n	800fa88 <rmw_init_options_fini+0x2c>
 800fa84:	6849      	ldr	r1, [r1, #4]
 800fa86:	b199      	cbz	r1, 800fab0 <rmw_init_options_fini+0x54>
 800fa88:	688b      	ldr	r3, [r1, #8]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d1fa      	bne.n	800fa84 <rmw_init_options_fini+0x28>
 800fa8e:	480d      	ldr	r0, [pc, #52]	; (800fac4 <rmw_init_options_fini+0x68>)
 800fa90:	f7ff ff30 	bl	800f8f4 <put_memory>
 800fa94:	4668      	mov	r0, sp
 800fa96:	f7ff fdb7 	bl	800f608 <rmw_get_zero_initialized_init_options>
 800fa9a:	2258      	movs	r2, #88	; 0x58
 800fa9c:	4669      	mov	r1, sp
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f003 f8f2 	bl	8012c88 <memcpy>
 800faa4:	2000      	movs	r0, #0
 800faa6:	b016      	add	sp, #88	; 0x58
 800faa8:	bd10      	pop	{r4, pc}
 800faaa:	200b      	movs	r0, #11
 800faac:	b016      	add	sp, #88	; 0x58
 800faae:	bd10      	pop	{r4, pc}
 800fab0:	2001      	movs	r0, #1
 800fab2:	b016      	add	sp, #88	; 0x58
 800fab4:	bd10      	pop	{r4, pc}
 800fab6:	200c      	movs	r0, #12
 800fab8:	e7f5      	b.n	800faa6 <rmw_init_options_fini+0x4a>
 800faba:	200b      	movs	r0, #11
 800fabc:	4770      	bx	lr
 800fabe:	bf00      	nop
 800fac0:	08017fe0 	.word	0x08017fe0
 800fac4:	2000e84c 	.word	0x2000e84c

0800fac8 <rmw_init>:
 800fac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800facc:	b083      	sub	sp, #12
 800face:	2800      	cmp	r0, #0
 800fad0:	f000 80d3 	beq.w	800fc7a <rmw_init+0x1b2>
 800fad4:	460e      	mov	r6, r1
 800fad6:	2900      	cmp	r1, #0
 800fad8:	f000 80cf 	beq.w	800fc7a <rmw_init+0x1b2>
 800fadc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800fade:	4605      	mov	r5, r0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	f000 80ca 	beq.w	800fc7a <rmw_init+0x1b2>
 800fae6:	4b78      	ldr	r3, [pc, #480]	; (800fcc8 <rmw_init+0x200>)
 800fae8:	6880      	ldr	r0, [r0, #8]
 800faea:	681f      	ldr	r7, [r3, #0]
 800faec:	b128      	cbz	r0, 800fafa <rmw_init+0x32>
 800faee:	4639      	mov	r1, r7
 800faf0:	f7f0 fbf6 	bl	80002e0 <strcmp>
 800faf4:	2800      	cmp	r0, #0
 800faf6:	f040 80ca 	bne.w	800fc8e <rmw_init+0x1c6>
 800fafa:	4c74      	ldr	r4, [pc, #464]	; (800fccc <rmw_init+0x204>)
 800fafc:	f04f 0800 	mov.w	r8, #0
 800fb00:	4973      	ldr	r1, [pc, #460]	; (800fcd0 <rmw_init+0x208>)
 800fb02:	4874      	ldr	r0, [pc, #464]	; (800fcd4 <rmw_init+0x20c>)
 800fb04:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fb08:	60b7      	str	r7, [r6, #8]
 800fb0a:	e9c6 2300 	strd	r2, r3, [r6]
 800fb0e:	68eb      	ldr	r3, [r5, #12]
 800fb10:	2201      	movs	r2, #1
 800fb12:	66b3      	str	r3, [r6, #104]	; 0x68
 800fb14:	f7fa f9e6 	bl	8009ee4 <rmw_uxrce_init_session_memory>
 800fb18:	4620      	mov	r0, r4
 800fb1a:	2204      	movs	r2, #4
 800fb1c:	496e      	ldr	r1, [pc, #440]	; (800fcd8 <rmw_init+0x210>)
 800fb1e:	f7fa fa21 	bl	8009f64 <rmw_uxrce_init_static_input_buffer_memory>
 800fb22:	486c      	ldr	r0, [pc, #432]	; (800fcd4 <rmw_init+0x20c>)
 800fb24:	f884 800d 	strb.w	r8, [r4, #13]
 800fb28:	f7ff fed4 	bl	800f8d4 <get_memory>
 800fb2c:	2800      	cmp	r0, #0
 800fb2e:	f000 80a9 	beq.w	800fc84 <rmw_init+0x1bc>
 800fb32:	6884      	ldr	r4, [r0, #8]
 800fb34:	6d68      	ldr	r0, [r5, #84]	; 0x54
 800fb36:	f104 0910 	add.w	r9, r4, #16
 800fb3a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800fb3c:	f890 c010 	ldrb.w	ip, [r0, #16]
 800fb40:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800fb44:	9101      	str	r1, [sp, #4]
 800fb46:	4661      	mov	r1, ip
 800fb48:	6a00      	ldr	r0, [r0, #32]
 800fb4a:	9000      	str	r0, [sp, #0]
 800fb4c:	4648      	mov	r0, r9
 800fb4e:	f000 fdc7 	bl	80106e0 <uxr_set_custom_transport_callbacks>
 800fb52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fb56:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800fb5a:	4960      	ldr	r1, [pc, #384]	; (800fcdc <rmw_init+0x214>)
 800fb5c:	4860      	ldr	r0, [pc, #384]	; (800fce0 <rmw_init+0x218>)
 800fb5e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800fb62:	f504 725e 	add.w	r2, r4, #888	; 0x378
 800fb66:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 800fb6a:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 800fb6e:	2201      	movs	r2, #1
 800fb70:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 800fb74:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 800fb78:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 800fb7c:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 800fb80:	66f4      	str	r4, [r6, #108]	; 0x6c
 800fb82:	f7fa f98f 	bl	8009ea4 <rmw_uxrce_init_node_memory>
 800fb86:	2205      	movs	r2, #5
 800fb88:	4956      	ldr	r1, [pc, #344]	; (800fce4 <rmw_init+0x21c>)
 800fb8a:	4857      	ldr	r0, [pc, #348]	; (800fce8 <rmw_init+0x220>)
 800fb8c:	f7fa f96a 	bl	8009e64 <rmw_uxrce_init_subscription_memory>
 800fb90:	220a      	movs	r2, #10
 800fb92:	4956      	ldr	r1, [pc, #344]	; (800fcec <rmw_init+0x224>)
 800fb94:	4856      	ldr	r0, [pc, #344]	; (800fcf0 <rmw_init+0x228>)
 800fb96:	f7fa f945 	bl	8009e24 <rmw_uxrce_init_publisher_memory>
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	4955      	ldr	r1, [pc, #340]	; (800fcf4 <rmw_init+0x22c>)
 800fb9e:	4856      	ldr	r0, [pc, #344]	; (800fcf8 <rmw_init+0x230>)
 800fba0:	f7fa f900 	bl	8009da4 <rmw_uxrce_init_service_memory>
 800fba4:	2201      	movs	r2, #1
 800fba6:	4955      	ldr	r1, [pc, #340]	; (800fcfc <rmw_init+0x234>)
 800fba8:	4855      	ldr	r0, [pc, #340]	; (800fd00 <rmw_init+0x238>)
 800fbaa:	f7fa f91b 	bl	8009de4 <rmw_uxrce_init_client_memory>
 800fbae:	220f      	movs	r2, #15
 800fbb0:	4954      	ldr	r1, [pc, #336]	; (800fd04 <rmw_init+0x23c>)
 800fbb2:	4855      	ldr	r0, [pc, #340]	; (800fd08 <rmw_init+0x240>)
 800fbb4:	f7fa f9b6 	bl	8009f24 <rmw_uxrce_init_topic_memory>
 800fbb8:	2203      	movs	r2, #3
 800fbba:	4954      	ldr	r1, [pc, #336]	; (800fd0c <rmw_init+0x244>)
 800fbbc:	4854      	ldr	r0, [pc, #336]	; (800fd10 <rmw_init+0x248>)
 800fbbe:	f7fa f9f1 	bl	8009fa4 <rmw_uxrce_init_init_options_impl_memory>
 800fbc2:	2204      	movs	r2, #4
 800fbc4:	4953      	ldr	r1, [pc, #332]	; (800fd14 <rmw_init+0x24c>)
 800fbc6:	4854      	ldr	r0, [pc, #336]	; (800fd18 <rmw_init+0x250>)
 800fbc8:	f7fa fa0c 	bl	8009fe4 <rmw_uxrce_init_wait_set_memory>
 800fbcc:	4953      	ldr	r1, [pc, #332]	; (800fd1c <rmw_init+0x254>)
 800fbce:	4854      	ldr	r0, [pc, #336]	; (800fd20 <rmw_init+0x258>)
 800fbd0:	2204      	movs	r2, #4
 800fbd2:	f7fa fa27 	bl	800a024 <rmw_uxrce_init_guard_condition_memory>
 800fbd6:	4642      	mov	r2, r8
 800fbd8:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800fbda:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 800fbdc:	f000 fb0a 	bl	80101f4 <rmw_uxrce_transport_init>
 800fbe0:	4607      	mov	r7, r0
 800fbe2:	2800      	cmp	r0, #0
 800fbe4:	d158      	bne.n	800fc98 <rmw_init+0x1d0>
 800fbe6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800fbe8:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800fbec:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800fbf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fbf2:	4628      	mov	r0, r5
 800fbf4:	f7fb ffc4 	bl	800bb80 <uxr_init_session>
 800fbf8:	4622      	mov	r2, r4
 800fbfa:	494a      	ldr	r1, [pc, #296]	; (800fd24 <rmw_init+0x25c>)
 800fbfc:	4628      	mov	r0, r5
 800fbfe:	f7fb ffe3 	bl	800bbc8 <uxr_set_topic_callback>
 800fc02:	463a      	mov	r2, r7
 800fc04:	4948      	ldr	r1, [pc, #288]	; (800fd28 <rmw_init+0x260>)
 800fc06:	4628      	mov	r0, r5
 800fc08:	f7fb ffda 	bl	800bbc0 <uxr_set_status_callback>
 800fc0c:	463a      	mov	r2, r7
 800fc0e:	4947      	ldr	r1, [pc, #284]	; (800fd2c <rmw_init+0x264>)
 800fc10:	4628      	mov	r0, r5
 800fc12:	f7fb ffdd 	bl	800bbd0 <uxr_set_request_callback>
 800fc16:	463a      	mov	r2, r7
 800fc18:	4945      	ldr	r1, [pc, #276]	; (800fd30 <rmw_init+0x268>)
 800fc1a:	4628      	mov	r0, r5
 800fc1c:	f7fb ffdc 	bl	800bbd8 <uxr_set_reply_callback>
 800fc20:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800fc24:	2304      	movs	r3, #4
 800fc26:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800fc2a:	0092      	lsls	r2, r2, #2
 800fc2c:	4628      	mov	r0, r5
 800fc2e:	f7fc f813 	bl	800bc58 <uxr_create_input_reliable_stream>
 800fc32:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800fc36:	2304      	movs	r3, #4
 800fc38:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800fc3c:	0092      	lsls	r2, r2, #2
 800fc3e:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800fc42:	4628      	mov	r0, r5
 800fc44:	f7fb ffde 	bl	800bc04 <uxr_create_output_reliable_stream>
 800fc48:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800fc4c:	4628      	mov	r0, r5
 800fc4e:	f7fb fffd 	bl	800bc4c <uxr_create_input_best_effort_stream>
 800fc52:	f241 3194 	movw	r1, #5012	; 0x1394
 800fc56:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	4421      	add	r1, r4
 800fc5e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800fc62:	f7fb ffbd 	bl	800bbe0 <uxr_create_output_best_effort_stream>
 800fc66:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	f7fc fd0c 	bl	800c688 <uxr_create_session>
 800fc70:	b1f8      	cbz	r0, 800fcb2 <rmw_init+0x1ea>
 800fc72:	4638      	mov	r0, r7
 800fc74:	b003      	add	sp, #12
 800fc76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc7a:	270b      	movs	r7, #11
 800fc7c:	4638      	mov	r0, r7
 800fc7e:	b003      	add	sp, #12
 800fc80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc84:	2701      	movs	r7, #1
 800fc86:	4638      	mov	r0, r7
 800fc88:	b003      	add	sp, #12
 800fc8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc8e:	270c      	movs	r7, #12
 800fc90:	4638      	mov	r0, r7
 800fc92:	b003      	add	sp, #12
 800fc94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc98:	4648      	mov	r0, r9
 800fc9a:	f000 fd5f 	bl	801075c <uxr_close_custom_transport>
 800fc9e:	4621      	mov	r1, r4
 800fca0:	480c      	ldr	r0, [pc, #48]	; (800fcd4 <rmw_init+0x20c>)
 800fca2:	f7ff fe27 	bl	800f8f4 <put_memory>
 800fca6:	4638      	mov	r0, r7
 800fca8:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 800fcac:	b003      	add	sp, #12
 800fcae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcb2:	4648      	mov	r0, r9
 800fcb4:	f000 fd52 	bl	801075c <uxr_close_custom_transport>
 800fcb8:	4621      	mov	r1, r4
 800fcba:	4806      	ldr	r0, [pc, #24]	; (800fcd4 <rmw_init+0x20c>)
 800fcbc:	f7ff fe1a 	bl	800f8f4 <put_memory>
 800fcc0:	66f7      	str	r7, [r6, #108]	; 0x6c
 800fcc2:	2701      	movs	r7, #1
 800fcc4:	e7d5      	b.n	800fc72 <rmw_init+0x1aa>
 800fcc6:	bf00      	nop
 800fcc8:	08017fe0 	.word	0x08017fe0
 800fccc:	2000e89c 	.word	0x2000e89c
 800fcd0:	2000ab48 	.word	0x2000ab48
 800fcd4:	2000e88c 	.word	0x2000e88c
 800fcd8:	2000c0f0 	.word	0x2000c0f0
 800fcdc:	2000a16c 	.word	0x2000a16c
 800fce0:	2000e85c 	.word	0x2000e85c
 800fce4:	2000e1f0 	.word	0x2000e1f0
 800fce8:	2000e8ac 	.word	0x2000e8ac
 800fcec:	2000a210 	.word	0x2000a210
 800fcf0:	2000e86c 	.word	0x2000e86c
 800fcf4:	2000aa80 	.word	0x2000aa80
 800fcf8:	2000e87c 	.word	0x2000e87c
 800fcfc:	20009fa0 	.word	0x20009fa0
 800fd00:	20009f90 	.word	0x20009f90
 800fd04:	2000e628 	.word	0x2000e628
 800fd08:	2000e8bc 	.word	0x2000e8bc
 800fd0c:	2000a0e8 	.word	0x2000a0e8
 800fd10:	2000e84c 	.word	0x2000e84c
 800fd14:	2000e7cc 	.word	0x2000e7cc
 800fd18:	2000e8cc 	.word	0x2000e8cc
 800fd1c:	2000a068 	.word	0x2000a068
 800fd20:	2000e83c 	.word	0x2000e83c
 800fd24:	08012709 	.word	0x08012709
 800fd28:	08012701 	.word	0x08012701
 800fd2c:	080127a1 	.word	0x080127a1
 800fd30:	0801283d 	.word	0x0801283d

0800fd34 <rmw_context_fini>:
 800fd34:	4b17      	ldr	r3, [pc, #92]	; (800fd94 <rmw_context_fini+0x60>)
 800fd36:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800fd38:	b570      	push	{r4, r5, r6, lr}
 800fd3a:	681c      	ldr	r4, [r3, #0]
 800fd3c:	4605      	mov	r5, r0
 800fd3e:	b334      	cbz	r4, 800fd8e <rmw_context_fini+0x5a>
 800fd40:	2600      	movs	r6, #0
 800fd42:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800fd46:	6902      	ldr	r2, [r0, #16]
 800fd48:	428a      	cmp	r2, r1
 800fd4a:	d018      	beq.n	800fd7e <rmw_context_fini+0x4a>
 800fd4c:	2c00      	cmp	r4, #0
 800fd4e:	d1f8      	bne.n	800fd42 <rmw_context_fini+0xe>
 800fd50:	b189      	cbz	r1, 800fd76 <rmw_context_fini+0x42>
 800fd52:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 800fd56:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 800fd5a:	789b      	ldrb	r3, [r3, #2]
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	bf14      	ite	ne
 800fd60:	210a      	movne	r1, #10
 800fd62:	2100      	moveq	r1, #0
 800fd64:	f7fc fc68 	bl	800c638 <uxr_delete_session_retries>
 800fd68:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800fd6a:	f7fa f97b 	bl	800a064 <rmw_uxrce_fini_session_memory>
 800fd6e:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800fd70:	3010      	adds	r0, #16
 800fd72:	f000 fcf3 	bl	801075c <uxr_close_custom_transport>
 800fd76:	2300      	movs	r3, #0
 800fd78:	4630      	mov	r0, r6
 800fd7a:	66eb      	str	r3, [r5, #108]	; 0x6c
 800fd7c:	bd70      	pop	{r4, r5, r6, pc}
 800fd7e:	3018      	adds	r0, #24
 800fd80:	f000 f90e 	bl	800ffa0 <rmw_destroy_node>
 800fd84:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800fd86:	4606      	mov	r6, r0
 800fd88:	2c00      	cmp	r4, #0
 800fd8a:	d1da      	bne.n	800fd42 <rmw_context_fini+0xe>
 800fd8c:	e7e0      	b.n	800fd50 <rmw_context_fini+0x1c>
 800fd8e:	4626      	mov	r6, r4
 800fd90:	e7de      	b.n	800fd50 <rmw_context_fini+0x1c>
 800fd92:	bf00      	nop
 800fd94:	2000e85c 	.word	0x2000e85c

0800fd98 <create_topic>:
 800fd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd9c:	4605      	mov	r5, r0
 800fd9e:	b084      	sub	sp, #16
 800fda0:	4822      	ldr	r0, [pc, #136]	; (800fe2c <create_topic+0x94>)
 800fda2:	460f      	mov	r7, r1
 800fda4:	4616      	mov	r6, r2
 800fda6:	f7ff fd95 	bl	800f8d4 <get_memory>
 800fdaa:	4604      	mov	r4, r0
 800fdac:	2800      	cmp	r0, #0
 800fdae:	d039      	beq.n	800fe24 <create_topic+0x8c>
 800fdb0:	692b      	ldr	r3, [r5, #16]
 800fdb2:	2102      	movs	r1, #2
 800fdb4:	6884      	ldr	r4, [r0, #8]
 800fdb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fdba:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800fe34 <create_topic+0x9c>
 800fdbe:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 800fdc2:	1c42      	adds	r2, r0, #1
 800fdc4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 800fdc8:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 800fdcc:	f7fb fe1a 	bl	800ba04 <uxr_object_id>
 800fdd0:	223c      	movs	r2, #60	; 0x3c
 800fdd2:	6120      	str	r0, [r4, #16]
 800fdd4:	4641      	mov	r1, r8
 800fdd6:	4638      	mov	r0, r7
 800fdd8:	f7fa fa82 	bl	800a2e0 <generate_topic_name>
 800fddc:	b1f0      	cbz	r0, 800fe1c <create_topic+0x84>
 800fdde:	4f14      	ldr	r7, [pc, #80]	; (800fe30 <create_topic+0x98>)
 800fde0:	4630      	mov	r0, r6
 800fde2:	2264      	movs	r2, #100	; 0x64
 800fde4:	4639      	mov	r1, r7
 800fde6:	f7fa fa4d 	bl	800a284 <generate_type_name>
 800fdea:	b1b8      	cbz	r0, 800fe1c <create_topic+0x84>
 800fdec:	6928      	ldr	r0, [r5, #16]
 800fdee:	2106      	movs	r1, #6
 800fdf0:	696b      	ldr	r3, [r5, #20]
 800fdf2:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800fdf6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fdfa:	f8cd 8000 	str.w	r8, [sp]
 800fdfe:	e9cd 7101 	strd	r7, r1, [sp, #4]
 800fe02:	6811      	ldr	r1, [r2, #0]
 800fe04:	6922      	ldr	r2, [r4, #16]
 800fe06:	f7fb fd21 	bl	800b84c <uxr_buffer_create_topic_bin>
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	6928      	ldr	r0, [r5, #16]
 800fe0e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800fe12:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800fe16:	f7fa fa01 	bl	800a21c <run_xrce_session>
 800fe1a:	b918      	cbnz	r0, 800fe24 <create_topic+0x8c>
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	2400      	movs	r4, #0
 800fe20:	f7fa f996 	bl	800a150 <rmw_uxrce_fini_topic_memory>
 800fe24:	4620      	mov	r0, r4
 800fe26:	b004      	add	sp, #16
 800fe28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe2c:	2000e8bc 	.word	0x2000e8bc
 800fe30:	2000e9a8 	.word	0x2000e9a8
 800fe34:	2000e96c 	.word	0x2000e96c

0800fe38 <destroy_topic>:
 800fe38:	b538      	push	{r3, r4, r5, lr}
 800fe3a:	6985      	ldr	r5, [r0, #24]
 800fe3c:	b1dd      	cbz	r5, 800fe76 <destroy_topic+0x3e>
 800fe3e:	4604      	mov	r4, r0
 800fe40:	6928      	ldr	r0, [r5, #16]
 800fe42:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800fe46:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fe4a:	6922      	ldr	r2, [r4, #16]
 800fe4c:	6819      	ldr	r1, [r3, #0]
 800fe4e:	f7fb fc7f 	bl	800b750 <uxr_buffer_delete_entity>
 800fe52:	4602      	mov	r2, r0
 800fe54:	6928      	ldr	r0, [r5, #16]
 800fe56:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800fe5a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800fe5e:	f7fa f9dd 	bl	800a21c <run_xrce_session>
 800fe62:	4603      	mov	r3, r0
 800fe64:	4620      	mov	r0, r4
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	bf14      	ite	ne
 800fe6a:	2400      	movne	r4, #0
 800fe6c:	2402      	moveq	r4, #2
 800fe6e:	f7fa f96f 	bl	800a150 <rmw_uxrce_fini_topic_memory>
 800fe72:	4620      	mov	r0, r4
 800fe74:	bd38      	pop	{r3, r4, r5, pc}
 800fe76:	2401      	movs	r4, #1
 800fe78:	4620      	mov	r0, r4
 800fe7a:	bd38      	pop	{r3, r4, r5, pc}

0800fe7c <create_node>:
 800fe7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe80:	b083      	sub	sp, #12
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d064      	beq.n	800ff50 <create_node+0xd4>
 800fe86:	4606      	mov	r6, r0
 800fe88:	4838      	ldr	r0, [pc, #224]	; (800ff6c <create_node+0xf0>)
 800fe8a:	460f      	mov	r7, r1
 800fe8c:	4690      	mov	r8, r2
 800fe8e:	461d      	mov	r5, r3
 800fe90:	f7ff fd20 	bl	800f8d4 <get_memory>
 800fe94:	2800      	cmp	r0, #0
 800fe96:	d05b      	beq.n	800ff50 <create_node+0xd4>
 800fe98:	6884      	ldr	r4, [r0, #8]
 800fe9a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800fe9c:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800fea0:	f104 0518 	add.w	r5, r4, #24
 800fea4:	6123      	str	r3, [r4, #16]
 800fea6:	f7ff fd39 	bl	800f91c <rmw_get_implementation_identifier>
 800feaa:	f8c4 9020 	str.w	r9, [r4, #32]
 800feae:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800feb2:	4630      	mov	r0, r6
 800feb4:	f7f0 fa1e 	bl	80002f4 <strlen>
 800feb8:	1c42      	adds	r2, r0, #1
 800feba:	2a3c      	cmp	r2, #60	; 0x3c
 800febc:	d840      	bhi.n	800ff40 <create_node+0xc4>
 800febe:	4648      	mov	r0, r9
 800fec0:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800fec4:	4631      	mov	r1, r6
 800fec6:	f002 fedf 	bl	8012c88 <memcpy>
 800feca:	4638      	mov	r0, r7
 800fecc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800fed0:	f7f0 fa10 	bl	80002f4 <strlen>
 800fed4:	1c42      	adds	r2, r0, #1
 800fed6:	2a3c      	cmp	r2, #60	; 0x3c
 800fed8:	d832      	bhi.n	800ff40 <create_node+0xc4>
 800feda:	4639      	mov	r1, r7
 800fedc:	4648      	mov	r0, r9
 800fede:	f002 fed3 	bl	8012c88 <memcpy>
 800fee2:	6923      	ldr	r3, [r4, #16]
 800fee4:	2101      	movs	r1, #1
 800fee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800feea:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 800feee:	1842      	adds	r2, r0, r1
 800fef0:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 800fef4:	f7fb fd86 	bl	800ba04 <uxr_object_id>
 800fef8:	6160      	str	r0, [r4, #20]
 800fefa:	783b      	ldrb	r3, [r7, #0]
 800fefc:	2b2f      	cmp	r3, #47	; 0x2f
 800fefe:	d12c      	bne.n	800ff5a <create_node+0xde>
 800ff00:	787b      	ldrb	r3, [r7, #1]
 800ff02:	bb53      	cbnz	r3, 800ff5a <create_node+0xde>
 800ff04:	4633      	mov	r3, r6
 800ff06:	4a1a      	ldr	r2, [pc, #104]	; (800ff70 <create_node+0xf4>)
 800ff08:	213c      	movs	r1, #60	; 0x3c
 800ff0a:	481a      	ldr	r0, [pc, #104]	; (800ff74 <create_node+0xf8>)
 800ff0c:	f003 feb2 	bl	8013c74 <sniprintf>
 800ff10:	6920      	ldr	r0, [r4, #16]
 800ff12:	2106      	movs	r1, #6
 800ff14:	fa1f f388 	uxth.w	r3, r8
 800ff18:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800ff1c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ff20:	9101      	str	r1, [sp, #4]
 800ff22:	4914      	ldr	r1, [pc, #80]	; (800ff74 <create_node+0xf8>)
 800ff24:	9100      	str	r1, [sp, #0]
 800ff26:	6811      	ldr	r1, [r2, #0]
 800ff28:	6962      	ldr	r2, [r4, #20]
 800ff2a:	f7fb fc5d 	bl	800b7e8 <uxr_buffer_create_participant_bin>
 800ff2e:	4602      	mov	r2, r0
 800ff30:	6920      	ldr	r0, [r4, #16]
 800ff32:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ff36:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ff3a:	f7fa f96f 	bl	800a21c <run_xrce_session>
 800ff3e:	b918      	cbnz	r0, 800ff48 <create_node+0xcc>
 800ff40:	4628      	mov	r0, r5
 800ff42:	2500      	movs	r5, #0
 800ff44:	f7fa f894 	bl	800a070 <rmw_uxrce_fini_node_memory>
 800ff48:	4628      	mov	r0, r5
 800ff4a:	b003      	add	sp, #12
 800ff4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff50:	2500      	movs	r5, #0
 800ff52:	4628      	mov	r0, r5
 800ff54:	b003      	add	sp, #12
 800ff56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff5a:	463b      	mov	r3, r7
 800ff5c:	4a06      	ldr	r2, [pc, #24]	; (800ff78 <create_node+0xfc>)
 800ff5e:	213c      	movs	r1, #60	; 0x3c
 800ff60:	9600      	str	r6, [sp, #0]
 800ff62:	4804      	ldr	r0, [pc, #16]	; (800ff74 <create_node+0xf8>)
 800ff64:	f003 fe86 	bl	8013c74 <sniprintf>
 800ff68:	e7d2      	b.n	800ff10 <create_node+0x94>
 800ff6a:	bf00      	nop
 800ff6c:	2000e85c 	.word	0x2000e85c
 800ff70:	08017a80 	.word	0x08017a80
 800ff74:	2000ea0c 	.word	0x2000ea0c
 800ff78:	08017b6c 	.word	0x08017b6c

0800ff7c <rmw_create_node>:
 800ff7c:	468c      	mov	ip, r1
 800ff7e:	4611      	mov	r1, r2
 800ff80:	f1bc 0f00 	cmp.w	ip, #0
 800ff84:	d00a      	beq.n	800ff9c <rmw_create_node+0x20>
 800ff86:	f89c 3000 	ldrb.w	r3, [ip]
 800ff8a:	b13b      	cbz	r3, 800ff9c <rmw_create_node+0x20>
 800ff8c:	b132      	cbz	r2, 800ff9c <rmw_create_node+0x20>
 800ff8e:	7813      	ldrb	r3, [r2, #0]
 800ff90:	b123      	cbz	r3, 800ff9c <rmw_create_node+0x20>
 800ff92:	4603      	mov	r3, r0
 800ff94:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800ff96:	4660      	mov	r0, ip
 800ff98:	f7ff bf70 	b.w	800fe7c <create_node>
 800ff9c:	2000      	movs	r0, #0
 800ff9e:	4770      	bx	lr

0800ffa0 <rmw_destroy_node>:
 800ffa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffa2:	b328      	cbz	r0, 800fff0 <rmw_destroy_node+0x50>
 800ffa4:	4607      	mov	r7, r0
 800ffa6:	6800      	ldr	r0, [r0, #0]
 800ffa8:	b120      	cbz	r0, 800ffb4 <rmw_destroy_node+0x14>
 800ffaa:	4b37      	ldr	r3, [pc, #220]	; (8010088 <rmw_destroy_node+0xe8>)
 800ffac:	6819      	ldr	r1, [r3, #0]
 800ffae:	f7f0 f997 	bl	80002e0 <strcmp>
 800ffb2:	b9e8      	cbnz	r0, 800fff0 <rmw_destroy_node+0x50>
 800ffb4:	687d      	ldr	r5, [r7, #4]
 800ffb6:	b1dd      	cbz	r5, 800fff0 <rmw_destroy_node+0x50>
 800ffb8:	4b34      	ldr	r3, [pc, #208]	; (801008c <rmw_destroy_node+0xec>)
 800ffba:	681c      	ldr	r4, [r3, #0]
 800ffbc:	2c00      	cmp	r4, #0
 800ffbe:	d060      	beq.n	8010082 <rmw_destroy_node+0xe2>
 800ffc0:	2600      	movs	r6, #0
 800ffc2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ffc6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800ffca:	429d      	cmp	r5, r3
 800ffcc:	d013      	beq.n	800fff6 <rmw_destroy_node+0x56>
 800ffce:	2c00      	cmp	r4, #0
 800ffd0:	d1f7      	bne.n	800ffc2 <rmw_destroy_node+0x22>
 800ffd2:	4b2f      	ldr	r3, [pc, #188]	; (8010090 <rmw_destroy_node+0xf0>)
 800ffd4:	681c      	ldr	r4, [r3, #0]
 800ffd6:	b1c4      	cbz	r4, 801000a <rmw_destroy_node+0x6a>
 800ffd8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800ffdc:	6a0b      	ldr	r3, [r1, #32]
 800ffde:	429d      	cmp	r5, r3
 800ffe0:	d1f9      	bne.n	800ffd6 <rmw_destroy_node+0x36>
 800ffe2:	317c      	adds	r1, #124	; 0x7c
 800ffe4:	4638      	mov	r0, r7
 800ffe6:	f000 f8a3 	bl	8010130 <rmw_destroy_subscription>
 800ffea:	2801      	cmp	r0, #1
 800ffec:	4606      	mov	r6, r0
 800ffee:	d1f2      	bne.n	800ffd6 <rmw_destroy_node+0x36>
 800fff0:	2601      	movs	r6, #1
 800fff2:	4630      	mov	r0, r6
 800fff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fff6:	3184      	adds	r1, #132	; 0x84
 800fff8:	4638      	mov	r0, r7
 800fffa:	f7f9 fe7f 	bl	8009cfc <rmw_destroy_publisher>
 800fffe:	2801      	cmp	r0, #1
 8010000:	4606      	mov	r6, r0
 8010002:	d0f5      	beq.n	800fff0 <rmw_destroy_node+0x50>
 8010004:	2c00      	cmp	r4, #0
 8010006:	d1dc      	bne.n	800ffc2 <rmw_destroy_node+0x22>
 8010008:	e7e3      	b.n	800ffd2 <rmw_destroy_node+0x32>
 801000a:	4b22      	ldr	r3, [pc, #136]	; (8010094 <rmw_destroy_node+0xf4>)
 801000c:	681c      	ldr	r4, [r3, #0]
 801000e:	b16c      	cbz	r4, 801002c <rmw_destroy_node+0x8c>
 8010010:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010014:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8010016:	429d      	cmp	r5, r3
 8010018:	d1f9      	bne.n	801000e <rmw_destroy_node+0x6e>
 801001a:	317c      	adds	r1, #124	; 0x7c
 801001c:	4638      	mov	r0, r7
 801001e:	f000 f843 	bl	80100a8 <rmw_destroy_service>
 8010022:	2801      	cmp	r0, #1
 8010024:	4606      	mov	r6, r0
 8010026:	d0e3      	beq.n	800fff0 <rmw_destroy_node+0x50>
 8010028:	2c00      	cmp	r4, #0
 801002a:	d1f1      	bne.n	8010010 <rmw_destroy_node+0x70>
 801002c:	4b1a      	ldr	r3, [pc, #104]	; (8010098 <rmw_destroy_node+0xf8>)
 801002e:	681c      	ldr	r4, [r3, #0]
 8010030:	b16c      	cbz	r4, 801004e <rmw_destroy_node+0xae>
 8010032:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010036:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8010038:	429d      	cmp	r5, r3
 801003a:	d1f9      	bne.n	8010030 <rmw_destroy_node+0x90>
 801003c:	317c      	adds	r1, #124	; 0x7c
 801003e:	4638      	mov	r0, r7
 8010040:	f002 fc46 	bl	80128d0 <rmw_destroy_client>
 8010044:	2801      	cmp	r0, #1
 8010046:	4606      	mov	r6, r0
 8010048:	d0d2      	beq.n	800fff0 <rmw_destroy_node+0x50>
 801004a:	2c00      	cmp	r4, #0
 801004c:	d1f1      	bne.n	8010032 <rmw_destroy_node+0x92>
 801004e:	6928      	ldr	r0, [r5, #16]
 8010050:	696a      	ldr	r2, [r5, #20]
 8010052:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010056:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801005a:	6819      	ldr	r1, [r3, #0]
 801005c:	f7fb fb78 	bl	800b750 <uxr_buffer_delete_entity>
 8010060:	4602      	mov	r2, r0
 8010062:	6928      	ldr	r0, [r5, #16]
 8010064:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010068:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801006c:	f7fa f8d6 	bl	800a21c <run_xrce_session>
 8010070:	4603      	mov	r3, r0
 8010072:	4638      	mov	r0, r7
 8010074:	2b00      	cmp	r3, #0
 8010076:	bf08      	it	eq
 8010078:	2602      	moveq	r6, #2
 801007a:	f7f9 fff9 	bl	800a070 <rmw_uxrce_fini_node_memory>
 801007e:	4630      	mov	r0, r6
 8010080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010082:	4626      	mov	r6, r4
 8010084:	e7a5      	b.n	800ffd2 <rmw_destroy_node+0x32>
 8010086:	bf00      	nop
 8010088:	08017fe0 	.word	0x08017fe0
 801008c:	2000e86c 	.word	0x2000e86c
 8010090:	2000e8ac 	.word	0x2000e8ac
 8010094:	2000e87c 	.word	0x2000e87c
 8010098:	20009f90 	.word	0x20009f90

0801009c <rmw_node_get_graph_guard_condition>:
 801009c:	6843      	ldr	r3, [r0, #4]
 801009e:	6918      	ldr	r0, [r3, #16]
 80100a0:	f500 705a 	add.w	r0, r0, #872	; 0x368
 80100a4:	4770      	bx	lr
 80100a6:	bf00      	nop

080100a8 <rmw_destroy_service>:
 80100a8:	b570      	push	{r4, r5, r6, lr}
 80100aa:	b128      	cbz	r0, 80100b8 <rmw_destroy_service+0x10>
 80100ac:	4604      	mov	r4, r0
 80100ae:	6800      	ldr	r0, [r0, #0]
 80100b0:	460d      	mov	r5, r1
 80100b2:	f7fa f92d 	bl	800a310 <is_uxrce_rmw_identifier_valid>
 80100b6:	b910      	cbnz	r0, 80100be <rmw_destroy_service+0x16>
 80100b8:	2401      	movs	r4, #1
 80100ba:	4620      	mov	r0, r4
 80100bc:	bd70      	pop	{r4, r5, r6, pc}
 80100be:	6863      	ldr	r3, [r4, #4]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d0f9      	beq.n	80100b8 <rmw_destroy_service+0x10>
 80100c4:	2d00      	cmp	r5, #0
 80100c6:	d0f7      	beq.n	80100b8 <rmw_destroy_service+0x10>
 80100c8:	6828      	ldr	r0, [r5, #0]
 80100ca:	f7fa f921 	bl	800a310 <is_uxrce_rmw_identifier_valid>
 80100ce:	2800      	cmp	r0, #0
 80100d0:	d0f2      	beq.n	80100b8 <rmw_destroy_service+0x10>
 80100d2:	686e      	ldr	r6, [r5, #4]
 80100d4:	2e00      	cmp	r6, #0
 80100d6:	d0ef      	beq.n	80100b8 <rmw_destroy_service+0x10>
 80100d8:	6864      	ldr	r4, [r4, #4]
 80100da:	6932      	ldr	r2, [r6, #16]
 80100dc:	6920      	ldr	r0, [r4, #16]
 80100de:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80100e2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80100e6:	6819      	ldr	r1, [r3, #0]
 80100e8:	f001 f886 	bl	80111f8 <uxr_buffer_cancel_data>
 80100ec:	4602      	mov	r2, r0
 80100ee:	6920      	ldr	r0, [r4, #16]
 80100f0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80100f4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80100f8:	f7fa f890 	bl	800a21c <run_xrce_session>
 80100fc:	6920      	ldr	r0, [r4, #16]
 80100fe:	6932      	ldr	r2, [r6, #16]
 8010100:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010104:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010108:	6819      	ldr	r1, [r3, #0]
 801010a:	f7fb fb21 	bl	800b750 <uxr_buffer_delete_entity>
 801010e:	4602      	mov	r2, r0
 8010110:	6920      	ldr	r0, [r4, #16]
 8010112:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010116:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801011a:	f7fa f87f 	bl	800a21c <run_xrce_session>
 801011e:	4603      	mov	r3, r0
 8010120:	4628      	mov	r0, r5
 8010122:	2b00      	cmp	r3, #0
 8010124:	bf14      	ite	ne
 8010126:	2400      	movne	r4, #0
 8010128:	2402      	moveq	r4, #2
 801012a:	f7f9 ffe5 	bl	800a0f8 <rmw_uxrce_fini_service_memory>
 801012e:	e7c4      	b.n	80100ba <rmw_destroy_service+0x12>

08010130 <rmw_destroy_subscription>:
 8010130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010134:	b128      	cbz	r0, 8010142 <rmw_destroy_subscription+0x12>
 8010136:	4604      	mov	r4, r0
 8010138:	6800      	ldr	r0, [r0, #0]
 801013a:	460d      	mov	r5, r1
 801013c:	f7fa f8e8 	bl	800a310 <is_uxrce_rmw_identifier_valid>
 8010140:	b918      	cbnz	r0, 801014a <rmw_destroy_subscription+0x1a>
 8010142:	2401      	movs	r4, #1
 8010144:	4620      	mov	r0, r4
 8010146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801014a:	6863      	ldr	r3, [r4, #4]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d0f8      	beq.n	8010142 <rmw_destroy_subscription+0x12>
 8010150:	fab5 f485 	clz	r4, r5
 8010154:	0964      	lsrs	r4, r4, #5
 8010156:	2d00      	cmp	r5, #0
 8010158:	d0f3      	beq.n	8010142 <rmw_destroy_subscription+0x12>
 801015a:	6828      	ldr	r0, [r5, #0]
 801015c:	f7fa f8d8 	bl	800a310 <is_uxrce_rmw_identifier_valid>
 8010160:	2800      	cmp	r0, #0
 8010162:	d0ee      	beq.n	8010142 <rmw_destroy_subscription+0x12>
 8010164:	686e      	ldr	r6, [r5, #4]
 8010166:	2e00      	cmp	r6, #0
 8010168:	d0eb      	beq.n	8010142 <rmw_destroy_subscription+0x12>
 801016a:	6a37      	ldr	r7, [r6, #32]
 801016c:	6972      	ldr	r2, [r6, #20]
 801016e:	6938      	ldr	r0, [r7, #16]
 8010170:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010174:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010178:	6819      	ldr	r1, [r3, #0]
 801017a:	f001 f83d 	bl	80111f8 <uxr_buffer_cancel_data>
 801017e:	4602      	mov	r2, r0
 8010180:	6938      	ldr	r0, [r7, #16]
 8010182:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010186:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801018a:	f7fa f847 	bl	800a21c <run_xrce_session>
 801018e:	69f0      	ldr	r0, [r6, #28]
 8010190:	f7ff fe52 	bl	800fe38 <destroy_topic>
 8010194:	6a33      	ldr	r3, [r6, #32]
 8010196:	6972      	ldr	r2, [r6, #20]
 8010198:	6918      	ldr	r0, [r3, #16]
 801019a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801019e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80101a2:	6819      	ldr	r1, [r3, #0]
 80101a4:	f7fb fad4 	bl	800b750 <uxr_buffer_delete_entity>
 80101a8:	6a33      	ldr	r3, [r6, #32]
 80101aa:	4680      	mov	r8, r0
 80101ac:	6932      	ldr	r2, [r6, #16]
 80101ae:	6918      	ldr	r0, [r3, #16]
 80101b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80101b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80101b8:	6819      	ldr	r1, [r3, #0]
 80101ba:	f7fb fac9 	bl	800b750 <uxr_buffer_delete_entity>
 80101be:	4606      	mov	r6, r0
 80101c0:	6938      	ldr	r0, [r7, #16]
 80101c2:	4642      	mov	r2, r8
 80101c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80101c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80101cc:	f7fa f826 	bl	800a21c <run_xrce_session>
 80101d0:	693f      	ldr	r7, [r7, #16]
 80101d2:	4632      	mov	r2, r6
 80101d4:	4606      	mov	r6, r0
 80101d6:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80101da:	4638      	mov	r0, r7
 80101dc:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80101e0:	f7fa f81c 	bl	800a21c <run_xrce_session>
 80101e4:	b126      	cbz	r6, 80101f0 <rmw_destroy_subscription+0xc0>
 80101e6:	b118      	cbz	r0, 80101f0 <rmw_destroy_subscription+0xc0>
 80101e8:	4628      	mov	r0, r5
 80101ea:	f7f9 ff6f 	bl	800a0cc <rmw_uxrce_fini_subscription_memory>
 80101ee:	e7a9      	b.n	8010144 <rmw_destroy_subscription+0x14>
 80101f0:	2402      	movs	r4, #2
 80101f2:	e7f9      	b.n	80101e8 <rmw_destroy_subscription+0xb8>

080101f4 <rmw_uxrce_transport_init>:
 80101f4:	b508      	push	{r3, lr}
 80101f6:	b108      	cbz	r0, 80101fc <rmw_uxrce_transport_init+0x8>
 80101f8:	f100 0210 	add.w	r2, r0, #16
 80101fc:	b139      	cbz	r1, 801020e <rmw_uxrce_transport_init+0x1a>
 80101fe:	6949      	ldr	r1, [r1, #20]
 8010200:	4610      	mov	r0, r2
 8010202:	f000 fa77 	bl	80106f4 <uxr_init_custom_transport>
 8010206:	f080 0001 	eor.w	r0, r0, #1
 801020a:	b2c0      	uxtb	r0, r0
 801020c:	bd08      	pop	{r3, pc}
 801020e:	4b04      	ldr	r3, [pc, #16]	; (8010220 <rmw_uxrce_transport_init+0x2c>)
 8010210:	4610      	mov	r0, r2
 8010212:	6859      	ldr	r1, [r3, #4]
 8010214:	f000 fa6e 	bl	80106f4 <uxr_init_custom_transport>
 8010218:	f080 0001 	eor.w	r0, r0, #1
 801021c:	b2c0      	uxtb	r0, r0
 801021e:	bd08      	pop	{r3, pc}
 8010220:	20009f74 	.word	0x20009f74

08010224 <rmw_uros_epoch_nanos>:
 8010224:	4b05      	ldr	r3, [pc, #20]	; (801023c <rmw_uros_epoch_nanos+0x18>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	b123      	cbz	r3, 8010234 <rmw_uros_epoch_nanos+0x10>
 801022a:	6898      	ldr	r0, [r3, #8]
 801022c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010230:	f7fb bd2e 	b.w	800bc90 <uxr_epoch_nanos>
 8010234:	2000      	movs	r0, #0
 8010236:	2100      	movs	r1, #0
 8010238:	4770      	bx	lr
 801023a:	bf00      	nop
 801023c:	2000e88c 	.word	0x2000e88c

08010240 <example_interfaces__msg__MultiArrayDimension__get_type_hash>:
 8010240:	4800      	ldr	r0, [pc, #0]	; (8010244 <example_interfaces__msg__MultiArrayDimension__get_type_hash+0x4>)
 8010242:	4770      	bx	lr
 8010244:	200005f4 	.word	0x200005f4

08010248 <example_interfaces__msg__MultiArrayDimension__get_type_description>:
 8010248:	4b03      	ldr	r3, [pc, #12]	; (8010258 <example_interfaces__msg__MultiArrayDimension__get_type_description+0x10>)
 801024a:	781a      	ldrb	r2, [r3, #0]
 801024c:	b90a      	cbnz	r2, 8010252 <example_interfaces__msg__MultiArrayDimension__get_type_description+0xa>
 801024e:	2201      	movs	r2, #1
 8010250:	701a      	strb	r2, [r3, #0]
 8010252:	4802      	ldr	r0, [pc, #8]	; (801025c <example_interfaces__msg__MultiArrayDimension__get_type_description+0x14>)
 8010254:	4770      	bx	lr
 8010256:	bf00      	nop
 8010258:	2000ea49 	.word	0x2000ea49
 801025c:	08017fe4 	.word	0x08017fe4

08010260 <example_interfaces__msg__MultiArrayDimension__get_individual_type_description_source>:
 8010260:	4800      	ldr	r0, [pc, #0]	; (8010264 <example_interfaces__msg__MultiArrayDimension__get_individual_type_description_source+0x4>)
 8010262:	4770      	bx	lr
 8010264:	08018008 	.word	0x08018008

08010268 <example_interfaces__msg__MultiArrayDimension__get_type_description_sources>:
 8010268:	4b09      	ldr	r3, [pc, #36]	; (8010290 <example_interfaces__msg__MultiArrayDimension__get_type_description_sources+0x28>)
 801026a:	781a      	ldrb	r2, [r3, #0]
 801026c:	b96a      	cbnz	r2, 801028a <example_interfaces__msg__MultiArrayDimension__get_type_description_sources+0x22>
 801026e:	2201      	movs	r2, #1
 8010270:	b430      	push	{r4, r5}
 8010272:	4d08      	ldr	r5, [pc, #32]	; (8010294 <example_interfaces__msg__MultiArrayDimension__get_type_description_sources+0x2c>)
 8010274:	4c08      	ldr	r4, [pc, #32]	; (8010298 <example_interfaces__msg__MultiArrayDimension__get_type_description_sources+0x30>)
 8010276:	701a      	strb	r2, [r3, #0]
 8010278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801027a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801027c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801027e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010280:	682b      	ldr	r3, [r5, #0]
 8010282:	4806      	ldr	r0, [pc, #24]	; (801029c <example_interfaces__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 8010284:	6023      	str	r3, [r4, #0]
 8010286:	bc30      	pop	{r4, r5}
 8010288:	4770      	bx	lr
 801028a:	4804      	ldr	r0, [pc, #16]	; (801029c <example_interfaces__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 801028c:	4770      	bx	lr
 801028e:	bf00      	nop
 8010290:	2000ea48 	.word	0x2000ea48
 8010294:	08018008 	.word	0x08018008
 8010298:	2000ea4c 	.word	0x2000ea4c
 801029c:	0801802c 	.word	0x0801802c

080102a0 <example_interfaces__msg__MultiArrayDimension__Sequence__init.part.0>:
 80102a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102a4:	b086      	sub	sp, #24
 80102a6:	4689      	mov	r9, r1
 80102a8:	4682      	mov	sl, r0
 80102aa:	a801      	add	r0, sp, #4
 80102ac:	f7f9 fb62 	bl	8009974 <rcutils_get_default_allocator>
 80102b0:	f1b9 0f00 	cmp.w	r9, #0
 80102b4:	d02e      	beq.n	8010314 <example_interfaces__msg__MultiArrayDimension__Sequence__init.part.0+0x74>
 80102b6:	2114      	movs	r1, #20
 80102b8:	4648      	mov	r0, r9
 80102ba:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 80102be:	4642      	mov	r2, r8
 80102c0:	4798      	blx	r3
 80102c2:	4607      	mov	r7, r0
 80102c4:	b380      	cbz	r0, 8010328 <example_interfaces__msg__MultiArrayDimension__Sequence__init.part.0+0x88>
 80102c6:	4606      	mov	r6, r0
 80102c8:	2400      	movs	r4, #0
 80102ca:	e003      	b.n	80102d4 <example_interfaces__msg__MultiArrayDimension__Sequence__init.part.0+0x34>
 80102cc:	3401      	adds	r4, #1
 80102ce:	3614      	adds	r6, #20
 80102d0:	45a1      	cmp	r9, r4
 80102d2:	d020      	beq.n	8010316 <example_interfaces__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 80102d4:	4630      	mov	r0, r6
 80102d6:	f002 fb69 	bl	80129ac <rosidl_runtime_c__String__init>
 80102da:	4605      	mov	r5, r0
 80102dc:	2800      	cmp	r0, #0
 80102de:	d1f5      	bne.n	80102cc <example_interfaces__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 80102e0:	4630      	mov	r0, r6
 80102e2:	f002 fb79 	bl	80129d8 <rosidl_runtime_c__String__fini>
 80102e6:	45a1      	cmp	r9, r4
 80102e8:	d915      	bls.n	8010316 <example_interfaces__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 80102ea:	b15c      	cbz	r4, 8010304 <example_interfaces__msg__MultiArrayDimension__Sequence__init.part.0+0x64>
 80102ec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80102f0:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80102f4:	3c14      	subs	r4, #20
 80102f6:	4620      	mov	r0, r4
 80102f8:	f002 fb6e 	bl	80129d8 <rosidl_runtime_c__String__fini>
 80102fc:	42a7      	cmp	r7, r4
 80102fe:	f1a4 0414 	sub.w	r4, r4, #20
 8010302:	d1f8      	bne.n	80102f6 <example_interfaces__msg__MultiArrayDimension__Sequence__init.part.0+0x56>
 8010304:	4638      	mov	r0, r7
 8010306:	9b02      	ldr	r3, [sp, #8]
 8010308:	4641      	mov	r1, r8
 801030a:	4798      	blx	r3
 801030c:	4628      	mov	r0, r5
 801030e:	b006      	add	sp, #24
 8010310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010314:	464f      	mov	r7, r9
 8010316:	2501      	movs	r5, #1
 8010318:	f8ca 9008 	str.w	r9, [sl, #8]
 801031c:	e9ca 7900 	strd	r7, r9, [sl]
 8010320:	4628      	mov	r0, r5
 8010322:	b006      	add	sp, #24
 8010324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010328:	4605      	mov	r5, r0
 801032a:	e7f9      	b.n	8010320 <example_interfaces__msg__MultiArrayDimension__Sequence__init.part.0+0x80>

0801032c <example_interfaces__msg__MultiArrayDimension__init>:
 801032c:	b538      	push	{r3, r4, r5, lr}
 801032e:	4604      	mov	r4, r0
 8010330:	b128      	cbz	r0, 801033e <example_interfaces__msg__MultiArrayDimension__init+0x12>
 8010332:	f002 fb3b 	bl	80129ac <rosidl_runtime_c__String__init>
 8010336:	4605      	mov	r5, r0
 8010338:	b120      	cbz	r0, 8010344 <example_interfaces__msg__MultiArrayDimension__init+0x18>
 801033a:	4628      	mov	r0, r5
 801033c:	bd38      	pop	{r3, r4, r5, pc}
 801033e:	4605      	mov	r5, r0
 8010340:	4628      	mov	r0, r5
 8010342:	bd38      	pop	{r3, r4, r5, pc}
 8010344:	4620      	mov	r0, r4
 8010346:	f002 fb47 	bl	80129d8 <rosidl_runtime_c__String__fini>
 801034a:	4628      	mov	r0, r5
 801034c:	bd38      	pop	{r3, r4, r5, pc}
 801034e:	bf00      	nop

08010350 <example_interfaces__msg__MultiArrayDimension__fini>:
 8010350:	b108      	cbz	r0, 8010356 <example_interfaces__msg__MultiArrayDimension__fini+0x6>
 8010352:	f002 bb41 	b.w	80129d8 <rosidl_runtime_c__String__fini>
 8010356:	4770      	bx	lr

08010358 <example_interfaces__msg__MultiArrayDimension__Sequence__init>:
 8010358:	b108      	cbz	r0, 801035e <example_interfaces__msg__MultiArrayDimension__Sequence__init+0x6>
 801035a:	f7ff bfa1 	b.w	80102a0 <example_interfaces__msg__MultiArrayDimension__Sequence__init.part.0>
 801035e:	4770      	bx	lr

08010360 <example_interfaces__msg__MultiArrayDimension__Sequence__fini>:
 8010360:	b320      	cbz	r0, 80103ac <example_interfaces__msg__MultiArrayDimension__Sequence__fini+0x4c>
 8010362:	b530      	push	{r4, r5, lr}
 8010364:	b087      	sub	sp, #28
 8010366:	4605      	mov	r5, r0
 8010368:	a801      	add	r0, sp, #4
 801036a:	f7f9 fb03 	bl	8009974 <rcutils_get_default_allocator>
 801036e:	682a      	ldr	r2, [r5, #0]
 8010370:	b1b2      	cbz	r2, 80103a0 <example_interfaces__msg__MultiArrayDimension__Sequence__fini+0x40>
 8010372:	68a9      	ldr	r1, [r5, #8]
 8010374:	b161      	cbz	r1, 8010390 <example_interfaces__msg__MultiArrayDimension__Sequence__fini+0x30>
 8010376:	2400      	movs	r4, #0
 8010378:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801037c:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 8010380:	d010      	beq.n	80103a4 <example_interfaces__msg__MultiArrayDimension__Sequence__fini+0x44>
 8010382:	f002 fb29 	bl	80129d8 <rosidl_runtime_c__String__fini>
 8010386:	3401      	adds	r4, #1
 8010388:	68a9      	ldr	r1, [r5, #8]
 801038a:	682a      	ldr	r2, [r5, #0]
 801038c:	428c      	cmp	r4, r1
 801038e:	d3f3      	bcc.n	8010378 <example_interfaces__msg__MultiArrayDimension__Sequence__fini+0x18>
 8010390:	9b02      	ldr	r3, [sp, #8]
 8010392:	4610      	mov	r0, r2
 8010394:	9905      	ldr	r1, [sp, #20]
 8010396:	4798      	blx	r3
 8010398:	2300      	movs	r3, #0
 801039a:	e9c5 3300 	strd	r3, r3, [r5]
 801039e:	60ab      	str	r3, [r5, #8]
 80103a0:	b007      	add	sp, #28
 80103a2:	bd30      	pop	{r4, r5, pc}
 80103a4:	3401      	adds	r4, #1
 80103a6:	428c      	cmp	r4, r1
 80103a8:	d3e6      	bcc.n	8010378 <example_interfaces__msg__MultiArrayDimension__Sequence__fini+0x18>
 80103aa:	e7f1      	b.n	8010390 <example_interfaces__msg__MultiArrayDimension__Sequence__fini+0x30>
 80103ac:	4770      	bx	lr
 80103ae:	bf00      	nop

080103b0 <example_interfaces__msg__MultiArrayLayout__get_type_hash>:
 80103b0:	4800      	ldr	r0, [pc, #0]	; (80103b4 <example_interfaces__msg__MultiArrayLayout__get_type_hash+0x4>)
 80103b2:	4770      	bx	lr
 80103b4:	20000878 	.word	0x20000878

080103b8 <example_interfaces__msg__MultiArrayLayout__get_type_description>:
 80103b8:	b510      	push	{r4, lr}
 80103ba:	4c08      	ldr	r4, [pc, #32]	; (80103dc <example_interfaces__msg__MultiArrayLayout__get_type_description+0x24>)
 80103bc:	7820      	ldrb	r0, [r4, #0]
 80103be:	b108      	cbz	r0, 80103c4 <example_interfaces__msg__MultiArrayLayout__get_type_description+0xc>
 80103c0:	4807      	ldr	r0, [pc, #28]	; (80103e0 <example_interfaces__msg__MultiArrayLayout__get_type_description+0x28>)
 80103c2:	bd10      	pop	{r4, pc}
 80103c4:	f7ff ff40 	bl	8010248 <example_interfaces__msg__MultiArrayDimension__get_type_description>
 80103c8:	300c      	adds	r0, #12
 80103ca:	4b06      	ldr	r3, [pc, #24]	; (80103e4 <example_interfaces__msg__MultiArrayLayout__get_type_description+0x2c>)
 80103cc:	c807      	ldmia	r0, {r0, r1, r2}
 80103ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80103d2:	2301      	movs	r3, #1
 80103d4:	4802      	ldr	r0, [pc, #8]	; (80103e0 <example_interfaces__msg__MultiArrayLayout__get_type_description+0x28>)
 80103d6:	7023      	strb	r3, [r4, #0]
 80103d8:	bd10      	pop	{r4, pc}
 80103da:	bf00      	nop
 80103dc:	2000ea71 	.word	0x2000ea71
 80103e0:	08018038 	.word	0x08018038
 80103e4:	20000844 	.word	0x20000844

080103e8 <example_interfaces__msg__MultiArrayLayout__get_individual_type_description_source>:
 80103e8:	4800      	ldr	r0, [pc, #0]	; (80103ec <example_interfaces__msg__MultiArrayLayout__get_individual_type_description_source+0x4>)
 80103ea:	4770      	bx	lr
 80103ec:	0801805c 	.word	0x0801805c

080103f0 <example_interfaces__msg__MultiArrayLayout__get_type_description_sources>:
 80103f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103f2:	4e0f      	ldr	r6, [pc, #60]	; (8010430 <example_interfaces__msg__MultiArrayLayout__get_type_description_sources+0x40>)
 80103f4:	7837      	ldrb	r7, [r6, #0]
 80103f6:	b10f      	cbz	r7, 80103fc <example_interfaces__msg__MultiArrayLayout__get_type_description_sources+0xc>
 80103f8:	480e      	ldr	r0, [pc, #56]	; (8010434 <example_interfaces__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 80103fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103fc:	4d0e      	ldr	r5, [pc, #56]	; (8010438 <example_interfaces__msg__MultiArrayLayout__get_type_description_sources+0x48>)
 80103fe:	4c0f      	ldr	r4, [pc, #60]	; (801043c <example_interfaces__msg__MultiArrayLayout__get_type_description_sources+0x4c>)
 8010400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010408:	682b      	ldr	r3, [r5, #0]
 801040a:	4638      	mov	r0, r7
 801040c:	f844 3b04 	str.w	r3, [r4], #4
 8010410:	f7ff ff26 	bl	8010260 <example_interfaces__msg__MultiArrayDimension__get_individual_type_description_source>
 8010414:	2301      	movs	r3, #1
 8010416:	4684      	mov	ip, r0
 8010418:	7033      	strb	r3, [r6, #0]
 801041a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801041e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010420:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010426:	f8dc 3000 	ldr.w	r3, [ip]
 801042a:	4802      	ldr	r0, [pc, #8]	; (8010434 <example_interfaces__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 801042c:	6023      	str	r3, [r4, #0]
 801042e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010430:	2000ea70 	.word	0x2000ea70
 8010434:	08018080 	.word	0x08018080
 8010438:	0801805c 	.word	0x0801805c
 801043c:	2000ea74 	.word	0x2000ea74

08010440 <example_interfaces__msg__MultiArrayLayout__init>:
 8010440:	b538      	push	{r3, r4, r5, lr}
 8010442:	4604      	mov	r4, r0
 8010444:	b130      	cbz	r0, 8010454 <example_interfaces__msg__MultiArrayLayout__init+0x14>
 8010446:	2100      	movs	r1, #0
 8010448:	f7ff ff86 	bl	8010358 <example_interfaces__msg__MultiArrayDimension__Sequence__init>
 801044c:	4605      	mov	r5, r0
 801044e:	b120      	cbz	r0, 801045a <example_interfaces__msg__MultiArrayLayout__init+0x1a>
 8010450:	4628      	mov	r0, r5
 8010452:	bd38      	pop	{r3, r4, r5, pc}
 8010454:	4605      	mov	r5, r0
 8010456:	4628      	mov	r0, r5
 8010458:	bd38      	pop	{r3, r4, r5, pc}
 801045a:	4620      	mov	r0, r4
 801045c:	f7ff ff80 	bl	8010360 <example_interfaces__msg__MultiArrayDimension__Sequence__fini>
 8010460:	4628      	mov	r0, r5
 8010462:	bd38      	pop	{r3, r4, r5, pc}

08010464 <example_interfaces__msg__MultiArrayLayout__fini>:
 8010464:	b108      	cbz	r0, 801046a <example_interfaces__msg__MultiArrayLayout__fini+0x6>
 8010466:	f7ff bf7b 	b.w	8010360 <example_interfaces__msg__MultiArrayDimension__Sequence__fini>
 801046a:	4770      	bx	lr

0801046c <example_interfaces__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 801046c:	f7ff bf5e 	b.w	801032c <example_interfaces__msg__MultiArrayDimension__init>

08010470 <example_interfaces__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 8010470:	f7ff bf6e 	b.w	8010350 <example_interfaces__msg__MultiArrayDimension__fini>

08010474 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayDimension>:
 8010474:	4b04      	ldr	r3, [pc, #16]	; (8010488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayDimension+0x14>)
 8010476:	681a      	ldr	r2, [r3, #0]
 8010478:	b10a      	cbz	r2, 801047e <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayDimension+0xa>
 801047a:	4803      	ldr	r0, [pc, #12]	; (8010488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayDimension+0x14>)
 801047c:	4770      	bx	lr
 801047e:	4a03      	ldr	r2, [pc, #12]	; (801048c <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayDimension+0x18>)
 8010480:	4801      	ldr	r0, [pc, #4]	; (8010488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayDimension+0x14>)
 8010482:	6812      	ldr	r2, [r2, #0]
 8010484:	601a      	str	r2, [r3, #0]
 8010486:	4770      	bx	lr
 8010488:	20000d9c 	.word	0x20000d9c
 801048c:	20000110 	.word	0x20000110

08010490 <_MultiArrayDimension__cdr_serialize>:
 8010490:	b1d0      	cbz	r0, 80104c8 <_MultiArrayDimension__cdr_serialize+0x38>
 8010492:	b570      	push	{r4, r5, r6, lr}
 8010494:	6806      	ldr	r6, [r0, #0]
 8010496:	4604      	mov	r4, r0
 8010498:	460d      	mov	r5, r1
 801049a:	b196      	cbz	r6, 80104c2 <_MultiArrayDimension__cdr_serialize+0x32>
 801049c:	4630      	mov	r0, r6
 801049e:	f7ef ff29 	bl	80002f4 <strlen>
 80104a2:	1c42      	adds	r2, r0, #1
 80104a4:	4631      	mov	r1, r6
 80104a6:	6060      	str	r0, [r4, #4]
 80104a8:	4628      	mov	r0, r5
 80104aa:	f7f9 f80b 	bl	80094c4 <ucdr_serialize_sequence_char>
 80104ae:	68e1      	ldr	r1, [r4, #12]
 80104b0:	4628      	mov	r0, r5
 80104b2:	f7fa fca3 	bl	800adfc <ucdr_serialize_uint32_t>
 80104b6:	6921      	ldr	r1, [r4, #16]
 80104b8:	4628      	mov	r0, r5
 80104ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104be:	f7fa bc9d 	b.w	800adfc <ucdr_serialize_uint32_t>
 80104c2:	4632      	mov	r2, r6
 80104c4:	4630      	mov	r0, r6
 80104c6:	e7ed      	b.n	80104a4 <_MultiArrayDimension__cdr_serialize+0x14>
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop

080104cc <get_serialized_size_example_interfaces__msg__MultiArrayDimension>:
 80104cc:	b570      	push	{r4, r5, r6, lr}
 80104ce:	4604      	mov	r4, r0
 80104d0:	b1b0      	cbz	r0, 8010500 <get_serialized_size_example_interfaces__msg__MultiArrayDimension+0x34>
 80104d2:	460d      	mov	r5, r1
 80104d4:	2104      	movs	r1, #4
 80104d6:	4628      	mov	r0, r5
 80104d8:	f7f8 ff84 	bl	80093e4 <ucdr_alignment>
 80104dc:	6866      	ldr	r6, [r4, #4]
 80104de:	1d6b      	adds	r3, r5, #5
 80104e0:	2104      	movs	r1, #4
 80104e2:	f1c5 0504 	rsb	r5, r5, #4
 80104e6:	4433      	add	r3, r6
 80104e8:	181e      	adds	r6, r3, r0
 80104ea:	4630      	mov	r0, r6
 80104ec:	f7f8 ff7a 	bl	80093e4 <ucdr_alignment>
 80104f0:	2104      	movs	r1, #4
 80104f2:	1844      	adds	r4, r0, r1
 80104f4:	4434      	add	r4, r6
 80104f6:	4620      	mov	r0, r4
 80104f8:	f7f8 ff74 	bl	80093e4 <ucdr_alignment>
 80104fc:	4428      	add	r0, r5
 80104fe:	4420      	add	r0, r4
 8010500:	bd70      	pop	{r4, r5, r6, pc}
 8010502:	bf00      	nop

08010504 <_MultiArrayDimension__cdr_deserialize>:
 8010504:	b570      	push	{r4, r5, r6, lr}
 8010506:	460c      	mov	r4, r1
 8010508:	b082      	sub	sp, #8
 801050a:	b1d9      	cbz	r1, 8010544 <_MultiArrayDimension__cdr_deserialize+0x40>
 801050c:	688e      	ldr	r6, [r1, #8]
 801050e:	ab01      	add	r3, sp, #4
 8010510:	6809      	ldr	r1, [r1, #0]
 8010512:	4605      	mov	r5, r0
 8010514:	4632      	mov	r2, r6
 8010516:	f7f8 ffe7 	bl	80094e8 <ucdr_deserialize_sequence_char>
 801051a:	9b01      	ldr	r3, [sp, #4]
 801051c:	b970      	cbnz	r0, 801053c <_MultiArrayDimension__cdr_deserialize+0x38>
 801051e:	429e      	cmp	r6, r3
 8010520:	d313      	bcc.n	801054a <_MultiArrayDimension__cdr_deserialize+0x46>
 8010522:	f104 010c 	add.w	r1, r4, #12
 8010526:	4628      	mov	r0, r5
 8010528:	f7fa fd98 	bl	800b05c <ucdr_deserialize_uint32_t>
 801052c:	f104 0110 	add.w	r1, r4, #16
 8010530:	4628      	mov	r0, r5
 8010532:	b002      	add	sp, #8
 8010534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010538:	f7fa bd90 	b.w	800b05c <ucdr_deserialize_uint32_t>
 801053c:	b103      	cbz	r3, 8010540 <_MultiArrayDimension__cdr_deserialize+0x3c>
 801053e:	3b01      	subs	r3, #1
 8010540:	6063      	str	r3, [r4, #4]
 8010542:	e7ee      	b.n	8010522 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8010544:	4608      	mov	r0, r1
 8010546:	b002      	add	sp, #8
 8010548:	bd70      	pop	{r4, r5, r6, pc}
 801054a:	2101      	movs	r1, #1
 801054c:	75a8      	strb	r0, [r5, #22]
 801054e:	7569      	strb	r1, [r5, #21]
 8010550:	6060      	str	r0, [r4, #4]
 8010552:	4628      	mov	r0, r5
 8010554:	f7f8 ff5e 	bl	8009414 <ucdr_align_to>
 8010558:	9901      	ldr	r1, [sp, #4]
 801055a:	4628      	mov	r0, r5
 801055c:	f7f8 ff92 	bl	8009484 <ucdr_advance_buffer>
 8010560:	e7df      	b.n	8010522 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8010562:	bf00      	nop

08010564 <_MultiArrayDimension__max_serialized_size>:
 8010564:	b510      	push	{r4, lr}
 8010566:	2104      	movs	r1, #4
 8010568:	2000      	movs	r0, #0
 801056a:	f7f8 ff3b 	bl	80093e4 <ucdr_alignment>
 801056e:	2104      	movs	r1, #4
 8010570:	1844      	adds	r4, r0, r1
 8010572:	4620      	mov	r0, r4
 8010574:	f7f8 ff36 	bl	80093e4 <ucdr_alignment>
 8010578:	3004      	adds	r0, #4
 801057a:	4420      	add	r0, r4
 801057c:	bd10      	pop	{r4, pc}
 801057e:	bf00      	nop

08010580 <_MultiArrayDimension__get_serialized_size>:
 8010580:	b510      	push	{r4, lr}
 8010582:	4604      	mov	r4, r0
 8010584:	b190      	cbz	r0, 80105ac <_MultiArrayDimension__get_serialized_size+0x2c>
 8010586:	2104      	movs	r1, #4
 8010588:	2000      	movs	r0, #0
 801058a:	f7f8 ff2b 	bl	80093e4 <ucdr_alignment>
 801058e:	6863      	ldr	r3, [r4, #4]
 8010590:	2104      	movs	r1, #4
 8010592:	3305      	adds	r3, #5
 8010594:	181c      	adds	r4, r3, r0
 8010596:	4620      	mov	r0, r4
 8010598:	f7f8 ff24 	bl	80093e4 <ucdr_alignment>
 801059c:	2104      	movs	r1, #4
 801059e:	4408      	add	r0, r1
 80105a0:	4404      	add	r4, r0
 80105a2:	4620      	mov	r0, r4
 80105a4:	f7f8 ff1e 	bl	80093e4 <ucdr_alignment>
 80105a8:	3004      	adds	r0, #4
 80105aa:	4420      	add	r0, r4
 80105ac:	bd10      	pop	{r4, pc}
 80105ae:	bf00      	nop

080105b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayDimension>:
 80105b0:	4800      	ldr	r0, [pc, #0]	; (80105b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__example_interfaces__msg__MultiArrayDimension+0x4>)
 80105b2:	4770      	bx	lr
 80105b4:	20000db4 	.word	0x20000db4

080105b8 <ucdr_serialize_string>:
 80105b8:	b510      	push	{r4, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	4604      	mov	r4, r0
 80105be:	4608      	mov	r0, r1
 80105c0:	9101      	str	r1, [sp, #4]
 80105c2:	f7ef fe97 	bl	80002f4 <strlen>
 80105c6:	4602      	mov	r2, r0
 80105c8:	9901      	ldr	r1, [sp, #4]
 80105ca:	4620      	mov	r0, r4
 80105cc:	3201      	adds	r2, #1
 80105ce:	b002      	add	sp, #8
 80105d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105d4:	f7f8 bf76 	b.w	80094c4 <ucdr_serialize_sequence_char>

080105d8 <ucdr_deserialize_string>:
 80105d8:	b500      	push	{lr}
 80105da:	b083      	sub	sp, #12
 80105dc:	ab01      	add	r3, sp, #4
 80105de:	f7f8 ff83 	bl	80094e8 <ucdr_deserialize_sequence_char>
 80105e2:	b003      	add	sp, #12
 80105e4:	f85d fb04 	ldr.w	pc, [sp], #4

080105e8 <get_custom_error>:
 80105e8:	4b01      	ldr	r3, [pc, #4]	; (80105f0 <get_custom_error+0x8>)
 80105ea:	7818      	ldrb	r0, [r3, #0]
 80105ec:	4770      	bx	lr
 80105ee:	bf00      	nop
 80105f0:	2000eabc 	.word	0x2000eabc

080105f4 <recv_custom_msg>:
 80105f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105f8:	4693      	mov	fp, r2
 80105fa:	b089      	sub	sp, #36	; 0x24
 80105fc:	2200      	movs	r2, #0
 80105fe:	4604      	mov	r4, r0
 8010600:	468a      	mov	sl, r1
 8010602:	9305      	str	r3, [sp, #20]
 8010604:	f88d 201e 	strb.w	r2, [sp, #30]
 8010608:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 801060c:	b322      	cbz	r2, 8010658 <recv_custom_msg+0x64>
 801060e:	f200 2902 	addw	r9, r0, #514	; 0x202
 8010612:	f10d 081f 	add.w	r8, sp, #31
 8010616:	af05      	add	r7, sp, #20
 8010618:	f10d 061e 	add.w	r6, sp, #30
 801061c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8010620:	e002      	b.n	8010628 <recv_custom_msg+0x34>
 8010622:	9b05      	ldr	r3, [sp, #20]
 8010624:	2b00      	cmp	r3, #0
 8010626:	dd0f      	ble.n	8010648 <recv_custom_msg+0x54>
 8010628:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 801062c:	4623      	mov	r3, r4
 801062e:	4622      	mov	r2, r4
 8010630:	4648      	mov	r0, r9
 8010632:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010636:	e9cd 5600 	strd	r5, r6, [sp]
 801063a:	f001 f8d7 	bl	80117ec <uxr_read_framed_msg>
 801063e:	2800      	cmp	r0, #0
 8010640:	d0ef      	beq.n	8010622 <recv_custom_msg+0x2e>
 8010642:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010646:	b1b3      	cbz	r3, 8010676 <recv_custom_msg+0x82>
 8010648:	4b0f      	ldr	r3, [pc, #60]	; (8010688 <recv_custom_msg+0x94>)
 801064a:	2000      	movs	r0, #0
 801064c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010650:	701a      	strb	r2, [r3, #0]
 8010652:	b009      	add	sp, #36	; 0x24
 8010654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010658:	f10d 021f 	add.w	r2, sp, #31
 801065c:	4601      	mov	r1, r0
 801065e:	9200      	str	r2, [sp, #0]
 8010660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010664:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8010668:	47a8      	blx	r5
 801066a:	2800      	cmp	r0, #0
 801066c:	d0ec      	beq.n	8010648 <recv_custom_msg+0x54>
 801066e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d1e8      	bne.n	8010648 <recv_custom_msg+0x54>
 8010676:	f8cb 0000 	str.w	r0, [fp]
 801067a:	2001      	movs	r0, #1
 801067c:	f8ca 4000 	str.w	r4, [sl]
 8010680:	b009      	add	sp, #36	; 0x24
 8010682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010686:	bf00      	nop
 8010688:	2000eabc 	.word	0x2000eabc

0801068c <send_custom_msg>:
 801068c:	b530      	push	{r4, r5, lr}
 801068e:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8010692:	b087      	sub	sp, #28
 8010694:	4614      	mov	r4, r2
 8010696:	b995      	cbnz	r5, 80106be <send_custom_msg+0x32>
 8010698:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 801069c:	f10d 0317 	add.w	r3, sp, #23
 80106a0:	47a8      	blx	r5
 80106a2:	1e03      	subs	r3, r0, #0
 80106a4:	bf18      	it	ne
 80106a6:	2301      	movne	r3, #1
 80106a8:	42a0      	cmp	r0, r4
 80106aa:	bf18      	it	ne
 80106ac:	2300      	movne	r3, #0
 80106ae:	b91b      	cbnz	r3, 80106b8 <send_custom_msg+0x2c>
 80106b0:	4a0a      	ldr	r2, [pc, #40]	; (80106dc <send_custom_msg+0x50>)
 80106b2:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80106b6:	7011      	strb	r1, [r2, #0]
 80106b8:	4618      	mov	r0, r3
 80106ba:	b007      	add	sp, #28
 80106bc:	bd30      	pop	{r4, r5, pc}
 80106be:	460b      	mov	r3, r1
 80106c0:	2200      	movs	r2, #0
 80106c2:	f10d 0117 	add.w	r1, sp, #23
 80106c6:	9400      	str	r4, [sp, #0]
 80106c8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80106cc:	4602      	mov	r2, r0
 80106ce:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80106d2:	f200 2002 	addw	r0, r0, #514	; 0x202
 80106d6:	f000 feab 	bl	8011430 <uxr_write_framed_msg>
 80106da:	e7e2      	b.n	80106a2 <send_custom_msg+0x16>
 80106dc:	2000eabc 	.word	0x2000eabc

080106e0 <uxr_set_custom_transport_callbacks>:
 80106e0:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80106e4:	9901      	ldr	r1, [sp, #4]
 80106e6:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80106ea:	9b00      	ldr	r3, [sp, #0]
 80106ec:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop

080106f4 <uxr_init_custom_transport>:
 80106f4:	b538      	push	{r3, r4, r5, lr}
 80106f6:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80106fa:	b303      	cbz	r3, 801073e <uxr_init_custom_transport+0x4a>
 80106fc:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8010700:	4604      	mov	r4, r0
 8010702:	b1e2      	cbz	r2, 801073e <uxr_init_custom_transport+0x4a>
 8010704:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8010708:	b1ca      	cbz	r2, 801073e <uxr_init_custom_transport+0x4a>
 801070a:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801070e:	b1b2      	cbz	r2, 801073e <uxr_init_custom_transport+0x4a>
 8010710:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8010714:	4798      	blx	r3
 8010716:	4605      	mov	r5, r0
 8010718:	b188      	cbz	r0, 801073e <uxr_init_custom_transport+0x4a>
 801071a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801071e:	b98b      	cbnz	r3, 8010744 <uxr_init_custom_transport+0x50>
 8010720:	4b0b      	ldr	r3, [pc, #44]	; (8010750 <uxr_init_custom_transport+0x5c>)
 8010722:	4628      	mov	r0, r5
 8010724:	490b      	ldr	r1, [pc, #44]	; (8010754 <uxr_init_custom_transport+0x60>)
 8010726:	4a0c      	ldr	r2, [pc, #48]	; (8010758 <uxr_init_custom_transport+0x64>)
 8010728:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 801072c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010730:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8010734:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8010738:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 801073c:	bd38      	pop	{r3, r4, r5, pc}
 801073e:	2500      	movs	r5, #0
 8010740:	4628      	mov	r0, r5
 8010742:	bd38      	pop	{r3, r4, r5, pc}
 8010744:	2100      	movs	r1, #0
 8010746:	f204 2002 	addw	r0, r4, #514	; 0x202
 801074a:	f000 fe6b 	bl	8011424 <uxr_init_framing_io>
 801074e:	e7e7      	b.n	8010720 <uxr_init_custom_transport+0x2c>
 8010750:	080105f5 	.word	0x080105f5
 8010754:	0801068d 	.word	0x0801068d
 8010758:	080105e9 	.word	0x080105e9

0801075c <uxr_close_custom_transport>:
 801075c:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8010760:	4718      	bx	r3
 8010762:	bf00      	nop

08010764 <uxr_init_input_best_effort_stream>:
 8010764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010768:	8003      	strh	r3, [r0, #0]
 801076a:	4770      	bx	lr

0801076c <uxr_reset_input_best_effort_stream>:
 801076c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010770:	8003      	strh	r3, [r0, #0]
 8010772:	4770      	bx	lr

08010774 <uxr_receive_best_effort_message>:
 8010774:	b538      	push	{r3, r4, r5, lr}
 8010776:	4604      	mov	r4, r0
 8010778:	8800      	ldrh	r0, [r0, #0]
 801077a:	460d      	mov	r5, r1
 801077c:	f000 fe3a 	bl	80113f4 <uxr_seq_num_cmp>
 8010780:	4603      	mov	r3, r0
 8010782:	0fc0      	lsrs	r0, r0, #31
 8010784:	2b00      	cmp	r3, #0
 8010786:	bfb8      	it	lt
 8010788:	8025      	strhlt	r5, [r4, #0]
 801078a:	bd38      	pop	{r3, r4, r5, pc}

0801078c <on_full_input_buffer>:
 801078c:	b570      	push	{r4, r5, r6, lr}
 801078e:	460c      	mov	r4, r1
 8010790:	4605      	mov	r5, r0
 8010792:	8908      	ldrh	r0, [r1, #8]
 8010794:	682b      	ldr	r3, [r5, #0]
 8010796:	7d26      	ldrb	r6, [r4, #20]
 8010798:	e9d1 1200 	ldrd	r1, r2, [r1]
 801079c:	fbb2 f2f0 	udiv	r2, r2, r0
 80107a0:	eba3 0c01 	sub.w	ip, r3, r1
 80107a4:	fbbc fcf2 	udiv	ip, ip, r2
 80107a8:	f10c 0c01 	add.w	ip, ip, #1
 80107ac:	fa1f f38c 	uxth.w	r3, ip
 80107b0:	fbb3 fcf0 	udiv	ip, r3, r0
 80107b4:	fb00 331c 	mls	r3, r0, ip, r3
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	fb02 f303 	mul.w	r3, r2, r3
 80107be:	1d18      	adds	r0, r3, #4
 80107c0:	4408      	add	r0, r1
 80107c2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80107c6:	b116      	cbz	r6, 80107ce <on_full_input_buffer+0x42>
 80107c8:	2600      	movs	r6, #0
 80107ca:	f840 6c04 	str.w	r6, [r0, #-4]
 80107ce:	2a03      	cmp	r2, #3
 80107d0:	d801      	bhi.n	80107d6 <on_full_input_buffer+0x4a>
 80107d2:	2001      	movs	r0, #1
 80107d4:	bd70      	pop	{r4, r5, r6, pc}
 80107d6:	3308      	adds	r3, #8
 80107d8:	4628      	mov	r0, r5
 80107da:	3a04      	subs	r2, #4
 80107dc:	4419      	add	r1, r3
 80107de:	692b      	ldr	r3, [r5, #16]
 80107e0:	f7f8 fdf4 	bl	80093cc <ucdr_init_buffer_origin>
 80107e4:	4628      	mov	r0, r5
 80107e6:	4622      	mov	r2, r4
 80107e8:	4902      	ldr	r1, [pc, #8]	; (80107f4 <on_full_input_buffer+0x68>)
 80107ea:	f7f8 fdcb 	bl	8009384 <ucdr_set_on_full_buffer_callback>
 80107ee:	2000      	movs	r0, #0
 80107f0:	bd70      	pop	{r4, r5, r6, pc}
 80107f2:	bf00      	nop
 80107f4:	0801078d 	.word	0x0801078d

080107f8 <uxr_init_input_reliable_stream>:
 80107f8:	b510      	push	{r4, lr}
 80107fa:	e9c0 1200 	strd	r1, r2, [r0]
 80107fe:	2400      	movs	r4, #0
 8010800:	9a02      	ldr	r2, [sp, #8]
 8010802:	8103      	strh	r3, [r0, #8]
 8010804:	6102      	str	r2, [r0, #16]
 8010806:	7504      	strb	r4, [r0, #20]
 8010808:	b1c3      	cbz	r3, 801083c <uxr_init_input_reliable_stream+0x44>
 801080a:	600c      	str	r4, [r1, #0]
 801080c:	8901      	ldrh	r1, [r0, #8]
 801080e:	2901      	cmp	r1, #1
 8010810:	d914      	bls.n	801083c <uxr_init_input_reliable_stream+0x44>
 8010812:	f04f 0c01 	mov.w	ip, #1
 8010816:	6843      	ldr	r3, [r0, #4]
 8010818:	f10c 0e01 	add.w	lr, ip, #1
 801081c:	fbbc f2f1 	udiv	r2, ip, r1
 8010820:	fbb3 f3f1 	udiv	r3, r3, r1
 8010824:	fb01 c212 	mls	r2, r1, r2, ip
 8010828:	fa1f fc8e 	uxth.w	ip, lr
 801082c:	b292      	uxth	r2, r2
 801082e:	fb02 f303 	mul.w	r3, r2, r3
 8010832:	6802      	ldr	r2, [r0, #0]
 8010834:	50d4      	str	r4, [r2, r3]
 8010836:	8901      	ldrh	r1, [r0, #8]
 8010838:	4561      	cmp	r1, ip
 801083a:	d8ec      	bhi.n	8010816 <uxr_init_input_reliable_stream+0x1e>
 801083c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010840:	60c3      	str	r3, [r0, #12]
 8010842:	bd10      	pop	{r4, pc}

08010844 <uxr_reset_input_reliable_stream>:
 8010844:	8901      	ldrh	r1, [r0, #8]
 8010846:	b1d9      	cbz	r1, 8010880 <uxr_reset_input_reliable_stream+0x3c>
 8010848:	b510      	push	{r4, lr}
 801084a:	f04f 0e00 	mov.w	lr, #0
 801084e:	46f4      	mov	ip, lr
 8010850:	4674      	mov	r4, lr
 8010852:	6843      	ldr	r3, [r0, #4]
 8010854:	f10e 0e01 	add.w	lr, lr, #1
 8010858:	fbbc f2f1 	udiv	r2, ip, r1
 801085c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010860:	fb01 c212 	mls	r2, r1, r2, ip
 8010864:	fa1f fc8e 	uxth.w	ip, lr
 8010868:	b292      	uxth	r2, r2
 801086a:	fb02 f303 	mul.w	r3, r2, r3
 801086e:	6802      	ldr	r2, [r0, #0]
 8010870:	50d4      	str	r4, [r2, r3]
 8010872:	8901      	ldrh	r1, [r0, #8]
 8010874:	4561      	cmp	r1, ip
 8010876:	d8ec      	bhi.n	8010852 <uxr_reset_input_reliable_stream+0xe>
 8010878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801087c:	60c3      	str	r3, [r0, #12]
 801087e:	bd10      	pop	{r4, pc}
 8010880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010884:	60c3      	str	r3, [r0, #12]
 8010886:	4770      	bx	lr

08010888 <uxr_receive_reliable_message>:
 8010888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801088c:	4604      	mov	r4, r0
 801088e:	460d      	mov	r5, r1
 8010890:	8901      	ldrh	r1, [r0, #8]
 8010892:	4617      	mov	r7, r2
 8010894:	8980      	ldrh	r0, [r0, #12]
 8010896:	4698      	mov	r8, r3
 8010898:	f000 fda4 	bl	80113e4 <uxr_seq_num_add>
 801089c:	4629      	mov	r1, r5
 801089e:	4606      	mov	r6, r0
 80108a0:	89a0      	ldrh	r0, [r4, #12]
 80108a2:	f000 fda7 	bl	80113f4 <uxr_seq_num_cmp>
 80108a6:	2800      	cmp	r0, #0
 80108a8:	db0a      	blt.n	80108c0 <uxr_receive_reliable_message+0x38>
 80108aa:	2600      	movs	r6, #0
 80108ac:	4629      	mov	r1, r5
 80108ae:	89e0      	ldrh	r0, [r4, #14]
 80108b0:	f000 fda0 	bl	80113f4 <uxr_seq_num_cmp>
 80108b4:	2800      	cmp	r0, #0
 80108b6:	da00      	bge.n	80108ba <uxr_receive_reliable_message+0x32>
 80108b8:	81e5      	strh	r5, [r4, #14]
 80108ba:	4630      	mov	r0, r6
 80108bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108c0:	4630      	mov	r0, r6
 80108c2:	4629      	mov	r1, r5
 80108c4:	f000 fd96 	bl	80113f4 <uxr_seq_num_cmp>
 80108c8:	2800      	cmp	r0, #0
 80108ca:	dbee      	blt.n	80108aa <uxr_receive_reliable_message+0x22>
 80108cc:	6923      	ldr	r3, [r4, #16]
 80108ce:	4638      	mov	r0, r7
 80108d0:	4798      	blx	r3
 80108d2:	4681      	mov	r9, r0
 80108d4:	2101      	movs	r1, #1
 80108d6:	89a0      	ldrh	r0, [r4, #12]
 80108d8:	f000 fd84 	bl	80113e4 <uxr_seq_num_add>
 80108dc:	f1b9 0f00 	cmp.w	r9, #0
 80108e0:	bf08      	it	eq
 80108e2:	4285      	cmpeq	r5, r0
 80108e4:	bf0c      	ite	eq
 80108e6:	2601      	moveq	r6, #1
 80108e8:	2600      	movne	r6, #0
 80108ea:	d104      	bne.n	80108f6 <uxr_receive_reliable_message+0x6e>
 80108ec:	2300      	movs	r3, #0
 80108ee:	9a08      	ldr	r2, [sp, #32]
 80108f0:	81a0      	strh	r0, [r4, #12]
 80108f2:	7013      	strb	r3, [r2, #0]
 80108f4:	e7da      	b.n	80108ac <uxr_receive_reliable_message+0x24>
 80108f6:	8922      	ldrh	r2, [r4, #8]
 80108f8:	6863      	ldr	r3, [r4, #4]
 80108fa:	fbb5 f0f2 	udiv	r0, r5, r2
 80108fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8010902:	fb02 5010 	mls	r0, r2, r0, r5
 8010906:	b280      	uxth	r0, r0
 8010908:	fb03 f000 	mul.w	r0, r3, r0
 801090c:	6823      	ldr	r3, [r4, #0]
 801090e:	3004      	adds	r0, #4
 8010910:	4418      	add	r0, r3
 8010912:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d1c7      	bne.n	80108aa <uxr_receive_reliable_message+0x22>
 801091a:	4639      	mov	r1, r7
 801091c:	4642      	mov	r2, r8
 801091e:	f002 f9b3 	bl	8012c88 <memcpy>
 8010922:	8921      	ldrh	r1, [r4, #8]
 8010924:	6863      	ldr	r3, [r4, #4]
 8010926:	fbb5 f2f1 	udiv	r2, r5, r1
 801092a:	fbb3 f3f1 	udiv	r3, r3, r1
 801092e:	fb01 5212 	mls	r2, r1, r2, r5
 8010932:	b292      	uxth	r2, r2
 8010934:	fb02 f303 	mul.w	r3, r2, r3
 8010938:	6822      	ldr	r2, [r4, #0]
 801093a:	f842 8003 	str.w	r8, [r2, r3]
 801093e:	2301      	movs	r3, #1
 8010940:	9a08      	ldr	r2, [sp, #32]
 8010942:	7013      	strb	r3, [r2, #0]
 8010944:	f1b9 0f00 	cmp.w	r9, #0
 8010948:	d0af      	beq.n	80108aa <uxr_receive_reliable_message+0x22>
 801094a:	89a6      	ldrh	r6, [r4, #12]
 801094c:	2101      	movs	r1, #1
 801094e:	4630      	mov	r0, r6
 8010950:	f000 fd48 	bl	80113e4 <uxr_seq_num_add>
 8010954:	8921      	ldrh	r1, [r4, #8]
 8010956:	6863      	ldr	r3, [r4, #4]
 8010958:	4606      	mov	r6, r0
 801095a:	fbb0 f2f1 	udiv	r2, r0, r1
 801095e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010962:	fb01 0212 	mls	r2, r1, r2, r0
 8010966:	6820      	ldr	r0, [r4, #0]
 8010968:	b292      	uxth	r2, r2
 801096a:	fb02 f303 	mul.w	r3, r2, r3
 801096e:	3304      	adds	r3, #4
 8010970:	4418      	add	r0, r3
 8010972:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d097      	beq.n	80108aa <uxr_receive_reliable_message+0x22>
 801097a:	6923      	ldr	r3, [r4, #16]
 801097c:	4798      	blx	r3
 801097e:	2802      	cmp	r0, #2
 8010980:	d002      	beq.n	8010988 <uxr_receive_reliable_message+0x100>
 8010982:	2801      	cmp	r0, #1
 8010984:	d0e2      	beq.n	801094c <uxr_receive_reliable_message+0xc4>
 8010986:	e790      	b.n	80108aa <uxr_receive_reliable_message+0x22>
 8010988:	2601      	movs	r6, #1
 801098a:	e78f      	b.n	80108ac <uxr_receive_reliable_message+0x24>

0801098c <uxr_next_input_reliable_buffer_available>:
 801098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010990:	4604      	mov	r4, r0
 8010992:	460f      	mov	r7, r1
 8010994:	8980      	ldrh	r0, [r0, #12]
 8010996:	2101      	movs	r1, #1
 8010998:	4690      	mov	r8, r2
 801099a:	f000 fd23 	bl	80113e4 <uxr_seq_num_add>
 801099e:	8922      	ldrh	r2, [r4, #8]
 80109a0:	6866      	ldr	r6, [r4, #4]
 80109a2:	fbb0 f3f2 	udiv	r3, r0, r2
 80109a6:	fbb6 f6f2 	udiv	r6, r6, r2
 80109aa:	fb02 0313 	mls	r3, r2, r3, r0
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	fb03 f606 	mul.w	r6, r3, r6
 80109b4:	6823      	ldr	r3, [r4, #0]
 80109b6:	3604      	adds	r6, #4
 80109b8:	441e      	add	r6, r3
 80109ba:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80109be:	f1b9 0f00 	cmp.w	r9, #0
 80109c2:	d023      	beq.n	8010a0c <uxr_next_input_reliable_buffer_available+0x80>
 80109c4:	4605      	mov	r5, r0
 80109c6:	6923      	ldr	r3, [r4, #16]
 80109c8:	4630      	mov	r0, r6
 80109ca:	4798      	blx	r3
 80109cc:	4682      	mov	sl, r0
 80109ce:	b300      	cbz	r0, 8010a12 <uxr_next_input_reliable_buffer_available+0x86>
 80109d0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80109d4:	2101      	movs	r1, #1
 80109d6:	4650      	mov	r0, sl
 80109d8:	f000 fd04 	bl	80113e4 <uxr_seq_num_add>
 80109dc:	8921      	ldrh	r1, [r4, #8]
 80109de:	4682      	mov	sl, r0
 80109e0:	6863      	ldr	r3, [r4, #4]
 80109e2:	6820      	ldr	r0, [r4, #0]
 80109e4:	fbba f2f1 	udiv	r2, sl, r1
 80109e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80109ec:	fb01 a212 	mls	r2, r1, r2, sl
 80109f0:	b292      	uxth	r2, r2
 80109f2:	fb02 f303 	mul.w	r3, r2, r3
 80109f6:	3304      	adds	r3, #4
 80109f8:	4418      	add	r0, r3
 80109fa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80109fe:	b12b      	cbz	r3, 8010a0c <uxr_next_input_reliable_buffer_available+0x80>
 8010a00:	6923      	ldr	r3, [r4, #16]
 8010a02:	4798      	blx	r3
 8010a04:	2802      	cmp	r0, #2
 8010a06:	d01b      	beq.n	8010a40 <uxr_next_input_reliable_buffer_available+0xb4>
 8010a08:	2801      	cmp	r0, #1
 8010a0a:	d0e3      	beq.n	80109d4 <uxr_next_input_reliable_buffer_available+0x48>
 8010a0c:	2000      	movs	r0, #0
 8010a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a12:	464a      	mov	r2, r9
 8010a14:	4631      	mov	r1, r6
 8010a16:	4638      	mov	r0, r7
 8010a18:	f7f8 fce0 	bl	80093dc <ucdr_init_buffer>
 8010a1c:	8921      	ldrh	r1, [r4, #8]
 8010a1e:	6863      	ldr	r3, [r4, #4]
 8010a20:	2001      	movs	r0, #1
 8010a22:	fbb5 f2f1 	udiv	r2, r5, r1
 8010a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8010a2a:	fb01 5212 	mls	r2, r1, r2, r5
 8010a2e:	b292      	uxth	r2, r2
 8010a30:	fb02 f303 	mul.w	r3, r2, r3
 8010a34:	6822      	ldr	r2, [r4, #0]
 8010a36:	f842 a003 	str.w	sl, [r2, r3]
 8010a3a:	81a5      	strh	r5, [r4, #12]
 8010a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a40:	8920      	ldrh	r0, [r4, #8]
 8010a42:	eb06 0108 	add.w	r1, r6, r8
 8010a46:	6863      	ldr	r3, [r4, #4]
 8010a48:	eba9 0208 	sub.w	r2, r9, r8
 8010a4c:	fbb5 f6f0 	udiv	r6, r5, r0
 8010a50:	fbb3 f3f0 	udiv	r3, r3, r0
 8010a54:	fb00 5516 	mls	r5, r0, r6, r5
 8010a58:	2000      	movs	r0, #0
 8010a5a:	b2ad      	uxth	r5, r5
 8010a5c:	fb03 f505 	mul.w	r5, r3, r5
 8010a60:	6823      	ldr	r3, [r4, #0]
 8010a62:	5158      	str	r0, [r3, r5]
 8010a64:	4638      	mov	r0, r7
 8010a66:	f7f8 fcb9 	bl	80093dc <ucdr_init_buffer>
 8010a6a:	4638      	mov	r0, r7
 8010a6c:	4622      	mov	r2, r4
 8010a6e:	4903      	ldr	r1, [pc, #12]	; (8010a7c <uxr_next_input_reliable_buffer_available+0xf0>)
 8010a70:	f7f8 fc88 	bl	8009384 <ucdr_set_on_full_buffer_callback>
 8010a74:	2001      	movs	r0, #1
 8010a76:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8010a7a:	e7c8      	b.n	8010a0e <uxr_next_input_reliable_buffer_available+0x82>
 8010a7c:	0801078d 	.word	0x0801078d

08010a80 <uxr_process_heartbeat>:
 8010a80:	b538      	push	{r3, r4, r5, lr}
 8010a82:	4611      	mov	r1, r2
 8010a84:	4604      	mov	r4, r0
 8010a86:	89c0      	ldrh	r0, [r0, #14]
 8010a88:	4615      	mov	r5, r2
 8010a8a:	f000 fcb3 	bl	80113f4 <uxr_seq_num_cmp>
 8010a8e:	2800      	cmp	r0, #0
 8010a90:	bfb8      	it	lt
 8010a92:	81e5      	strhlt	r5, [r4, #14]
 8010a94:	bd38      	pop	{r3, r4, r5, pc}
 8010a96:	bf00      	nop

08010a98 <uxr_compute_acknack>:
 8010a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a9c:	8903      	ldrh	r3, [r0, #8]
 8010a9e:	4604      	mov	r4, r0
 8010aa0:	460f      	mov	r7, r1
 8010aa2:	8985      	ldrh	r5, [r0, #12]
 8010aa4:	b1db      	cbz	r3, 8010ade <uxr_compute_acknack+0x46>
 8010aa6:	4628      	mov	r0, r5
 8010aa8:	2601      	movs	r6, #1
 8010aaa:	e004      	b.n	8010ab6 <uxr_compute_acknack+0x1e>
 8010aac:	4566      	cmp	r6, ip
 8010aae:	f106 0601 	add.w	r6, r6, #1
 8010ab2:	d214      	bcs.n	8010ade <uxr_compute_acknack+0x46>
 8010ab4:	89a0      	ldrh	r0, [r4, #12]
 8010ab6:	b2b1      	uxth	r1, r6
 8010ab8:	f000 fc94 	bl	80113e4 <uxr_seq_num_add>
 8010abc:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8010ac0:	fbb0 f2fc 	udiv	r2, r0, ip
 8010ac4:	e9d4 1300 	ldrd	r1, r3, [r4]
 8010ac8:	fb0c 0212 	mls	r2, ip, r2, r0
 8010acc:	fbb3 f3fc 	udiv	r3, r3, ip
 8010ad0:	b292      	uxth	r2, r2
 8010ad2:	fb02 f303 	mul.w	r3, r2, r3
 8010ad6:	58cb      	ldr	r3, [r1, r3]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d1e7      	bne.n	8010aac <uxr_compute_acknack+0x14>
 8010adc:	4605      	mov	r5, r0
 8010ade:	803d      	strh	r5, [r7, #0]
 8010ae0:	2101      	movs	r1, #1
 8010ae2:	89e6      	ldrh	r6, [r4, #14]
 8010ae4:	4628      	mov	r0, r5
 8010ae6:	f000 fc81 	bl	80113ec <uxr_seq_num_sub>
 8010aea:	4601      	mov	r1, r0
 8010aec:	4630      	mov	r0, r6
 8010aee:	f000 fc7d 	bl	80113ec <uxr_seq_num_sub>
 8010af2:	4606      	mov	r6, r0
 8010af4:	b328      	cbz	r0, 8010b42 <uxr_compute_acknack+0xaa>
 8010af6:	f04f 0900 	mov.w	r9, #0
 8010afa:	f04f 0801 	mov.w	r8, #1
 8010afe:	464d      	mov	r5, r9
 8010b00:	fa1f f189 	uxth.w	r1, r9
 8010b04:	8838      	ldrh	r0, [r7, #0]
 8010b06:	f000 fc6d 	bl	80113e4 <uxr_seq_num_add>
 8010b0a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8010b0e:	6861      	ldr	r1, [r4, #4]
 8010b10:	fa08 fe09 	lsl.w	lr, r8, r9
 8010b14:	6822      	ldr	r2, [r4, #0]
 8010b16:	f109 0901 	add.w	r9, r9, #1
 8010b1a:	ea4e 0e05 	orr.w	lr, lr, r5
 8010b1e:	fbb0 f3fc 	udiv	r3, r0, ip
 8010b22:	fbb1 f1fc 	udiv	r1, r1, ip
 8010b26:	fb03 001c 	mls	r0, r3, ip, r0
 8010b2a:	b283      	uxth	r3, r0
 8010b2c:	fb01 f303 	mul.w	r3, r1, r3
 8010b30:	58d3      	ldr	r3, [r2, r3]
 8010b32:	b90b      	cbnz	r3, 8010b38 <uxr_compute_acknack+0xa0>
 8010b34:	fa1f f58e 	uxth.w	r5, lr
 8010b38:	454e      	cmp	r6, r9
 8010b3a:	d1e1      	bne.n	8010b00 <uxr_compute_acknack+0x68>
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b42:	4605      	mov	r5, r0
 8010b44:	4628      	mov	r0, r5
 8010b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b4a:	bf00      	nop

08010b4c <uxr_init_output_best_effort_stream>:
 8010b4c:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8010b50:	6001      	str	r1, [r0, #0]
 8010b52:	7303      	strb	r3, [r0, #12]
 8010b54:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8010b58:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8010b5c:	4770      	bx	lr
 8010b5e:	bf00      	nop

08010b60 <uxr_reset_output_best_effort_stream>:
 8010b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b64:	7b03      	ldrb	r3, [r0, #12]
 8010b66:	81c2      	strh	r2, [r0, #14]
 8010b68:	6043      	str	r3, [r0, #4]
 8010b6a:	4770      	bx	lr

08010b6c <uxr_prepare_best_effort_buffer_to_write>:
 8010b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b6e:	4604      	mov	r4, r0
 8010b70:	b083      	sub	sp, #12
 8010b72:	6840      	ldr	r0, [r0, #4]
 8010b74:	460d      	mov	r5, r1
 8010b76:	4616      	mov	r6, r2
 8010b78:	f7fc f950 	bl	800ce1c <uxr_submessage_padding>
 8010b7c:	6863      	ldr	r3, [r4, #4]
 8010b7e:	4418      	add	r0, r3
 8010b80:	68a3      	ldr	r3, [r4, #8]
 8010b82:	1942      	adds	r2, r0, r5
 8010b84:	4293      	cmp	r3, r2
 8010b86:	bf2c      	ite	cs
 8010b88:	2701      	movcs	r7, #1
 8010b8a:	2700      	movcc	r7, #0
 8010b8c:	d202      	bcs.n	8010b94 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8010b8e:	4638      	mov	r0, r7
 8010b90:	b003      	add	sp, #12
 8010b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b94:	9000      	str	r0, [sp, #0]
 8010b96:	2300      	movs	r3, #0
 8010b98:	4630      	mov	r0, r6
 8010b9a:	6821      	ldr	r1, [r4, #0]
 8010b9c:	f7f8 fc0c 	bl	80093b8 <ucdr_init_buffer_origin_offset>
 8010ba0:	6861      	ldr	r1, [r4, #4]
 8010ba2:	4638      	mov	r0, r7
 8010ba4:	4429      	add	r1, r5
 8010ba6:	6061      	str	r1, [r4, #4]
 8010ba8:	b003      	add	sp, #12
 8010baa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010bac <uxr_prepare_best_effort_buffer_to_send>:
 8010bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bb0:	4604      	mov	r4, r0
 8010bb2:	461d      	mov	r5, r3
 8010bb4:	6840      	ldr	r0, [r0, #4]
 8010bb6:	7b23      	ldrb	r3, [r4, #12]
 8010bb8:	4298      	cmp	r0, r3
 8010bba:	bf8c      	ite	hi
 8010bbc:	2601      	movhi	r6, #1
 8010bbe:	2600      	movls	r6, #0
 8010bc0:	d802      	bhi.n	8010bc8 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8010bc2:	4630      	mov	r0, r6
 8010bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bc8:	4688      	mov	r8, r1
 8010bca:	89e0      	ldrh	r0, [r4, #14]
 8010bcc:	2101      	movs	r1, #1
 8010bce:	4617      	mov	r7, r2
 8010bd0:	f000 fc08 	bl	80113e4 <uxr_seq_num_add>
 8010bd4:	6823      	ldr	r3, [r4, #0]
 8010bd6:	81e0      	strh	r0, [r4, #14]
 8010bd8:	8028      	strh	r0, [r5, #0]
 8010bda:	4630      	mov	r0, r6
 8010bdc:	f8c8 3000 	str.w	r3, [r8]
 8010be0:	6863      	ldr	r3, [r4, #4]
 8010be2:	603b      	str	r3, [r7, #0]
 8010be4:	7b23      	ldrb	r3, [r4, #12]
 8010be6:	6063      	str	r3, [r4, #4]
 8010be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010bec <on_full_output_buffer>:
 8010bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bee:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8010bf2:	460c      	mov	r4, r1
 8010bf4:	6803      	ldr	r3, [r0, #0]
 8010bf6:	4605      	mov	r5, r0
 8010bf8:	7b26      	ldrb	r6, [r4, #12]
 8010bfa:	e9d1 1200 	ldrd	r1, r2, [r1]
 8010bfe:	fbb2 f2fc 	udiv	r2, r2, ip
 8010c02:	eba3 0e01 	sub.w	lr, r3, r1
 8010c06:	6903      	ldr	r3, [r0, #16]
 8010c08:	fbbe fef2 	udiv	lr, lr, r2
 8010c0c:	f10e 0e01 	add.w	lr, lr, #1
 8010c10:	fa1f fe8e 	uxth.w	lr, lr
 8010c14:	fbbe f7fc 	udiv	r7, lr, ip
 8010c18:	fb0c ec17 	mls	ip, ip, r7, lr
 8010c1c:	fa1f fc8c 	uxth.w	ip, ip
 8010c20:	fb02 fc0c 	mul.w	ip, r2, ip
 8010c24:	f851 200c 	ldr.w	r2, [r1, ip]
 8010c28:	44b4      	add	ip, r6
 8010c2a:	1b92      	subs	r2, r2, r6
 8010c2c:	f10c 0c08 	add.w	ip, ip, #8
 8010c30:	3a04      	subs	r2, #4
 8010c32:	4461      	add	r1, ip
 8010c34:	f7f8 fbca 	bl	80093cc <ucdr_init_buffer_origin>
 8010c38:	4628      	mov	r0, r5
 8010c3a:	4622      	mov	r2, r4
 8010c3c:	4902      	ldr	r1, [pc, #8]	; (8010c48 <on_full_output_buffer+0x5c>)
 8010c3e:	f7f8 fba1 	bl	8009384 <ucdr_set_on_full_buffer_callback>
 8010c42:	2000      	movs	r0, #0
 8010c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c46:	bf00      	nop
 8010c48:	08010bed 	.word	0x08010bed

08010c4c <uxr_init_output_reliable_stream>:
 8010c4c:	b530      	push	{r4, r5, lr}
 8010c4e:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8010c52:	8103      	strh	r3, [r0, #8]
 8010c54:	7304      	strb	r4, [r0, #12]
 8010c56:	e9c0 1200 	strd	r1, r2, [r0]
 8010c5a:	b1e3      	cbz	r3, 8010c96 <uxr_init_output_reliable_stream+0x4a>
 8010c5c:	600c      	str	r4, [r1, #0]
 8010c5e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8010c62:	f1bc 0f01 	cmp.w	ip, #1
 8010c66:	d916      	bls.n	8010c96 <uxr_init_output_reliable_stream+0x4a>
 8010c68:	f04f 0e01 	mov.w	lr, #1
 8010c6c:	6843      	ldr	r3, [r0, #4]
 8010c6e:	f10e 0501 	add.w	r5, lr, #1
 8010c72:	7b04      	ldrb	r4, [r0, #12]
 8010c74:	6801      	ldr	r1, [r0, #0]
 8010c76:	fbbe f2fc 	udiv	r2, lr, ip
 8010c7a:	fbb3 f3fc 	udiv	r3, r3, ip
 8010c7e:	fb0c e212 	mls	r2, ip, r2, lr
 8010c82:	fa1f fe85 	uxth.w	lr, r5
 8010c86:	b292      	uxth	r2, r2
 8010c88:	fb02 f303 	mul.w	r3, r2, r3
 8010c8c:	50cc      	str	r4, [r1, r3]
 8010c8e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8010c92:	45f4      	cmp	ip, lr
 8010c94:	d8ea      	bhi.n	8010c6c <uxr_init_output_reliable_stream+0x20>
 8010c96:	4b07      	ldr	r3, [pc, #28]	; (8010cb4 <uxr_init_output_reliable_stream+0x68>)
 8010c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010ca0:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8010ca4:	f8c0 300e 	str.w	r3, [r0, #14]
 8010ca8:	2300      	movs	r3, #0
 8010caa:	8242      	strh	r2, [r0, #18]
 8010cac:	8403      	strh	r3, [r0, #32]
 8010cae:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8010cb2:	bd30      	pop	{r4, r5, pc}
 8010cb4:	ffff0000 	.word	0xffff0000

08010cb8 <uxr_reset_output_reliable_stream>:
 8010cb8:	8901      	ldrh	r1, [r0, #8]
 8010cba:	b510      	push	{r4, lr}
 8010cbc:	b1b1      	cbz	r1, 8010cec <uxr_reset_output_reliable_stream+0x34>
 8010cbe:	f04f 0e00 	mov.w	lr, #0
 8010cc2:	46f4      	mov	ip, lr
 8010cc4:	6843      	ldr	r3, [r0, #4]
 8010cc6:	f10e 0e01 	add.w	lr, lr, #1
 8010cca:	7b04      	ldrb	r4, [r0, #12]
 8010ccc:	fbbc f2f1 	udiv	r2, ip, r1
 8010cd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8010cd4:	fb01 c212 	mls	r2, r1, r2, ip
 8010cd8:	fa1f fc8e 	uxth.w	ip, lr
 8010cdc:	b292      	uxth	r2, r2
 8010cde:	fb02 f303 	mul.w	r3, r2, r3
 8010ce2:	6802      	ldr	r2, [r0, #0]
 8010ce4:	50d4      	str	r4, [r2, r3]
 8010ce6:	8901      	ldrh	r1, [r0, #8]
 8010ce8:	4561      	cmp	r1, ip
 8010cea:	d8eb      	bhi.n	8010cc4 <uxr_reset_output_reliable_stream+0xc>
 8010cec:	4b08      	ldr	r3, [pc, #32]	; (8010d10 <uxr_reset_output_reliable_stream+0x58>)
 8010cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cf2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 8010d08 <uxr_reset_output_reliable_stream+0x50>
 8010cf6:	f8c0 300e 	str.w	r3, [r0, #14]
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	8242      	strh	r2, [r0, #18]
 8010cfe:	8403      	strh	r3, [r0, #32]
 8010d00:	ed80 7b06 	vstr	d7, [r0, #24]
 8010d04:	bd10      	pop	{r4, pc}
 8010d06:	bf00      	nop
 8010d08:	ffffffff 	.word	0xffffffff
 8010d0c:	7fffffff 	.word	0x7fffffff
 8010d10:	ffff0000 	.word	0xffff0000

08010d14 <uxr_prepare_reliable_buffer_to_write>:
 8010d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d18:	4604      	mov	r4, r0
 8010d1a:	b091      	sub	sp, #68	; 0x44
 8010d1c:	8900      	ldrh	r0, [r0, #8]
 8010d1e:	468b      	mov	fp, r1
 8010d20:	89e6      	ldrh	r6, [r4, #14]
 8010d22:	9204      	str	r2, [sp, #16]
 8010d24:	6865      	ldr	r5, [r4, #4]
 8010d26:	6823      	ldr	r3, [r4, #0]
 8010d28:	f894 900c 	ldrb.w	r9, [r4, #12]
 8010d2c:	fbb6 f2f0 	udiv	r2, r6, r0
 8010d30:	fbb5 f5f0 	udiv	r5, r5, r0
 8010d34:	fb00 6212 	mls	r2, r0, r2, r6
 8010d38:	1f2f      	subs	r7, r5, #4
 8010d3a:	b292      	uxth	r2, r2
 8010d3c:	fb05 3202 	mla	r2, r5, r2, r3
 8010d40:	1d11      	adds	r1, r2, #4
 8010d42:	f8d2 8000 	ldr.w	r8, [r2]
 8010d46:	9103      	str	r1, [sp, #12]
 8010d48:	2800      	cmp	r0, #0
 8010d4a:	f000 814a 	beq.w	8010fe2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8010d4e:	f04f 0c00 	mov.w	ip, #0
 8010d52:	46e2      	mov	sl, ip
 8010d54:	4661      	mov	r1, ip
 8010d56:	f10c 0c01 	add.w	ip, ip, #1
 8010d5a:	fbb1 f2f0 	udiv	r2, r1, r0
 8010d5e:	fb00 1212 	mls	r2, r0, r2, r1
 8010d62:	fa1f f18c 	uxth.w	r1, ip
 8010d66:	b292      	uxth	r2, r2
 8010d68:	fb05 f202 	mul.w	r2, r5, r2
 8010d6c:	589a      	ldr	r2, [r3, r2]
 8010d6e:	454a      	cmp	r2, r9
 8010d70:	d103      	bne.n	8010d7a <uxr_prepare_reliable_buffer_to_write+0x66>
 8010d72:	f10a 0a01 	add.w	sl, sl, #1
 8010d76:	fa1f fa8a 	uxth.w	sl, sl
 8010d7a:	4281      	cmp	r1, r0
 8010d7c:	d3eb      	bcc.n	8010d56 <uxr_prepare_reliable_buffer_to_write+0x42>
 8010d7e:	4640      	mov	r0, r8
 8010d80:	2104      	movs	r1, #4
 8010d82:	f8cd a014 	str.w	sl, [sp, #20]
 8010d86:	f7f8 fb2d 	bl	80093e4 <ucdr_alignment>
 8010d8a:	4480      	add	r8, r0
 8010d8c:	eb08 020b 	add.w	r2, r8, fp
 8010d90:	42ba      	cmp	r2, r7
 8010d92:	f240 80ca 	bls.w	8010f2a <uxr_prepare_reliable_buffer_to_write+0x216>
 8010d96:	7b22      	ldrb	r2, [r4, #12]
 8010d98:	445a      	add	r2, fp
 8010d9a:	42ba      	cmp	r2, r7
 8010d9c:	f240 80b2 	bls.w	8010f04 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8010da0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010da4:	b2bb      	uxth	r3, r7
 8010da6:	eba2 0209 	sub.w	r2, r2, r9
 8010daa:	441a      	add	r2, r3
 8010dac:	b292      	uxth	r2, r2
 8010dae:	fb0a f902 	mul.w	r9, sl, r2
 8010db2:	9205      	str	r2, [sp, #20]
 8010db4:	45d9      	cmp	r9, fp
 8010db6:	9206      	str	r2, [sp, #24]
 8010db8:	f0c0 80b3 	bcc.w	8010f22 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8010dbc:	f108 0204 	add.w	r2, r8, #4
 8010dc0:	42ba      	cmp	r2, r7
 8010dc2:	f080 80da 	bcs.w	8010f7a <uxr_prepare_reliable_buffer_to_write+0x266>
 8010dc6:	f1a3 0904 	sub.w	r9, r3, #4
 8010dca:	9b05      	ldr	r3, [sp, #20]
 8010dcc:	eba9 0908 	sub.w	r9, r9, r8
 8010dd0:	fa1f f989 	uxth.w	r9, r9
 8010dd4:	ebab 0b09 	sub.w	fp, fp, r9
 8010dd8:	fbbb f2f3 	udiv	r2, fp, r3
 8010ddc:	fb03 b312 	mls	r3, r3, r2, fp
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	f040 80c4 	bne.w	8010f6e <uxr_prepare_reliable_buffer_to_write+0x25a>
 8010de6:	b293      	uxth	r3, r2
 8010de8:	4553      	cmp	r3, sl
 8010dea:	f200 809a 	bhi.w	8010f22 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	f000 80f9 	beq.w	8010fe6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8010df4:	f8cd 801c 	str.w	r8, [sp, #28]
 8010df8:	f04f 0a00 	mov.w	sl, #0
 8010dfc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010e00:	f10d 0b20 	add.w	fp, sp, #32
 8010e04:	9505      	str	r5, [sp, #20]
 8010e06:	461d      	mov	r5, r3
 8010e08:	e000      	b.n	8010e0c <uxr_prepare_reliable_buffer_to_write+0xf8>
 8010e0a:	46c1      	mov	r9, r8
 8010e0c:	8922      	ldrh	r2, [r4, #8]
 8010e0e:	4658      	mov	r0, fp
 8010e10:	6863      	ldr	r3, [r4, #4]
 8010e12:	f10a 0a01 	add.w	sl, sl, #1
 8010e16:	fbb6 f1f2 	udiv	r1, r6, r2
 8010e1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e1e:	fb02 6111 	mls	r1, r2, r1, r6
 8010e22:	463a      	mov	r2, r7
 8010e24:	b289      	uxth	r1, r1
 8010e26:	fb03 f101 	mul.w	r1, r3, r1
 8010e2a:	6823      	ldr	r3, [r4, #0]
 8010e2c:	3104      	adds	r1, #4
 8010e2e:	4419      	add	r1, r3
 8010e30:	2300      	movs	r3, #0
 8010e32:	f851 cc04 	ldr.w	ip, [r1, #-4]
 8010e36:	f8cd c000 	str.w	ip, [sp]
 8010e3a:	f7f8 fabd 	bl	80093b8 <ucdr_init_buffer_origin_offset>
 8010e3e:	464a      	mov	r2, r9
 8010e40:	2300      	movs	r3, #0
 8010e42:	210d      	movs	r1, #13
 8010e44:	4658      	mov	r0, fp
 8010e46:	f7fb ffa9 	bl	800cd9c <uxr_buffer_submessage_header>
 8010e4a:	8921      	ldrh	r1, [r4, #8]
 8010e4c:	6863      	ldr	r3, [r4, #4]
 8010e4e:	4630      	mov	r0, r6
 8010e50:	fbb6 f2f1 	udiv	r2, r6, r1
 8010e54:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e58:	fb01 6212 	mls	r2, r1, r2, r6
 8010e5c:	2101      	movs	r1, #1
 8010e5e:	b292      	uxth	r2, r2
 8010e60:	fb02 f303 	mul.w	r3, r2, r3
 8010e64:	6822      	ldr	r2, [r4, #0]
 8010e66:	50d7      	str	r7, [r2, r3]
 8010e68:	f000 fabc 	bl	80113e4 <uxr_seq_num_add>
 8010e6c:	4606      	mov	r6, r0
 8010e6e:	fa1f f38a 	uxth.w	r3, sl
 8010e72:	429d      	cmp	r5, r3
 8010e74:	d8c9      	bhi.n	8010e0a <uxr_prepare_reliable_buffer_to_write+0xf6>
 8010e76:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8010e7a:	9d05      	ldr	r5, [sp, #20]
 8010e7c:	8920      	ldrh	r0, [r4, #8]
 8010e7e:	463a      	mov	r2, r7
 8010e80:	6863      	ldr	r3, [r4, #4]
 8010e82:	fbb6 f1f0 	udiv	r1, r6, r0
 8010e86:	fbb3 f3f0 	udiv	r3, r3, r0
 8010e8a:	fb00 6111 	mls	r1, r0, r1, r6
 8010e8e:	4658      	mov	r0, fp
 8010e90:	b289      	uxth	r1, r1
 8010e92:	fb01 f303 	mul.w	r3, r1, r3
 8010e96:	6821      	ldr	r1, [r4, #0]
 8010e98:	3304      	adds	r3, #4
 8010e9a:	4419      	add	r1, r3
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 8010ea2:	9700      	str	r7, [sp, #0]
 8010ea4:	f7f8 fa88 	bl	80093b8 <ucdr_init_buffer_origin_offset>
 8010ea8:	9f06      	ldr	r7, [sp, #24]
 8010eaa:	4658      	mov	r0, fp
 8010eac:	2302      	movs	r3, #2
 8010eae:	b2ba      	uxth	r2, r7
 8010eb0:	210d      	movs	r1, #13
 8010eb2:	f7fb ff73 	bl	800cd9c <uxr_buffer_submessage_header>
 8010eb6:	f108 0104 	add.w	r1, r8, #4
 8010eba:	9b03      	ldr	r3, [sp, #12]
 8010ebc:	f1a5 0208 	sub.w	r2, r5, #8
 8010ec0:	8925      	ldrh	r5, [r4, #8]
 8010ec2:	440b      	add	r3, r1
 8010ec4:	eba2 0208 	sub.w	r2, r2, r8
 8010ec8:	fbb6 f0f5 	udiv	r0, r6, r5
 8010ecc:	4619      	mov	r1, r3
 8010ece:	6863      	ldr	r3, [r4, #4]
 8010ed0:	fb05 6010 	mls	r0, r5, r0, r6
 8010ed4:	fbb3 f3f5 	udiv	r3, r3, r5
 8010ed8:	b280      	uxth	r0, r0
 8010eda:	6825      	ldr	r5, [r4, #0]
 8010edc:	fb00 f303 	mul.w	r3, r0, r3
 8010ee0:	7b20      	ldrb	r0, [r4, #12]
 8010ee2:	3004      	adds	r0, #4
 8010ee4:	4438      	add	r0, r7
 8010ee6:	50e8      	str	r0, [r5, r3]
 8010ee8:	9d04      	ldr	r5, [sp, #16]
 8010eea:	4628      	mov	r0, r5
 8010eec:	f7f8 fa76 	bl	80093dc <ucdr_init_buffer>
 8010ef0:	4628      	mov	r0, r5
 8010ef2:	4622      	mov	r2, r4
 8010ef4:	493d      	ldr	r1, [pc, #244]	; (8010fec <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8010ef6:	f7f8 fa45 	bl	8009384 <ucdr_set_on_full_buffer_callback>
 8010efa:	2001      	movs	r0, #1
 8010efc:	81e6      	strh	r6, [r4, #14]
 8010efe:	b011      	add	sp, #68	; 0x44
 8010f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f04:	2101      	movs	r1, #1
 8010f06:	89e0      	ldrh	r0, [r4, #14]
 8010f08:	f000 fa6c 	bl	80113e4 <uxr_seq_num_add>
 8010f0c:	4605      	mov	r5, r0
 8010f0e:	8921      	ldrh	r1, [r4, #8]
 8010f10:	8a60      	ldrh	r0, [r4, #18]
 8010f12:	f000 fa67 	bl	80113e4 <uxr_seq_num_add>
 8010f16:	4601      	mov	r1, r0
 8010f18:	4628      	mov	r0, r5
 8010f1a:	f000 fa6b 	bl	80113f4 <uxr_seq_num_cmp>
 8010f1e:	2800      	cmp	r0, #0
 8010f20:	dd44      	ble.n	8010fac <uxr_prepare_reliable_buffer_to_write+0x298>
 8010f22:	2000      	movs	r0, #0
 8010f24:	b011      	add	sp, #68	; 0x44
 8010f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f2a:	8921      	ldrh	r1, [r4, #8]
 8010f2c:	8a60      	ldrh	r0, [r4, #18]
 8010f2e:	9205      	str	r2, [sp, #20]
 8010f30:	f000 fa58 	bl	80113e4 <uxr_seq_num_add>
 8010f34:	4601      	mov	r1, r0
 8010f36:	4630      	mov	r0, r6
 8010f38:	f000 fa5c 	bl	80113f4 <uxr_seq_num_cmp>
 8010f3c:	2800      	cmp	r0, #0
 8010f3e:	9a05      	ldr	r2, [sp, #20]
 8010f40:	dcef      	bgt.n	8010f22 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8010f42:	8925      	ldrh	r5, [r4, #8]
 8010f44:	e9d4 7300 	ldrd	r7, r3, [r4]
 8010f48:	fbb6 f4f5 	udiv	r4, r6, r5
 8010f4c:	fbb3 f3f5 	udiv	r3, r3, r5
 8010f50:	fb05 6414 	mls	r4, r5, r4, r6
 8010f54:	b2a4      	uxth	r4, r4
 8010f56:	fb04 f303 	mul.w	r3, r4, r3
 8010f5a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8010f5e:	50fa      	str	r2, [r7, r3]
 8010f60:	2300      	movs	r3, #0
 8010f62:	f8cd 8000 	str.w	r8, [sp]
 8010f66:	f7f8 fa27 	bl	80093b8 <ucdr_init_buffer_origin_offset>
 8010f6a:	2001      	movs	r0, #1
 8010f6c:	e7da      	b.n	8010f24 <uxr_prepare_reliable_buffer_to_write+0x210>
 8010f6e:	3201      	adds	r2, #1
 8010f70:	9306      	str	r3, [sp, #24]
 8010f72:	b293      	uxth	r3, r2
 8010f74:	4553      	cmp	r3, sl
 8010f76:	d8d4      	bhi.n	8010f22 <uxr_prepare_reliable_buffer_to_write+0x20e>
 8010f78:	e739      	b.n	8010dee <uxr_prepare_reliable_buffer_to_write+0xda>
 8010f7a:	4630      	mov	r0, r6
 8010f7c:	2101      	movs	r1, #1
 8010f7e:	9307      	str	r3, [sp, #28]
 8010f80:	f000 fa30 	bl	80113e4 <uxr_seq_num_add>
 8010f84:	4606      	mov	r6, r0
 8010f86:	8920      	ldrh	r0, [r4, #8]
 8010f88:	6862      	ldr	r2, [r4, #4]
 8010f8a:	fbb6 f1f0 	udiv	r1, r6, r0
 8010f8e:	fbb2 f2f0 	udiv	r2, r2, r0
 8010f92:	fb00 6111 	mls	r1, r0, r1, r6
 8010f96:	b289      	uxth	r1, r1
 8010f98:	fb01 f202 	mul.w	r2, r1, r2
 8010f9c:	6821      	ldr	r1, [r4, #0]
 8010f9e:	3204      	adds	r2, #4
 8010fa0:	188b      	adds	r3, r1, r2
 8010fa2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8010fa6:	9303      	str	r3, [sp, #12]
 8010fa8:	9b07      	ldr	r3, [sp, #28]
 8010faa:	e70c      	b.n	8010dc6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8010fac:	8921      	ldrh	r1, [r4, #8]
 8010fae:	6863      	ldr	r3, [r4, #4]
 8010fb0:	9804      	ldr	r0, [sp, #16]
 8010fb2:	fbb5 f2f1 	udiv	r2, r5, r1
 8010fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8010fba:	fb01 5212 	mls	r2, r1, r2, r5
 8010fbe:	6821      	ldr	r1, [r4, #0]
 8010fc0:	b292      	uxth	r2, r2
 8010fc2:	fb02 f303 	mul.w	r3, r2, r3
 8010fc6:	7b22      	ldrb	r2, [r4, #12]
 8010fc8:	3304      	adds	r3, #4
 8010fca:	445a      	add	r2, fp
 8010fcc:	4419      	add	r1, r3
 8010fce:	f841 2c04 	str.w	r2, [r1, #-4]
 8010fd2:	7b23      	ldrb	r3, [r4, #12]
 8010fd4:	9300      	str	r3, [sp, #0]
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	f7f8 f9ee 	bl	80093b8 <ucdr_init_buffer_origin_offset>
 8010fdc:	2001      	movs	r0, #1
 8010fde:	81e5      	strh	r5, [r4, #14]
 8010fe0:	e7a0      	b.n	8010f24 <uxr_prepare_reliable_buffer_to_write+0x210>
 8010fe2:	4682      	mov	sl, r0
 8010fe4:	e6cb      	b.n	8010d7e <uxr_prepare_reliable_buffer_to_write+0x6a>
 8010fe6:	f10d 0b20 	add.w	fp, sp, #32
 8010fea:	e747      	b.n	8010e7c <uxr_prepare_reliable_buffer_to_write+0x168>
 8010fec:	08010bed 	.word	0x08010bed

08010ff0 <uxr_prepare_next_reliable_buffer_to_send>:
 8010ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ff2:	4604      	mov	r4, r0
 8010ff4:	461d      	mov	r5, r3
 8010ff6:	460f      	mov	r7, r1
 8010ff8:	8a00      	ldrh	r0, [r0, #16]
 8010ffa:	2101      	movs	r1, #1
 8010ffc:	4616      	mov	r6, r2
 8010ffe:	f000 f9f1 	bl	80113e4 <uxr_seq_num_add>
 8011002:	8028      	strh	r0, [r5, #0]
 8011004:	8922      	ldrh	r2, [r4, #8]
 8011006:	6863      	ldr	r3, [r4, #4]
 8011008:	fbb0 f1f2 	udiv	r1, r0, r2
 801100c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011010:	fb02 0c11 	mls	ip, r2, r1, r0
 8011014:	89e1      	ldrh	r1, [r4, #14]
 8011016:	fa1f fc8c 	uxth.w	ip, ip
 801101a:	fb0c fc03 	mul.w	ip, ip, r3
 801101e:	6823      	ldr	r3, [r4, #0]
 8011020:	f10c 0c04 	add.w	ip, ip, #4
 8011024:	4463      	add	r3, ip
 8011026:	603b      	str	r3, [r7, #0]
 8011028:	6823      	ldr	r3, [r4, #0]
 801102a:	449c      	add	ip, r3
 801102c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8011030:	6033      	str	r3, [r6, #0]
 8011032:	f000 f9df 	bl	80113f4 <uxr_seq_num_cmp>
 8011036:	2800      	cmp	r0, #0
 8011038:	dd01      	ble.n	801103e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801103a:	2000      	movs	r0, #0
 801103c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801103e:	7b23      	ldrb	r3, [r4, #12]
 8011040:	6832      	ldr	r2, [r6, #0]
 8011042:	429a      	cmp	r2, r3
 8011044:	d9f9      	bls.n	801103a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8011046:	8a61      	ldrh	r1, [r4, #18]
 8011048:	8a20      	ldrh	r0, [r4, #16]
 801104a:	f000 f9cf 	bl	80113ec <uxr_seq_num_sub>
 801104e:	8923      	ldrh	r3, [r4, #8]
 8011050:	4283      	cmp	r3, r0
 8011052:	d0f2      	beq.n	801103a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8011054:	8828      	ldrh	r0, [r5, #0]
 8011056:	89e3      	ldrh	r3, [r4, #14]
 8011058:	8220      	strh	r0, [r4, #16]
 801105a:	4298      	cmp	r0, r3
 801105c:	d001      	beq.n	8011062 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801105e:	2001      	movs	r0, #1
 8011060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011062:	2101      	movs	r1, #1
 8011064:	f000 f9be 	bl	80113e4 <uxr_seq_num_add>
 8011068:	4603      	mov	r3, r0
 801106a:	2001      	movs	r0, #1
 801106c:	81e3      	strh	r3, [r4, #14]
 801106e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011070 <uxr_update_output_stream_heartbeat_timestamp>:
 8011070:	b570      	push	{r4, r5, r6, lr}
 8011072:	8a01      	ldrh	r1, [r0, #16]
 8011074:	4604      	mov	r4, r0
 8011076:	8a40      	ldrh	r0, [r0, #18]
 8011078:	4615      	mov	r5, r2
 801107a:	461e      	mov	r6, r3
 801107c:	f000 f9ba 	bl	80113f4 <uxr_seq_num_cmp>
 8011080:	2800      	cmp	r0, #0
 8011082:	db07      	blt.n	8011094 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8011084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011088:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801108c:	2000      	movs	r0, #0
 801108e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8011092:	bd70      	pop	{r4, r5, r6, pc}
 8011094:	f894 0020 	ldrb.w	r0, [r4, #32]
 8011098:	b940      	cbnz	r0, 80110ac <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801109a:	2301      	movs	r3, #1
 801109c:	f884 3020 	strb.w	r3, [r4, #32]
 80110a0:	3564      	adds	r5, #100	; 0x64
 80110a2:	f146 0600 	adc.w	r6, r6, #0
 80110a6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80110aa:	bd70      	pop	{r4, r5, r6, pc}
 80110ac:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80110b0:	4295      	cmp	r5, r2
 80110b2:	eb76 0303 	sbcs.w	r3, r6, r3
 80110b6:	db04      	blt.n	80110c2 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 80110b8:	1c43      	adds	r3, r0, #1
 80110ba:	2001      	movs	r0, #1
 80110bc:	f884 3020 	strb.w	r3, [r4, #32]
 80110c0:	e7ee      	b.n	80110a0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80110c2:	2000      	movs	r0, #0
 80110c4:	e7ec      	b.n	80110a0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80110c6:	bf00      	nop

080110c8 <uxr_begin_output_nack_buffer_it>:
 80110c8:	8a40      	ldrh	r0, [r0, #18]
 80110ca:	4770      	bx	lr

080110cc <uxr_next_reliable_nack_buffer_to_send>:
 80110cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110d0:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 80110d4:	b197      	cbz	r7, 80110fc <uxr_next_reliable_nack_buffer_to_send+0x30>
 80110d6:	4680      	mov	r8, r0
 80110d8:	460d      	mov	r5, r1
 80110da:	4616      	mov	r6, r2
 80110dc:	461c      	mov	r4, r3
 80110de:	8818      	ldrh	r0, [r3, #0]
 80110e0:	2101      	movs	r1, #1
 80110e2:	f000 f97f 	bl	80113e4 <uxr_seq_num_add>
 80110e6:	8020      	strh	r0, [r4, #0]
 80110e8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 80110ec:	f000 f982 	bl	80113f4 <uxr_seq_num_cmp>
 80110f0:	2800      	cmp	r0, #0
 80110f2:	dd06      	ble.n	8011102 <uxr_next_reliable_nack_buffer_to_send+0x36>
 80110f4:	2300      	movs	r3, #0
 80110f6:	461f      	mov	r7, r3
 80110f8:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 80110fc:	4638      	mov	r0, r7
 80110fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011102:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8011106:	8820      	ldrh	r0, [r4, #0]
 8011108:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801110c:	fbb0 f3f2 	udiv	r3, r0, r2
 8011110:	fbb1 fcf2 	udiv	ip, r1, r2
 8011114:	fb02 0313 	mls	r3, r2, r3, r0
 8011118:	b29b      	uxth	r3, r3
 801111a:	fb03 fc0c 	mul.w	ip, r3, ip
 801111e:	f8d8 3000 	ldr.w	r3, [r8]
 8011122:	f10c 0c04 	add.w	ip, ip, #4
 8011126:	4463      	add	r3, ip
 8011128:	602b      	str	r3, [r5, #0]
 801112a:	f8d8 3000 	ldr.w	r3, [r8]
 801112e:	4463      	add	r3, ip
 8011130:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011134:	6033      	str	r3, [r6, #0]
 8011136:	f898 200c 	ldrb.w	r2, [r8, #12]
 801113a:	429a      	cmp	r2, r3
 801113c:	d0d0      	beq.n	80110e0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801113e:	e7dd      	b.n	80110fc <uxr_next_reliable_nack_buffer_to_send+0x30>

08011140 <uxr_process_acknack>:
 8011140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011142:	4604      	mov	r4, r0
 8011144:	460e      	mov	r6, r1
 8011146:	4610      	mov	r0, r2
 8011148:	2101      	movs	r1, #1
 801114a:	f000 f94f 	bl	80113ec <uxr_seq_num_sub>
 801114e:	8a61      	ldrh	r1, [r4, #18]
 8011150:	f000 f94c 	bl	80113ec <uxr_seq_num_sub>
 8011154:	b1c8      	cbz	r0, 801118a <uxr_process_acknack+0x4a>
 8011156:	4605      	mov	r5, r0
 8011158:	2700      	movs	r7, #0
 801115a:	2101      	movs	r1, #1
 801115c:	8a60      	ldrh	r0, [r4, #18]
 801115e:	f000 f941 	bl	80113e4 <uxr_seq_num_add>
 8011162:	8923      	ldrh	r3, [r4, #8]
 8011164:	6862      	ldr	r2, [r4, #4]
 8011166:	3701      	adds	r7, #1
 8011168:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801116c:	6821      	ldr	r1, [r4, #0]
 801116e:	42bd      	cmp	r5, r7
 8011170:	8260      	strh	r0, [r4, #18]
 8011172:	fbb0 fef3 	udiv	lr, r0, r3
 8011176:	fbb2 f2f3 	udiv	r2, r2, r3
 801117a:	fb03 031e 	mls	r3, r3, lr, r0
 801117e:	b29b      	uxth	r3, r3
 8011180:	fb02 f303 	mul.w	r3, r2, r3
 8011184:	f841 c003 	str.w	ip, [r1, r3]
 8011188:	d1e7      	bne.n	801115a <uxr_process_acknack+0x1a>
 801118a:	3e00      	subs	r6, #0
 801118c:	f04f 0300 	mov.w	r3, #0
 8011190:	bf18      	it	ne
 8011192:	2601      	movne	r6, #1
 8011194:	f884 3020 	strb.w	r3, [r4, #32]
 8011198:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801119c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801119e:	bf00      	nop

080111a0 <uxr_is_output_up_to_date>:
 80111a0:	8a01      	ldrh	r1, [r0, #16]
 80111a2:	8a40      	ldrh	r0, [r0, #18]
 80111a4:	b508      	push	{r3, lr}
 80111a6:	f000 f925 	bl	80113f4 <uxr_seq_num_cmp>
 80111aa:	fab0 f080 	clz	r0, r0
 80111ae:	0940      	lsrs	r0, r0, #5
 80111b0:	bd08      	pop	{r3, pc}
 80111b2:	bf00      	nop

080111b4 <get_available_free_slots>:
 80111b4:	8901      	ldrh	r1, [r0, #8]
 80111b6:	b1e1      	cbz	r1, 80111f2 <get_available_free_slots+0x3e>
 80111b8:	6843      	ldr	r3, [r0, #4]
 80111ba:	f04f 0c00 	mov.w	ip, #0
 80111be:	b530      	push	{r4, r5, lr}
 80111c0:	fbb3 fef1 	udiv	lr, r3, r1
 80111c4:	6805      	ldr	r5, [r0, #0]
 80111c6:	4662      	mov	r2, ip
 80111c8:	7b04      	ldrb	r4, [r0, #12]
 80111ca:	4660      	mov	r0, ip
 80111cc:	f10c 0c01 	add.w	ip, ip, #1
 80111d0:	fbb2 f3f1 	udiv	r3, r2, r1
 80111d4:	fb01 2313 	mls	r3, r1, r3, r2
 80111d8:	fa1f f28c 	uxth.w	r2, ip
 80111dc:	b29b      	uxth	r3, r3
 80111de:	fb0e f303 	mul.w	r3, lr, r3
 80111e2:	58eb      	ldr	r3, [r5, r3]
 80111e4:	429c      	cmp	r4, r3
 80111e6:	d101      	bne.n	80111ec <get_available_free_slots+0x38>
 80111e8:	3001      	adds	r0, #1
 80111ea:	b280      	uxth	r0, r0
 80111ec:	428a      	cmp	r2, r1
 80111ee:	d3ed      	bcc.n	80111cc <get_available_free_slots+0x18>
 80111f0:	bd30      	pop	{r4, r5, pc}
 80111f2:	4608      	mov	r0, r1
 80111f4:	4770      	bx	lr
 80111f6:	bf00      	nop

080111f8 <uxr_buffer_cancel_data>:
 80111f8:	b510      	push	{r4, lr}
 80111fa:	2300      	movs	r3, #0
 80111fc:	b094      	sub	sp, #80	; 0x50
 80111fe:	4604      	mov	r4, r0
 8011200:	9205      	str	r2, [sp, #20]
 8011202:	9301      	str	r3, [sp, #4]
 8011204:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011208:	f88d 301e 	strb.w	r3, [sp, #30]
 801120c:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8011210:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8011214:	2308      	movs	r3, #8
 8011216:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801121a:	2201      	movs	r2, #1
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	ab0c      	add	r3, sp, #48	; 0x30
 8011220:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8011224:	2210      	movs	r2, #16
 8011226:	f7fb fb0d 	bl	800c844 <uxr_prepare_stream_to_write_submessage>
 801122a:	b918      	cbnz	r0, 8011234 <uxr_buffer_cancel_data+0x3c>
 801122c:	4604      	mov	r4, r0
 801122e:	4620      	mov	r0, r4
 8011230:	b014      	add	sp, #80	; 0x50
 8011232:	bd10      	pop	{r4, pc}
 8011234:	9905      	ldr	r1, [sp, #20]
 8011236:	aa06      	add	r2, sp, #24
 8011238:	4620      	mov	r0, r4
 801123a:	f7fb fc3f 	bl	800cabc <uxr_init_base_object_request>
 801123e:	4604      	mov	r4, r0
 8011240:	a906      	add	r1, sp, #24
 8011242:	a80c      	add	r0, sp, #48	; 0x30
 8011244:	f7fc fe52 	bl	800deec <uxr_serialize_READ_DATA_Payload>
 8011248:	4620      	mov	r0, r4
 801124a:	b014      	add	sp, #80	; 0x50
 801124c:	bd10      	pop	{r4, pc}
 801124e:	bf00      	nop

08011250 <read_submessage_format>:
 8011250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011254:	b095      	sub	sp, #84	; 0x54
 8011256:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 801125a:	b113      	cbz	r3, 8011262 <read_submessage_format+0x12>
 801125c:	b015      	add	sp, #84	; 0x54
 801125e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011262:	4606      	mov	r6, r0
 8011264:	981c      	ldr	r0, [sp, #112]	; 0x70
 8011266:	460c      	mov	r4, r1
 8011268:	4615      	mov	r5, r2
 801126a:	9004      	str	r0, [sp, #16]
 801126c:	4699      	mov	r9, r3
 801126e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011270:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8011274:	9005      	str	r0, [sp, #20]
 8011276:	a80c      	add	r0, sp, #48	; 0x30
 8011278:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801127c:	1a52      	subs	r2, r2, r1
 801127e:	f7f8 f8ad 	bl	80093dc <ucdr_init_buffer>
 8011282:	a80c      	add	r0, sp, #48	; 0x30
 8011284:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011288:	f7f8 f87c 	bl	8009384 <ucdr_set_on_full_buffer_callback>
 801128c:	69e2      	ldr	r2, [r4, #28]
 801128e:	b19a      	cbz	r2, 80112b8 <read_submessage_format+0x68>
 8011290:	f1b8 0f07 	cmp.w	r8, #7
 8011294:	f882 9014 	strb.w	r9, [r2, #20]
 8011298:	d040      	beq.n	801131c <read_submessage_format+0xcc>
 801129a:	f1b8 0f08 	cmp.w	r8, #8
 801129e:	d02e      	beq.n	80112fe <read_submessage_format+0xae>
 80112a0:	f1b8 0f06 	cmp.w	r8, #6
 80112a4:	d011      	beq.n	80112ca <read_submessage_format+0x7a>
 80112a6:	2301      	movs	r3, #1
 80112a8:	7513      	strb	r3, [r2, #20]
 80112aa:	4629      	mov	r1, r5
 80112ac:	4620      	mov	r0, r4
 80112ae:	f7f8 f8e9 	bl	8009484 <ucdr_advance_buffer>
 80112b2:	b015      	add	sp, #84	; 0x54
 80112b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112b8:	f1b8 0f07 	cmp.w	r8, #7
 80112bc:	d02e      	beq.n	801131c <read_submessage_format+0xcc>
 80112be:	f1b8 0f08 	cmp.w	r8, #8
 80112c2:	d01c      	beq.n	80112fe <read_submessage_format+0xae>
 80112c4:	f1b8 0f06 	cmp.w	r8, #6
 80112c8:	d1ef      	bne.n	80112aa <read_submessage_format+0x5a>
 80112ca:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 80112ce:	f1b8 0f00 	cmp.w	r8, #0
 80112d2:	d011      	beq.n	80112f8 <read_submessage_format+0xa8>
 80112d4:	ab0c      	add	r3, sp, #48	; 0x30
 80112d6:	9501      	str	r5, [sp, #4]
 80112d8:	463a      	mov	r2, r7
 80112da:	4630      	mov	r0, r6
 80112dc:	9300      	str	r3, [sp, #0]
 80112de:	2306      	movs	r3, #6
 80112e0:	f88d 3016 	strb.w	r3, [sp, #22]
 80112e4:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80112e8:	9302      	str	r3, [sp, #8]
 80112ea:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80112ee:	47c0      	blx	r8
 80112f0:	2301      	movs	r3, #1
 80112f2:	69e2      	ldr	r2, [r4, #28]
 80112f4:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80112f8:	2a00      	cmp	r2, #0
 80112fa:	d1d4      	bne.n	80112a6 <read_submessage_format+0x56>
 80112fc:	e7d5      	b.n	80112aa <read_submessage_format+0x5a>
 80112fe:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8011302:	2b00      	cmp	r3, #0
 8011304:	d0f8      	beq.n	80112f8 <read_submessage_format+0xa8>
 8011306:	a80c      	add	r0, sp, #48	; 0x30
 8011308:	a906      	add	r1, sp, #24
 801130a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801130e:	f7fc fe93 	bl	800e038 <uxr_deserialize_SampleIdentity>
 8011312:	b9a0      	cbnz	r0, 801133e <read_submessage_format+0xee>
 8011314:	69e2      	ldr	r2, [r4, #28]
 8011316:	2a00      	cmp	r2, #0
 8011318:	d1c5      	bne.n	80112a6 <read_submessage_format+0x56>
 801131a:	e7c6      	b.n	80112aa <read_submessage_format+0x5a>
 801131c:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8011320:	b13b      	cbz	r3, 8011332 <read_submessage_format+0xe2>
 8011322:	a906      	add	r1, sp, #24
 8011324:	a80c      	add	r0, sp, #48	; 0x30
 8011326:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801132a:	f7fc fb7f 	bl	800da2c <uxr_deserialize_BaseObjectRequest>
 801132e:	bb60      	cbnz	r0, 801138a <read_submessage_format+0x13a>
 8011330:	69e2      	ldr	r2, [r4, #28]
 8011332:	68a3      	ldr	r3, [r4, #8]
 8011334:	442b      	add	r3, r5
 8011336:	60a3      	str	r3, [r4, #8]
 8011338:	2a00      	cmp	r2, #0
 801133a:	d1b4      	bne.n	80112a6 <read_submessage_format+0x56>
 801133c:	e7b5      	b.n	80112aa <read_submessage_format+0x5a>
 801133e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011340:	a80c      	add	r0, sp, #48	; 0x30
 8011342:	eba8 0803 	sub.w	r8, r8, r3
 8011346:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801134a:	44a8      	add	r8, r5
 801134c:	1a52      	subs	r2, r2, r1
 801134e:	f7f8 f845 	bl	80093dc <ucdr_init_buffer>
 8011352:	a80c      	add	r0, sp, #48	; 0x30
 8011354:	fa1f f888 	uxth.w	r8, r8
 8011358:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801135c:	f7f8 f812 	bl	8009384 <ucdr_set_on_full_buffer_callback>
 8011360:	ab0c      	add	r3, sp, #48	; 0x30
 8011362:	2108      	movs	r1, #8
 8011364:	f8cd 8004 	str.w	r8, [sp, #4]
 8011368:	9300      	str	r3, [sp, #0]
 801136a:	463a      	mov	r2, r7
 801136c:	f88d 1016 	strb.w	r1, [sp, #22]
 8011370:	ab06      	add	r3, sp, #24
 8011372:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 8011376:	4630      	mov	r0, r6
 8011378:	9102      	str	r1, [sp, #8]
 801137a:	9905      	ldr	r1, [sp, #20]
 801137c:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 8011380:	47b8      	blx	r7
 8011382:	2301      	movs	r3, #1
 8011384:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8011388:	e7c4      	b.n	8011314 <read_submessage_format+0xc4>
 801138a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801138e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011390:	a80c      	add	r0, sp, #48	; 0x30
 8011392:	1a52      	subs	r2, r2, r1
 8011394:	eba8 0803 	sub.w	r8, r8, r3
 8011398:	f7f8 f820 	bl	80093dc <ucdr_init_buffer>
 801139c:	a80c      	add	r0, sp, #48	; 0x30
 801139e:	44a8      	add	r8, r5
 80113a0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80113a4:	f7f7 ffee 	bl	8009384 <ucdr_set_on_full_buffer_callback>
 80113a8:	ab0c      	add	r3, sp, #48	; 0x30
 80113aa:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80113ae:	fa1f f888 	uxth.w	r8, r8
 80113b2:	9300      	str	r3, [sp, #0]
 80113b4:	463a      	mov	r2, r7
 80113b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80113ba:	4630      	mov	r0, r6
 80113bc:	f8cd 8004 	str.w	r8, [sp, #4]
 80113c0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80113c4:	2107      	movs	r1, #7
 80113c6:	f88d 1016 	strb.w	r1, [sp, #22]
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 80113d0:	9102      	str	r1, [sp, #8]
 80113d2:	9905      	ldr	r1, [sp, #20]
 80113d4:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 80113d8:	47b8      	blx	r7
 80113da:	2301      	movs	r3, #1
 80113dc:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80113e0:	e7a6      	b.n	8011330 <read_submessage_format+0xe0>
 80113e2:	bf00      	nop

080113e4 <uxr_seq_num_add>:
 80113e4:	4408      	add	r0, r1
 80113e6:	b280      	uxth	r0, r0
 80113e8:	4770      	bx	lr
 80113ea:	bf00      	nop

080113ec <uxr_seq_num_sub>:
 80113ec:	1a40      	subs	r0, r0, r1
 80113ee:	b280      	uxth	r0, r0
 80113f0:	4770      	bx	lr
 80113f2:	bf00      	nop

080113f4 <uxr_seq_num_cmp>:
 80113f4:	4288      	cmp	r0, r1
 80113f6:	d011      	beq.n	801141c <uxr_seq_num_cmp+0x28>
 80113f8:	d309      	bcc.n	801140e <uxr_seq_num_cmp+0x1a>
 80113fa:	4288      	cmp	r0, r1
 80113fc:	d910      	bls.n	8011420 <uxr_seq_num_cmp+0x2c>
 80113fe:	1a40      	subs	r0, r0, r1
 8011400:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8011404:	bfd4      	ite	le
 8011406:	2001      	movle	r0, #1
 8011408:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801140c:	4770      	bx	lr
 801140e:	1a0b      	subs	r3, r1, r0
 8011410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011414:	daf1      	bge.n	80113fa <uxr_seq_num_cmp+0x6>
 8011416:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801141a:	4770      	bx	lr
 801141c:	2000      	movs	r0, #0
 801141e:	4770      	bx	lr
 8011420:	2001      	movs	r0, #1
 8011422:	4770      	bx	lr

08011424 <uxr_init_framing_io>:
 8011424:	2300      	movs	r3, #0
 8011426:	7041      	strb	r1, [r0, #1]
 8011428:	7003      	strb	r3, [r0, #0]
 801142a:	8583      	strh	r3, [r0, #44]	; 0x2c
 801142c:	4770      	bx	lr
 801142e:	bf00      	nop

08011430 <uxr_write_framed_msg>:
 8011430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011434:	4617      	mov	r7, r2
 8011436:	7842      	ldrb	r2, [r0, #1]
 8011438:	460e      	mov	r6, r1
 801143a:	b083      	sub	sp, #12
 801143c:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8011440:	469b      	mov	fp, r3
 8011442:	237e      	movs	r3, #126	; 0x7e
 8011444:	4604      	mov	r4, r0
 8011446:	2901      	cmp	r1, #1
 8011448:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801144c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8011450:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8011454:	f240 8115 	bls.w	8011682 <uxr_write_framed_msg+0x252>
 8011458:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801145c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8011460:	2202      	movs	r2, #2
 8011462:	2901      	cmp	r1, #1
 8011464:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011468:	d952      	bls.n	8011510 <uxr_write_framed_msg+0xe0>
 801146a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801146c:	2103      	movs	r1, #3
 801146e:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8011472:	b2dd      	uxtb	r5, r3
 8011474:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8011478:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801147c:	2a01      	cmp	r2, #1
 801147e:	d95c      	bls.n	801153a <uxr_write_framed_msg+0x10a>
 8011480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011482:	1862      	adds	r2, r4, r1
 8011484:	3101      	adds	r1, #1
 8011486:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801148a:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801148e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8011492:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8011496:	2a01      	cmp	r2, #1
 8011498:	d961      	bls.n	801155e <uxr_write_framed_msg+0x12e>
 801149a:	1c4a      	adds	r2, r1, #1
 801149c:	4421      	add	r1, r4
 801149e:	b2d2      	uxtb	r2, r2
 80114a0:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80114a4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d06a      	beq.n	8011582 <uxr_write_framed_msg+0x152>
 80114ac:	f04f 0800 	mov.w	r8, #0
 80114b0:	46c1      	mov	r9, r8
 80114b2:	e016      	b.n	80114e2 <uxr_write_framed_msg+0xb2>
 80114b4:	2a29      	cmp	r2, #41	; 0x29
 80114b6:	d868      	bhi.n	801158a <uxr_write_framed_msg+0x15a>
 80114b8:	18a0      	adds	r0, r4, r2
 80114ba:	3201      	adds	r2, #1
 80114bc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80114c0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80114c4:	ea88 0101 	eor.w	r1, r8, r1
 80114c8:	4b7d      	ldr	r3, [pc, #500]	; (80116c0 <uxr_write_framed_msg+0x290>)
 80114ca:	f109 0901 	add.w	r9, r9, #1
 80114ce:	b2c9      	uxtb	r1, r1
 80114d0:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80114d4:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 80114d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114da:	454b      	cmp	r3, r9
 80114dc:	d969      	bls.n	80115b2 <uxr_write_framed_msg+0x182>
 80114de:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80114e2:	f81b 1009 	ldrb.w	r1, [fp, r9]
 80114e6:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80114ea:	2801      	cmp	r0, #1
 80114ec:	d8e2      	bhi.n	80114b4 <uxr_write_framed_msg+0x84>
 80114ee:	1c50      	adds	r0, r2, #1
 80114f0:	b2c0      	uxtb	r0, r0
 80114f2:	2829      	cmp	r0, #41	; 0x29
 80114f4:	d849      	bhi.n	801158a <uxr_write_framed_msg+0x15a>
 80114f6:	18a0      	adds	r0, r4, r2
 80114f8:	f04f 037d 	mov.w	r3, #125	; 0x7d
 80114fc:	3202      	adds	r2, #2
 80114fe:	f081 0520 	eor.w	r5, r1, #32
 8011502:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8011506:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801150a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801150e:	e7d9      	b.n	80114c4 <uxr_write_framed_msg+0x94>
 8011510:	2104      	movs	r1, #4
 8011512:	f04f 0c03 	mov.w	ip, #3
 8011516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011518:	4422      	add	r2, r4
 801151a:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801151e:	44a4      	add	ip, r4
 8011520:	b2dd      	uxtb	r5, r3
 8011522:	f080 0020 	eor.w	r0, r0, #32
 8011526:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 801152a:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801152e:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8011532:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8011536:	2a01      	cmp	r2, #1
 8011538:	d8a2      	bhi.n	8011480 <uxr_write_framed_msg+0x50>
 801153a:	1862      	adds	r2, r4, r1
 801153c:	207d      	movs	r0, #125	; 0x7d
 801153e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011540:	f085 0520 	eor.w	r5, r5, #32
 8011544:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8011548:	3102      	adds	r1, #2
 801154a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801154e:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 8011552:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8011556:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801155a:	2a01      	cmp	r2, #1
 801155c:	d89d      	bhi.n	801149a <uxr_write_framed_msg+0x6a>
 801155e:	1c4d      	adds	r5, r1, #1
 8011560:	1c8a      	adds	r2, r1, #2
 8011562:	f080 0020 	eor.w	r0, r0, #32
 8011566:	4421      	add	r1, r4
 8011568:	fa54 f585 	uxtab	r5, r4, r5
 801156c:	b2d2      	uxtb	r2, r2
 801156e:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8011572:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 8011576:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801157a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801157e:	2b00      	cmp	r3, #0
 8011580:	d194      	bne.n	80114ac <uxr_write_framed_msg+0x7c>
 8011582:	4619      	mov	r1, r3
 8011584:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011588:	e019      	b.n	80115be <uxr_write_framed_msg+0x18e>
 801158a:	2500      	movs	r5, #0
 801158c:	e000      	b.n	8011590 <uxr_write_framed_msg+0x160>
 801158e:	b160      	cbz	r0, 80115aa <uxr_write_framed_msg+0x17a>
 8011590:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8011594:	1b52      	subs	r2, r2, r5
 8011596:	4653      	mov	r3, sl
 8011598:	4638      	mov	r0, r7
 801159a:	4421      	add	r1, r4
 801159c:	47b0      	blx	r6
 801159e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80115a2:	4405      	add	r5, r0
 80115a4:	4295      	cmp	r5, r2
 80115a6:	d3f2      	bcc.n	801158e <uxr_write_framed_msg+0x15e>
 80115a8:	d066      	beq.n	8011678 <uxr_write_framed_msg+0x248>
 80115aa:	2000      	movs	r0, #0
 80115ac:	b003      	add	sp, #12
 80115ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115b2:	fa5f f188 	uxtb.w	r1, r8
 80115b6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80115ba:	f8ad 8004 	strh.w	r8, [sp, #4]
 80115be:	f04f 0900 	mov.w	r9, #0
 80115c2:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 80115c6:	46c8      	mov	r8, r9
 80115c8:	e013      	b.n	80115f2 <uxr_write_framed_msg+0x1c2>
 80115ca:	2a29      	cmp	r2, #41	; 0x29
 80115cc:	d824      	bhi.n	8011618 <uxr_write_framed_msg+0x1e8>
 80115ce:	18a3      	adds	r3, r4, r2
 80115d0:	3201      	adds	r2, #1
 80115d2:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 80115d6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80115da:	f109 0901 	add.w	r9, r9, #1
 80115de:	f1b9 0f02 	cmp.w	r9, #2
 80115e2:	d02d      	beq.n	8011640 <uxr_write_framed_msg+0x210>
 80115e4:	f109 0308 	add.w	r3, r9, #8
 80115e8:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80115ec:	446b      	add	r3, sp
 80115ee:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80115f2:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80115f6:	2b01      	cmp	r3, #1
 80115f8:	d8e7      	bhi.n	80115ca <uxr_write_framed_msg+0x19a>
 80115fa:	1c53      	adds	r3, r2, #1
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	2b29      	cmp	r3, #41	; 0x29
 8011600:	d80a      	bhi.n	8011618 <uxr_write_framed_msg+0x1e8>
 8011602:	18a3      	adds	r3, r4, r2
 8011604:	f081 0120 	eor.w	r1, r1, #32
 8011608:	3202      	adds	r2, #2
 801160a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801160e:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 8011612:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011616:	e7e0      	b.n	80115da <uxr_write_framed_msg+0x1aa>
 8011618:	2500      	movs	r5, #0
 801161a:	e001      	b.n	8011620 <uxr_write_framed_msg+0x1f0>
 801161c:	2800      	cmp	r0, #0
 801161e:	d0c4      	beq.n	80115aa <uxr_write_framed_msg+0x17a>
 8011620:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8011624:	1b52      	subs	r2, r2, r5
 8011626:	4653      	mov	r3, sl
 8011628:	4638      	mov	r0, r7
 801162a:	4421      	add	r1, r4
 801162c:	47b0      	blx	r6
 801162e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8011632:	4405      	add	r5, r0
 8011634:	4295      	cmp	r5, r2
 8011636:	d3f1      	bcc.n	801161c <uxr_write_framed_msg+0x1ec>
 8011638:	d1b7      	bne.n	80115aa <uxr_write_framed_msg+0x17a>
 801163a:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801163e:	e7d1      	b.n	80115e4 <uxr_write_framed_msg+0x1b4>
 8011640:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8011644:	b19a      	cbz	r2, 801166e <uxr_write_framed_msg+0x23e>
 8011646:	2500      	movs	r5, #0
 8011648:	e001      	b.n	801164e <uxr_write_framed_msg+0x21e>
 801164a:	2800      	cmp	r0, #0
 801164c:	d0ad      	beq.n	80115aa <uxr_write_framed_msg+0x17a>
 801164e:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8011652:	1b52      	subs	r2, r2, r5
 8011654:	4653      	mov	r3, sl
 8011656:	4638      	mov	r0, r7
 8011658:	4421      	add	r1, r4
 801165a:	47b0      	blx	r6
 801165c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8011660:	4405      	add	r5, r0
 8011662:	4295      	cmp	r5, r2
 8011664:	d3f1      	bcc.n	801164a <uxr_write_framed_msg+0x21a>
 8011666:	d1a0      	bne.n	80115aa <uxr_write_framed_msg+0x17a>
 8011668:	2300      	movs	r3, #0
 801166a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801166e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011670:	b298      	uxth	r0, r3
 8011672:	b003      	add	sp, #12
 8011674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011678:	f04f 0300 	mov.w	r3, #0
 801167c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011680:	e72a      	b.n	80114d8 <uxr_write_framed_msg+0xa8>
 8011682:	217d      	movs	r1, #125	; 0x7d
 8011684:	f082 0220 	eor.w	r2, r2, #32
 8011688:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801168c:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8011690:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8011694:	2203      	movs	r2, #3
 8011696:	2901      	cmp	r1, #1
 8011698:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801169c:	d803      	bhi.n	80116a6 <uxr_write_framed_msg+0x276>
 801169e:	2105      	movs	r1, #5
 80116a0:	f04f 0c04 	mov.w	ip, #4
 80116a4:	e737      	b.n	8011516 <uxr_write_framed_msg+0xe6>
 80116a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116a8:	2104      	movs	r1, #4
 80116aa:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80116ae:	b2dd      	uxtb	r5, r3
 80116b0:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80116b4:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80116b8:	2a01      	cmp	r2, #1
 80116ba:	f63f aee1 	bhi.w	8011480 <uxr_write_framed_msg+0x50>
 80116be:	e73c      	b.n	801153a <uxr_write_framed_msg+0x10a>
 80116c0:	080180d4 	.word	0x080180d4

080116c4 <uxr_framing_read_transport>:
 80116c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c8:	4604      	mov	r4, r0
 80116ca:	b085      	sub	sp, #20
 80116cc:	4692      	mov	sl, r2
 80116ce:	4689      	mov	r9, r1
 80116d0:	461d      	mov	r5, r3
 80116d2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80116d4:	f7fb fba8 	bl	800ce28 <uxr_millis>
 80116d8:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80116dc:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 80116e0:	4680      	mov	r8, r0
 80116e2:	42ba      	cmp	r2, r7
 80116e4:	d05f      	beq.n	80117a6 <uxr_framing_read_transport+0xe2>
 80116e6:	d817      	bhi.n	8011718 <uxr_framing_read_transport+0x54>
 80116e8:	3f01      	subs	r7, #1
 80116ea:	1aba      	subs	r2, r7, r2
 80116ec:	2700      	movs	r7, #0
 80116ee:	b2d2      	uxtb	r2, r2
 80116f0:	42b2      	cmp	r2, r6
 80116f2:	d81a      	bhi.n	801172a <uxr_framing_read_transport+0x66>
 80116f4:	19d3      	adds	r3, r2, r7
 80116f6:	42b3      	cmp	r3, r6
 80116f8:	d852      	bhi.n	80117a0 <uxr_framing_read_transport+0xdc>
 80116fa:	b9d2      	cbnz	r2, 8011732 <uxr_framing_read_transport+0x6e>
 80116fc:	2600      	movs	r6, #0
 80116fe:	f7fb fb93 	bl	800ce28 <uxr_millis>
 8011702:	682b      	ldr	r3, [r5, #0]
 8011704:	eba0 0008 	sub.w	r0, r0, r8
 8011708:	1a1b      	subs	r3, r3, r0
 801170a:	4630      	mov	r0, r6
 801170c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011710:	602b      	str	r3, [r5, #0]
 8011712:	b005      	add	sp, #20
 8011714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011718:	2f00      	cmp	r7, #0
 801171a:	d060      	beq.n	80117de <uxr_framing_read_transport+0x11a>
 801171c:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8011720:	3f01      	subs	r7, #1
 8011722:	b2d2      	uxtb	r2, r2
 8011724:	b2ff      	uxtb	r7, r7
 8011726:	42b2      	cmp	r2, r6
 8011728:	d9e4      	bls.n	80116f4 <uxr_framing_read_transport+0x30>
 801172a:	b2f2      	uxtb	r2, r6
 801172c:	2700      	movs	r7, #0
 801172e:	2a00      	cmp	r2, #0
 8011730:	d0e4      	beq.n	80116fc <uxr_framing_read_transport+0x38>
 8011732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011734:	4650      	mov	r0, sl
 8011736:	9203      	str	r2, [sp, #12]
 8011738:	9300      	str	r3, [sp, #0]
 801173a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801173e:	682b      	ldr	r3, [r5, #0]
 8011740:	3102      	adds	r1, #2
 8011742:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80117e8 <uxr_framing_read_transport+0x124>
 8011746:	4421      	add	r1, r4
 8011748:	47c8      	blx	r9
 801174a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801174e:	4606      	mov	r6, r0
 8011750:	4403      	add	r3, r0
 8011752:	0859      	lsrs	r1, r3, #1
 8011754:	fbab 2101 	umull	r2, r1, fp, r1
 8011758:	222a      	movs	r2, #42	; 0x2a
 801175a:	0889      	lsrs	r1, r1, #2
 801175c:	fb02 3111 	mls	r1, r2, r1, r3
 8011760:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8011764:	2800      	cmp	r0, #0
 8011766:	d0c9      	beq.n	80116fc <uxr_framing_read_transport+0x38>
 8011768:	9a03      	ldr	r2, [sp, #12]
 801176a:	4290      	cmp	r0, r2
 801176c:	d1c7      	bne.n	80116fe <uxr_framing_read_transport+0x3a>
 801176e:	2f00      	cmp	r7, #0
 8011770:	d0c5      	beq.n	80116fe <uxr_framing_read_transport+0x3a>
 8011772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011774:	3102      	adds	r1, #2
 8011776:	463a      	mov	r2, r7
 8011778:	4650      	mov	r0, sl
 801177a:	4421      	add	r1, r4
 801177c:	9300      	str	r3, [sp, #0]
 801177e:	2300      	movs	r3, #0
 8011780:	47c8      	blx	r9
 8011782:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8011786:	4406      	add	r6, r0
 8011788:	1813      	adds	r3, r2, r0
 801178a:	085a      	lsrs	r2, r3, #1
 801178c:	fbab 1b02 	umull	r1, fp, fp, r2
 8011790:	222a      	movs	r2, #42	; 0x2a
 8011792:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8011796:	fb02 331b 	mls	r3, r2, fp, r3
 801179a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801179e:	e7ae      	b.n	80116fe <uxr_framing_read_transport+0x3a>
 80117a0:	1ab6      	subs	r6, r6, r2
 80117a2:	b2f7      	uxtb	r7, r6
 80117a4:	e7a9      	b.n	80116fa <uxr_framing_read_transport+0x36>
 80117a6:	2300      	movs	r3, #0
 80117a8:	2e28      	cmp	r6, #40	; 0x28
 80117aa:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80117ac:	d9bd      	bls.n	801172a <uxr_framing_read_transport+0x66>
 80117ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80117b0:	2229      	movs	r2, #41	; 0x29
 80117b2:	1ca1      	adds	r1, r4, #2
 80117b4:	4650      	mov	r0, sl
 80117b6:	9300      	str	r3, [sp, #0]
 80117b8:	682b      	ldr	r3, [r5, #0]
 80117ba:	47c8      	blx	r9
 80117bc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80117c0:	4606      	mov	r6, r0
 80117c2:	212a      	movs	r1, #42	; 0x2a
 80117c4:	4403      	add	r3, r0
 80117c6:	4808      	ldr	r0, [pc, #32]	; (80117e8 <uxr_framing_read_transport+0x124>)
 80117c8:	085a      	lsrs	r2, r3, #1
 80117ca:	fba0 0202 	umull	r0, r2, r0, r2
 80117ce:	0892      	lsrs	r2, r2, #2
 80117d0:	fb01 3312 	mls	r3, r1, r2, r3
 80117d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80117d8:	2e00      	cmp	r6, #0
 80117da:	d08f      	beq.n	80116fc <uxr_framing_read_transport+0x38>
 80117dc:	e78f      	b.n	80116fe <uxr_framing_read_transport+0x3a>
 80117de:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 80117e2:	b2d2      	uxtb	r2, r2
 80117e4:	e784      	b.n	80116f0 <uxr_framing_read_transport+0x2c>
 80117e6:	bf00      	nop
 80117e8:	30c30c31 	.word	0x30c30c31

080117ec <uxr_read_framed_msg>:
 80117ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f0:	461e      	mov	r6, r3
 80117f2:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80117f6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80117fa:	b083      	sub	sp, #12
 80117fc:	4604      	mov	r4, r0
 80117fe:	4688      	mov	r8, r1
 8011800:	429d      	cmp	r5, r3
 8011802:	4691      	mov	r9, r2
 8011804:	f000 818c 	beq.w	8011b20 <uxr_read_framed_msg+0x334>
 8011808:	7823      	ldrb	r3, [r4, #0]
 801180a:	4dc3      	ldr	r5, [pc, #780]	; (8011b18 <uxr_read_framed_msg+0x32c>)
 801180c:	4fc3      	ldr	r7, [pc, #780]	; (8011b1c <uxr_read_framed_msg+0x330>)
 801180e:	2b07      	cmp	r3, #7
 8011810:	d8fd      	bhi.n	801180e <uxr_read_framed_msg+0x22>
 8011812:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011816:	011c      	.short	0x011c
 8011818:	00d900fb 	.word	0x00d900fb
 801181c:	008f00ba 	.word	0x008f00ba
 8011820:	00320051 	.word	0x00320051
 8011824:	0008      	.short	0x0008
 8011826:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801182a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801182e:	4299      	cmp	r1, r3
 8011830:	f000 814d 	beq.w	8011ace <uxr_read_framed_msg+0x2e2>
 8011834:	18e2      	adds	r2, r4, r3
 8011836:	7892      	ldrb	r2, [r2, #2]
 8011838:	2a7d      	cmp	r2, #125	; 0x7d
 801183a:	f000 81b8 	beq.w	8011bae <uxr_read_framed_msg+0x3c2>
 801183e:	3301      	adds	r3, #1
 8011840:	212a      	movs	r1, #42	; 0x2a
 8011842:	2a7e      	cmp	r2, #126	; 0x7e
 8011844:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8011848:	fba5 c000 	umull	ip, r0, r5, r0
 801184c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8011850:	fb01 3310 	mls	r3, r1, r0, r3
 8011854:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011858:	f000 8257 	beq.w	8011d0a <uxr_read_framed_msg+0x51e>
 801185c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801185e:	2000      	movs	r0, #0
 8011860:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8011862:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011866:	7020      	strb	r0, [r4, #0]
 8011868:	b29b      	uxth	r3, r3
 801186a:	4299      	cmp	r1, r3
 801186c:	86a3      	strh	r3, [r4, #52]	; 0x34
 801186e:	f000 8178 	beq.w	8011b62 <uxr_read_framed_msg+0x376>
 8011872:	2000      	movs	r0, #0
 8011874:	b003      	add	sp, #12
 8011876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801187a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801187e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011882:	4298      	cmp	r0, r3
 8011884:	f000 8132 	beq.w	8011aec <uxr_read_framed_msg+0x300>
 8011888:	18e2      	adds	r2, r4, r3
 801188a:	7891      	ldrb	r1, [r2, #2]
 801188c:	297d      	cmp	r1, #125	; 0x7d
 801188e:	f000 8170 	beq.w	8011b72 <uxr_read_framed_msg+0x386>
 8011892:	3301      	adds	r3, #1
 8011894:	202a      	movs	r0, #42	; 0x2a
 8011896:	297e      	cmp	r1, #126	; 0x7e
 8011898:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801189c:	fba5 c202 	umull	ip, r2, r5, r2
 80118a0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80118a4:	fb00 3312 	mls	r3, r0, r2, r3
 80118a8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80118ac:	f000 821d 	beq.w	8011cea <uxr_read_framed_msg+0x4fe>
 80118b0:	2307      	movs	r3, #7
 80118b2:	86a1      	strh	r1, [r4, #52]	; 0x34
 80118b4:	7023      	strb	r3, [r4, #0]
 80118b6:	e7aa      	b.n	801180e <uxr_read_framed_msg+0x22>
 80118b8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80118ba:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80118be:	459e      	cmp	lr, r3
 80118c0:	d827      	bhi.n	8011912 <uxr_read_framed_msg+0x126>
 80118c2:	e032      	b.n	801192a <uxr_read_framed_msg+0x13e>
 80118c4:	fba5 b101 	umull	fp, r1, r5, r1
 80118c8:	f89c c002 	ldrb.w	ip, [ip, #2]
 80118cc:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 80118d0:	0889      	lsrs	r1, r1, #2
 80118d2:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80118d6:	fb0b 0111 	mls	r1, fp, r1, r0
 80118da:	f000 80d4 	beq.w	8011a86 <uxr_read_framed_msg+0x29a>
 80118de:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80118e2:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 80118e6:	f000 80cb 	beq.w	8011a80 <uxr_read_framed_msg+0x294>
 80118ea:	f806 c003 	strb.w	ip, [r6, r3]
 80118ee:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80118f0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80118f2:	ea80 010c 	eor.w	r1, r0, ip
 80118f6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80118fa:	3301      	adds	r3, #1
 80118fc:	b2c9      	uxtb	r1, r1
 80118fe:	b29b      	uxth	r3, r3
 8011900:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8011904:	4573      	cmp	r3, lr
 8011906:	8663      	strh	r3, [r4, #50]	; 0x32
 8011908:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801190c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801190e:	f080 811d 	bcs.w	8011b4c <uxr_read_framed_msg+0x360>
 8011912:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8011916:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801191a:	1c50      	adds	r0, r2, #1
 801191c:	eb04 0c02 	add.w	ip, r4, r2
 8011920:	4592      	cmp	sl, r2
 8011922:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8011926:	d1cd      	bne.n	80118c4 <uxr_read_framed_msg+0xd8>
 8011928:	459e      	cmp	lr, r3
 801192a:	f040 8114 	bne.w	8011b56 <uxr_read_framed_msg+0x36a>
 801192e:	2306      	movs	r3, #6
 8011930:	7023      	strb	r3, [r4, #0]
 8011932:	e76c      	b.n	801180e <uxr_read_framed_msg+0x22>
 8011934:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8011938:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801193c:	4298      	cmp	r0, r3
 801193e:	f000 80c6 	beq.w	8011ace <uxr_read_framed_msg+0x2e2>
 8011942:	18e2      	adds	r2, r4, r3
 8011944:	7891      	ldrb	r1, [r2, #2]
 8011946:	297d      	cmp	r1, #125	; 0x7d
 8011948:	f000 8193 	beq.w	8011c72 <uxr_read_framed_msg+0x486>
 801194c:	3301      	adds	r3, #1
 801194e:	202a      	movs	r0, #42	; 0x2a
 8011950:	297e      	cmp	r1, #126	; 0x7e
 8011952:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8011956:	fba5 c202 	umull	ip, r2, r5, r2
 801195a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801195e:	fb00 3312 	mls	r3, r0, r2, r3
 8011962:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011966:	f000 81d0 	beq.w	8011d0a <uxr_read_framed_msg+0x51e>
 801196a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801196c:	2000      	movs	r0, #0
 801196e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011972:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011974:	8660      	strh	r0, [r4, #50]	; 0x32
 8011976:	b29b      	uxth	r3, r3
 8011978:	86e0      	strh	r0, [r4, #54]	; 0x36
 801197a:	428b      	cmp	r3, r1
 801197c:	8623      	strh	r3, [r4, #48]	; 0x30
 801197e:	f240 80e2 	bls.w	8011b46 <uxr_read_framed_msg+0x35a>
 8011982:	7020      	strb	r0, [r4, #0]
 8011984:	b003      	add	sp, #12
 8011986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801198a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801198e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011992:	4298      	cmp	r0, r3
 8011994:	f000 80aa 	beq.w	8011aec <uxr_read_framed_msg+0x300>
 8011998:	18e2      	adds	r2, r4, r3
 801199a:	7891      	ldrb	r1, [r2, #2]
 801199c:	297d      	cmp	r1, #125	; 0x7d
 801199e:	f000 8186 	beq.w	8011cae <uxr_read_framed_msg+0x4c2>
 80119a2:	3301      	adds	r3, #1
 80119a4:	202a      	movs	r0, #42	; 0x2a
 80119a6:	297e      	cmp	r1, #126	; 0x7e
 80119a8:	ea4f 0253 	mov.w	r2, r3, lsr #1
 80119ac:	fba5 c202 	umull	ip, r2, r5, r2
 80119b0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80119b4:	fb00 3312 	mls	r3, r0, r2, r3
 80119b8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80119bc:	f000 8195 	beq.w	8011cea <uxr_read_framed_msg+0x4fe>
 80119c0:	2304      	movs	r3, #4
 80119c2:	8621      	strh	r1, [r4, #48]	; 0x30
 80119c4:	7023      	strb	r3, [r4, #0]
 80119c6:	e722      	b.n	801180e <uxr_read_framed_msg+0x22>
 80119c8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80119cc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80119d0:	4290      	cmp	r0, r2
 80119d2:	f000 80b4 	beq.w	8011b3e <uxr_read_framed_msg+0x352>
 80119d6:	18a3      	adds	r3, r4, r2
 80119d8:	7899      	ldrb	r1, [r3, #2]
 80119da:	297d      	cmp	r1, #125	; 0x7d
 80119dc:	f000 8107 	beq.w	8011bee <uxr_read_framed_msg+0x402>
 80119e0:	3201      	adds	r2, #1
 80119e2:	232a      	movs	r3, #42	; 0x2a
 80119e4:	297e      	cmp	r1, #126	; 0x7e
 80119e6:	ea4f 0052 	mov.w	r0, r2, lsr #1
 80119ea:	fba5 c000 	umull	ip, r0, r5, r0
 80119ee:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80119f2:	fb03 2210 	mls	r2, r3, r0, r2
 80119f6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80119fa:	f000 818a 	beq.w	8011d12 <uxr_read_framed_msg+0x526>
 80119fe:	7863      	ldrb	r3, [r4, #1]
 8011a00:	428b      	cmp	r3, r1
 8011a02:	bf0c      	ite	eq
 8011a04:	2303      	moveq	r3, #3
 8011a06:	2300      	movne	r3, #0
 8011a08:	7023      	strb	r3, [r4, #0]
 8011a0a:	e700      	b.n	801180e <uxr_read_framed_msg+0x22>
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8011a12:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8011a16:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011a1a:	4299      	cmp	r1, r3
 8011a1c:	d06a      	beq.n	8011af4 <uxr_read_framed_msg+0x308>
 8011a1e:	18e2      	adds	r2, r4, r3
 8011a20:	7890      	ldrb	r0, [r2, #2]
 8011a22:	287d      	cmp	r0, #125	; 0x7d
 8011a24:	f000 8100 	beq.w	8011c28 <uxr_read_framed_msg+0x43c>
 8011a28:	3301      	adds	r3, #1
 8011a2a:	212a      	movs	r1, #42	; 0x2a
 8011a2c:	287e      	cmp	r0, #126	; 0x7e
 8011a2e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8011a32:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8011a36:	fba5 c202 	umull	ip, r2, r5, r2
 8011a3a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8011a3e:	fb01 3312 	mls	r3, r1, r2, r3
 8011a42:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011a46:	d055      	beq.n	8011af4 <uxr_read_framed_msg+0x308>
 8011a48:	2302      	movs	r3, #2
 8011a4a:	7023      	strb	r3, [r4, #0]
 8011a4c:	e6df      	b.n	801180e <uxr_read_framed_msg+0x22>
 8011a4e:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 8011a52:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8011a56:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011a5a:	1c5a      	adds	r2, r3, #1
 8011a5c:	459c      	cmp	ip, r3
 8011a5e:	eb04 0103 	add.w	r1, r4, r3
 8011a62:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8011a66:	f43f af04 	beq.w	8011872 <uxr_read_framed_msg+0x86>
 8011a6a:	fba5 0303 	umull	r0, r3, r5, r3
 8011a6e:	7889      	ldrb	r1, [r1, #2]
 8011a70:	089b      	lsrs	r3, r3, #2
 8011a72:	297e      	cmp	r1, #126	; 0x7e
 8011a74:	fb0e 2313 	mls	r3, lr, r3, r2
 8011a78:	b2db      	uxtb	r3, r3
 8011a7a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011a7e:	d1ec      	bne.n	8011a5a <uxr_read_framed_msg+0x26e>
 8011a80:	2301      	movs	r3, #1
 8011a82:	7023      	strb	r3, [r4, #0]
 8011a84:	e6c3      	b.n	801180e <uxr_read_framed_msg+0x22>
 8011a86:	1c50      	adds	r0, r2, #1
 8011a88:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8011a8c:	3202      	adds	r2, #2
 8011a8e:	0841      	lsrs	r1, r0, #1
 8011a90:	fba5 c101 	umull	ip, r1, r5, r1
 8011a94:	0889      	lsrs	r1, r1, #2
 8011a96:	fb0b 0111 	mls	r1, fp, r1, r0
 8011a9a:	1860      	adds	r0, r4, r1
 8011a9c:	b2c9      	uxtb	r1, r1
 8011a9e:	458a      	cmp	sl, r1
 8011aa0:	f43f af42 	beq.w	8011928 <uxr_read_framed_msg+0x13c>
 8011aa4:	0851      	lsrs	r1, r2, #1
 8011aa6:	7880      	ldrb	r0, [r0, #2]
 8011aa8:	fba5 a101 	umull	sl, r1, r5, r1
 8011aac:	287e      	cmp	r0, #126	; 0x7e
 8011aae:	f080 0c20 	eor.w	ip, r0, #32
 8011ab2:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8011ab6:	fb0b 2211 	mls	r2, fp, r1, r2
 8011aba:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011abe:	f47f af14 	bne.w	80118ea <uxr_read_framed_msg+0xfe>
 8011ac2:	459e      	cmp	lr, r3
 8011ac4:	f43f af33 	beq.w	801192e <uxr_read_framed_msg+0x142>
 8011ac8:	2301      	movs	r3, #1
 8011aca:	7023      	strb	r3, [r4, #0]
 8011acc:	e69f      	b.n	801180e <uxr_read_framed_msg+0x22>
 8011ace:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ad0:	9300      	str	r3, [sp, #0]
 8011ad2:	2301      	movs	r3, #1
 8011ad4:	9301      	str	r3, [sp, #4]
 8011ad6:	464a      	mov	r2, r9
 8011ad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ada:	4641      	mov	r1, r8
 8011adc:	4620      	mov	r0, r4
 8011ade:	f7ff fdf1 	bl	80116c4 <uxr_framing_read_transport>
 8011ae2:	2800      	cmp	r0, #0
 8011ae4:	f43f aec5 	beq.w	8011872 <uxr_read_framed_msg+0x86>
 8011ae8:	7823      	ldrb	r3, [r4, #0]
 8011aea:	e690      	b.n	801180e <uxr_read_framed_msg+0x22>
 8011aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011aee:	9300      	str	r3, [sp, #0]
 8011af0:	2302      	movs	r3, #2
 8011af2:	e7ef      	b.n	8011ad4 <uxr_read_framed_msg+0x2e8>
 8011af4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011af6:	464a      	mov	r2, r9
 8011af8:	4641      	mov	r1, r8
 8011afa:	4620      	mov	r0, r4
 8011afc:	9300      	str	r3, [sp, #0]
 8011afe:	2304      	movs	r3, #4
 8011b00:	9301      	str	r3, [sp, #4]
 8011b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b04:	f7ff fdde 	bl	80116c4 <uxr_framing_read_transport>
 8011b08:	2800      	cmp	r0, #0
 8011b0a:	d1ed      	bne.n	8011ae8 <uxr_read_framed_msg+0x2fc>
 8011b0c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8011b10:	2b7e      	cmp	r3, #126	; 0x7e
 8011b12:	d0e9      	beq.n	8011ae8 <uxr_read_framed_msg+0x2fc>
 8011b14:	e6ad      	b.n	8011872 <uxr_read_framed_msg+0x86>
 8011b16:	bf00      	nop
 8011b18:	30c30c31 	.word	0x30c30c31
 8011b1c:	080180d4 	.word	0x080180d4
 8011b20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b22:	9300      	str	r3, [sp, #0]
 8011b24:	2305      	movs	r3, #5
 8011b26:	9301      	str	r3, [sp, #4]
 8011b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b2a:	f7ff fdcb 	bl	80116c4 <uxr_framing_read_transport>
 8011b2e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8011b32:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011b36:	429a      	cmp	r2, r3
 8011b38:	f43f ae9b 	beq.w	8011872 <uxr_read_framed_msg+0x86>
 8011b3c:	e664      	b.n	8011808 <uxr_read_framed_msg+0x1c>
 8011b3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b40:	9300      	str	r3, [sp, #0]
 8011b42:	2303      	movs	r3, #3
 8011b44:	e7c6      	b.n	8011ad4 <uxr_read_framed_msg+0x2e8>
 8011b46:	2305      	movs	r3, #5
 8011b48:	7023      	strb	r3, [r4, #0]
 8011b4a:	e660      	b.n	801180e <uxr_read_framed_msg+0x22>
 8011b4c:	f43f aeef 	beq.w	801192e <uxr_read_framed_msg+0x142>
 8011b50:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8011b54:	d094      	beq.n	8011a80 <uxr_read_framed_msg+0x294>
 8011b56:	ebae 0303 	sub.w	r3, lr, r3
 8011b5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011b5c:	3302      	adds	r3, #2
 8011b5e:	9200      	str	r2, [sp, #0]
 8011b60:	e7b8      	b.n	8011ad4 <uxr_read_framed_msg+0x2e8>
 8011b62:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8011b66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b68:	7013      	strb	r3, [r2, #0]
 8011b6a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8011b6c:	b003      	add	sp, #12
 8011b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b72:	1c59      	adds	r1, r3, #1
 8011b74:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8011b78:	084a      	lsrs	r2, r1, #1
 8011b7a:	fba5 e202 	umull	lr, r2, r5, r2
 8011b7e:	0892      	lsrs	r2, r2, #2
 8011b80:	fb0c 1212 	mls	r2, ip, r2, r1
 8011b84:	b2d1      	uxtb	r1, r2
 8011b86:	4288      	cmp	r0, r1
 8011b88:	d0b0      	beq.n	8011aec <uxr_read_framed_msg+0x300>
 8011b8a:	3302      	adds	r3, #2
 8011b8c:	4422      	add	r2, r4
 8011b8e:	7891      	ldrb	r1, [r2, #2]
 8011b90:	085a      	lsrs	r2, r3, #1
 8011b92:	fba5 0202 	umull	r0, r2, r5, r2
 8011b96:	297e      	cmp	r1, #126	; 0x7e
 8011b98:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8011b9c:	fb0c 3312 	mls	r3, ip, r2, r3
 8011ba0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011ba4:	f000 80a1 	beq.w	8011cea <uxr_read_framed_msg+0x4fe>
 8011ba8:	f081 0120 	eor.w	r1, r1, #32
 8011bac:	e680      	b.n	80118b0 <uxr_read_framed_msg+0xc4>
 8011bae:	f103 0c01 	add.w	ip, r3, #1
 8011bb2:	202a      	movs	r0, #42	; 0x2a
 8011bb4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011bb8:	fba5 e202 	umull	lr, r2, r5, r2
 8011bbc:	0892      	lsrs	r2, r2, #2
 8011bbe:	fb00 c212 	mls	r2, r0, r2, ip
 8011bc2:	fa5f fc82 	uxtb.w	ip, r2
 8011bc6:	4561      	cmp	r1, ip
 8011bc8:	d081      	beq.n	8011ace <uxr_read_framed_msg+0x2e2>
 8011bca:	3302      	adds	r3, #2
 8011bcc:	4422      	add	r2, r4
 8011bce:	0859      	lsrs	r1, r3, #1
 8011bd0:	7892      	ldrb	r2, [r2, #2]
 8011bd2:	fba5 c101 	umull	ip, r1, r5, r1
 8011bd6:	2a7e      	cmp	r2, #126	; 0x7e
 8011bd8:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8011bdc:	fb00 3311 	mls	r3, r0, r1, r3
 8011be0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011be4:	f000 8091 	beq.w	8011d0a <uxr_read_framed_msg+0x51e>
 8011be8:	f082 0220 	eor.w	r2, r2, #32
 8011bec:	e636      	b.n	801185c <uxr_read_framed_msg+0x70>
 8011bee:	1c51      	adds	r1, r2, #1
 8011bf0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8011bf4:	084b      	lsrs	r3, r1, #1
 8011bf6:	fba5 e303 	umull	lr, r3, r5, r3
 8011bfa:	089b      	lsrs	r3, r3, #2
 8011bfc:	fb0c 1313 	mls	r3, ip, r3, r1
 8011c00:	b2d9      	uxtb	r1, r3
 8011c02:	4288      	cmp	r0, r1
 8011c04:	d09b      	beq.n	8011b3e <uxr_read_framed_msg+0x352>
 8011c06:	3202      	adds	r2, #2
 8011c08:	4423      	add	r3, r4
 8011c0a:	0850      	lsrs	r0, r2, #1
 8011c0c:	789b      	ldrb	r3, [r3, #2]
 8011c0e:	fba5 1000 	umull	r1, r0, r5, r0
 8011c12:	2b7e      	cmp	r3, #126	; 0x7e
 8011c14:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8011c18:	fb0c 2210 	mls	r2, ip, r0, r2
 8011c1c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011c20:	d077      	beq.n	8011d12 <uxr_read_framed_msg+0x526>
 8011c22:	f083 0120 	eor.w	r1, r3, #32
 8011c26:	e6ea      	b.n	80119fe <uxr_read_framed_msg+0x212>
 8011c28:	f103 0c01 	add.w	ip, r3, #1
 8011c2c:	202a      	movs	r0, #42	; 0x2a
 8011c2e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011c32:	fba5 e202 	umull	lr, r2, r5, r2
 8011c36:	0892      	lsrs	r2, r2, #2
 8011c38:	fb00 c212 	mls	r2, r0, r2, ip
 8011c3c:	fa5f fc82 	uxtb.w	ip, r2
 8011c40:	4561      	cmp	r1, ip
 8011c42:	f43f af57 	beq.w	8011af4 <uxr_read_framed_msg+0x308>
 8011c46:	3302      	adds	r3, #2
 8011c48:	4422      	add	r2, r4
 8011c4a:	7891      	ldrb	r1, [r2, #2]
 8011c4c:	085a      	lsrs	r2, r3, #1
 8011c4e:	fba5 c202 	umull	ip, r2, r5, r2
 8011c52:	297e      	cmp	r1, #126	; 0x7e
 8011c54:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8011c58:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8011c5c:	fb00 3312 	mls	r3, r0, r2, r3
 8011c60:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011c64:	f43f af46 	beq.w	8011af4 <uxr_read_framed_msg+0x308>
 8011c68:	f081 0120 	eor.w	r1, r1, #32
 8011c6c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8011c70:	e6ea      	b.n	8011a48 <uxr_read_framed_msg+0x25c>
 8011c72:	1c59      	adds	r1, r3, #1
 8011c74:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8011c78:	084a      	lsrs	r2, r1, #1
 8011c7a:	fba5 e202 	umull	lr, r2, r5, r2
 8011c7e:	0892      	lsrs	r2, r2, #2
 8011c80:	fb0c 1212 	mls	r2, ip, r2, r1
 8011c84:	b2d1      	uxtb	r1, r2
 8011c86:	4288      	cmp	r0, r1
 8011c88:	f43f af21 	beq.w	8011ace <uxr_read_framed_msg+0x2e2>
 8011c8c:	3302      	adds	r3, #2
 8011c8e:	4422      	add	r2, r4
 8011c90:	7891      	ldrb	r1, [r2, #2]
 8011c92:	085a      	lsrs	r2, r3, #1
 8011c94:	fba5 0202 	umull	r0, r2, r5, r2
 8011c98:	297e      	cmp	r1, #126	; 0x7e
 8011c9a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8011c9e:	fb0c 3312 	mls	r3, ip, r2, r3
 8011ca2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011ca6:	d030      	beq.n	8011d0a <uxr_read_framed_msg+0x51e>
 8011ca8:	f081 0120 	eor.w	r1, r1, #32
 8011cac:	e65d      	b.n	801196a <uxr_read_framed_msg+0x17e>
 8011cae:	1c59      	adds	r1, r3, #1
 8011cb0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8011cb4:	084a      	lsrs	r2, r1, #1
 8011cb6:	fba5 e202 	umull	lr, r2, r5, r2
 8011cba:	0892      	lsrs	r2, r2, #2
 8011cbc:	fb0c 1212 	mls	r2, ip, r2, r1
 8011cc0:	b2d1      	uxtb	r1, r2
 8011cc2:	4288      	cmp	r0, r1
 8011cc4:	f43f af12 	beq.w	8011aec <uxr_read_framed_msg+0x300>
 8011cc8:	3302      	adds	r3, #2
 8011cca:	4422      	add	r2, r4
 8011ccc:	7891      	ldrb	r1, [r2, #2]
 8011cce:	085a      	lsrs	r2, r3, #1
 8011cd0:	fba5 0202 	umull	r0, r2, r5, r2
 8011cd4:	297e      	cmp	r1, #126	; 0x7e
 8011cd6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8011cda:	fb0c 3312 	mls	r3, ip, r2, r3
 8011cde:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011ce2:	d002      	beq.n	8011cea <uxr_read_framed_msg+0x4fe>
 8011ce4:	f081 0120 	eor.w	r1, r1, #32
 8011ce8:	e66a      	b.n	80119c0 <uxr_read_framed_msg+0x1d4>
 8011cea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011cec:	9300      	str	r3, [sp, #0]
 8011cee:	2302      	movs	r3, #2
 8011cf0:	9301      	str	r3, [sp, #4]
 8011cf2:	464a      	mov	r2, r9
 8011cf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011cf6:	4641      	mov	r1, r8
 8011cf8:	4620      	mov	r0, r4
 8011cfa:	f7ff fce3 	bl	80116c4 <uxr_framing_read_transport>
 8011cfe:	2800      	cmp	r0, #0
 8011d00:	f47f aef2 	bne.w	8011ae8 <uxr_read_framed_msg+0x2fc>
 8011d04:	2301      	movs	r3, #1
 8011d06:	7023      	strb	r3, [r4, #0]
 8011d08:	e581      	b.n	801180e <uxr_read_framed_msg+0x22>
 8011d0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d0c:	9300      	str	r3, [sp, #0]
 8011d0e:	2301      	movs	r3, #1
 8011d10:	e7ee      	b.n	8011cf0 <uxr_read_framed_msg+0x504>
 8011d12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011d14:	9300      	str	r3, [sp, #0]
 8011d16:	2303      	movs	r3, #3
 8011d18:	e7ea      	b.n	8011cf0 <uxr_read_framed_msg+0x504>
 8011d1a:	bf00      	nop

08011d1c <rcl_get_automatic_discovery_range>:
 8011d1c:	b530      	push	{r4, r5, lr}
 8011d1e:	2300      	movs	r3, #0
 8011d20:	b083      	sub	sp, #12
 8011d22:	9301      	str	r3, [sp, #4]
 8011d24:	b1c0      	cbz	r0, 8011d58 <rcl_get_automatic_discovery_range+0x3c>
 8011d26:	4604      	mov	r4, r0
 8011d28:	a901      	add	r1, sp, #4
 8011d2a:	4818      	ldr	r0, [pc, #96]	; (8011d8c <rcl_get_automatic_discovery_range+0x70>)
 8011d2c:	f7fd f95a 	bl	800efe4 <rcutils_get_env>
 8011d30:	b110      	cbz	r0, 8011d38 <rcl_get_automatic_discovery_range+0x1c>
 8011d32:	2001      	movs	r0, #1
 8011d34:	b003      	add	sp, #12
 8011d36:	bd30      	pop	{r4, r5, pc}
 8011d38:	9d01      	ldr	r5, [sp, #4]
 8011d3a:	782b      	ldrb	r3, [r5, #0]
 8011d3c:	b13b      	cbz	r3, 8011d4e <rcl_get_automatic_discovery_range+0x32>
 8011d3e:	4914      	ldr	r1, [pc, #80]	; (8011d90 <rcl_get_automatic_discovery_range+0x74>)
 8011d40:	4628      	mov	r0, r5
 8011d42:	f7ee facd 	bl	80002e0 <strcmp>
 8011d46:	b950      	cbnz	r0, 8011d5e <rcl_get_automatic_discovery_range+0x42>
 8011d48:	2301      	movs	r3, #1
 8011d4a:	7023      	strb	r3, [r4, #0]
 8011d4c:	e7f2      	b.n	8011d34 <rcl_get_automatic_discovery_range+0x18>
 8011d4e:	2303      	movs	r3, #3
 8011d50:	2000      	movs	r0, #0
 8011d52:	7023      	strb	r3, [r4, #0]
 8011d54:	b003      	add	sp, #12
 8011d56:	bd30      	pop	{r4, r5, pc}
 8011d58:	200b      	movs	r0, #11
 8011d5a:	b003      	add	sp, #12
 8011d5c:	bd30      	pop	{r4, r5, pc}
 8011d5e:	490d      	ldr	r1, [pc, #52]	; (8011d94 <rcl_get_automatic_discovery_range+0x78>)
 8011d60:	4628      	mov	r0, r5
 8011d62:	f7ee fabd 	bl	80002e0 <strcmp>
 8011d66:	b168      	cbz	r0, 8011d84 <rcl_get_automatic_discovery_range+0x68>
 8011d68:	490b      	ldr	r1, [pc, #44]	; (8011d98 <rcl_get_automatic_discovery_range+0x7c>)
 8011d6a:	4628      	mov	r0, r5
 8011d6c:	f7ee fab8 	bl	80002e0 <strcmp>
 8011d70:	2800      	cmp	r0, #0
 8011d72:	d0ec      	beq.n	8011d4e <rcl_get_automatic_discovery_range+0x32>
 8011d74:	4909      	ldr	r1, [pc, #36]	; (8011d9c <rcl_get_automatic_discovery_range+0x80>)
 8011d76:	4628      	mov	r0, r5
 8011d78:	f7ee fab2 	bl	80002e0 <strcmp>
 8011d7c:	b910      	cbnz	r0, 8011d84 <rcl_get_automatic_discovery_range+0x68>
 8011d7e:	2304      	movs	r3, #4
 8011d80:	7023      	strb	r3, [r4, #0]
 8011d82:	e7d7      	b.n	8011d34 <rcl_get_automatic_discovery_range+0x18>
 8011d84:	2302      	movs	r3, #2
 8011d86:	2000      	movs	r0, #0
 8011d88:	7023      	strb	r3, [r4, #0]
 8011d8a:	e7d3      	b.n	8011d34 <rcl_get_automatic_discovery_range+0x18>
 8011d8c:	080182d4 	.word	0x080182d4
 8011d90:	080182f4 	.word	0x080182f4
 8011d94:	080182f8 	.word	0x080182f8
 8011d98:	08018304 	.word	0x08018304
 8011d9c:	0801830c 	.word	0x0801830c

08011da0 <rcl_automatic_discovery_range_to_string>:
 8011da0:	2804      	cmp	r0, #4
 8011da2:	d803      	bhi.n	8011dac <rcl_automatic_discovery_range_to_string+0xc>
 8011da4:	4b02      	ldr	r3, [pc, #8]	; (8011db0 <rcl_automatic_discovery_range_to_string+0x10>)
 8011da6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8011daa:	4770      	bx	lr
 8011dac:	2000      	movs	r0, #0
 8011dae:	4770      	bx	lr
 8011db0:	080183fc 	.word	0x080183fc

08011db4 <rcl_get_discovery_static_peers>:
 8011db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011db8:	2300      	movs	r3, #0
 8011dba:	b08e      	sub	sp, #56	; 0x38
 8011dbc:	9306      	str	r3, [sp, #24]
 8011dbe:	2900      	cmp	r1, #0
 8011dc0:	d04b      	beq.n	8011e5a <rcl_get_discovery_static_peers+0xa6>
 8011dc2:	4605      	mov	r5, r0
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	d048      	beq.n	8011e5a <rcl_get_discovery_static_peers+0xa6>
 8011dc8:	460c      	mov	r4, r1
 8011dca:	482c      	ldr	r0, [pc, #176]	; (8011e7c <rcl_get_discovery_static_peers+0xc8>)
 8011dcc:	a906      	add	r1, sp, #24
 8011dce:	f7fd f909 	bl	800efe4 <rcutils_get_env>
 8011dd2:	b118      	cbz	r0, 8011ddc <rcl_get_discovery_static_peers+0x28>
 8011dd4:	2001      	movs	r0, #1
 8011dd6:	b00e      	add	sp, #56	; 0x38
 8011dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ddc:	9b06      	ldr	r3, [sp, #24]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d0f8      	beq.n	8011dd4 <rcl_get_discovery_static_peers+0x20>
 8011de2:	af07      	add	r7, sp, #28
 8011de4:	4638      	mov	r0, r7
 8011de6:	f000 fc0f 	bl	8012608 <rcutils_get_zero_initialized_string_array>
 8011dea:	f104 0308 	add.w	r3, r4, #8
 8011dee:	9703      	str	r7, [sp, #12]
 8011df0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011df4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011df8:	213b      	movs	r1, #59	; 0x3b
 8011dfa:	9806      	ldr	r0, [sp, #24]
 8011dfc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8011e00:	f000 fb44 	bl	801248c <rcutils_split>
 8011e04:	2800      	cmp	r0, #0
 8011e06:	d1e5      	bne.n	8011dd4 <rcl_get_discovery_static_peers+0x20>
 8011e08:	4622      	mov	r2, r4
 8011e0a:	9907      	ldr	r1, [sp, #28]
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	f000 fc4b 	bl	80126a8 <rmw_discovery_options_init>
 8011e12:	4604      	mov	r4, r0
 8011e14:	bb78      	cbnz	r0, 8011e76 <rcl_get_discovery_static_peers+0xc2>
 8011e16:	9e07      	ldr	r6, [sp, #28]
 8011e18:	b336      	cbz	r6, 8011e68 <rcl_get_discovery_static_peers+0xb4>
 8011e1a:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011e1e:	4680      	mov	r8, r0
 8011e20:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8011e24:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8011e28:	4608      	mov	r0, r1
 8011e2a:	9105      	str	r1, [sp, #20]
 8011e2c:	f7ee fa62 	bl	80002f4 <strlen>
 8011e30:	28ff      	cmp	r0, #255	; 0xff
 8011e32:	9905      	ldr	r1, [sp, #20]
 8011e34:	d815      	bhi.n	8011e62 <rcl_get_discovery_static_peers+0xae>
 8011e36:	6868      	ldr	r0, [r5, #4]
 8011e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011e3c:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 8011e40:	3401      	adds	r4, #1
 8011e42:	f001 ff94 	bl	8013d6e <strncpy>
 8011e46:	686b      	ldr	r3, [r5, #4]
 8011e48:	9e07      	ldr	r6, [sp, #28]
 8011e4a:	444b      	add	r3, r9
 8011e4c:	42b4      	cmp	r4, r6
 8011e4e:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 8011e52:	d209      	bcs.n	8011e68 <rcl_get_discovery_static_peers+0xb4>
 8011e54:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011e58:	e7e2      	b.n	8011e20 <rcl_get_discovery_static_peers+0x6c>
 8011e5a:	200b      	movs	r0, #11
 8011e5c:	b00e      	add	sp, #56	; 0x38
 8011e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e62:	3401      	adds	r4, #1
 8011e64:	42b4      	cmp	r4, r6
 8011e66:	d3db      	bcc.n	8011e20 <rcl_get_discovery_static_peers+0x6c>
 8011e68:	4638      	mov	r0, r7
 8011e6a:	f000 fbeb 	bl	8012644 <rcutils_string_array_fini>
 8011e6e:	3800      	subs	r0, #0
 8011e70:	bf18      	it	ne
 8011e72:	2001      	movne	r0, #1
 8011e74:	e7af      	b.n	8011dd6 <rcl_get_discovery_static_peers+0x22>
 8011e76:	f7fc f909 	bl	800e08c <rcl_convert_rmw_ret_to_rcl_ret>
 8011e7a:	e7ac      	b.n	8011dd6 <rcl_get_discovery_static_peers+0x22>
 8011e7c:	0801831c 	.word	0x0801831c

08011e80 <rcl_get_default_domain_id>:
 8011e80:	b530      	push	{r4, r5, lr}
 8011e82:	2300      	movs	r3, #0
 8011e84:	b083      	sub	sp, #12
 8011e86:	9300      	str	r3, [sp, #0]
 8011e88:	b1d0      	cbz	r0, 8011ec0 <rcl_get_default_domain_id+0x40>
 8011e8a:	4604      	mov	r4, r0
 8011e8c:	4669      	mov	r1, sp
 8011e8e:	4815      	ldr	r0, [pc, #84]	; (8011ee4 <rcl_get_default_domain_id+0x64>)
 8011e90:	f7fd f8a8 	bl	800efe4 <rcutils_get_env>
 8011e94:	4602      	mov	r2, r0
 8011e96:	b110      	cbz	r0, 8011e9e <rcl_get_default_domain_id+0x1e>
 8011e98:	2001      	movs	r0, #1
 8011e9a:	b003      	add	sp, #12
 8011e9c:	bd30      	pop	{r4, r5, pc}
 8011e9e:	9b00      	ldr	r3, [sp, #0]
 8011ea0:	b18b      	cbz	r3, 8011ec6 <rcl_get_default_domain_id+0x46>
 8011ea2:	7818      	ldrb	r0, [r3, #0]
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	d0f8      	beq.n	8011e9a <rcl_get_default_domain_id+0x1a>
 8011ea8:	a901      	add	r1, sp, #4
 8011eaa:	4618      	mov	r0, r3
 8011eac:	9201      	str	r2, [sp, #4]
 8011eae:	f002 fe55 	bl	8014b5c <strtoul>
 8011eb2:	4605      	mov	r5, r0
 8011eb4:	b150      	cbz	r0, 8011ecc <rcl_get_default_domain_id+0x4c>
 8011eb6:	1c43      	adds	r3, r0, #1
 8011eb8:	d00d      	beq.n	8011ed6 <rcl_get_default_domain_id+0x56>
 8011eba:	2000      	movs	r0, #0
 8011ebc:	6025      	str	r5, [r4, #0]
 8011ebe:	e7ec      	b.n	8011e9a <rcl_get_default_domain_id+0x1a>
 8011ec0:	200b      	movs	r0, #11
 8011ec2:	b003      	add	sp, #12
 8011ec4:	bd30      	pop	{r4, r5, pc}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	b003      	add	sp, #12
 8011eca:	bd30      	pop	{r4, r5, pc}
 8011ecc:	9b01      	ldr	r3, [sp, #4]
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d0f2      	beq.n	8011eba <rcl_get_default_domain_id+0x3a>
 8011ed4:	e7e0      	b.n	8011e98 <rcl_get_default_domain_id+0x18>
 8011ed6:	f000 fdcf 	bl	8012a78 <__errno>
 8011eda:	6803      	ldr	r3, [r0, #0]
 8011edc:	2b22      	cmp	r3, #34	; 0x22
 8011ede:	d1ec      	bne.n	8011eba <rcl_get_default_domain_id+0x3a>
 8011ee0:	e7da      	b.n	8011e98 <rcl_get_default_domain_id+0x18>
 8011ee2:	bf00      	nop
 8011ee4:	08018410 	.word	0x08018410

08011ee8 <rcl_expand_topic_name>:
 8011ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eec:	b08d      	sub	sp, #52	; 0x34
 8011eee:	4698      	mov	r8, r3
 8011ef0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011ef2:	9207      	str	r2, [sp, #28]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	bf18      	it	ne
 8011ef8:	f1b8 0f00 	cmpne.w	r8, #0
 8011efc:	bf0c      	ite	eq
 8011efe:	2301      	moveq	r3, #1
 8011f00:	2300      	movne	r3, #0
 8011f02:	2a00      	cmp	r2, #0
 8011f04:	bf08      	it	eq
 8011f06:	f043 0301 	orreq.w	r3, r3, #1
 8011f0a:	2900      	cmp	r1, #0
 8011f0c:	bf08      	it	eq
 8011f0e:	f043 0301 	orreq.w	r3, r3, #1
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d13d      	bne.n	8011f92 <rcl_expand_topic_name+0xaa>
 8011f16:	fab0 f280 	clz	r2, r0
 8011f1a:	4604      	mov	r4, r0
 8011f1c:	0952      	lsrs	r2, r2, #5
 8011f1e:	2800      	cmp	r0, #0
 8011f20:	d037      	beq.n	8011f92 <rcl_expand_topic_name+0xaa>
 8011f22:	460f      	mov	r7, r1
 8011f24:	a90b      	add	r1, sp, #44	; 0x2c
 8011f26:	f000 f9ed 	bl	8012304 <rcl_validate_topic_name>
 8011f2a:	4605      	mov	r5, r0
 8011f2c:	bb68      	cbnz	r0, 8011f8a <rcl_expand_topic_name+0xa2>
 8011f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d137      	bne.n	8011fa4 <rcl_expand_topic_name+0xbc>
 8011f34:	4602      	mov	r2, r0
 8011f36:	a90b      	add	r1, sp, #44	; 0x2c
 8011f38:	4638      	mov	r0, r7
 8011f3a:	f7fd fc6b 	bl	800f814 <rmw_validate_node_name>
 8011f3e:	bb68      	cbnz	r0, 8011f9c <rcl_expand_topic_name+0xb4>
 8011f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d133      	bne.n	8011fae <rcl_expand_topic_name+0xc6>
 8011f46:	462a      	mov	r2, r5
 8011f48:	a90b      	add	r1, sp, #44	; 0x2c
 8011f4a:	9807      	ldr	r0, [sp, #28]
 8011f4c:	f7fd fc44 	bl	800f7d8 <rmw_validate_namespace>
 8011f50:	bb20      	cbnz	r0, 8011f9c <rcl_expand_topic_name+0xb4>
 8011f52:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8011f54:	2d00      	cmp	r5, #0
 8011f56:	f040 80a2 	bne.w	801209e <rcl_expand_topic_name+0x1b6>
 8011f5a:	217b      	movs	r1, #123	; 0x7b
 8011f5c:	4620      	mov	r0, r4
 8011f5e:	f001 fedd 	bl	8013d1c <strchr>
 8011f62:	7823      	ldrb	r3, [r4, #0]
 8011f64:	4681      	mov	r9, r0
 8011f66:	bb20      	cbnz	r0, 8011fb2 <rcl_expand_topic_name+0xca>
 8011f68:	2b2f      	cmp	r3, #47	; 0x2f
 8011f6a:	d122      	bne.n	8011fb2 <rcl_expand_topic_name+0xca>
 8011f6c:	ab19      	add	r3, sp, #100	; 0x64
 8011f6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011f72:	ab16      	add	r3, sp, #88	; 0x58
 8011f74:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011f78:	4620      	mov	r0, r4
 8011f7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f7c:	f7fd f994 	bl	800f2a8 <rcutils_strdup>
 8011f80:	2800      	cmp	r0, #0
 8011f82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f84:	bf08      	it	eq
 8011f86:	250a      	moveq	r5, #10
 8011f88:	6018      	str	r0, [r3, #0]
 8011f8a:	4628      	mov	r0, r5
 8011f8c:	b00d      	add	sp, #52	; 0x34
 8011f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f92:	250b      	movs	r5, #11
 8011f94:	4628      	mov	r0, r5
 8011f96:	b00d      	add	sp, #52	; 0x34
 8011f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f9c:	f7fc f876 	bl	800e08c <rcl_convert_rmw_ret_to_rcl_ret>
 8011fa0:	4605      	mov	r5, r0
 8011fa2:	e7f2      	b.n	8011f8a <rcl_expand_topic_name+0xa2>
 8011fa4:	2567      	movs	r5, #103	; 0x67
 8011fa6:	4628      	mov	r0, r5
 8011fa8:	b00d      	add	sp, #52	; 0x34
 8011faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fae:	25c9      	movs	r5, #201	; 0xc9
 8011fb0:	e7eb      	b.n	8011f8a <rcl_expand_topic_name+0xa2>
 8011fb2:	2b7e      	cmp	r3, #126	; 0x7e
 8011fb4:	d075      	beq.n	80120a2 <rcl_expand_topic_name+0x1ba>
 8011fb6:	f1b9 0f00 	cmp.w	r9, #0
 8011fba:	f000 80c2 	beq.w	8012142 <rcl_expand_topic_name+0x25a>
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	46a2      	mov	sl, r4
 8011fc2:	461e      	mov	r6, r3
 8011fc4:	9508      	str	r5, [sp, #32]
 8011fc6:	4655      	mov	r5, sl
 8011fc8:	9409      	str	r4, [sp, #36]	; 0x24
 8011fca:	46b2      	mov	sl, r6
 8011fcc:	464c      	mov	r4, r9
 8011fce:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8011fd2:	2c00      	cmp	r4, #0
 8011fd4:	f000 80ae 	beq.w	8012134 <rcl_expand_topic_name+0x24c>
 8011fd8:	217d      	movs	r1, #125	; 0x7d
 8011fda:	4628      	mov	r0, r5
 8011fdc:	f001 fe9e 	bl	8013d1c <strchr>
 8011fe0:	eba0 0904 	sub.w	r9, r0, r4
 8011fe4:	4621      	mov	r1, r4
 8011fe6:	4869      	ldr	r0, [pc, #420]	; (801218c <rcl_expand_topic_name+0x2a4>)
 8011fe8:	f109 0601 	add.w	r6, r9, #1
 8011fec:	4632      	mov	r2, r6
 8011fee:	f001 feaa 	bl	8013d46 <strncmp>
 8011ff2:	2800      	cmp	r0, #0
 8011ff4:	d051      	beq.n	801209a <rcl_expand_topic_name+0x1b2>
 8011ff6:	4632      	mov	r2, r6
 8011ff8:	4621      	mov	r1, r4
 8011ffa:	4865      	ldr	r0, [pc, #404]	; (8012190 <rcl_expand_topic_name+0x2a8>)
 8011ffc:	f001 fea3 	bl	8013d46 <strncmp>
 8012000:	b128      	cbz	r0, 801200e <rcl_expand_topic_name+0x126>
 8012002:	4632      	mov	r2, r6
 8012004:	4621      	mov	r1, r4
 8012006:	4863      	ldr	r0, [pc, #396]	; (8012194 <rcl_expand_topic_name+0x2ac>)
 8012008:	f001 fe9d 	bl	8013d46 <strncmp>
 801200c:	bb38      	cbnz	r0, 801205e <rcl_expand_topic_name+0x176>
 801200e:	46d9      	mov	r9, fp
 8012010:	ab18      	add	r3, sp, #96	; 0x60
 8012012:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012016:	ab16      	add	r3, sp, #88	; 0x58
 8012018:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801201c:	4620      	mov	r0, r4
 801201e:	4631      	mov	r1, r6
 8012020:	cb0c      	ldmia	r3, {r2, r3}
 8012022:	f7fd f967 	bl	800f2f4 <rcutils_strndup>
 8012026:	4604      	mov	r4, r0
 8012028:	2800      	cmp	r0, #0
 801202a:	f000 80a3 	beq.w	8012174 <rcl_expand_topic_name+0x28c>
 801202e:	464a      	mov	r2, r9
 8012030:	4628      	mov	r0, r5
 8012032:	ab16      	add	r3, sp, #88	; 0x58
 8012034:	4621      	mov	r1, r4
 8012036:	f7fd f837 	bl	800f0a8 <rcutils_repl_str>
 801203a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801203c:	4605      	mov	r5, r0
 801203e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012040:	4620      	mov	r0, r4
 8012042:	4798      	blx	r3
 8012044:	4650      	mov	r0, sl
 8012046:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012048:	991a      	ldr	r1, [sp, #104]	; 0x68
 801204a:	4798      	blx	r3
 801204c:	2d00      	cmp	r5, #0
 801204e:	d06c      	beq.n	801212a <rcl_expand_topic_name+0x242>
 8012050:	217b      	movs	r1, #123	; 0x7b
 8012052:	4628      	mov	r0, r5
 8012054:	f001 fe62 	bl	8013d1c <strchr>
 8012058:	46aa      	mov	sl, r5
 801205a:	4604      	mov	r4, r0
 801205c:	e7b9      	b.n	8011fd2 <rcl_expand_topic_name+0xea>
 801205e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8012062:	1c61      	adds	r1, r4, #1
 8012064:	4640      	mov	r0, r8
 8012066:	f7fd fa41 	bl	800f4ec <rcutils_string_map_getn>
 801206a:	4681      	mov	r9, r0
 801206c:	2800      	cmp	r0, #0
 801206e:	d1cf      	bne.n	8012010 <rcl_expand_topic_name+0x128>
 8012070:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012072:	aa18      	add	r2, sp, #96	; 0x60
 8012074:	2569      	movs	r5, #105	; 0x69
 8012076:	6018      	str	r0, [r3, #0]
 8012078:	ab16      	add	r3, sp, #88	; 0x58
 801207a:	ca07      	ldmia	r2, {r0, r1, r2}
 801207c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012080:	4631      	mov	r1, r6
 8012082:	4620      	mov	r0, r4
 8012084:	cb0c      	ldmia	r3, {r2, r3}
 8012086:	f7fd f935 	bl	800f2f4 <rcutils_strndup>
 801208a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801208c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801208e:	4798      	blx	r3
 8012090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012092:	991a      	ldr	r1, [sp, #104]	; 0x68
 8012094:	4650      	mov	r0, sl
 8012096:	4798      	blx	r3
 8012098:	e777      	b.n	8011f8a <rcl_expand_topic_name+0xa2>
 801209a:	46b9      	mov	r9, r7
 801209c:	e7b8      	b.n	8012010 <rcl_expand_topic_name+0x128>
 801209e:	25ca      	movs	r5, #202	; 0xca
 80120a0:	e773      	b.n	8011f8a <rcl_expand_topic_name+0xa2>
 80120a2:	9e07      	ldr	r6, [sp, #28]
 80120a4:	4630      	mov	r0, r6
 80120a6:	f7ee f925 	bl	80002f4 <strlen>
 80120aa:	4a3b      	ldr	r2, [pc, #236]	; (8012198 <rcl_expand_topic_name+0x2b0>)
 80120ac:	4b3b      	ldr	r3, [pc, #236]	; (801219c <rcl_expand_topic_name+0x2b4>)
 80120ae:	9603      	str	r6, [sp, #12]
 80120b0:	2801      	cmp	r0, #1
 80120b2:	bf18      	it	ne
 80120b4:	4613      	movne	r3, r2
 80120b6:	9704      	str	r7, [sp, #16]
 80120b8:	9302      	str	r3, [sp, #8]
 80120ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80120bc:	9300      	str	r3, [sp, #0]
 80120be:	1c63      	adds	r3, r4, #1
 80120c0:	9305      	str	r3, [sp, #20]
 80120c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80120c6:	9301      	str	r3, [sp, #4]
 80120c8:	ab16      	add	r3, sp, #88	; 0x58
 80120ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80120cc:	f7fc ffb2 	bl	800f034 <rcutils_format_string_limit>
 80120d0:	4606      	mov	r6, r0
 80120d2:	b350      	cbz	r0, 801212a <rcl_expand_topic_name+0x242>
 80120d4:	f1b9 0f00 	cmp.w	r9, #0
 80120d8:	d005      	beq.n	80120e6 <rcl_expand_topic_name+0x1fe>
 80120da:	217b      	movs	r1, #123	; 0x7b
 80120dc:	46b2      	mov	sl, r6
 80120de:	f001 fe1d 	bl	8013d1c <strchr>
 80120e2:	4681      	mov	r9, r0
 80120e4:	e76e      	b.n	8011fc4 <rcl_expand_topic_name+0xdc>
 80120e6:	7833      	ldrb	r3, [r6, #0]
 80120e8:	2b2f      	cmp	r3, #47	; 0x2f
 80120ea:	d01b      	beq.n	8012124 <rcl_expand_topic_name+0x23c>
 80120ec:	9c07      	ldr	r4, [sp, #28]
 80120ee:	4620      	mov	r0, r4
 80120f0:	f7ee f900 	bl	80002f4 <strlen>
 80120f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80120f8:	4a29      	ldr	r2, [pc, #164]	; (80121a0 <rcl_expand_topic_name+0x2b8>)
 80120fa:	9301      	str	r3, [sp, #4]
 80120fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80120fe:	9604      	str	r6, [sp, #16]
 8012100:	9300      	str	r3, [sp, #0]
 8012102:	4b28      	ldr	r3, [pc, #160]	; (80121a4 <rcl_expand_topic_name+0x2bc>)
 8012104:	9403      	str	r4, [sp, #12]
 8012106:	2801      	cmp	r0, #1
 8012108:	bf18      	it	ne
 801210a:	4613      	movne	r3, r2
 801210c:	9302      	str	r3, [sp, #8]
 801210e:	ab16      	add	r3, sp, #88	; 0x58
 8012110:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012112:	f7fc ff8f 	bl	800f034 <rcutils_format_string_limit>
 8012116:	4603      	mov	r3, r0
 8012118:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801211a:	4630      	mov	r0, r6
 801211c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801211e:	461e      	mov	r6, r3
 8012120:	4790      	blx	r2
 8012122:	b116      	cbz	r6, 801212a <rcl_expand_topic_name+0x242>
 8012124:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012126:	601e      	str	r6, [r3, #0]
 8012128:	e72f      	b.n	8011f8a <rcl_expand_topic_name+0xa2>
 801212a:	2300      	movs	r3, #0
 801212c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801212e:	250a      	movs	r5, #10
 8012130:	6013      	str	r3, [r2, #0]
 8012132:	e72a      	b.n	8011f8a <rcl_expand_topic_name+0xa2>
 8012134:	4653      	mov	r3, sl
 8012136:	4656      	mov	r6, sl
 8012138:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d1d2      	bne.n	80120e6 <rcl_expand_topic_name+0x1fe>
 8012140:	7823      	ldrb	r3, [r4, #0]
 8012142:	2b2f      	cmp	r3, #47	; 0x2f
 8012144:	d01e      	beq.n	8012184 <rcl_expand_topic_name+0x29c>
 8012146:	9e07      	ldr	r6, [sp, #28]
 8012148:	4630      	mov	r0, r6
 801214a:	f7ee f8d3 	bl	80002f4 <strlen>
 801214e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012150:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012154:	9603      	str	r6, [sp, #12]
 8012156:	9404      	str	r4, [sp, #16]
 8012158:	e9cd 2300 	strd	r2, r3, [sp]
 801215c:	4a10      	ldr	r2, [pc, #64]	; (80121a0 <rcl_expand_topic_name+0x2b8>)
 801215e:	4b11      	ldr	r3, [pc, #68]	; (80121a4 <rcl_expand_topic_name+0x2bc>)
 8012160:	2801      	cmp	r0, #1
 8012162:	bf18      	it	ne
 8012164:	4613      	movne	r3, r2
 8012166:	9302      	str	r3, [sp, #8]
 8012168:	ab16      	add	r3, sp, #88	; 0x58
 801216a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801216c:	f7fc ff62 	bl	800f034 <rcutils_format_string_limit>
 8012170:	4606      	mov	r6, r0
 8012172:	e7d6      	b.n	8012122 <rcl_expand_topic_name+0x23a>
 8012174:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 8012178:	4650      	mov	r0, sl
 801217a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801217c:	6014      	str	r4, [r2, #0]
 801217e:	250a      	movs	r5, #10
 8012180:	4798      	blx	r3
 8012182:	e702      	b.n	8011f8a <rcl_expand_topic_name+0xa2>
 8012184:	2300      	movs	r3, #0
 8012186:	461e      	mov	r6, r3
 8012188:	e7cc      	b.n	8012124 <rcl_expand_topic_name+0x23c>
 801218a:	bf00      	nop
 801218c:	08018428 	.word	0x08018428
 8012190:	08018430 	.word	0x08018430
 8012194:	08018438 	.word	0x08018438
 8012198:	08018420 	.word	0x08018420
 801219c:	08017a7c 	.word	0x08017a7c
 80121a0:	08017b6c 	.word	0x08017b6c
 80121a4:	08017a8c 	.word	0x08017a8c

080121a8 <rcl_get_default_topic_name_substitutions>:
 80121a8:	2800      	cmp	r0, #0
 80121aa:	bf0c      	ite	eq
 80121ac:	200b      	moveq	r0, #11
 80121ae:	2000      	movne	r0, #0
 80121b0:	4770      	bx	lr
 80121b2:	bf00      	nop

080121b4 <rcl_get_zero_initialized_guard_condition>:
 80121b4:	4a03      	ldr	r2, [pc, #12]	; (80121c4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80121b6:	4603      	mov	r3, r0
 80121b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80121bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80121c0:	4618      	mov	r0, r3
 80121c2:	4770      	bx	lr
 80121c4:	08018444 	.word	0x08018444

080121c8 <rcl_guard_condition_init_from_rmw>:
 80121c8:	b082      	sub	sp, #8
 80121ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121ce:	b086      	sub	sp, #24
 80121d0:	4604      	mov	r4, r0
 80121d2:	460e      	mov	r6, r1
 80121d4:	4615      	mov	r5, r2
 80121d6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80121da:	f10d 0e04 	add.w	lr, sp, #4
 80121de:	f84c 3f04 	str.w	r3, [ip, #4]!
 80121e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80121e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80121ea:	f8dc 3000 	ldr.w	r3, [ip]
 80121ee:	a801      	add	r0, sp, #4
 80121f0:	f8ce 3000 	str.w	r3, [lr]
 80121f4:	f7f7 fbcc 	bl	8009990 <rcutils_allocator_is_valid>
 80121f8:	f080 0301 	eor.w	r3, r0, #1
 80121fc:	b2db      	uxtb	r3, r3
 80121fe:	bb3b      	cbnz	r3, 8012250 <rcl_guard_condition_init_from_rmw+0x88>
 8012200:	b334      	cbz	r4, 8012250 <rcl_guard_condition_init_from_rmw+0x88>
 8012202:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012206:	f1b8 0f00 	cmp.w	r8, #0
 801220a:	d11a      	bne.n	8012242 <rcl_guard_condition_init_from_rmw+0x7a>
 801220c:	b305      	cbz	r5, 8012250 <rcl_guard_condition_init_from_rmw+0x88>
 801220e:	4628      	mov	r0, r5
 8012210:	f7fb ff5a 	bl	800e0c8 <rcl_context_is_valid>
 8012214:	b1f0      	cbz	r0, 8012254 <rcl_guard_condition_init_from_rmw+0x8c>
 8012216:	9b01      	ldr	r3, [sp, #4]
 8012218:	201c      	movs	r0, #28
 801221a:	9905      	ldr	r1, [sp, #20]
 801221c:	4798      	blx	r3
 801221e:	4607      	mov	r7, r0
 8012220:	6060      	str	r0, [r4, #4]
 8012222:	b320      	cbz	r0, 801226e <rcl_guard_condition_init_from_rmw+0xa6>
 8012224:	b1c6      	cbz	r6, 8012258 <rcl_guard_condition_init_from_rmw+0x90>
 8012226:	6006      	str	r6, [r0, #0]
 8012228:	f880 8004 	strb.w	r8, [r0, #4]
 801222c:	ac01      	add	r4, sp, #4
 801222e:	f107 0c08 	add.w	ip, r7, #8
 8012232:	2500      	movs	r5, #0
 8012234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012236:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801223a:	6823      	ldr	r3, [r4, #0]
 801223c:	f8cc 3000 	str.w	r3, [ip]
 8012240:	e000      	b.n	8012244 <rcl_guard_condition_init_from_rmw+0x7c>
 8012242:	2564      	movs	r5, #100	; 0x64
 8012244:	4628      	mov	r0, r5
 8012246:	b006      	add	sp, #24
 8012248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801224c:	b002      	add	sp, #8
 801224e:	4770      	bx	lr
 8012250:	250b      	movs	r5, #11
 8012252:	e7f7      	b.n	8012244 <rcl_guard_condition_init_from_rmw+0x7c>
 8012254:	2565      	movs	r5, #101	; 0x65
 8012256:	e7f5      	b.n	8012244 <rcl_guard_condition_init_from_rmw+0x7c>
 8012258:	6828      	ldr	r0, [r5, #0]
 801225a:	3028      	adds	r0, #40	; 0x28
 801225c:	f000 fb7c 	bl	8012958 <rmw_create_guard_condition>
 8012260:	6038      	str	r0, [r7, #0]
 8012262:	6867      	ldr	r7, [r4, #4]
 8012264:	683e      	ldr	r6, [r7, #0]
 8012266:	b126      	cbz	r6, 8012272 <rcl_guard_condition_init_from_rmw+0xaa>
 8012268:	2301      	movs	r3, #1
 801226a:	713b      	strb	r3, [r7, #4]
 801226c:	e7de      	b.n	801222c <rcl_guard_condition_init_from_rmw+0x64>
 801226e:	250a      	movs	r5, #10
 8012270:	e7e8      	b.n	8012244 <rcl_guard_condition_init_from_rmw+0x7c>
 8012272:	9b02      	ldr	r3, [sp, #8]
 8012274:	4638      	mov	r0, r7
 8012276:	9905      	ldr	r1, [sp, #20]
 8012278:	2501      	movs	r5, #1
 801227a:	4798      	blx	r3
 801227c:	6066      	str	r6, [r4, #4]
 801227e:	e7e1      	b.n	8012244 <rcl_guard_condition_init_from_rmw+0x7c>

08012280 <rcl_guard_condition_fini>:
 8012280:	b570      	push	{r4, r5, r6, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	b1f0      	cbz	r0, 80122c4 <rcl_guard_condition_fini+0x44>
 8012286:	6843      	ldr	r3, [r0, #4]
 8012288:	4604      	mov	r4, r0
 801228a:	b163      	cbz	r3, 80122a6 <rcl_guard_condition_fini+0x26>
 801228c:	6818      	ldr	r0, [r3, #0]
 801228e:	68de      	ldr	r6, [r3, #12]
 8012290:	6999      	ldr	r1, [r3, #24]
 8012292:	b160      	cbz	r0, 80122ae <rcl_guard_condition_fini+0x2e>
 8012294:	791d      	ldrb	r5, [r3, #4]
 8012296:	b965      	cbnz	r5, 80122b2 <rcl_guard_condition_fini+0x32>
 8012298:	4618      	mov	r0, r3
 801229a:	47b0      	blx	r6
 801229c:	2300      	movs	r3, #0
 801229e:	4628      	mov	r0, r5
 80122a0:	6063      	str	r3, [r4, #4]
 80122a2:	b002      	add	sp, #8
 80122a4:	bd70      	pop	{r4, r5, r6, pc}
 80122a6:	461d      	mov	r5, r3
 80122a8:	4628      	mov	r0, r5
 80122aa:	b002      	add	sp, #8
 80122ac:	bd70      	pop	{r4, r5, r6, pc}
 80122ae:	4605      	mov	r5, r0
 80122b0:	e7f2      	b.n	8012298 <rcl_guard_condition_fini+0x18>
 80122b2:	9101      	str	r1, [sp, #4]
 80122b4:	f000 fb66 	bl	8012984 <rmw_destroy_guard_condition>
 80122b8:	1e05      	subs	r5, r0, #0
 80122ba:	6863      	ldr	r3, [r4, #4]
 80122bc:	9901      	ldr	r1, [sp, #4]
 80122be:	bf18      	it	ne
 80122c0:	2501      	movne	r5, #1
 80122c2:	e7e9      	b.n	8012298 <rcl_guard_condition_fini+0x18>
 80122c4:	250b      	movs	r5, #11
 80122c6:	4628      	mov	r0, r5
 80122c8:	b002      	add	sp, #8
 80122ca:	bd70      	pop	{r4, r5, r6, pc}

080122cc <rcl_guard_condition_get_default_options>:
 80122cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122ce:	b087      	sub	sp, #28
 80122d0:	4606      	mov	r6, r0
 80122d2:	4c0b      	ldr	r4, [pc, #44]	; (8012300 <rcl_guard_condition_get_default_options+0x34>)
 80122d4:	4668      	mov	r0, sp
 80122d6:	f7f7 fb4d 	bl	8009974 <rcutils_get_default_allocator>
 80122da:	46ee      	mov	lr, sp
 80122dc:	46a4      	mov	ip, r4
 80122de:	4625      	mov	r5, r4
 80122e0:	4634      	mov	r4, r6
 80122e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80122e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122ec:	f8de 7000 	ldr.w	r7, [lr]
 80122f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122f2:	4630      	mov	r0, r6
 80122f4:	f8cc 7000 	str.w	r7, [ip]
 80122f8:	6027      	str	r7, [r4, #0]
 80122fa:	b007      	add	sp, #28
 80122fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122fe:	bf00      	nop
 8012300:	2000eac0 	.word	0x2000eac0

08012304 <rcl_validate_topic_name>:
 8012304:	2800      	cmp	r0, #0
 8012306:	f000 8089 	beq.w	801241c <rcl_validate_topic_name+0x118>
 801230a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801230e:	460e      	mov	r6, r1
 8012310:	2900      	cmp	r1, #0
 8012312:	f000 8085 	beq.w	8012420 <rcl_validate_topic_name+0x11c>
 8012316:	4604      	mov	r4, r0
 8012318:	4617      	mov	r7, r2
 801231a:	f7ed ffeb 	bl	80002f4 <strlen>
 801231e:	b1b0      	cbz	r0, 801234e <rcl_validate_topic_name+0x4a>
 8012320:	f894 e000 	ldrb.w	lr, [r4]
 8012324:	f8df c160 	ldr.w	ip, [pc, #352]	; 8012488 <rcl_validate_topic_name+0x184>
 8012328:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801232c:	f013 0304 	ands.w	r3, r3, #4
 8012330:	d139      	bne.n	80123a6 <rcl_validate_topic_name+0xa2>
 8012332:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8012336:	f814 2008 	ldrb.w	r2, [r4, r8]
 801233a:	2a2f      	cmp	r2, #47	; 0x2f
 801233c:	d10f      	bne.n	801235e <rcl_validate_topic_name+0x5a>
 801233e:	2202      	movs	r2, #2
 8012340:	6032      	str	r2, [r6, #0]
 8012342:	b3a7      	cbz	r7, 80123ae <rcl_validate_topic_name+0xaa>
 8012344:	4618      	mov	r0, r3
 8012346:	f8c7 8000 	str.w	r8, [r7]
 801234a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801234e:	2301      	movs	r3, #1
 8012350:	6033      	str	r3, [r6, #0]
 8012352:	b367      	cbz	r7, 80123ae <rcl_validate_topic_name+0xaa>
 8012354:	2300      	movs	r3, #0
 8012356:	4618      	mov	r0, r3
 8012358:	603b      	str	r3, [r7, #0]
 801235a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801235e:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8012362:	461d      	mov	r5, r3
 8012364:	4619      	mov	r1, r3
 8012366:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801236a:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801236e:	f1b9 0f09 	cmp.w	r9, #9
 8012372:	d91f      	bls.n	80123b4 <rcl_validate_topic_name+0xb0>
 8012374:	f022 0920 	bic.w	r9, r2, #32
 8012378:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801237c:	f1b9 0f19 	cmp.w	r9, #25
 8012380:	d918      	bls.n	80123b4 <rcl_validate_topic_name+0xb0>
 8012382:	2a5f      	cmp	r2, #95	; 0x5f
 8012384:	d024      	beq.n	80123d0 <rcl_validate_topic_name+0xcc>
 8012386:	2a2f      	cmp	r2, #47	; 0x2f
 8012388:	d058      	beq.n	801243c <rcl_validate_topic_name+0x138>
 801238a:	2a7e      	cmp	r2, #126	; 0x7e
 801238c:	d04a      	beq.n	8012424 <rcl_validate_topic_name+0x120>
 801238e:	2a7b      	cmp	r2, #123	; 0x7b
 8012390:	d05b      	beq.n	801244a <rcl_validate_topic_name+0x146>
 8012392:	2a7d      	cmp	r2, #125	; 0x7d
 8012394:	d169      	bne.n	801246a <rcl_validate_topic_name+0x166>
 8012396:	2d00      	cmp	r5, #0
 8012398:	d15c      	bne.n	8012454 <rcl_validate_topic_name+0x150>
 801239a:	2305      	movs	r3, #5
 801239c:	6033      	str	r3, [r6, #0]
 801239e:	b137      	cbz	r7, 80123ae <rcl_validate_topic_name+0xaa>
 80123a0:	2000      	movs	r0, #0
 80123a2:	6039      	str	r1, [r7, #0]
 80123a4:	e7d9      	b.n	801235a <rcl_validate_topic_name+0x56>
 80123a6:	2304      	movs	r3, #4
 80123a8:	6033      	str	r3, [r6, #0]
 80123aa:	2f00      	cmp	r7, #0
 80123ac:	d1d2      	bne.n	8012354 <rcl_validate_topic_name+0x50>
 80123ae:	2000      	movs	r0, #0
 80123b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123b4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80123b8:	0752      	lsls	r2, r2, #29
 80123ba:	d509      	bpl.n	80123d0 <rcl_validate_topic_name+0xcc>
 80123bc:	2900      	cmp	r1, #0
 80123be:	bf0c      	ite	eq
 80123c0:	2200      	moveq	r2, #0
 80123c2:	f005 0201 	andne.w	r2, r5, #1
 80123c6:	b11a      	cbz	r2, 80123d0 <rcl_validate_topic_name+0xcc>
 80123c8:	1e4d      	subs	r5, r1, #1
 80123ca:	429d      	cmp	r5, r3
 80123cc:	d031      	beq.n	8012432 <rcl_validate_topic_name+0x12e>
 80123ce:	4615      	mov	r5, r2
 80123d0:	3101      	adds	r1, #1
 80123d2:	4288      	cmp	r0, r1
 80123d4:	d1c7      	bne.n	8012366 <rcl_validate_topic_name+0x62>
 80123d6:	2d00      	cmp	r5, #0
 80123d8:	d142      	bne.n	8012460 <rcl_validate_topic_name+0x15c>
 80123da:	4628      	mov	r0, r5
 80123dc:	2301      	movs	r3, #1
 80123de:	e00c      	b.n	80123fa <rcl_validate_topic_name+0xf6>
 80123e0:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80123e4:	d101      	bne.n	80123ea <rcl_validate_topic_name+0xe6>
 80123e6:	2801      	cmp	r0, #1
 80123e8:	d047      	beq.n	801247a <rcl_validate_topic_name+0x176>
 80123ea:	1c5a      	adds	r2, r3, #1
 80123ec:	428b      	cmp	r3, r1
 80123ee:	f100 0001 	add.w	r0, r0, #1
 80123f2:	f104 0401 	add.w	r4, r4, #1
 80123f6:	4613      	mov	r3, r2
 80123f8:	d22e      	bcs.n	8012458 <rcl_validate_topic_name+0x154>
 80123fa:	4580      	cmp	r8, r0
 80123fc:	d0f5      	beq.n	80123ea <rcl_validate_topic_name+0xe6>
 80123fe:	7822      	ldrb	r2, [r4, #0]
 8012400:	2a2f      	cmp	r2, #47	; 0x2f
 8012402:	d1ed      	bne.n	80123e0 <rcl_validate_topic_name+0xdc>
 8012404:	7862      	ldrb	r2, [r4, #1]
 8012406:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801240a:	0752      	lsls	r2, r2, #29
 801240c:	d5ed      	bpl.n	80123ea <rcl_validate_topic_name+0xe6>
 801240e:	2204      	movs	r2, #4
 8012410:	6032      	str	r2, [r6, #0]
 8012412:	2f00      	cmp	r7, #0
 8012414:	d0cb      	beq.n	80123ae <rcl_validate_topic_name+0xaa>
 8012416:	2000      	movs	r0, #0
 8012418:	603b      	str	r3, [r7, #0]
 801241a:	e79e      	b.n	801235a <rcl_validate_topic_name+0x56>
 801241c:	200b      	movs	r0, #11
 801241e:	4770      	bx	lr
 8012420:	200b      	movs	r0, #11
 8012422:	e79a      	b.n	801235a <rcl_validate_topic_name+0x56>
 8012424:	2900      	cmp	r1, #0
 8012426:	d0d3      	beq.n	80123d0 <rcl_validate_topic_name+0xcc>
 8012428:	2306      	movs	r3, #6
 801242a:	6033      	str	r3, [r6, #0]
 801242c:	2f00      	cmp	r7, #0
 801242e:	d1b7      	bne.n	80123a0 <rcl_validate_topic_name+0x9c>
 8012430:	e7bd      	b.n	80123ae <rcl_validate_topic_name+0xaa>
 8012432:	2309      	movs	r3, #9
 8012434:	6033      	str	r3, [r6, #0]
 8012436:	2f00      	cmp	r7, #0
 8012438:	d1b2      	bne.n	80123a0 <rcl_validate_topic_name+0x9c>
 801243a:	e7b8      	b.n	80123ae <rcl_validate_topic_name+0xaa>
 801243c:	2d00      	cmp	r5, #0
 801243e:	d0c7      	beq.n	80123d0 <rcl_validate_topic_name+0xcc>
 8012440:	2308      	movs	r3, #8
 8012442:	6033      	str	r3, [r6, #0]
 8012444:	2f00      	cmp	r7, #0
 8012446:	d1ab      	bne.n	80123a0 <rcl_validate_topic_name+0x9c>
 8012448:	e7b1      	b.n	80123ae <rcl_validate_topic_name+0xaa>
 801244a:	2d00      	cmp	r5, #0
 801244c:	d1f8      	bne.n	8012440 <rcl_validate_topic_name+0x13c>
 801244e:	460b      	mov	r3, r1
 8012450:	2501      	movs	r5, #1
 8012452:	e7bd      	b.n	80123d0 <rcl_validate_topic_name+0xcc>
 8012454:	2500      	movs	r5, #0
 8012456:	e7bb      	b.n	80123d0 <rcl_validate_topic_name+0xcc>
 8012458:	2300      	movs	r3, #0
 801245a:	4618      	mov	r0, r3
 801245c:	6033      	str	r3, [r6, #0]
 801245e:	e77c      	b.n	801235a <rcl_validate_topic_name+0x56>
 8012460:	2205      	movs	r2, #5
 8012462:	6032      	str	r2, [r6, #0]
 8012464:	2f00      	cmp	r7, #0
 8012466:	d1d6      	bne.n	8012416 <rcl_validate_topic_name+0x112>
 8012468:	e7a1      	b.n	80123ae <rcl_validate_topic_name+0xaa>
 801246a:	2d00      	cmp	r5, #0
 801246c:	bf14      	ite	ne
 801246e:	2308      	movne	r3, #8
 8012470:	2303      	moveq	r3, #3
 8012472:	6033      	str	r3, [r6, #0]
 8012474:	2f00      	cmp	r7, #0
 8012476:	d193      	bne.n	80123a0 <rcl_validate_topic_name+0x9c>
 8012478:	e799      	b.n	80123ae <rcl_validate_topic_name+0xaa>
 801247a:	2307      	movs	r3, #7
 801247c:	6033      	str	r3, [r6, #0]
 801247e:	2f00      	cmp	r7, #0
 8012480:	d095      	beq.n	80123ae <rcl_validate_topic_name+0xaa>
 8012482:	2301      	movs	r3, #1
 8012484:	e7c7      	b.n	8012416 <rcl_validate_topic_name+0x112>
 8012486:	bf00      	nop
 8012488:	0801853f 	.word	0x0801853f

0801248c <rcutils_split>:
 801248c:	b082      	sub	sp, #8
 801248e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012492:	b08d      	sub	sp, #52	; 0x34
 8012494:	ac16      	add	r4, sp, #88	; 0x58
 8012496:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8012498:	e884 000c 	stmia.w	r4, {r2, r3}
 801249c:	2f00      	cmp	r7, #0
 801249e:	f000 80a8 	beq.w	80125f2 <rcutils_split+0x166>
 80124a2:	4605      	mov	r5, r0
 80124a4:	2800      	cmp	r0, #0
 80124a6:	d07e      	beq.n	80125a6 <rcutils_split+0x11a>
 80124a8:	7803      	ldrb	r3, [r0, #0]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d07b      	beq.n	80125a6 <rcutils_split+0x11a>
 80124ae:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 80124b2:	460e      	mov	r6, r1
 80124b4:	9203      	str	r2, [sp, #12]
 80124b6:	f107 0408 	add.w	r4, r7, #8
 80124ba:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 80124be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80124c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80124c4:	4628      	mov	r0, r5
 80124c6:	f8c4 b000 	str.w	fp, [r4]
 80124ca:	f7ed ff13 	bl	80002f4 <strlen>
 80124ce:	782c      	ldrb	r4, [r5, #0]
 80124d0:	182b      	adds	r3, r5, r0
 80124d2:	1ba4      	subs	r4, r4, r6
 80124d4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80124d8:	fab4 f484 	clz	r4, r4
 80124dc:	42b3      	cmp	r3, r6
 80124de:	bf14      	ite	ne
 80124e0:	4680      	movne	r8, r0
 80124e2:	f1a0 0801 	subeq.w	r8, r0, #1
 80124e6:	2001      	movs	r0, #1
 80124e8:	0964      	lsrs	r4, r4, #5
 80124ea:	6038      	str	r0, [r7, #0]
 80124ec:	4544      	cmp	r4, r8
 80124ee:	d26b      	bcs.n	80125c8 <rcutils_split+0x13c>
 80124f0:	192b      	adds	r3, r5, r4
 80124f2:	eb05 0108 	add.w	r1, r5, r8
 80124f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124fa:	42b2      	cmp	r2, r6
 80124fc:	d101      	bne.n	8012502 <rcutils_split+0x76>
 80124fe:	3001      	adds	r0, #1
 8012500:	6038      	str	r0, [r7, #0]
 8012502:	4299      	cmp	r1, r3
 8012504:	d1f7      	bne.n	80124f6 <rcutils_split+0x6a>
 8012506:	9b03      	ldr	r3, [sp, #12]
 8012508:	0080      	lsls	r0, r0, #2
 801250a:	4659      	mov	r1, fp
 801250c:	4798      	blx	r3
 801250e:	4603      	mov	r3, r0
 8012510:	6078      	str	r0, [r7, #4]
 8012512:	2800      	cmp	r0, #0
 8012514:	d05f      	beq.n	80125d6 <rcutils_split+0x14a>
 8012516:	f04f 0a00 	mov.w	sl, #0
 801251a:	46a1      	mov	r9, r4
 801251c:	e002      	b.n	8012524 <rcutils_split+0x98>
 801251e:	3401      	adds	r4, #1
 8012520:	45a0      	cmp	r8, r4
 8012522:	d922      	bls.n	801256a <rcutils_split+0xde>
 8012524:	5d2a      	ldrb	r2, [r5, r4]
 8012526:	42b2      	cmp	r2, r6
 8012528:	d1f9      	bne.n	801251e <rcutils_split+0x92>
 801252a:	45a1      	cmp	r9, r4
 801252c:	eba4 0209 	sub.w	r2, r4, r9
 8012530:	d032      	beq.n	8012598 <rcutils_split+0x10c>
 8012532:	4659      	mov	r1, fp
 8012534:	1c90      	adds	r0, r2, #2
 8012536:	9302      	str	r3, [sp, #8]
 8012538:	9b03      	ldr	r3, [sp, #12]
 801253a:	9201      	str	r2, [sp, #4]
 801253c:	4798      	blx	r3
 801253e:	9a01      	ldr	r2, [sp, #4]
 8012540:	9b02      	ldr	r3, [sp, #8]
 8012542:	1c51      	adds	r1, r2, #1
 8012544:	687a      	ldr	r2, [r7, #4]
 8012546:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801254a:	eb05 0309 	add.w	r3, r5, r9
 801254e:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 8012552:	2800      	cmp	r0, #0
 8012554:	d04f      	beq.n	80125f6 <rcutils_split+0x16a>
 8012556:	4a2b      	ldr	r2, [pc, #172]	; (8012604 <rcutils_split+0x178>)
 8012558:	f10a 0a01 	add.w	sl, sl, #1
 801255c:	f001 fb8a 	bl	8013c74 <sniprintf>
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	3401      	adds	r4, #1
 8012564:	45a0      	cmp	r8, r4
 8012566:	46a1      	mov	r9, r4
 8012568:	d8dc      	bhi.n	8012524 <rcutils_split+0x98>
 801256a:	45a1      	cmp	r9, r4
 801256c:	d039      	beq.n	80125e2 <rcutils_split+0x156>
 801256e:	eba4 0409 	sub.w	r4, r4, r9
 8012572:	4659      	mov	r1, fp
 8012574:	9301      	str	r3, [sp, #4]
 8012576:	1ca0      	adds	r0, r4, #2
 8012578:	9b03      	ldr	r3, [sp, #12]
 801257a:	4798      	blx	r3
 801257c:	9b01      	ldr	r3, [sp, #4]
 801257e:	4a21      	ldr	r2, [pc, #132]	; (8012604 <rcutils_split+0x178>)
 8012580:	1c61      	adds	r1, r4, #1
 8012582:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8012586:	eb05 0309 	add.w	r3, r5, r9
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	2500      	movs	r5, #0
 801258e:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 8012592:	f001 fb6f 	bl	8013c74 <sniprintf>
 8012596:	e011      	b.n	80125bc <rcutils_split+0x130>
 8012598:	683a      	ldr	r2, [r7, #0]
 801259a:	2100      	movs	r1, #0
 801259c:	3a01      	subs	r2, #1
 801259e:	603a      	str	r2, [r7, #0]
 80125a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80125a4:	e7dd      	b.n	8012562 <rcutils_split+0xd6>
 80125a6:	ac04      	add	r4, sp, #16
 80125a8:	a804      	add	r0, sp, #16
 80125aa:	f000 f82d 	bl	8012608 <rcutils_get_zero_initialized_string_array>
 80125ae:	2500      	movs	r5, #0
 80125b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80125b2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80125b4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80125b8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80125bc:	4628      	mov	r0, r5
 80125be:	b00d      	add	sp, #52	; 0x34
 80125c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125c4:	b002      	add	sp, #8
 80125c6:	4770      	bx	lr
 80125c8:	9b03      	ldr	r3, [sp, #12]
 80125ca:	4659      	mov	r1, fp
 80125cc:	2004      	movs	r0, #4
 80125ce:	4798      	blx	r3
 80125d0:	4603      	mov	r3, r0
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	b928      	cbnz	r0, 80125e2 <rcutils_split+0x156>
 80125d6:	4638      	mov	r0, r7
 80125d8:	f000 f834 	bl	8012644 <rcutils_string_array_fini>
 80125dc:	b970      	cbnz	r0, 80125fc <rcutils_split+0x170>
 80125de:	2502      	movs	r5, #2
 80125e0:	e7ec      	b.n	80125bc <rcutils_split+0x130>
 80125e2:	683a      	ldr	r2, [r7, #0]
 80125e4:	2100      	movs	r1, #0
 80125e6:	3a01      	subs	r2, #1
 80125e8:	460d      	mov	r5, r1
 80125ea:	603a      	str	r2, [r7, #0]
 80125ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80125f0:	e7e4      	b.n	80125bc <rcutils_split+0x130>
 80125f2:	250b      	movs	r5, #11
 80125f4:	e7e2      	b.n	80125bc <rcutils_split+0x130>
 80125f6:	f8c7 a000 	str.w	sl, [r7]
 80125fa:	e7ec      	b.n	80125d6 <rcutils_split+0x14a>
 80125fc:	2502      	movs	r5, #2
 80125fe:	f7f7 f9eb 	bl	80099d8 <rcutils_reset_error>
 8012602:	e7db      	b.n	80125bc <rcutils_split+0x130>
 8012604:	08017a80 	.word	0x08017a80

08012608 <rcutils_get_zero_initialized_string_array>:
 8012608:	b570      	push	{r4, r5, r6, lr}
 801260a:	b086      	sub	sp, #24
 801260c:	4606      	mov	r6, r0
 801260e:	4c0c      	ldr	r4, [pc, #48]	; (8012640 <rcutils_get_zero_initialized_string_array+0x38>)
 8012610:	4668      	mov	r0, sp
 8012612:	f7f7 f983 	bl	800991c <rcutils_get_zero_initialized_allocator>
 8012616:	46ee      	mov	lr, sp
 8012618:	f104 0508 	add.w	r5, r4, #8
 801261c:	46a4      	mov	ip, r4
 801261e:	4634      	mov	r4, r6
 8012620:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012626:	f8de 3000 	ldr.w	r3, [lr]
 801262a:	602b      	str	r3, [r5, #0]
 801262c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012632:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8012636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801263a:	4630      	mov	r0, r6
 801263c:	b006      	add	sp, #24
 801263e:	bd70      	pop	{r4, r5, r6, pc}
 8012640:	2000ead4 	.word	0x2000ead4

08012644 <rcutils_string_array_fini>:
 8012644:	b328      	cbz	r0, 8012692 <rcutils_string_array_fini+0x4e>
 8012646:	b570      	push	{r4, r5, r6, lr}
 8012648:	4604      	mov	r4, r0
 801264a:	6840      	ldr	r0, [r0, #4]
 801264c:	b1e0      	cbz	r0, 8012688 <rcutils_string_array_fini+0x44>
 801264e:	f104 0008 	add.w	r0, r4, #8
 8012652:	f7f7 f99d 	bl	8009990 <rcutils_allocator_is_valid>
 8012656:	b1c0      	cbz	r0, 801268a <rcutils_string_array_fini+0x46>
 8012658:	6823      	ldr	r3, [r4, #0]
 801265a:	b1c3      	cbz	r3, 801268e <rcutils_string_array_fini+0x4a>
 801265c:	2500      	movs	r5, #0
 801265e:	6860      	ldr	r0, [r4, #4]
 8012660:	462e      	mov	r6, r5
 8012662:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8012666:	68e3      	ldr	r3, [r4, #12]
 8012668:	69a1      	ldr	r1, [r4, #24]
 801266a:	4798      	blx	r3
 801266c:	e9d4 3000 	ldrd	r3, r0, [r4]
 8012670:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8012674:	3501      	adds	r5, #1
 8012676:	429d      	cmp	r5, r3
 8012678:	d3f3      	bcc.n	8012662 <rcutils_string_array_fini+0x1e>
 801267a:	68e3      	ldr	r3, [r4, #12]
 801267c:	69a1      	ldr	r1, [r4, #24]
 801267e:	4798      	blx	r3
 8012680:	2300      	movs	r3, #0
 8012682:	4618      	mov	r0, r3
 8012684:	e9c4 3300 	strd	r3, r3, [r4]
 8012688:	bd70      	pop	{r4, r5, r6, pc}
 801268a:	200b      	movs	r0, #11
 801268c:	bd70      	pop	{r4, r5, r6, pc}
 801268e:	6860      	ldr	r0, [r4, #4]
 8012690:	e7f3      	b.n	801267a <rcutils_string_array_fini+0x36>
 8012692:	200b      	movs	r0, #11
 8012694:	4770      	bx	lr
 8012696:	bf00      	nop

08012698 <rmw_get_zero_initialized_discovery_options>:
 8012698:	b510      	push	{r4, lr}
 801269a:	4604      	mov	r4, r0
 801269c:	2220      	movs	r2, #32
 801269e:	2100      	movs	r1, #0
 80126a0:	f000 fb00 	bl	8012ca4 <memset>
 80126a4:	4620      	mov	r0, r4
 80126a6:	bd10      	pop	{r4, pc}

080126a8 <rmw_discovery_options_init>:
 80126a8:	b570      	push	{r4, r5, r6, lr}
 80126aa:	b318      	cbz	r0, 80126f4 <rmw_discovery_options_init+0x4c>
 80126ac:	4604      	mov	r4, r0
 80126ae:	4610      	mov	r0, r2
 80126b0:	460e      	mov	r6, r1
 80126b2:	4615      	mov	r5, r2
 80126b4:	f7f7 f96c 	bl	8009990 <rcutils_allocator_is_valid>
 80126b8:	b1e0      	cbz	r0, 80126f4 <rmw_discovery_options_init+0x4c>
 80126ba:	68a3      	ldr	r3, [r4, #8]
 80126bc:	b9d3      	cbnz	r3, 80126f4 <rmw_discovery_options_init+0x4c>
 80126be:	6863      	ldr	r3, [r4, #4]
 80126c0:	b9c3      	cbnz	r3, 80126f4 <rmw_discovery_options_init+0x4c>
 80126c2:	7823      	ldrb	r3, [r4, #0]
 80126c4:	b90b      	cbnz	r3, 80126ca <rmw_discovery_options_init+0x22>
 80126c6:	2302      	movs	r3, #2
 80126c8:	7023      	strb	r3, [r4, #0]
 80126ca:	b1a6      	cbz	r6, 80126f6 <rmw_discovery_options_init+0x4e>
 80126cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80126d0:	4630      	mov	r0, r6
 80126d2:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80126d6:	4798      	blx	r3
 80126d8:	6060      	str	r0, [r4, #4]
 80126da:	b170      	cbz	r0, 80126fa <rmw_discovery_options_init+0x52>
 80126dc:	f104 0c0c 	add.w	ip, r4, #12
 80126e0:	60a6      	str	r6, [r4, #8]
 80126e2:	2600      	movs	r6, #0
 80126e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80126e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80126ea:	682b      	ldr	r3, [r5, #0]
 80126ec:	4630      	mov	r0, r6
 80126ee:	f8cc 3000 	str.w	r3, [ip]
 80126f2:	bd70      	pop	{r4, r5, r6, pc}
 80126f4:	260b      	movs	r6, #11
 80126f6:	4630      	mov	r0, r6
 80126f8:	bd70      	pop	{r4, r5, r6, pc}
 80126fa:	260a      	movs	r6, #10
 80126fc:	e7fb      	b.n	80126f6 <rmw_discovery_options_init+0x4e>
 80126fe:	bf00      	nop

08012700 <on_status>:
 8012700:	b082      	sub	sp, #8
 8012702:	b002      	add	sp, #8
 8012704:	4770      	bx	lr
 8012706:	bf00      	nop

08012708 <on_topic>:
 8012708:	4a23      	ldr	r2, [pc, #140]	; (8012798 <on_topic+0x90>)
 801270a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801270e:	6812      	ldr	r2, [r2, #0]
 8012710:	b094      	sub	sp, #80	; 0x50
 8012712:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8012714:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8012718:	9113      	str	r1, [sp, #76]	; 0x4c
 801271a:	9312      	str	r3, [sp, #72]	; 0x48
 801271c:	b3c2      	cbz	r2, 8012790 <on_topic+0x88>
 801271e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8012722:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8012726:	e001      	b.n	801272c <on_topic+0x24>
 8012728:	6852      	ldr	r2, [r2, #4]
 801272a:	b38a      	cbz	r2, 8012790 <on_topic+0x88>
 801272c:	6894      	ldr	r4, [r2, #8]
 801272e:	8aa3      	ldrh	r3, [r4, #20]
 8012730:	428b      	cmp	r3, r1
 8012732:	d1f9      	bne.n	8012728 <on_topic+0x20>
 8012734:	7da3      	ldrb	r3, [r4, #22]
 8012736:	4283      	cmp	r3, r0
 8012738:	d1f6      	bne.n	8012728 <on_topic+0x20>
 801273a:	2248      	movs	r2, #72	; 0x48
 801273c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012740:	4668      	mov	r0, sp
 8012742:	f000 faa1 	bl	8012c88 <memcpy>
 8012746:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801274a:	4620      	mov	r0, r4
 801274c:	cb0c      	ldmia	r3, {r2, r3}
 801274e:	f7f7 fd0b 	bl	800a168 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012752:	4607      	mov	r7, r0
 8012754:	b1e0      	cbz	r0, 8012790 <on_topic+0x88>
 8012756:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801275a:	462a      	mov	r2, r5
 801275c:	4630      	mov	r0, r6
 801275e:	f108 0110 	add.w	r1, r8, #16
 8012762:	f7f8 f89f 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 8012766:	b930      	cbnz	r0, 8012776 <on_topic+0x6e>
 8012768:	4639      	mov	r1, r7
 801276a:	480c      	ldr	r0, [pc, #48]	; (801279c <on_topic+0x94>)
 801276c:	b014      	add	sp, #80	; 0x50
 801276e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012772:	f7fd b8bf 	b.w	800f8f4 <put_memory>
 8012776:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801277a:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801277e:	f7fd fd51 	bl	8010224 <rmw_uros_epoch_nanos>
 8012782:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8012786:	2305      	movs	r3, #5
 8012788:	e942 0102 	strd	r0, r1, [r2, #-8]
 801278c:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8012790:	b014      	add	sp, #80	; 0x50
 8012792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012796:	bf00      	nop
 8012798:	2000e8ac 	.word	0x2000e8ac
 801279c:	2000e89c 	.word	0x2000e89c

080127a0 <on_request>:
 80127a0:	4824      	ldr	r0, [pc, #144]	; (8012834 <on_request+0x94>)
 80127a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127a6:	6800      	ldr	r0, [r0, #0]
 80127a8:	b094      	sub	sp, #80	; 0x50
 80127aa:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80127ac:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 80127b0:	9113      	str	r1, [sp, #76]	; 0x4c
 80127b2:	2800      	cmp	r0, #0
 80127b4:	d03b      	beq.n	801282e <on_request+0x8e>
 80127b6:	461d      	mov	r5, r3
 80127b8:	e001      	b.n	80127be <on_request+0x1e>
 80127ba:	6840      	ldr	r0, [r0, #4]
 80127bc:	b3b8      	cbz	r0, 801282e <on_request+0x8e>
 80127be:	6884      	ldr	r4, [r0, #8]
 80127c0:	8b21      	ldrh	r1, [r4, #24]
 80127c2:	4291      	cmp	r1, r2
 80127c4:	d1f9      	bne.n	80127ba <on_request+0x1a>
 80127c6:	2248      	movs	r2, #72	; 0x48
 80127c8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80127cc:	4668      	mov	r0, sp
 80127ce:	f000 fa5b 	bl	8012c88 <memcpy>
 80127d2:	f104 0320 	add.w	r3, r4, #32
 80127d6:	4620      	mov	r0, r4
 80127d8:	cb0c      	ldmia	r3, {r2, r3}
 80127da:	f7f7 fcc5 	bl	800a168 <rmw_uxrce_get_static_input_buffer_for_entity>
 80127de:	4680      	mov	r8, r0
 80127e0:	b328      	cbz	r0, 801282e <on_request+0x8e>
 80127e2:	4630      	mov	r0, r6
 80127e4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80127e8:	463a      	mov	r2, r7
 80127ea:	f106 0110 	add.w	r1, r6, #16
 80127ee:	f7f8 f859 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 80127f2:	b930      	cbnz	r0, 8012802 <on_request+0x62>
 80127f4:	4641      	mov	r1, r8
 80127f6:	4810      	ldr	r0, [pc, #64]	; (8012838 <on_request+0x98>)
 80127f8:	b014      	add	sp, #80	; 0x50
 80127fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127fe:	f7fd b879 	b.w	800f8f4 <put_memory>
 8012802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012804:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 8012808:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801280c:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8012810:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012814:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012818:	e88c 0003 	stmia.w	ip, {r0, r1}
 801281c:	f7fd fd02 	bl	8010224 <rmw_uros_epoch_nanos>
 8012820:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8012824:	2303      	movs	r3, #3
 8012826:	e942 0102 	strd	r0, r1, [r2, #-8]
 801282a:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801282e:	b014      	add	sp, #80	; 0x50
 8012830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012834:	2000e87c 	.word	0x2000e87c
 8012838:	2000e89c 	.word	0x2000e89c

0801283c <on_reply>:
 801283c:	4822      	ldr	r0, [pc, #136]	; (80128c8 <on_reply+0x8c>)
 801283e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012842:	6800      	ldr	r0, [r0, #0]
 8012844:	b094      	sub	sp, #80	; 0x50
 8012846:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8012848:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801284c:	9113      	str	r1, [sp, #76]	; 0x4c
 801284e:	b3b8      	cbz	r0, 80128c0 <on_reply+0x84>
 8012850:	461d      	mov	r5, r3
 8012852:	e001      	b.n	8012858 <on_reply+0x1c>
 8012854:	6840      	ldr	r0, [r0, #4]
 8012856:	b398      	cbz	r0, 80128c0 <on_reply+0x84>
 8012858:	6884      	ldr	r4, [r0, #8]
 801285a:	8b21      	ldrh	r1, [r4, #24]
 801285c:	4291      	cmp	r1, r2
 801285e:	d1f9      	bne.n	8012854 <on_reply+0x18>
 8012860:	2248      	movs	r2, #72	; 0x48
 8012862:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8012866:	4668      	mov	r0, sp
 8012868:	f000 fa0e 	bl	8012c88 <memcpy>
 801286c:	f104 0320 	add.w	r3, r4, #32
 8012870:	4620      	mov	r0, r4
 8012872:	cb0c      	ldmia	r3, {r2, r3}
 8012874:	f7f7 fc78 	bl	800a168 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012878:	4680      	mov	r8, r0
 801287a:	b308      	cbz	r0, 80128c0 <on_reply+0x84>
 801287c:	4630      	mov	r0, r6
 801287e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8012882:	463a      	mov	r2, r7
 8012884:	f106 0110 	add.w	r1, r6, #16
 8012888:	f7f8 f80c 	bl	800a8a4 <ucdr_deserialize_array_uint8_t>
 801288c:	b930      	cbnz	r0, 801289c <on_reply+0x60>
 801288e:	4641      	mov	r1, r8
 8012890:	480e      	ldr	r0, [pc, #56]	; (80128cc <on_reply+0x90>)
 8012892:	b014      	add	sp, #80	; 0x50
 8012894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012898:	f7fd b82c 	b.w	800f8f4 <put_memory>
 801289c:	2200      	movs	r2, #0
 801289e:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 80128a2:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 80128a6:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 80128aa:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 80128ae:	f7fd fcb9 	bl	8010224 <rmw_uros_epoch_nanos>
 80128b2:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 80128b6:	2304      	movs	r3, #4
 80128b8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80128bc:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 80128c0:	b014      	add	sp, #80	; 0x50
 80128c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128c6:	bf00      	nop
 80128c8:	20009f90 	.word	0x20009f90
 80128cc:	2000e89c 	.word	0x2000e89c

080128d0 <rmw_destroy_client>:
 80128d0:	b570      	push	{r4, r5, r6, lr}
 80128d2:	b128      	cbz	r0, 80128e0 <rmw_destroy_client+0x10>
 80128d4:	4604      	mov	r4, r0
 80128d6:	6800      	ldr	r0, [r0, #0]
 80128d8:	460d      	mov	r5, r1
 80128da:	f7f7 fd19 	bl	800a310 <is_uxrce_rmw_identifier_valid>
 80128de:	b910      	cbnz	r0, 80128e6 <rmw_destroy_client+0x16>
 80128e0:	2401      	movs	r4, #1
 80128e2:	4620      	mov	r0, r4
 80128e4:	bd70      	pop	{r4, r5, r6, pc}
 80128e6:	6863      	ldr	r3, [r4, #4]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d0f9      	beq.n	80128e0 <rmw_destroy_client+0x10>
 80128ec:	2d00      	cmp	r5, #0
 80128ee:	d0f7      	beq.n	80128e0 <rmw_destroy_client+0x10>
 80128f0:	6828      	ldr	r0, [r5, #0]
 80128f2:	f7f7 fd0d 	bl	800a310 <is_uxrce_rmw_identifier_valid>
 80128f6:	2800      	cmp	r0, #0
 80128f8:	d0f2      	beq.n	80128e0 <rmw_destroy_client+0x10>
 80128fa:	686e      	ldr	r6, [r5, #4]
 80128fc:	2e00      	cmp	r6, #0
 80128fe:	d0ef      	beq.n	80128e0 <rmw_destroy_client+0x10>
 8012900:	6864      	ldr	r4, [r4, #4]
 8012902:	6932      	ldr	r2, [r6, #16]
 8012904:	6920      	ldr	r0, [r4, #16]
 8012906:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801290a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801290e:	6819      	ldr	r1, [r3, #0]
 8012910:	f7fe fc72 	bl	80111f8 <uxr_buffer_cancel_data>
 8012914:	4602      	mov	r2, r0
 8012916:	6920      	ldr	r0, [r4, #16]
 8012918:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801291c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012920:	f7f7 fc7c 	bl	800a21c <run_xrce_session>
 8012924:	6920      	ldr	r0, [r4, #16]
 8012926:	6932      	ldr	r2, [r6, #16]
 8012928:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801292c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012930:	6819      	ldr	r1, [r3, #0]
 8012932:	f7f8 ff0d 	bl	800b750 <uxr_buffer_delete_entity>
 8012936:	4602      	mov	r2, r0
 8012938:	6920      	ldr	r0, [r4, #16]
 801293a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801293e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012942:	f7f7 fc6b 	bl	800a21c <run_xrce_session>
 8012946:	4603      	mov	r3, r0
 8012948:	4628      	mov	r0, r5
 801294a:	2b00      	cmp	r3, #0
 801294c:	bf14      	ite	ne
 801294e:	2400      	movne	r4, #0
 8012950:	2402      	moveq	r4, #2
 8012952:	f7f7 fbe7 	bl	800a124 <rmw_uxrce_fini_client_memory>
 8012956:	e7c4      	b.n	80128e2 <rmw_destroy_client+0x12>

08012958 <rmw_create_guard_condition>:
 8012958:	b538      	push	{r3, r4, r5, lr}
 801295a:	4605      	mov	r5, r0
 801295c:	4808      	ldr	r0, [pc, #32]	; (8012980 <rmw_create_guard_condition+0x28>)
 801295e:	f7fc ffb9 	bl	800f8d4 <get_memory>
 8012962:	4603      	mov	r3, r0
 8012964:	b148      	cbz	r0, 801297a <rmw_create_guard_condition+0x22>
 8012966:	6884      	ldr	r4, [r0, #8]
 8012968:	2300      	movs	r3, #0
 801296a:	61e5      	str	r5, [r4, #28]
 801296c:	7423      	strb	r3, [r4, #16]
 801296e:	f7fc ffd5 	bl	800f91c <rmw_get_implementation_identifier>
 8012972:	f104 0314 	add.w	r3, r4, #20
 8012976:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801297a:	4618      	mov	r0, r3
 801297c:	bd38      	pop	{r3, r4, r5, pc}
 801297e:	bf00      	nop
 8012980:	2000e83c 	.word	0x2000e83c

08012984 <rmw_destroy_guard_condition>:
 8012984:	b508      	push	{r3, lr}
 8012986:	4b08      	ldr	r3, [pc, #32]	; (80129a8 <rmw_destroy_guard_condition+0x24>)
 8012988:	6819      	ldr	r1, [r3, #0]
 801298a:	b911      	cbnz	r1, 8012992 <rmw_destroy_guard_condition+0xe>
 801298c:	e00a      	b.n	80129a4 <rmw_destroy_guard_condition+0x20>
 801298e:	6849      	ldr	r1, [r1, #4]
 8012990:	b141      	cbz	r1, 80129a4 <rmw_destroy_guard_condition+0x20>
 8012992:	688b      	ldr	r3, [r1, #8]
 8012994:	3314      	adds	r3, #20
 8012996:	4298      	cmp	r0, r3
 8012998:	d1f9      	bne.n	801298e <rmw_destroy_guard_condition+0xa>
 801299a:	4803      	ldr	r0, [pc, #12]	; (80129a8 <rmw_destroy_guard_condition+0x24>)
 801299c:	f7fc ffaa 	bl	800f8f4 <put_memory>
 80129a0:	2000      	movs	r0, #0
 80129a2:	bd08      	pop	{r3, pc}
 80129a4:	2001      	movs	r0, #1
 80129a6:	bd08      	pop	{r3, pc}
 80129a8:	2000e83c 	.word	0x2000e83c

080129ac <rosidl_runtime_c__String__init>:
 80129ac:	b510      	push	{r4, lr}
 80129ae:	4604      	mov	r4, r0
 80129b0:	b086      	sub	sp, #24
 80129b2:	b170      	cbz	r0, 80129d2 <rosidl_runtime_c__String__init+0x26>
 80129b4:	a801      	add	r0, sp, #4
 80129b6:	f7f6 ffdd 	bl	8009974 <rcutils_get_default_allocator>
 80129ba:	9b01      	ldr	r3, [sp, #4]
 80129bc:	9905      	ldr	r1, [sp, #20]
 80129be:	2001      	movs	r0, #1
 80129c0:	4798      	blx	r3
 80129c2:	6020      	str	r0, [r4, #0]
 80129c4:	b128      	cbz	r0, 80129d2 <rosidl_runtime_c__String__init+0x26>
 80129c6:	2100      	movs	r1, #0
 80129c8:	2201      	movs	r2, #1
 80129ca:	7001      	strb	r1, [r0, #0]
 80129cc:	4610      	mov	r0, r2
 80129ce:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80129d2:	b006      	add	sp, #24
 80129d4:	bd10      	pop	{r4, pc}
 80129d6:	bf00      	nop

080129d8 <rosidl_runtime_c__String__fini>:
 80129d8:	b320      	cbz	r0, 8012a24 <rosidl_runtime_c__String__fini+0x4c>
 80129da:	6803      	ldr	r3, [r0, #0]
 80129dc:	b510      	push	{r4, lr}
 80129de:	4604      	mov	r4, r0
 80129e0:	b086      	sub	sp, #24
 80129e2:	b173      	cbz	r3, 8012a02 <rosidl_runtime_c__String__fini+0x2a>
 80129e4:	6883      	ldr	r3, [r0, #8]
 80129e6:	b1f3      	cbz	r3, 8012a26 <rosidl_runtime_c__String__fini+0x4e>
 80129e8:	a801      	add	r0, sp, #4
 80129ea:	f7f6 ffc3 	bl	8009974 <rcutils_get_default_allocator>
 80129ee:	9b02      	ldr	r3, [sp, #8]
 80129f0:	9905      	ldr	r1, [sp, #20]
 80129f2:	6820      	ldr	r0, [r4, #0]
 80129f4:	4798      	blx	r3
 80129f6:	2300      	movs	r3, #0
 80129f8:	e9c4 3300 	strd	r3, r3, [r4]
 80129fc:	60a3      	str	r3, [r4, #8]
 80129fe:	b006      	add	sp, #24
 8012a00:	bd10      	pop	{r4, pc}
 8012a02:	6843      	ldr	r3, [r0, #4]
 8012a04:	b9db      	cbnz	r3, 8012a3e <rosidl_runtime_c__String__fini+0x66>
 8012a06:	6883      	ldr	r3, [r0, #8]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d0f8      	beq.n	80129fe <rosidl_runtime_c__String__fini+0x26>
 8012a0c:	4b12      	ldr	r3, [pc, #72]	; (8012a58 <rosidl_runtime_c__String__fini+0x80>)
 8012a0e:	2251      	movs	r2, #81	; 0x51
 8012a10:	2101      	movs	r1, #1
 8012a12:	4812      	ldr	r0, [pc, #72]	; (8012a5c <rosidl_runtime_c__String__fini+0x84>)
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	68db      	ldr	r3, [r3, #12]
 8012a18:	f000 f8a8 	bl	8012b6c <fwrite>
 8012a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a20:	f000 f830 	bl	8012a84 <exit>
 8012a24:	4770      	bx	lr
 8012a26:	4b0c      	ldr	r3, [pc, #48]	; (8012a58 <rosidl_runtime_c__String__fini+0x80>)
 8012a28:	224c      	movs	r2, #76	; 0x4c
 8012a2a:	2101      	movs	r1, #1
 8012a2c:	480c      	ldr	r0, [pc, #48]	; (8012a60 <rosidl_runtime_c__String__fini+0x88>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	68db      	ldr	r3, [r3, #12]
 8012a32:	f000 f89b 	bl	8012b6c <fwrite>
 8012a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a3a:	f000 f823 	bl	8012a84 <exit>
 8012a3e:	4b06      	ldr	r3, [pc, #24]	; (8012a58 <rosidl_runtime_c__String__fini+0x80>)
 8012a40:	224e      	movs	r2, #78	; 0x4e
 8012a42:	2101      	movs	r1, #1
 8012a44:	4807      	ldr	r0, [pc, #28]	; (8012a64 <rosidl_runtime_c__String__fini+0x8c>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	68db      	ldr	r3, [r3, #12]
 8012a4a:	f000 f88f 	bl	8012b6c <fwrite>
 8012a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a52:	f000 f817 	bl	8012a84 <exit>
 8012a56:	bf00      	nop
 8012a58:	20000de8 	.word	0x20000de8
 8012a5c:	080184ec 	.word	0x080184ec
 8012a60:	0801844c 	.word	0x0801844c
 8012a64:	0801849c 	.word	0x0801849c

08012a68 <calloc>:
 8012a68:	4b02      	ldr	r3, [pc, #8]	; (8012a74 <calloc+0xc>)
 8012a6a:	460a      	mov	r2, r1
 8012a6c:	4601      	mov	r1, r0
 8012a6e:	6818      	ldr	r0, [r3, #0]
 8012a70:	f000 b920 	b.w	8012cb4 <_calloc_r>
 8012a74:	20000de8 	.word	0x20000de8

08012a78 <__errno>:
 8012a78:	4b01      	ldr	r3, [pc, #4]	; (8012a80 <__errno+0x8>)
 8012a7a:	6818      	ldr	r0, [r3, #0]
 8012a7c:	4770      	bx	lr
 8012a7e:	bf00      	nop
 8012a80:	20000de8 	.word	0x20000de8

08012a84 <exit>:
 8012a84:	b508      	push	{r3, lr}
 8012a86:	4b07      	ldr	r3, [pc, #28]	; (8012aa4 <exit+0x20>)
 8012a88:	4604      	mov	r4, r0
 8012a8a:	b113      	cbz	r3, 8012a92 <exit+0xe>
 8012a8c:	2100      	movs	r1, #0
 8012a8e:	f3af 8000 	nop.w
 8012a92:	4b05      	ldr	r3, [pc, #20]	; (8012aa8 <exit+0x24>)
 8012a94:	6818      	ldr	r0, [r3, #0]
 8012a96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012a98:	b103      	cbz	r3, 8012a9c <exit+0x18>
 8012a9a:	4798      	blx	r3
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	f7ee fdc9 	bl	8001634 <_exit>
 8012aa2:	bf00      	nop
 8012aa4:	00000000 	.word	0x00000000
 8012aa8:	08018640 	.word	0x08018640

08012aac <_fwrite_r>:
 8012aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ab0:	9c08      	ldr	r4, [sp, #32]
 8012ab2:	468a      	mov	sl, r1
 8012ab4:	4690      	mov	r8, r2
 8012ab6:	fb02 f903 	mul.w	r9, r2, r3
 8012aba:	4605      	mov	r5, r0
 8012abc:	b118      	cbz	r0, 8012ac6 <_fwrite_r+0x1a>
 8012abe:	6983      	ldr	r3, [r0, #24]
 8012ac0:	b90b      	cbnz	r3, 8012ac6 <_fwrite_r+0x1a>
 8012ac2:	f003 f88d 	bl	8015be0 <__sinit>
 8012ac6:	4b26      	ldr	r3, [pc, #152]	; (8012b60 <_fwrite_r+0xb4>)
 8012ac8:	429c      	cmp	r4, r3
 8012aca:	d123      	bne.n	8012b14 <_fwrite_r+0x68>
 8012acc:	686c      	ldr	r4, [r5, #4]
 8012ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012ad0:	07de      	lsls	r6, r3, #31
 8012ad2:	d405      	bmi.n	8012ae0 <_fwrite_r+0x34>
 8012ad4:	89a3      	ldrh	r3, [r4, #12]
 8012ad6:	0598      	lsls	r0, r3, #22
 8012ad8:	d402      	bmi.n	8012ae0 <_fwrite_r+0x34>
 8012ada:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012adc:	f000 f8c1 	bl	8012c62 <__retarget_lock_acquire_recursive>
 8012ae0:	89a3      	ldrh	r3, [r4, #12]
 8012ae2:	0719      	lsls	r1, r3, #28
 8012ae4:	d520      	bpl.n	8012b28 <_fwrite_r+0x7c>
 8012ae6:	6923      	ldr	r3, [r4, #16]
 8012ae8:	b1f3      	cbz	r3, 8012b28 <_fwrite_r+0x7c>
 8012aea:	2600      	movs	r6, #0
 8012aec:	454e      	cmp	r6, r9
 8012aee:	d029      	beq.n	8012b44 <_fwrite_r+0x98>
 8012af0:	68a7      	ldr	r7, [r4, #8]
 8012af2:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8012af6:	3f01      	subs	r7, #1
 8012af8:	2f00      	cmp	r7, #0
 8012afa:	60a7      	str	r7, [r4, #8]
 8012afc:	da04      	bge.n	8012b08 <_fwrite_r+0x5c>
 8012afe:	69a3      	ldr	r3, [r4, #24]
 8012b00:	429f      	cmp	r7, r3
 8012b02:	db19      	blt.n	8012b38 <_fwrite_r+0x8c>
 8012b04:	290a      	cmp	r1, #10
 8012b06:	d017      	beq.n	8012b38 <_fwrite_r+0x8c>
 8012b08:	6823      	ldr	r3, [r4, #0]
 8012b0a:	1c5a      	adds	r2, r3, #1
 8012b0c:	6022      	str	r2, [r4, #0]
 8012b0e:	7019      	strb	r1, [r3, #0]
 8012b10:	3601      	adds	r6, #1
 8012b12:	e7eb      	b.n	8012aec <_fwrite_r+0x40>
 8012b14:	4b13      	ldr	r3, [pc, #76]	; (8012b64 <_fwrite_r+0xb8>)
 8012b16:	429c      	cmp	r4, r3
 8012b18:	d101      	bne.n	8012b1e <_fwrite_r+0x72>
 8012b1a:	68ac      	ldr	r4, [r5, #8]
 8012b1c:	e7d7      	b.n	8012ace <_fwrite_r+0x22>
 8012b1e:	4b12      	ldr	r3, [pc, #72]	; (8012b68 <_fwrite_r+0xbc>)
 8012b20:	429c      	cmp	r4, r3
 8012b22:	bf08      	it	eq
 8012b24:	68ec      	ldreq	r4, [r5, #12]
 8012b26:	e7d2      	b.n	8012ace <_fwrite_r+0x22>
 8012b28:	4621      	mov	r1, r4
 8012b2a:	4628      	mov	r0, r5
 8012b2c:	f002 f8ac 	bl	8014c88 <__swsetup_r>
 8012b30:	2800      	cmp	r0, #0
 8012b32:	d0da      	beq.n	8012aea <_fwrite_r+0x3e>
 8012b34:	2600      	movs	r6, #0
 8012b36:	e005      	b.n	8012b44 <_fwrite_r+0x98>
 8012b38:	4622      	mov	r2, r4
 8012b3a:	4628      	mov	r0, r5
 8012b3c:	f002 f852 	bl	8014be4 <__swbuf_r>
 8012b40:	3001      	adds	r0, #1
 8012b42:	d1e5      	bne.n	8012b10 <_fwrite_r+0x64>
 8012b44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b46:	07da      	lsls	r2, r3, #31
 8012b48:	d405      	bmi.n	8012b56 <_fwrite_r+0xaa>
 8012b4a:	89a3      	ldrh	r3, [r4, #12]
 8012b4c:	059b      	lsls	r3, r3, #22
 8012b4e:	d402      	bmi.n	8012b56 <_fwrite_r+0xaa>
 8012b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b52:	f000 f887 	bl	8012c64 <__retarget_lock_release_recursive>
 8012b56:	fbb6 f0f8 	udiv	r0, r6, r8
 8012b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b5e:	bf00      	nop
 8012b60:	08018818 	.word	0x08018818
 8012b64:	08018838 	.word	0x08018838
 8012b68:	080187f8 	.word	0x080187f8

08012b6c <fwrite>:
 8012b6c:	b507      	push	{r0, r1, r2, lr}
 8012b6e:	9300      	str	r3, [sp, #0]
 8012b70:	4613      	mov	r3, r2
 8012b72:	460a      	mov	r2, r1
 8012b74:	4601      	mov	r1, r0
 8012b76:	4803      	ldr	r0, [pc, #12]	; (8012b84 <fwrite+0x18>)
 8012b78:	6800      	ldr	r0, [r0, #0]
 8012b7a:	f7ff ff97 	bl	8012aac <_fwrite_r>
 8012b7e:	b003      	add	sp, #12
 8012b80:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b84:	20000de8 	.word	0x20000de8

08012b88 <getenv>:
 8012b88:	b507      	push	{r0, r1, r2, lr}
 8012b8a:	4b04      	ldr	r3, [pc, #16]	; (8012b9c <getenv+0x14>)
 8012b8c:	4601      	mov	r1, r0
 8012b8e:	aa01      	add	r2, sp, #4
 8012b90:	6818      	ldr	r0, [r3, #0]
 8012b92:	f000 f805 	bl	8012ba0 <_findenv_r>
 8012b96:	b003      	add	sp, #12
 8012b98:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b9c:	20000de8 	.word	0x20000de8

08012ba0 <_findenv_r>:
 8012ba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ba4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8012c14 <_findenv_r+0x74>
 8012ba8:	4607      	mov	r7, r0
 8012baa:	4689      	mov	r9, r1
 8012bac:	4616      	mov	r6, r2
 8012bae:	f002 fef1 	bl	8015994 <__env_lock>
 8012bb2:	f8da 4000 	ldr.w	r4, [sl]
 8012bb6:	b134      	cbz	r4, 8012bc6 <_findenv_r+0x26>
 8012bb8:	464b      	mov	r3, r9
 8012bba:	4698      	mov	r8, r3
 8012bbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012bc0:	b13a      	cbz	r2, 8012bd2 <_findenv_r+0x32>
 8012bc2:	2a3d      	cmp	r2, #61	; 0x3d
 8012bc4:	d1f9      	bne.n	8012bba <_findenv_r+0x1a>
 8012bc6:	4638      	mov	r0, r7
 8012bc8:	f002 feea 	bl	80159a0 <__env_unlock>
 8012bcc:	2000      	movs	r0, #0
 8012bce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bd2:	eba8 0809 	sub.w	r8, r8, r9
 8012bd6:	46a3      	mov	fp, r4
 8012bd8:	f854 0b04 	ldr.w	r0, [r4], #4
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	d0f2      	beq.n	8012bc6 <_findenv_r+0x26>
 8012be0:	4642      	mov	r2, r8
 8012be2:	4649      	mov	r1, r9
 8012be4:	f001 f8af 	bl	8013d46 <strncmp>
 8012be8:	2800      	cmp	r0, #0
 8012bea:	d1f4      	bne.n	8012bd6 <_findenv_r+0x36>
 8012bec:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012bf0:	eb03 0508 	add.w	r5, r3, r8
 8012bf4:	f813 3008 	ldrb.w	r3, [r3, r8]
 8012bf8:	2b3d      	cmp	r3, #61	; 0x3d
 8012bfa:	d1ec      	bne.n	8012bd6 <_findenv_r+0x36>
 8012bfc:	f8da 3000 	ldr.w	r3, [sl]
 8012c00:	ebab 0303 	sub.w	r3, fp, r3
 8012c04:	109b      	asrs	r3, r3, #2
 8012c06:	4638      	mov	r0, r7
 8012c08:	6033      	str	r3, [r6, #0]
 8012c0a:	f002 fec9 	bl	80159a0 <__env_unlock>
 8012c0e:	1c68      	adds	r0, r5, #1
 8012c10:	e7dd      	b.n	8012bce <_findenv_r+0x2e>
 8012c12:	bf00      	nop
 8012c14:	20000000 	.word	0x20000000

08012c18 <__libc_init_array>:
 8012c18:	b570      	push	{r4, r5, r6, lr}
 8012c1a:	4d0d      	ldr	r5, [pc, #52]	; (8012c50 <__libc_init_array+0x38>)
 8012c1c:	4c0d      	ldr	r4, [pc, #52]	; (8012c54 <__libc_init_array+0x3c>)
 8012c1e:	1b64      	subs	r4, r4, r5
 8012c20:	10a4      	asrs	r4, r4, #2
 8012c22:	2600      	movs	r6, #0
 8012c24:	42a6      	cmp	r6, r4
 8012c26:	d109      	bne.n	8012c3c <__libc_init_array+0x24>
 8012c28:	4d0b      	ldr	r5, [pc, #44]	; (8012c58 <__libc_init_array+0x40>)
 8012c2a:	4c0c      	ldr	r4, [pc, #48]	; (8012c5c <__libc_init_array+0x44>)
 8012c2c:	f004 fd4e 	bl	80176cc <_init>
 8012c30:	1b64      	subs	r4, r4, r5
 8012c32:	10a4      	asrs	r4, r4, #2
 8012c34:	2600      	movs	r6, #0
 8012c36:	42a6      	cmp	r6, r4
 8012c38:	d105      	bne.n	8012c46 <__libc_init_array+0x2e>
 8012c3a:	bd70      	pop	{r4, r5, r6, pc}
 8012c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c40:	4798      	blx	r3
 8012c42:	3601      	adds	r6, #1
 8012c44:	e7ee      	b.n	8012c24 <__libc_init_array+0xc>
 8012c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c4a:	4798      	blx	r3
 8012c4c:	3601      	adds	r6, #1
 8012c4e:	e7f2      	b.n	8012c36 <__libc_init_array+0x1e>
 8012c50:	08018a48 	.word	0x08018a48
 8012c54:	08018a48 	.word	0x08018a48
 8012c58:	08018a48 	.word	0x08018a48
 8012c5c:	08018a50 	.word	0x08018a50

08012c60 <__retarget_lock_init_recursive>:
 8012c60:	4770      	bx	lr

08012c62 <__retarget_lock_acquire_recursive>:
 8012c62:	4770      	bx	lr

08012c64 <__retarget_lock_release_recursive>:
 8012c64:	4770      	bx	lr
	...

08012c68 <malloc>:
 8012c68:	4b02      	ldr	r3, [pc, #8]	; (8012c74 <malloc+0xc>)
 8012c6a:	4601      	mov	r1, r0
 8012c6c:	6818      	ldr	r0, [r3, #0]
 8012c6e:	f000 b8a3 	b.w	8012db8 <_malloc_r>
 8012c72:	bf00      	nop
 8012c74:	20000de8 	.word	0x20000de8

08012c78 <free>:
 8012c78:	4b02      	ldr	r3, [pc, #8]	; (8012c84 <free+0xc>)
 8012c7a:	4601      	mov	r1, r0
 8012c7c:	6818      	ldr	r0, [r3, #0]
 8012c7e:	f000 b82f 	b.w	8012ce0 <_free_r>
 8012c82:	bf00      	nop
 8012c84:	20000de8 	.word	0x20000de8

08012c88 <memcpy>:
 8012c88:	440a      	add	r2, r1
 8012c8a:	4291      	cmp	r1, r2
 8012c8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012c90:	d100      	bne.n	8012c94 <memcpy+0xc>
 8012c92:	4770      	bx	lr
 8012c94:	b510      	push	{r4, lr}
 8012c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c9e:	4291      	cmp	r1, r2
 8012ca0:	d1f9      	bne.n	8012c96 <memcpy+0xe>
 8012ca2:	bd10      	pop	{r4, pc}

08012ca4 <memset>:
 8012ca4:	4402      	add	r2, r0
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	4293      	cmp	r3, r2
 8012caa:	d100      	bne.n	8012cae <memset+0xa>
 8012cac:	4770      	bx	lr
 8012cae:	f803 1b01 	strb.w	r1, [r3], #1
 8012cb2:	e7f9      	b.n	8012ca8 <memset+0x4>

08012cb4 <_calloc_r>:
 8012cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012cb6:	fba1 2402 	umull	r2, r4, r1, r2
 8012cba:	b94c      	cbnz	r4, 8012cd0 <_calloc_r+0x1c>
 8012cbc:	4611      	mov	r1, r2
 8012cbe:	9201      	str	r2, [sp, #4]
 8012cc0:	f000 f87a 	bl	8012db8 <_malloc_r>
 8012cc4:	9a01      	ldr	r2, [sp, #4]
 8012cc6:	4605      	mov	r5, r0
 8012cc8:	b930      	cbnz	r0, 8012cd8 <_calloc_r+0x24>
 8012cca:	4628      	mov	r0, r5
 8012ccc:	b003      	add	sp, #12
 8012cce:	bd30      	pop	{r4, r5, pc}
 8012cd0:	220c      	movs	r2, #12
 8012cd2:	6002      	str	r2, [r0, #0]
 8012cd4:	2500      	movs	r5, #0
 8012cd6:	e7f8      	b.n	8012cca <_calloc_r+0x16>
 8012cd8:	4621      	mov	r1, r4
 8012cda:	f7ff ffe3 	bl	8012ca4 <memset>
 8012cde:	e7f4      	b.n	8012cca <_calloc_r+0x16>

08012ce0 <_free_r>:
 8012ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ce2:	2900      	cmp	r1, #0
 8012ce4:	d044      	beq.n	8012d70 <_free_r+0x90>
 8012ce6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012cea:	9001      	str	r0, [sp, #4]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	f1a1 0404 	sub.w	r4, r1, #4
 8012cf2:	bfb8      	it	lt
 8012cf4:	18e4      	addlt	r4, r4, r3
 8012cf6:	f003 fc0d 	bl	8016514 <__malloc_lock>
 8012cfa:	4a1e      	ldr	r2, [pc, #120]	; (8012d74 <_free_r+0x94>)
 8012cfc:	9801      	ldr	r0, [sp, #4]
 8012cfe:	6813      	ldr	r3, [r2, #0]
 8012d00:	b933      	cbnz	r3, 8012d10 <_free_r+0x30>
 8012d02:	6063      	str	r3, [r4, #4]
 8012d04:	6014      	str	r4, [r2, #0]
 8012d06:	b003      	add	sp, #12
 8012d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d0c:	f003 bc08 	b.w	8016520 <__malloc_unlock>
 8012d10:	42a3      	cmp	r3, r4
 8012d12:	d908      	bls.n	8012d26 <_free_r+0x46>
 8012d14:	6825      	ldr	r5, [r4, #0]
 8012d16:	1961      	adds	r1, r4, r5
 8012d18:	428b      	cmp	r3, r1
 8012d1a:	bf01      	itttt	eq
 8012d1c:	6819      	ldreq	r1, [r3, #0]
 8012d1e:	685b      	ldreq	r3, [r3, #4]
 8012d20:	1949      	addeq	r1, r1, r5
 8012d22:	6021      	streq	r1, [r4, #0]
 8012d24:	e7ed      	b.n	8012d02 <_free_r+0x22>
 8012d26:	461a      	mov	r2, r3
 8012d28:	685b      	ldr	r3, [r3, #4]
 8012d2a:	b10b      	cbz	r3, 8012d30 <_free_r+0x50>
 8012d2c:	42a3      	cmp	r3, r4
 8012d2e:	d9fa      	bls.n	8012d26 <_free_r+0x46>
 8012d30:	6811      	ldr	r1, [r2, #0]
 8012d32:	1855      	adds	r5, r2, r1
 8012d34:	42a5      	cmp	r5, r4
 8012d36:	d10b      	bne.n	8012d50 <_free_r+0x70>
 8012d38:	6824      	ldr	r4, [r4, #0]
 8012d3a:	4421      	add	r1, r4
 8012d3c:	1854      	adds	r4, r2, r1
 8012d3e:	42a3      	cmp	r3, r4
 8012d40:	6011      	str	r1, [r2, #0]
 8012d42:	d1e0      	bne.n	8012d06 <_free_r+0x26>
 8012d44:	681c      	ldr	r4, [r3, #0]
 8012d46:	685b      	ldr	r3, [r3, #4]
 8012d48:	6053      	str	r3, [r2, #4]
 8012d4a:	4421      	add	r1, r4
 8012d4c:	6011      	str	r1, [r2, #0]
 8012d4e:	e7da      	b.n	8012d06 <_free_r+0x26>
 8012d50:	d902      	bls.n	8012d58 <_free_r+0x78>
 8012d52:	230c      	movs	r3, #12
 8012d54:	6003      	str	r3, [r0, #0]
 8012d56:	e7d6      	b.n	8012d06 <_free_r+0x26>
 8012d58:	6825      	ldr	r5, [r4, #0]
 8012d5a:	1961      	adds	r1, r4, r5
 8012d5c:	428b      	cmp	r3, r1
 8012d5e:	bf04      	itt	eq
 8012d60:	6819      	ldreq	r1, [r3, #0]
 8012d62:	685b      	ldreq	r3, [r3, #4]
 8012d64:	6063      	str	r3, [r4, #4]
 8012d66:	bf04      	itt	eq
 8012d68:	1949      	addeq	r1, r1, r5
 8012d6a:	6021      	streq	r1, [r4, #0]
 8012d6c:	6054      	str	r4, [r2, #4]
 8012d6e:	e7ca      	b.n	8012d06 <_free_r+0x26>
 8012d70:	b003      	add	sp, #12
 8012d72:	bd30      	pop	{r4, r5, pc}
 8012d74:	2000eaf4 	.word	0x2000eaf4

08012d78 <sbrk_aligned>:
 8012d78:	b570      	push	{r4, r5, r6, lr}
 8012d7a:	4e0e      	ldr	r6, [pc, #56]	; (8012db4 <sbrk_aligned+0x3c>)
 8012d7c:	460c      	mov	r4, r1
 8012d7e:	6831      	ldr	r1, [r6, #0]
 8012d80:	4605      	mov	r5, r0
 8012d82:	b911      	cbnz	r1, 8012d8a <sbrk_aligned+0x12>
 8012d84:	f000 ff60 	bl	8013c48 <_sbrk_r>
 8012d88:	6030      	str	r0, [r6, #0]
 8012d8a:	4621      	mov	r1, r4
 8012d8c:	4628      	mov	r0, r5
 8012d8e:	f000 ff5b 	bl	8013c48 <_sbrk_r>
 8012d92:	1c43      	adds	r3, r0, #1
 8012d94:	d00a      	beq.n	8012dac <sbrk_aligned+0x34>
 8012d96:	1cc4      	adds	r4, r0, #3
 8012d98:	f024 0403 	bic.w	r4, r4, #3
 8012d9c:	42a0      	cmp	r0, r4
 8012d9e:	d007      	beq.n	8012db0 <sbrk_aligned+0x38>
 8012da0:	1a21      	subs	r1, r4, r0
 8012da2:	4628      	mov	r0, r5
 8012da4:	f000 ff50 	bl	8013c48 <_sbrk_r>
 8012da8:	3001      	adds	r0, #1
 8012daa:	d101      	bne.n	8012db0 <sbrk_aligned+0x38>
 8012dac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012db0:	4620      	mov	r0, r4
 8012db2:	bd70      	pop	{r4, r5, r6, pc}
 8012db4:	2000eaf8 	.word	0x2000eaf8

08012db8 <_malloc_r>:
 8012db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dbc:	1ccd      	adds	r5, r1, #3
 8012dbe:	f025 0503 	bic.w	r5, r5, #3
 8012dc2:	3508      	adds	r5, #8
 8012dc4:	2d0c      	cmp	r5, #12
 8012dc6:	bf38      	it	cc
 8012dc8:	250c      	movcc	r5, #12
 8012dca:	2d00      	cmp	r5, #0
 8012dcc:	4607      	mov	r7, r0
 8012dce:	db01      	blt.n	8012dd4 <_malloc_r+0x1c>
 8012dd0:	42a9      	cmp	r1, r5
 8012dd2:	d905      	bls.n	8012de0 <_malloc_r+0x28>
 8012dd4:	230c      	movs	r3, #12
 8012dd6:	603b      	str	r3, [r7, #0]
 8012dd8:	2600      	movs	r6, #0
 8012dda:	4630      	mov	r0, r6
 8012ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012de0:	4e2e      	ldr	r6, [pc, #184]	; (8012e9c <_malloc_r+0xe4>)
 8012de2:	f003 fb97 	bl	8016514 <__malloc_lock>
 8012de6:	6833      	ldr	r3, [r6, #0]
 8012de8:	461c      	mov	r4, r3
 8012dea:	bb34      	cbnz	r4, 8012e3a <_malloc_r+0x82>
 8012dec:	4629      	mov	r1, r5
 8012dee:	4638      	mov	r0, r7
 8012df0:	f7ff ffc2 	bl	8012d78 <sbrk_aligned>
 8012df4:	1c43      	adds	r3, r0, #1
 8012df6:	4604      	mov	r4, r0
 8012df8:	d14d      	bne.n	8012e96 <_malloc_r+0xde>
 8012dfa:	6834      	ldr	r4, [r6, #0]
 8012dfc:	4626      	mov	r6, r4
 8012dfe:	2e00      	cmp	r6, #0
 8012e00:	d140      	bne.n	8012e84 <_malloc_r+0xcc>
 8012e02:	6823      	ldr	r3, [r4, #0]
 8012e04:	4631      	mov	r1, r6
 8012e06:	4638      	mov	r0, r7
 8012e08:	eb04 0803 	add.w	r8, r4, r3
 8012e0c:	f000 ff1c 	bl	8013c48 <_sbrk_r>
 8012e10:	4580      	cmp	r8, r0
 8012e12:	d13a      	bne.n	8012e8a <_malloc_r+0xd2>
 8012e14:	6821      	ldr	r1, [r4, #0]
 8012e16:	3503      	adds	r5, #3
 8012e18:	1a6d      	subs	r5, r5, r1
 8012e1a:	f025 0503 	bic.w	r5, r5, #3
 8012e1e:	3508      	adds	r5, #8
 8012e20:	2d0c      	cmp	r5, #12
 8012e22:	bf38      	it	cc
 8012e24:	250c      	movcc	r5, #12
 8012e26:	4629      	mov	r1, r5
 8012e28:	4638      	mov	r0, r7
 8012e2a:	f7ff ffa5 	bl	8012d78 <sbrk_aligned>
 8012e2e:	3001      	adds	r0, #1
 8012e30:	d02b      	beq.n	8012e8a <_malloc_r+0xd2>
 8012e32:	6823      	ldr	r3, [r4, #0]
 8012e34:	442b      	add	r3, r5
 8012e36:	6023      	str	r3, [r4, #0]
 8012e38:	e00e      	b.n	8012e58 <_malloc_r+0xa0>
 8012e3a:	6822      	ldr	r2, [r4, #0]
 8012e3c:	1b52      	subs	r2, r2, r5
 8012e3e:	d41e      	bmi.n	8012e7e <_malloc_r+0xc6>
 8012e40:	2a0b      	cmp	r2, #11
 8012e42:	d916      	bls.n	8012e72 <_malloc_r+0xba>
 8012e44:	1961      	adds	r1, r4, r5
 8012e46:	42a3      	cmp	r3, r4
 8012e48:	6025      	str	r5, [r4, #0]
 8012e4a:	bf18      	it	ne
 8012e4c:	6059      	strne	r1, [r3, #4]
 8012e4e:	6863      	ldr	r3, [r4, #4]
 8012e50:	bf08      	it	eq
 8012e52:	6031      	streq	r1, [r6, #0]
 8012e54:	5162      	str	r2, [r4, r5]
 8012e56:	604b      	str	r3, [r1, #4]
 8012e58:	4638      	mov	r0, r7
 8012e5a:	f104 060b 	add.w	r6, r4, #11
 8012e5e:	f003 fb5f 	bl	8016520 <__malloc_unlock>
 8012e62:	f026 0607 	bic.w	r6, r6, #7
 8012e66:	1d23      	adds	r3, r4, #4
 8012e68:	1af2      	subs	r2, r6, r3
 8012e6a:	d0b6      	beq.n	8012dda <_malloc_r+0x22>
 8012e6c:	1b9b      	subs	r3, r3, r6
 8012e6e:	50a3      	str	r3, [r4, r2]
 8012e70:	e7b3      	b.n	8012dda <_malloc_r+0x22>
 8012e72:	6862      	ldr	r2, [r4, #4]
 8012e74:	42a3      	cmp	r3, r4
 8012e76:	bf0c      	ite	eq
 8012e78:	6032      	streq	r2, [r6, #0]
 8012e7a:	605a      	strne	r2, [r3, #4]
 8012e7c:	e7ec      	b.n	8012e58 <_malloc_r+0xa0>
 8012e7e:	4623      	mov	r3, r4
 8012e80:	6864      	ldr	r4, [r4, #4]
 8012e82:	e7b2      	b.n	8012dea <_malloc_r+0x32>
 8012e84:	4634      	mov	r4, r6
 8012e86:	6876      	ldr	r6, [r6, #4]
 8012e88:	e7b9      	b.n	8012dfe <_malloc_r+0x46>
 8012e8a:	230c      	movs	r3, #12
 8012e8c:	603b      	str	r3, [r7, #0]
 8012e8e:	4638      	mov	r0, r7
 8012e90:	f003 fb46 	bl	8016520 <__malloc_unlock>
 8012e94:	e7a1      	b.n	8012dda <_malloc_r+0x22>
 8012e96:	6025      	str	r5, [r4, #0]
 8012e98:	e7de      	b.n	8012e58 <_malloc_r+0xa0>
 8012e9a:	bf00      	nop
 8012e9c:	2000eaf4 	.word	0x2000eaf4

08012ea0 <__cvt>:
 8012ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ea2:	ed2d 8b02 	vpush	{d8}
 8012ea6:	eeb0 8b40 	vmov.f64	d8, d0
 8012eaa:	b085      	sub	sp, #20
 8012eac:	4617      	mov	r7, r2
 8012eae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012eb0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012eb2:	ee18 2a90 	vmov	r2, s17
 8012eb6:	f025 0520 	bic.w	r5, r5, #32
 8012eba:	2a00      	cmp	r2, #0
 8012ebc:	bfb6      	itet	lt
 8012ebe:	222d      	movlt	r2, #45	; 0x2d
 8012ec0:	2200      	movge	r2, #0
 8012ec2:	eeb1 8b40 	vneglt.f64	d8, d0
 8012ec6:	2d46      	cmp	r5, #70	; 0x46
 8012ec8:	460c      	mov	r4, r1
 8012eca:	701a      	strb	r2, [r3, #0]
 8012ecc:	d004      	beq.n	8012ed8 <__cvt+0x38>
 8012ece:	2d45      	cmp	r5, #69	; 0x45
 8012ed0:	d100      	bne.n	8012ed4 <__cvt+0x34>
 8012ed2:	3401      	adds	r4, #1
 8012ed4:	2102      	movs	r1, #2
 8012ed6:	e000      	b.n	8012eda <__cvt+0x3a>
 8012ed8:	2103      	movs	r1, #3
 8012eda:	ab03      	add	r3, sp, #12
 8012edc:	9301      	str	r3, [sp, #4]
 8012ede:	ab02      	add	r3, sp, #8
 8012ee0:	9300      	str	r3, [sp, #0]
 8012ee2:	4622      	mov	r2, r4
 8012ee4:	4633      	mov	r3, r6
 8012ee6:	eeb0 0b48 	vmov.f64	d0, d8
 8012eea:	f001 ffe5 	bl	8014eb8 <_dtoa_r>
 8012eee:	2d47      	cmp	r5, #71	; 0x47
 8012ef0:	d101      	bne.n	8012ef6 <__cvt+0x56>
 8012ef2:	07fb      	lsls	r3, r7, #31
 8012ef4:	d51a      	bpl.n	8012f2c <__cvt+0x8c>
 8012ef6:	2d46      	cmp	r5, #70	; 0x46
 8012ef8:	eb00 0204 	add.w	r2, r0, r4
 8012efc:	d10c      	bne.n	8012f18 <__cvt+0x78>
 8012efe:	7803      	ldrb	r3, [r0, #0]
 8012f00:	2b30      	cmp	r3, #48	; 0x30
 8012f02:	d107      	bne.n	8012f14 <__cvt+0x74>
 8012f04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f0c:	bf1c      	itt	ne
 8012f0e:	f1c4 0401 	rsbne	r4, r4, #1
 8012f12:	6034      	strne	r4, [r6, #0]
 8012f14:	6833      	ldr	r3, [r6, #0]
 8012f16:	441a      	add	r2, r3
 8012f18:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f20:	bf08      	it	eq
 8012f22:	9203      	streq	r2, [sp, #12]
 8012f24:	2130      	movs	r1, #48	; 0x30
 8012f26:	9b03      	ldr	r3, [sp, #12]
 8012f28:	4293      	cmp	r3, r2
 8012f2a:	d307      	bcc.n	8012f3c <__cvt+0x9c>
 8012f2c:	9b03      	ldr	r3, [sp, #12]
 8012f2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012f30:	1a1b      	subs	r3, r3, r0
 8012f32:	6013      	str	r3, [r2, #0]
 8012f34:	b005      	add	sp, #20
 8012f36:	ecbd 8b02 	vpop	{d8}
 8012f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f3c:	1c5c      	adds	r4, r3, #1
 8012f3e:	9403      	str	r4, [sp, #12]
 8012f40:	7019      	strb	r1, [r3, #0]
 8012f42:	e7f0      	b.n	8012f26 <__cvt+0x86>

08012f44 <__exponent>:
 8012f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012f46:	4603      	mov	r3, r0
 8012f48:	2900      	cmp	r1, #0
 8012f4a:	bfb8      	it	lt
 8012f4c:	4249      	neglt	r1, r1
 8012f4e:	f803 2b02 	strb.w	r2, [r3], #2
 8012f52:	bfb4      	ite	lt
 8012f54:	222d      	movlt	r2, #45	; 0x2d
 8012f56:	222b      	movge	r2, #43	; 0x2b
 8012f58:	2909      	cmp	r1, #9
 8012f5a:	7042      	strb	r2, [r0, #1]
 8012f5c:	dd2a      	ble.n	8012fb4 <__exponent+0x70>
 8012f5e:	f10d 0407 	add.w	r4, sp, #7
 8012f62:	46a4      	mov	ip, r4
 8012f64:	270a      	movs	r7, #10
 8012f66:	46a6      	mov	lr, r4
 8012f68:	460a      	mov	r2, r1
 8012f6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8012f6e:	fb07 1516 	mls	r5, r7, r6, r1
 8012f72:	3530      	adds	r5, #48	; 0x30
 8012f74:	2a63      	cmp	r2, #99	; 0x63
 8012f76:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8012f7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012f7e:	4631      	mov	r1, r6
 8012f80:	dcf1      	bgt.n	8012f66 <__exponent+0x22>
 8012f82:	3130      	adds	r1, #48	; 0x30
 8012f84:	f1ae 0502 	sub.w	r5, lr, #2
 8012f88:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012f8c:	1c44      	adds	r4, r0, #1
 8012f8e:	4629      	mov	r1, r5
 8012f90:	4561      	cmp	r1, ip
 8012f92:	d30a      	bcc.n	8012faa <__exponent+0x66>
 8012f94:	f10d 0209 	add.w	r2, sp, #9
 8012f98:	eba2 020e 	sub.w	r2, r2, lr
 8012f9c:	4565      	cmp	r5, ip
 8012f9e:	bf88      	it	hi
 8012fa0:	2200      	movhi	r2, #0
 8012fa2:	4413      	add	r3, r2
 8012fa4:	1a18      	subs	r0, r3, r0
 8012fa6:	b003      	add	sp, #12
 8012fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012fae:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012fb2:	e7ed      	b.n	8012f90 <__exponent+0x4c>
 8012fb4:	2330      	movs	r3, #48	; 0x30
 8012fb6:	3130      	adds	r1, #48	; 0x30
 8012fb8:	7083      	strb	r3, [r0, #2]
 8012fba:	70c1      	strb	r1, [r0, #3]
 8012fbc:	1d03      	adds	r3, r0, #4
 8012fbe:	e7f1      	b.n	8012fa4 <__exponent+0x60>

08012fc0 <_printf_float>:
 8012fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fc4:	b08b      	sub	sp, #44	; 0x2c
 8012fc6:	460c      	mov	r4, r1
 8012fc8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8012fcc:	4616      	mov	r6, r2
 8012fce:	461f      	mov	r7, r3
 8012fd0:	4605      	mov	r5, r0
 8012fd2:	f003 fa23 	bl	801641c <_localeconv_r>
 8012fd6:	f8d0 b000 	ldr.w	fp, [r0]
 8012fda:	4658      	mov	r0, fp
 8012fdc:	f7ed f98a 	bl	80002f4 <strlen>
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	9308      	str	r3, [sp, #32]
 8012fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8012fe8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012fec:	6822      	ldr	r2, [r4, #0]
 8012fee:	3307      	adds	r3, #7
 8012ff0:	f023 0307 	bic.w	r3, r3, #7
 8012ff4:	f103 0108 	add.w	r1, r3, #8
 8012ff8:	f8c8 1000 	str.w	r1, [r8]
 8012ffc:	4682      	mov	sl, r0
 8012ffe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013002:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8013006:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8013268 <_printf_float+0x2a8>
 801300a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801300e:	eeb0 6bc0 	vabs.f64	d6, d0
 8013012:	eeb4 6b47 	vcmp.f64	d6, d7
 8013016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801301a:	dd24      	ble.n	8013066 <_printf_float+0xa6>
 801301c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013024:	d502      	bpl.n	801302c <_printf_float+0x6c>
 8013026:	232d      	movs	r3, #45	; 0x2d
 8013028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801302c:	4b90      	ldr	r3, [pc, #576]	; (8013270 <_printf_float+0x2b0>)
 801302e:	4891      	ldr	r0, [pc, #580]	; (8013274 <_printf_float+0x2b4>)
 8013030:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013034:	bf94      	ite	ls
 8013036:	4698      	movls	r8, r3
 8013038:	4680      	movhi	r8, r0
 801303a:	2303      	movs	r3, #3
 801303c:	6123      	str	r3, [r4, #16]
 801303e:	f022 0204 	bic.w	r2, r2, #4
 8013042:	2300      	movs	r3, #0
 8013044:	6022      	str	r2, [r4, #0]
 8013046:	9304      	str	r3, [sp, #16]
 8013048:	9700      	str	r7, [sp, #0]
 801304a:	4633      	mov	r3, r6
 801304c:	aa09      	add	r2, sp, #36	; 0x24
 801304e:	4621      	mov	r1, r4
 8013050:	4628      	mov	r0, r5
 8013052:	f000 f9d3 	bl	80133fc <_printf_common>
 8013056:	3001      	adds	r0, #1
 8013058:	f040 808a 	bne.w	8013170 <_printf_float+0x1b0>
 801305c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013060:	b00b      	add	sp, #44	; 0x2c
 8013062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013066:	eeb4 0b40 	vcmp.f64	d0, d0
 801306a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801306e:	d709      	bvc.n	8013084 <_printf_float+0xc4>
 8013070:	ee10 3a90 	vmov	r3, s1
 8013074:	2b00      	cmp	r3, #0
 8013076:	bfbc      	itt	lt
 8013078:	232d      	movlt	r3, #45	; 0x2d
 801307a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801307e:	487e      	ldr	r0, [pc, #504]	; (8013278 <_printf_float+0x2b8>)
 8013080:	4b7e      	ldr	r3, [pc, #504]	; (801327c <_printf_float+0x2bc>)
 8013082:	e7d5      	b.n	8013030 <_printf_float+0x70>
 8013084:	6863      	ldr	r3, [r4, #4]
 8013086:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801308a:	9104      	str	r1, [sp, #16]
 801308c:	1c59      	adds	r1, r3, #1
 801308e:	d13c      	bne.n	801310a <_printf_float+0x14a>
 8013090:	2306      	movs	r3, #6
 8013092:	6063      	str	r3, [r4, #4]
 8013094:	2300      	movs	r3, #0
 8013096:	9303      	str	r3, [sp, #12]
 8013098:	ab08      	add	r3, sp, #32
 801309a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801309e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80130a2:	ab07      	add	r3, sp, #28
 80130a4:	6861      	ldr	r1, [r4, #4]
 80130a6:	9300      	str	r3, [sp, #0]
 80130a8:	6022      	str	r2, [r4, #0]
 80130aa:	f10d 031b 	add.w	r3, sp, #27
 80130ae:	4628      	mov	r0, r5
 80130b0:	f7ff fef6 	bl	8012ea0 <__cvt>
 80130b4:	9b04      	ldr	r3, [sp, #16]
 80130b6:	9907      	ldr	r1, [sp, #28]
 80130b8:	2b47      	cmp	r3, #71	; 0x47
 80130ba:	4680      	mov	r8, r0
 80130bc:	d108      	bne.n	80130d0 <_printf_float+0x110>
 80130be:	1cc8      	adds	r0, r1, #3
 80130c0:	db02      	blt.n	80130c8 <_printf_float+0x108>
 80130c2:	6863      	ldr	r3, [r4, #4]
 80130c4:	4299      	cmp	r1, r3
 80130c6:	dd41      	ble.n	801314c <_printf_float+0x18c>
 80130c8:	f1a9 0902 	sub.w	r9, r9, #2
 80130cc:	fa5f f989 	uxtb.w	r9, r9
 80130d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80130d4:	d820      	bhi.n	8013118 <_printf_float+0x158>
 80130d6:	3901      	subs	r1, #1
 80130d8:	464a      	mov	r2, r9
 80130da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80130de:	9107      	str	r1, [sp, #28]
 80130e0:	f7ff ff30 	bl	8012f44 <__exponent>
 80130e4:	9a08      	ldr	r2, [sp, #32]
 80130e6:	9004      	str	r0, [sp, #16]
 80130e8:	1813      	adds	r3, r2, r0
 80130ea:	2a01      	cmp	r2, #1
 80130ec:	6123      	str	r3, [r4, #16]
 80130ee:	dc02      	bgt.n	80130f6 <_printf_float+0x136>
 80130f0:	6822      	ldr	r2, [r4, #0]
 80130f2:	07d2      	lsls	r2, r2, #31
 80130f4:	d501      	bpl.n	80130fa <_printf_float+0x13a>
 80130f6:	3301      	adds	r3, #1
 80130f8:	6123      	str	r3, [r4, #16]
 80130fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d0a2      	beq.n	8013048 <_printf_float+0x88>
 8013102:	232d      	movs	r3, #45	; 0x2d
 8013104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013108:	e79e      	b.n	8013048 <_printf_float+0x88>
 801310a:	9904      	ldr	r1, [sp, #16]
 801310c:	2947      	cmp	r1, #71	; 0x47
 801310e:	d1c1      	bne.n	8013094 <_printf_float+0xd4>
 8013110:	2b00      	cmp	r3, #0
 8013112:	d1bf      	bne.n	8013094 <_printf_float+0xd4>
 8013114:	2301      	movs	r3, #1
 8013116:	e7bc      	b.n	8013092 <_printf_float+0xd2>
 8013118:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801311c:	d118      	bne.n	8013150 <_printf_float+0x190>
 801311e:	2900      	cmp	r1, #0
 8013120:	6863      	ldr	r3, [r4, #4]
 8013122:	dd0b      	ble.n	801313c <_printf_float+0x17c>
 8013124:	6121      	str	r1, [r4, #16]
 8013126:	b913      	cbnz	r3, 801312e <_printf_float+0x16e>
 8013128:	6822      	ldr	r2, [r4, #0]
 801312a:	07d0      	lsls	r0, r2, #31
 801312c:	d502      	bpl.n	8013134 <_printf_float+0x174>
 801312e:	3301      	adds	r3, #1
 8013130:	440b      	add	r3, r1
 8013132:	6123      	str	r3, [r4, #16]
 8013134:	2300      	movs	r3, #0
 8013136:	65a1      	str	r1, [r4, #88]	; 0x58
 8013138:	9304      	str	r3, [sp, #16]
 801313a:	e7de      	b.n	80130fa <_printf_float+0x13a>
 801313c:	b913      	cbnz	r3, 8013144 <_printf_float+0x184>
 801313e:	6822      	ldr	r2, [r4, #0]
 8013140:	07d2      	lsls	r2, r2, #31
 8013142:	d501      	bpl.n	8013148 <_printf_float+0x188>
 8013144:	3302      	adds	r3, #2
 8013146:	e7f4      	b.n	8013132 <_printf_float+0x172>
 8013148:	2301      	movs	r3, #1
 801314a:	e7f2      	b.n	8013132 <_printf_float+0x172>
 801314c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013150:	9b08      	ldr	r3, [sp, #32]
 8013152:	4299      	cmp	r1, r3
 8013154:	db05      	blt.n	8013162 <_printf_float+0x1a2>
 8013156:	6823      	ldr	r3, [r4, #0]
 8013158:	6121      	str	r1, [r4, #16]
 801315a:	07d8      	lsls	r0, r3, #31
 801315c:	d5ea      	bpl.n	8013134 <_printf_float+0x174>
 801315e:	1c4b      	adds	r3, r1, #1
 8013160:	e7e7      	b.n	8013132 <_printf_float+0x172>
 8013162:	2900      	cmp	r1, #0
 8013164:	bfd4      	ite	le
 8013166:	f1c1 0202 	rsble	r2, r1, #2
 801316a:	2201      	movgt	r2, #1
 801316c:	4413      	add	r3, r2
 801316e:	e7e0      	b.n	8013132 <_printf_float+0x172>
 8013170:	6823      	ldr	r3, [r4, #0]
 8013172:	055a      	lsls	r2, r3, #21
 8013174:	d407      	bmi.n	8013186 <_printf_float+0x1c6>
 8013176:	6923      	ldr	r3, [r4, #16]
 8013178:	4642      	mov	r2, r8
 801317a:	4631      	mov	r1, r6
 801317c:	4628      	mov	r0, r5
 801317e:	47b8      	blx	r7
 8013180:	3001      	adds	r0, #1
 8013182:	d12a      	bne.n	80131da <_printf_float+0x21a>
 8013184:	e76a      	b.n	801305c <_printf_float+0x9c>
 8013186:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801318a:	f240 80e2 	bls.w	8013352 <_printf_float+0x392>
 801318e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013192:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801319a:	d133      	bne.n	8013204 <_printf_float+0x244>
 801319c:	4a38      	ldr	r2, [pc, #224]	; (8013280 <_printf_float+0x2c0>)
 801319e:	2301      	movs	r3, #1
 80131a0:	4631      	mov	r1, r6
 80131a2:	4628      	mov	r0, r5
 80131a4:	47b8      	blx	r7
 80131a6:	3001      	adds	r0, #1
 80131a8:	f43f af58 	beq.w	801305c <_printf_float+0x9c>
 80131ac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80131b0:	429a      	cmp	r2, r3
 80131b2:	db02      	blt.n	80131ba <_printf_float+0x1fa>
 80131b4:	6823      	ldr	r3, [r4, #0]
 80131b6:	07d8      	lsls	r0, r3, #31
 80131b8:	d50f      	bpl.n	80131da <_printf_float+0x21a>
 80131ba:	4653      	mov	r3, sl
 80131bc:	465a      	mov	r2, fp
 80131be:	4631      	mov	r1, r6
 80131c0:	4628      	mov	r0, r5
 80131c2:	47b8      	blx	r7
 80131c4:	3001      	adds	r0, #1
 80131c6:	f43f af49 	beq.w	801305c <_printf_float+0x9c>
 80131ca:	f04f 0800 	mov.w	r8, #0
 80131ce:	f104 091a 	add.w	r9, r4, #26
 80131d2:	9b08      	ldr	r3, [sp, #32]
 80131d4:	3b01      	subs	r3, #1
 80131d6:	4543      	cmp	r3, r8
 80131d8:	dc09      	bgt.n	80131ee <_printf_float+0x22e>
 80131da:	6823      	ldr	r3, [r4, #0]
 80131dc:	079b      	lsls	r3, r3, #30
 80131de:	f100 8108 	bmi.w	80133f2 <_printf_float+0x432>
 80131e2:	68e0      	ldr	r0, [r4, #12]
 80131e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131e6:	4298      	cmp	r0, r3
 80131e8:	bfb8      	it	lt
 80131ea:	4618      	movlt	r0, r3
 80131ec:	e738      	b.n	8013060 <_printf_float+0xa0>
 80131ee:	2301      	movs	r3, #1
 80131f0:	464a      	mov	r2, r9
 80131f2:	4631      	mov	r1, r6
 80131f4:	4628      	mov	r0, r5
 80131f6:	47b8      	blx	r7
 80131f8:	3001      	adds	r0, #1
 80131fa:	f43f af2f 	beq.w	801305c <_printf_float+0x9c>
 80131fe:	f108 0801 	add.w	r8, r8, #1
 8013202:	e7e6      	b.n	80131d2 <_printf_float+0x212>
 8013204:	9b07      	ldr	r3, [sp, #28]
 8013206:	2b00      	cmp	r3, #0
 8013208:	dc3c      	bgt.n	8013284 <_printf_float+0x2c4>
 801320a:	4a1d      	ldr	r2, [pc, #116]	; (8013280 <_printf_float+0x2c0>)
 801320c:	2301      	movs	r3, #1
 801320e:	4631      	mov	r1, r6
 8013210:	4628      	mov	r0, r5
 8013212:	47b8      	blx	r7
 8013214:	3001      	adds	r0, #1
 8013216:	f43f af21 	beq.w	801305c <_printf_float+0x9c>
 801321a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801321e:	4313      	orrs	r3, r2
 8013220:	d102      	bne.n	8013228 <_printf_float+0x268>
 8013222:	6823      	ldr	r3, [r4, #0]
 8013224:	07d9      	lsls	r1, r3, #31
 8013226:	d5d8      	bpl.n	80131da <_printf_float+0x21a>
 8013228:	4653      	mov	r3, sl
 801322a:	465a      	mov	r2, fp
 801322c:	4631      	mov	r1, r6
 801322e:	4628      	mov	r0, r5
 8013230:	47b8      	blx	r7
 8013232:	3001      	adds	r0, #1
 8013234:	f43f af12 	beq.w	801305c <_printf_float+0x9c>
 8013238:	f04f 0900 	mov.w	r9, #0
 801323c:	f104 0a1a 	add.w	sl, r4, #26
 8013240:	9b07      	ldr	r3, [sp, #28]
 8013242:	425b      	negs	r3, r3
 8013244:	454b      	cmp	r3, r9
 8013246:	dc01      	bgt.n	801324c <_printf_float+0x28c>
 8013248:	9b08      	ldr	r3, [sp, #32]
 801324a:	e795      	b.n	8013178 <_printf_float+0x1b8>
 801324c:	2301      	movs	r3, #1
 801324e:	4652      	mov	r2, sl
 8013250:	4631      	mov	r1, r6
 8013252:	4628      	mov	r0, r5
 8013254:	47b8      	blx	r7
 8013256:	3001      	adds	r0, #1
 8013258:	f43f af00 	beq.w	801305c <_printf_float+0x9c>
 801325c:	f109 0901 	add.w	r9, r9, #1
 8013260:	e7ee      	b.n	8013240 <_printf_float+0x280>
 8013262:	bf00      	nop
 8013264:	f3af 8000 	nop.w
 8013268:	ffffffff 	.word	0xffffffff
 801326c:	7fefffff 	.word	0x7fefffff
 8013270:	08018644 	.word	0x08018644
 8013274:	08018648 	.word	0x08018648
 8013278:	08018650 	.word	0x08018650
 801327c:	0801864c 	.word	0x0801864c
 8013280:	08018654 	.word	0x08018654
 8013284:	9a08      	ldr	r2, [sp, #32]
 8013286:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013288:	429a      	cmp	r2, r3
 801328a:	bfa8      	it	ge
 801328c:	461a      	movge	r2, r3
 801328e:	2a00      	cmp	r2, #0
 8013290:	4691      	mov	r9, r2
 8013292:	dc38      	bgt.n	8013306 <_printf_float+0x346>
 8013294:	2300      	movs	r3, #0
 8013296:	9305      	str	r3, [sp, #20]
 8013298:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801329c:	f104 021a 	add.w	r2, r4, #26
 80132a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80132a2:	9905      	ldr	r1, [sp, #20]
 80132a4:	9304      	str	r3, [sp, #16]
 80132a6:	eba3 0309 	sub.w	r3, r3, r9
 80132aa:	428b      	cmp	r3, r1
 80132ac:	dc33      	bgt.n	8013316 <_printf_float+0x356>
 80132ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80132b2:	429a      	cmp	r2, r3
 80132b4:	db3c      	blt.n	8013330 <_printf_float+0x370>
 80132b6:	6823      	ldr	r3, [r4, #0]
 80132b8:	07da      	lsls	r2, r3, #31
 80132ba:	d439      	bmi.n	8013330 <_printf_float+0x370>
 80132bc:	9b08      	ldr	r3, [sp, #32]
 80132be:	9a04      	ldr	r2, [sp, #16]
 80132c0:	9907      	ldr	r1, [sp, #28]
 80132c2:	1a9a      	subs	r2, r3, r2
 80132c4:	eba3 0901 	sub.w	r9, r3, r1
 80132c8:	4591      	cmp	r9, r2
 80132ca:	bfa8      	it	ge
 80132cc:	4691      	movge	r9, r2
 80132ce:	f1b9 0f00 	cmp.w	r9, #0
 80132d2:	dc35      	bgt.n	8013340 <_printf_float+0x380>
 80132d4:	f04f 0800 	mov.w	r8, #0
 80132d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80132dc:	f104 0a1a 	add.w	sl, r4, #26
 80132e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80132e4:	1a9b      	subs	r3, r3, r2
 80132e6:	eba3 0309 	sub.w	r3, r3, r9
 80132ea:	4543      	cmp	r3, r8
 80132ec:	f77f af75 	ble.w	80131da <_printf_float+0x21a>
 80132f0:	2301      	movs	r3, #1
 80132f2:	4652      	mov	r2, sl
 80132f4:	4631      	mov	r1, r6
 80132f6:	4628      	mov	r0, r5
 80132f8:	47b8      	blx	r7
 80132fa:	3001      	adds	r0, #1
 80132fc:	f43f aeae 	beq.w	801305c <_printf_float+0x9c>
 8013300:	f108 0801 	add.w	r8, r8, #1
 8013304:	e7ec      	b.n	80132e0 <_printf_float+0x320>
 8013306:	4613      	mov	r3, r2
 8013308:	4631      	mov	r1, r6
 801330a:	4642      	mov	r2, r8
 801330c:	4628      	mov	r0, r5
 801330e:	47b8      	blx	r7
 8013310:	3001      	adds	r0, #1
 8013312:	d1bf      	bne.n	8013294 <_printf_float+0x2d4>
 8013314:	e6a2      	b.n	801305c <_printf_float+0x9c>
 8013316:	2301      	movs	r3, #1
 8013318:	4631      	mov	r1, r6
 801331a:	4628      	mov	r0, r5
 801331c:	9204      	str	r2, [sp, #16]
 801331e:	47b8      	blx	r7
 8013320:	3001      	adds	r0, #1
 8013322:	f43f ae9b 	beq.w	801305c <_printf_float+0x9c>
 8013326:	9b05      	ldr	r3, [sp, #20]
 8013328:	9a04      	ldr	r2, [sp, #16]
 801332a:	3301      	adds	r3, #1
 801332c:	9305      	str	r3, [sp, #20]
 801332e:	e7b7      	b.n	80132a0 <_printf_float+0x2e0>
 8013330:	4653      	mov	r3, sl
 8013332:	465a      	mov	r2, fp
 8013334:	4631      	mov	r1, r6
 8013336:	4628      	mov	r0, r5
 8013338:	47b8      	blx	r7
 801333a:	3001      	adds	r0, #1
 801333c:	d1be      	bne.n	80132bc <_printf_float+0x2fc>
 801333e:	e68d      	b.n	801305c <_printf_float+0x9c>
 8013340:	9a04      	ldr	r2, [sp, #16]
 8013342:	464b      	mov	r3, r9
 8013344:	4442      	add	r2, r8
 8013346:	4631      	mov	r1, r6
 8013348:	4628      	mov	r0, r5
 801334a:	47b8      	blx	r7
 801334c:	3001      	adds	r0, #1
 801334e:	d1c1      	bne.n	80132d4 <_printf_float+0x314>
 8013350:	e684      	b.n	801305c <_printf_float+0x9c>
 8013352:	9a08      	ldr	r2, [sp, #32]
 8013354:	2a01      	cmp	r2, #1
 8013356:	dc01      	bgt.n	801335c <_printf_float+0x39c>
 8013358:	07db      	lsls	r3, r3, #31
 801335a:	d537      	bpl.n	80133cc <_printf_float+0x40c>
 801335c:	2301      	movs	r3, #1
 801335e:	4642      	mov	r2, r8
 8013360:	4631      	mov	r1, r6
 8013362:	4628      	mov	r0, r5
 8013364:	47b8      	blx	r7
 8013366:	3001      	adds	r0, #1
 8013368:	f43f ae78 	beq.w	801305c <_printf_float+0x9c>
 801336c:	4653      	mov	r3, sl
 801336e:	465a      	mov	r2, fp
 8013370:	4631      	mov	r1, r6
 8013372:	4628      	mov	r0, r5
 8013374:	47b8      	blx	r7
 8013376:	3001      	adds	r0, #1
 8013378:	f43f ae70 	beq.w	801305c <_printf_float+0x9c>
 801337c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013380:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013388:	d01b      	beq.n	80133c2 <_printf_float+0x402>
 801338a:	9b08      	ldr	r3, [sp, #32]
 801338c:	f108 0201 	add.w	r2, r8, #1
 8013390:	3b01      	subs	r3, #1
 8013392:	4631      	mov	r1, r6
 8013394:	4628      	mov	r0, r5
 8013396:	47b8      	blx	r7
 8013398:	3001      	adds	r0, #1
 801339a:	d10e      	bne.n	80133ba <_printf_float+0x3fa>
 801339c:	e65e      	b.n	801305c <_printf_float+0x9c>
 801339e:	2301      	movs	r3, #1
 80133a0:	464a      	mov	r2, r9
 80133a2:	4631      	mov	r1, r6
 80133a4:	4628      	mov	r0, r5
 80133a6:	47b8      	blx	r7
 80133a8:	3001      	adds	r0, #1
 80133aa:	f43f ae57 	beq.w	801305c <_printf_float+0x9c>
 80133ae:	f108 0801 	add.w	r8, r8, #1
 80133b2:	9b08      	ldr	r3, [sp, #32]
 80133b4:	3b01      	subs	r3, #1
 80133b6:	4543      	cmp	r3, r8
 80133b8:	dcf1      	bgt.n	801339e <_printf_float+0x3de>
 80133ba:	9b04      	ldr	r3, [sp, #16]
 80133bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80133c0:	e6db      	b.n	801317a <_printf_float+0x1ba>
 80133c2:	f04f 0800 	mov.w	r8, #0
 80133c6:	f104 091a 	add.w	r9, r4, #26
 80133ca:	e7f2      	b.n	80133b2 <_printf_float+0x3f2>
 80133cc:	2301      	movs	r3, #1
 80133ce:	4642      	mov	r2, r8
 80133d0:	e7df      	b.n	8013392 <_printf_float+0x3d2>
 80133d2:	2301      	movs	r3, #1
 80133d4:	464a      	mov	r2, r9
 80133d6:	4631      	mov	r1, r6
 80133d8:	4628      	mov	r0, r5
 80133da:	47b8      	blx	r7
 80133dc:	3001      	adds	r0, #1
 80133de:	f43f ae3d 	beq.w	801305c <_printf_float+0x9c>
 80133e2:	f108 0801 	add.w	r8, r8, #1
 80133e6:	68e3      	ldr	r3, [r4, #12]
 80133e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133ea:	1a5b      	subs	r3, r3, r1
 80133ec:	4543      	cmp	r3, r8
 80133ee:	dcf0      	bgt.n	80133d2 <_printf_float+0x412>
 80133f0:	e6f7      	b.n	80131e2 <_printf_float+0x222>
 80133f2:	f04f 0800 	mov.w	r8, #0
 80133f6:	f104 0919 	add.w	r9, r4, #25
 80133fa:	e7f4      	b.n	80133e6 <_printf_float+0x426>

080133fc <_printf_common>:
 80133fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013400:	4616      	mov	r6, r2
 8013402:	4699      	mov	r9, r3
 8013404:	688a      	ldr	r2, [r1, #8]
 8013406:	690b      	ldr	r3, [r1, #16]
 8013408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801340c:	4293      	cmp	r3, r2
 801340e:	bfb8      	it	lt
 8013410:	4613      	movlt	r3, r2
 8013412:	6033      	str	r3, [r6, #0]
 8013414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013418:	4607      	mov	r7, r0
 801341a:	460c      	mov	r4, r1
 801341c:	b10a      	cbz	r2, 8013422 <_printf_common+0x26>
 801341e:	3301      	adds	r3, #1
 8013420:	6033      	str	r3, [r6, #0]
 8013422:	6823      	ldr	r3, [r4, #0]
 8013424:	0699      	lsls	r1, r3, #26
 8013426:	bf42      	ittt	mi
 8013428:	6833      	ldrmi	r3, [r6, #0]
 801342a:	3302      	addmi	r3, #2
 801342c:	6033      	strmi	r3, [r6, #0]
 801342e:	6825      	ldr	r5, [r4, #0]
 8013430:	f015 0506 	ands.w	r5, r5, #6
 8013434:	d106      	bne.n	8013444 <_printf_common+0x48>
 8013436:	f104 0a19 	add.w	sl, r4, #25
 801343a:	68e3      	ldr	r3, [r4, #12]
 801343c:	6832      	ldr	r2, [r6, #0]
 801343e:	1a9b      	subs	r3, r3, r2
 8013440:	42ab      	cmp	r3, r5
 8013442:	dc26      	bgt.n	8013492 <_printf_common+0x96>
 8013444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013448:	1e13      	subs	r3, r2, #0
 801344a:	6822      	ldr	r2, [r4, #0]
 801344c:	bf18      	it	ne
 801344e:	2301      	movne	r3, #1
 8013450:	0692      	lsls	r2, r2, #26
 8013452:	d42b      	bmi.n	80134ac <_printf_common+0xb0>
 8013454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013458:	4649      	mov	r1, r9
 801345a:	4638      	mov	r0, r7
 801345c:	47c0      	blx	r8
 801345e:	3001      	adds	r0, #1
 8013460:	d01e      	beq.n	80134a0 <_printf_common+0xa4>
 8013462:	6823      	ldr	r3, [r4, #0]
 8013464:	68e5      	ldr	r5, [r4, #12]
 8013466:	6832      	ldr	r2, [r6, #0]
 8013468:	f003 0306 	and.w	r3, r3, #6
 801346c:	2b04      	cmp	r3, #4
 801346e:	bf08      	it	eq
 8013470:	1aad      	subeq	r5, r5, r2
 8013472:	68a3      	ldr	r3, [r4, #8]
 8013474:	6922      	ldr	r2, [r4, #16]
 8013476:	bf0c      	ite	eq
 8013478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801347c:	2500      	movne	r5, #0
 801347e:	4293      	cmp	r3, r2
 8013480:	bfc4      	itt	gt
 8013482:	1a9b      	subgt	r3, r3, r2
 8013484:	18ed      	addgt	r5, r5, r3
 8013486:	2600      	movs	r6, #0
 8013488:	341a      	adds	r4, #26
 801348a:	42b5      	cmp	r5, r6
 801348c:	d11a      	bne.n	80134c4 <_printf_common+0xc8>
 801348e:	2000      	movs	r0, #0
 8013490:	e008      	b.n	80134a4 <_printf_common+0xa8>
 8013492:	2301      	movs	r3, #1
 8013494:	4652      	mov	r2, sl
 8013496:	4649      	mov	r1, r9
 8013498:	4638      	mov	r0, r7
 801349a:	47c0      	blx	r8
 801349c:	3001      	adds	r0, #1
 801349e:	d103      	bne.n	80134a8 <_printf_common+0xac>
 80134a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80134a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134a8:	3501      	adds	r5, #1
 80134aa:	e7c6      	b.n	801343a <_printf_common+0x3e>
 80134ac:	18e1      	adds	r1, r4, r3
 80134ae:	1c5a      	adds	r2, r3, #1
 80134b0:	2030      	movs	r0, #48	; 0x30
 80134b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80134b6:	4422      	add	r2, r4
 80134b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80134bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80134c0:	3302      	adds	r3, #2
 80134c2:	e7c7      	b.n	8013454 <_printf_common+0x58>
 80134c4:	2301      	movs	r3, #1
 80134c6:	4622      	mov	r2, r4
 80134c8:	4649      	mov	r1, r9
 80134ca:	4638      	mov	r0, r7
 80134cc:	47c0      	blx	r8
 80134ce:	3001      	adds	r0, #1
 80134d0:	d0e6      	beq.n	80134a0 <_printf_common+0xa4>
 80134d2:	3601      	adds	r6, #1
 80134d4:	e7d9      	b.n	801348a <_printf_common+0x8e>
	...

080134d8 <_printf_i>:
 80134d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80134dc:	7e0f      	ldrb	r7, [r1, #24]
 80134de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80134e0:	2f78      	cmp	r7, #120	; 0x78
 80134e2:	4691      	mov	r9, r2
 80134e4:	4680      	mov	r8, r0
 80134e6:	460c      	mov	r4, r1
 80134e8:	469a      	mov	sl, r3
 80134ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80134ee:	d807      	bhi.n	8013500 <_printf_i+0x28>
 80134f0:	2f62      	cmp	r7, #98	; 0x62
 80134f2:	d80a      	bhi.n	801350a <_printf_i+0x32>
 80134f4:	2f00      	cmp	r7, #0
 80134f6:	f000 80d8 	beq.w	80136aa <_printf_i+0x1d2>
 80134fa:	2f58      	cmp	r7, #88	; 0x58
 80134fc:	f000 80a3 	beq.w	8013646 <_printf_i+0x16e>
 8013500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013508:	e03a      	b.n	8013580 <_printf_i+0xa8>
 801350a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801350e:	2b15      	cmp	r3, #21
 8013510:	d8f6      	bhi.n	8013500 <_printf_i+0x28>
 8013512:	a101      	add	r1, pc, #4	; (adr r1, 8013518 <_printf_i+0x40>)
 8013514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013518:	08013571 	.word	0x08013571
 801351c:	08013585 	.word	0x08013585
 8013520:	08013501 	.word	0x08013501
 8013524:	08013501 	.word	0x08013501
 8013528:	08013501 	.word	0x08013501
 801352c:	08013501 	.word	0x08013501
 8013530:	08013585 	.word	0x08013585
 8013534:	08013501 	.word	0x08013501
 8013538:	08013501 	.word	0x08013501
 801353c:	08013501 	.word	0x08013501
 8013540:	08013501 	.word	0x08013501
 8013544:	08013691 	.word	0x08013691
 8013548:	080135b5 	.word	0x080135b5
 801354c:	08013673 	.word	0x08013673
 8013550:	08013501 	.word	0x08013501
 8013554:	08013501 	.word	0x08013501
 8013558:	080136b3 	.word	0x080136b3
 801355c:	08013501 	.word	0x08013501
 8013560:	080135b5 	.word	0x080135b5
 8013564:	08013501 	.word	0x08013501
 8013568:	08013501 	.word	0x08013501
 801356c:	0801367b 	.word	0x0801367b
 8013570:	682b      	ldr	r3, [r5, #0]
 8013572:	1d1a      	adds	r2, r3, #4
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	602a      	str	r2, [r5, #0]
 8013578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801357c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013580:	2301      	movs	r3, #1
 8013582:	e0a3      	b.n	80136cc <_printf_i+0x1f4>
 8013584:	6820      	ldr	r0, [r4, #0]
 8013586:	6829      	ldr	r1, [r5, #0]
 8013588:	0606      	lsls	r6, r0, #24
 801358a:	f101 0304 	add.w	r3, r1, #4
 801358e:	d50a      	bpl.n	80135a6 <_printf_i+0xce>
 8013590:	680e      	ldr	r6, [r1, #0]
 8013592:	602b      	str	r3, [r5, #0]
 8013594:	2e00      	cmp	r6, #0
 8013596:	da03      	bge.n	80135a0 <_printf_i+0xc8>
 8013598:	232d      	movs	r3, #45	; 0x2d
 801359a:	4276      	negs	r6, r6
 801359c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135a0:	485e      	ldr	r0, [pc, #376]	; (801371c <_printf_i+0x244>)
 80135a2:	230a      	movs	r3, #10
 80135a4:	e019      	b.n	80135da <_printf_i+0x102>
 80135a6:	680e      	ldr	r6, [r1, #0]
 80135a8:	602b      	str	r3, [r5, #0]
 80135aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80135ae:	bf18      	it	ne
 80135b0:	b236      	sxthne	r6, r6
 80135b2:	e7ef      	b.n	8013594 <_printf_i+0xbc>
 80135b4:	682b      	ldr	r3, [r5, #0]
 80135b6:	6820      	ldr	r0, [r4, #0]
 80135b8:	1d19      	adds	r1, r3, #4
 80135ba:	6029      	str	r1, [r5, #0]
 80135bc:	0601      	lsls	r1, r0, #24
 80135be:	d501      	bpl.n	80135c4 <_printf_i+0xec>
 80135c0:	681e      	ldr	r6, [r3, #0]
 80135c2:	e002      	b.n	80135ca <_printf_i+0xf2>
 80135c4:	0646      	lsls	r6, r0, #25
 80135c6:	d5fb      	bpl.n	80135c0 <_printf_i+0xe8>
 80135c8:	881e      	ldrh	r6, [r3, #0]
 80135ca:	4854      	ldr	r0, [pc, #336]	; (801371c <_printf_i+0x244>)
 80135cc:	2f6f      	cmp	r7, #111	; 0x6f
 80135ce:	bf0c      	ite	eq
 80135d0:	2308      	moveq	r3, #8
 80135d2:	230a      	movne	r3, #10
 80135d4:	2100      	movs	r1, #0
 80135d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80135da:	6865      	ldr	r5, [r4, #4]
 80135dc:	60a5      	str	r5, [r4, #8]
 80135de:	2d00      	cmp	r5, #0
 80135e0:	bfa2      	ittt	ge
 80135e2:	6821      	ldrge	r1, [r4, #0]
 80135e4:	f021 0104 	bicge.w	r1, r1, #4
 80135e8:	6021      	strge	r1, [r4, #0]
 80135ea:	b90e      	cbnz	r6, 80135f0 <_printf_i+0x118>
 80135ec:	2d00      	cmp	r5, #0
 80135ee:	d04d      	beq.n	801368c <_printf_i+0x1b4>
 80135f0:	4615      	mov	r5, r2
 80135f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80135f6:	fb03 6711 	mls	r7, r3, r1, r6
 80135fa:	5dc7      	ldrb	r7, [r0, r7]
 80135fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013600:	4637      	mov	r7, r6
 8013602:	42bb      	cmp	r3, r7
 8013604:	460e      	mov	r6, r1
 8013606:	d9f4      	bls.n	80135f2 <_printf_i+0x11a>
 8013608:	2b08      	cmp	r3, #8
 801360a:	d10b      	bne.n	8013624 <_printf_i+0x14c>
 801360c:	6823      	ldr	r3, [r4, #0]
 801360e:	07de      	lsls	r6, r3, #31
 8013610:	d508      	bpl.n	8013624 <_printf_i+0x14c>
 8013612:	6923      	ldr	r3, [r4, #16]
 8013614:	6861      	ldr	r1, [r4, #4]
 8013616:	4299      	cmp	r1, r3
 8013618:	bfde      	ittt	le
 801361a:	2330      	movle	r3, #48	; 0x30
 801361c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013620:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013624:	1b52      	subs	r2, r2, r5
 8013626:	6122      	str	r2, [r4, #16]
 8013628:	f8cd a000 	str.w	sl, [sp]
 801362c:	464b      	mov	r3, r9
 801362e:	aa03      	add	r2, sp, #12
 8013630:	4621      	mov	r1, r4
 8013632:	4640      	mov	r0, r8
 8013634:	f7ff fee2 	bl	80133fc <_printf_common>
 8013638:	3001      	adds	r0, #1
 801363a:	d14c      	bne.n	80136d6 <_printf_i+0x1fe>
 801363c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013640:	b004      	add	sp, #16
 8013642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013646:	4835      	ldr	r0, [pc, #212]	; (801371c <_printf_i+0x244>)
 8013648:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801364c:	6829      	ldr	r1, [r5, #0]
 801364e:	6823      	ldr	r3, [r4, #0]
 8013650:	f851 6b04 	ldr.w	r6, [r1], #4
 8013654:	6029      	str	r1, [r5, #0]
 8013656:	061d      	lsls	r5, r3, #24
 8013658:	d514      	bpl.n	8013684 <_printf_i+0x1ac>
 801365a:	07df      	lsls	r7, r3, #31
 801365c:	bf44      	itt	mi
 801365e:	f043 0320 	orrmi.w	r3, r3, #32
 8013662:	6023      	strmi	r3, [r4, #0]
 8013664:	b91e      	cbnz	r6, 801366e <_printf_i+0x196>
 8013666:	6823      	ldr	r3, [r4, #0]
 8013668:	f023 0320 	bic.w	r3, r3, #32
 801366c:	6023      	str	r3, [r4, #0]
 801366e:	2310      	movs	r3, #16
 8013670:	e7b0      	b.n	80135d4 <_printf_i+0xfc>
 8013672:	6823      	ldr	r3, [r4, #0]
 8013674:	f043 0320 	orr.w	r3, r3, #32
 8013678:	6023      	str	r3, [r4, #0]
 801367a:	2378      	movs	r3, #120	; 0x78
 801367c:	4828      	ldr	r0, [pc, #160]	; (8013720 <_printf_i+0x248>)
 801367e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013682:	e7e3      	b.n	801364c <_printf_i+0x174>
 8013684:	0659      	lsls	r1, r3, #25
 8013686:	bf48      	it	mi
 8013688:	b2b6      	uxthmi	r6, r6
 801368a:	e7e6      	b.n	801365a <_printf_i+0x182>
 801368c:	4615      	mov	r5, r2
 801368e:	e7bb      	b.n	8013608 <_printf_i+0x130>
 8013690:	682b      	ldr	r3, [r5, #0]
 8013692:	6826      	ldr	r6, [r4, #0]
 8013694:	6961      	ldr	r1, [r4, #20]
 8013696:	1d18      	adds	r0, r3, #4
 8013698:	6028      	str	r0, [r5, #0]
 801369a:	0635      	lsls	r5, r6, #24
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	d501      	bpl.n	80136a4 <_printf_i+0x1cc>
 80136a0:	6019      	str	r1, [r3, #0]
 80136a2:	e002      	b.n	80136aa <_printf_i+0x1d2>
 80136a4:	0670      	lsls	r0, r6, #25
 80136a6:	d5fb      	bpl.n	80136a0 <_printf_i+0x1c8>
 80136a8:	8019      	strh	r1, [r3, #0]
 80136aa:	2300      	movs	r3, #0
 80136ac:	6123      	str	r3, [r4, #16]
 80136ae:	4615      	mov	r5, r2
 80136b0:	e7ba      	b.n	8013628 <_printf_i+0x150>
 80136b2:	682b      	ldr	r3, [r5, #0]
 80136b4:	1d1a      	adds	r2, r3, #4
 80136b6:	602a      	str	r2, [r5, #0]
 80136b8:	681d      	ldr	r5, [r3, #0]
 80136ba:	6862      	ldr	r2, [r4, #4]
 80136bc:	2100      	movs	r1, #0
 80136be:	4628      	mov	r0, r5
 80136c0:	f7ec fdbe 	bl	8000240 <memchr>
 80136c4:	b108      	cbz	r0, 80136ca <_printf_i+0x1f2>
 80136c6:	1b40      	subs	r0, r0, r5
 80136c8:	6060      	str	r0, [r4, #4]
 80136ca:	6863      	ldr	r3, [r4, #4]
 80136cc:	6123      	str	r3, [r4, #16]
 80136ce:	2300      	movs	r3, #0
 80136d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136d4:	e7a8      	b.n	8013628 <_printf_i+0x150>
 80136d6:	6923      	ldr	r3, [r4, #16]
 80136d8:	462a      	mov	r2, r5
 80136da:	4649      	mov	r1, r9
 80136dc:	4640      	mov	r0, r8
 80136de:	47d0      	blx	sl
 80136e0:	3001      	adds	r0, #1
 80136e2:	d0ab      	beq.n	801363c <_printf_i+0x164>
 80136e4:	6823      	ldr	r3, [r4, #0]
 80136e6:	079b      	lsls	r3, r3, #30
 80136e8:	d413      	bmi.n	8013712 <_printf_i+0x23a>
 80136ea:	68e0      	ldr	r0, [r4, #12]
 80136ec:	9b03      	ldr	r3, [sp, #12]
 80136ee:	4298      	cmp	r0, r3
 80136f0:	bfb8      	it	lt
 80136f2:	4618      	movlt	r0, r3
 80136f4:	e7a4      	b.n	8013640 <_printf_i+0x168>
 80136f6:	2301      	movs	r3, #1
 80136f8:	4632      	mov	r2, r6
 80136fa:	4649      	mov	r1, r9
 80136fc:	4640      	mov	r0, r8
 80136fe:	47d0      	blx	sl
 8013700:	3001      	adds	r0, #1
 8013702:	d09b      	beq.n	801363c <_printf_i+0x164>
 8013704:	3501      	adds	r5, #1
 8013706:	68e3      	ldr	r3, [r4, #12]
 8013708:	9903      	ldr	r1, [sp, #12]
 801370a:	1a5b      	subs	r3, r3, r1
 801370c:	42ab      	cmp	r3, r5
 801370e:	dcf2      	bgt.n	80136f6 <_printf_i+0x21e>
 8013710:	e7eb      	b.n	80136ea <_printf_i+0x212>
 8013712:	2500      	movs	r5, #0
 8013714:	f104 0619 	add.w	r6, r4, #25
 8013718:	e7f5      	b.n	8013706 <_printf_i+0x22e>
 801371a:	bf00      	nop
 801371c:	08018656 	.word	0x08018656
 8013720:	08018667 	.word	0x08018667

08013724 <_scanf_float>:
 8013724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013728:	b087      	sub	sp, #28
 801372a:	4617      	mov	r7, r2
 801372c:	9303      	str	r3, [sp, #12]
 801372e:	688b      	ldr	r3, [r1, #8]
 8013730:	1e5a      	subs	r2, r3, #1
 8013732:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013736:	bf83      	ittte	hi
 8013738:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801373c:	195b      	addhi	r3, r3, r5
 801373e:	9302      	strhi	r3, [sp, #8]
 8013740:	2300      	movls	r3, #0
 8013742:	bf86      	itte	hi
 8013744:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013748:	608b      	strhi	r3, [r1, #8]
 801374a:	9302      	strls	r3, [sp, #8]
 801374c:	680b      	ldr	r3, [r1, #0]
 801374e:	468b      	mov	fp, r1
 8013750:	2500      	movs	r5, #0
 8013752:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013756:	f84b 3b1c 	str.w	r3, [fp], #28
 801375a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801375e:	4680      	mov	r8, r0
 8013760:	460c      	mov	r4, r1
 8013762:	465e      	mov	r6, fp
 8013764:	46aa      	mov	sl, r5
 8013766:	46a9      	mov	r9, r5
 8013768:	9501      	str	r5, [sp, #4]
 801376a:	68a2      	ldr	r2, [r4, #8]
 801376c:	b152      	cbz	r2, 8013784 <_scanf_float+0x60>
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	781b      	ldrb	r3, [r3, #0]
 8013772:	2b4e      	cmp	r3, #78	; 0x4e
 8013774:	d864      	bhi.n	8013840 <_scanf_float+0x11c>
 8013776:	2b40      	cmp	r3, #64	; 0x40
 8013778:	d83c      	bhi.n	80137f4 <_scanf_float+0xd0>
 801377a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801377e:	b2c8      	uxtb	r0, r1
 8013780:	280e      	cmp	r0, #14
 8013782:	d93a      	bls.n	80137fa <_scanf_float+0xd6>
 8013784:	f1b9 0f00 	cmp.w	r9, #0
 8013788:	d003      	beq.n	8013792 <_scanf_float+0x6e>
 801378a:	6823      	ldr	r3, [r4, #0]
 801378c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013790:	6023      	str	r3, [r4, #0]
 8013792:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013796:	f1ba 0f01 	cmp.w	sl, #1
 801379a:	f200 8113 	bhi.w	80139c4 <_scanf_float+0x2a0>
 801379e:	455e      	cmp	r6, fp
 80137a0:	f200 8105 	bhi.w	80139ae <_scanf_float+0x28a>
 80137a4:	2501      	movs	r5, #1
 80137a6:	4628      	mov	r0, r5
 80137a8:	b007      	add	sp, #28
 80137aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80137b2:	2a0d      	cmp	r2, #13
 80137b4:	d8e6      	bhi.n	8013784 <_scanf_float+0x60>
 80137b6:	a101      	add	r1, pc, #4	; (adr r1, 80137bc <_scanf_float+0x98>)
 80137b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80137bc:	080138fb 	.word	0x080138fb
 80137c0:	08013785 	.word	0x08013785
 80137c4:	08013785 	.word	0x08013785
 80137c8:	08013785 	.word	0x08013785
 80137cc:	0801395b 	.word	0x0801395b
 80137d0:	08013933 	.word	0x08013933
 80137d4:	08013785 	.word	0x08013785
 80137d8:	08013785 	.word	0x08013785
 80137dc:	08013909 	.word	0x08013909
 80137e0:	08013785 	.word	0x08013785
 80137e4:	08013785 	.word	0x08013785
 80137e8:	08013785 	.word	0x08013785
 80137ec:	08013785 	.word	0x08013785
 80137f0:	080138c1 	.word	0x080138c1
 80137f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80137f8:	e7db      	b.n	80137b2 <_scanf_float+0x8e>
 80137fa:	290e      	cmp	r1, #14
 80137fc:	d8c2      	bhi.n	8013784 <_scanf_float+0x60>
 80137fe:	a001      	add	r0, pc, #4	; (adr r0, 8013804 <_scanf_float+0xe0>)
 8013800:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013804:	080138b3 	.word	0x080138b3
 8013808:	08013785 	.word	0x08013785
 801380c:	080138b3 	.word	0x080138b3
 8013810:	08013947 	.word	0x08013947
 8013814:	08013785 	.word	0x08013785
 8013818:	08013861 	.word	0x08013861
 801381c:	0801389d 	.word	0x0801389d
 8013820:	0801389d 	.word	0x0801389d
 8013824:	0801389d 	.word	0x0801389d
 8013828:	0801389d 	.word	0x0801389d
 801382c:	0801389d 	.word	0x0801389d
 8013830:	0801389d 	.word	0x0801389d
 8013834:	0801389d 	.word	0x0801389d
 8013838:	0801389d 	.word	0x0801389d
 801383c:	0801389d 	.word	0x0801389d
 8013840:	2b6e      	cmp	r3, #110	; 0x6e
 8013842:	d809      	bhi.n	8013858 <_scanf_float+0x134>
 8013844:	2b60      	cmp	r3, #96	; 0x60
 8013846:	d8b2      	bhi.n	80137ae <_scanf_float+0x8a>
 8013848:	2b54      	cmp	r3, #84	; 0x54
 801384a:	d077      	beq.n	801393c <_scanf_float+0x218>
 801384c:	2b59      	cmp	r3, #89	; 0x59
 801384e:	d199      	bne.n	8013784 <_scanf_float+0x60>
 8013850:	2d07      	cmp	r5, #7
 8013852:	d197      	bne.n	8013784 <_scanf_float+0x60>
 8013854:	2508      	movs	r5, #8
 8013856:	e029      	b.n	80138ac <_scanf_float+0x188>
 8013858:	2b74      	cmp	r3, #116	; 0x74
 801385a:	d06f      	beq.n	801393c <_scanf_float+0x218>
 801385c:	2b79      	cmp	r3, #121	; 0x79
 801385e:	e7f6      	b.n	801384e <_scanf_float+0x12a>
 8013860:	6821      	ldr	r1, [r4, #0]
 8013862:	05c8      	lsls	r0, r1, #23
 8013864:	d51a      	bpl.n	801389c <_scanf_float+0x178>
 8013866:	9b02      	ldr	r3, [sp, #8]
 8013868:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801386c:	6021      	str	r1, [r4, #0]
 801386e:	f109 0901 	add.w	r9, r9, #1
 8013872:	b11b      	cbz	r3, 801387c <_scanf_float+0x158>
 8013874:	3b01      	subs	r3, #1
 8013876:	3201      	adds	r2, #1
 8013878:	9302      	str	r3, [sp, #8]
 801387a:	60a2      	str	r2, [r4, #8]
 801387c:	68a3      	ldr	r3, [r4, #8]
 801387e:	3b01      	subs	r3, #1
 8013880:	60a3      	str	r3, [r4, #8]
 8013882:	6923      	ldr	r3, [r4, #16]
 8013884:	3301      	adds	r3, #1
 8013886:	6123      	str	r3, [r4, #16]
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	3b01      	subs	r3, #1
 801388c:	2b00      	cmp	r3, #0
 801388e:	607b      	str	r3, [r7, #4]
 8013890:	f340 8084 	ble.w	801399c <_scanf_float+0x278>
 8013894:	683b      	ldr	r3, [r7, #0]
 8013896:	3301      	adds	r3, #1
 8013898:	603b      	str	r3, [r7, #0]
 801389a:	e766      	b.n	801376a <_scanf_float+0x46>
 801389c:	eb1a 0f05 	cmn.w	sl, r5
 80138a0:	f47f af70 	bne.w	8013784 <_scanf_float+0x60>
 80138a4:	6822      	ldr	r2, [r4, #0]
 80138a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80138aa:	6022      	str	r2, [r4, #0]
 80138ac:	f806 3b01 	strb.w	r3, [r6], #1
 80138b0:	e7e4      	b.n	801387c <_scanf_float+0x158>
 80138b2:	6822      	ldr	r2, [r4, #0]
 80138b4:	0610      	lsls	r0, r2, #24
 80138b6:	f57f af65 	bpl.w	8013784 <_scanf_float+0x60>
 80138ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80138be:	e7f4      	b.n	80138aa <_scanf_float+0x186>
 80138c0:	f1ba 0f00 	cmp.w	sl, #0
 80138c4:	d10e      	bne.n	80138e4 <_scanf_float+0x1c0>
 80138c6:	f1b9 0f00 	cmp.w	r9, #0
 80138ca:	d10e      	bne.n	80138ea <_scanf_float+0x1c6>
 80138cc:	6822      	ldr	r2, [r4, #0]
 80138ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80138d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80138d6:	d108      	bne.n	80138ea <_scanf_float+0x1c6>
 80138d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80138dc:	6022      	str	r2, [r4, #0]
 80138de:	f04f 0a01 	mov.w	sl, #1
 80138e2:	e7e3      	b.n	80138ac <_scanf_float+0x188>
 80138e4:	f1ba 0f02 	cmp.w	sl, #2
 80138e8:	d055      	beq.n	8013996 <_scanf_float+0x272>
 80138ea:	2d01      	cmp	r5, #1
 80138ec:	d002      	beq.n	80138f4 <_scanf_float+0x1d0>
 80138ee:	2d04      	cmp	r5, #4
 80138f0:	f47f af48 	bne.w	8013784 <_scanf_float+0x60>
 80138f4:	3501      	adds	r5, #1
 80138f6:	b2ed      	uxtb	r5, r5
 80138f8:	e7d8      	b.n	80138ac <_scanf_float+0x188>
 80138fa:	f1ba 0f01 	cmp.w	sl, #1
 80138fe:	f47f af41 	bne.w	8013784 <_scanf_float+0x60>
 8013902:	f04f 0a02 	mov.w	sl, #2
 8013906:	e7d1      	b.n	80138ac <_scanf_float+0x188>
 8013908:	b97d      	cbnz	r5, 801392a <_scanf_float+0x206>
 801390a:	f1b9 0f00 	cmp.w	r9, #0
 801390e:	f47f af3c 	bne.w	801378a <_scanf_float+0x66>
 8013912:	6822      	ldr	r2, [r4, #0]
 8013914:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013918:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801391c:	f47f af39 	bne.w	8013792 <_scanf_float+0x6e>
 8013920:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013924:	6022      	str	r2, [r4, #0]
 8013926:	2501      	movs	r5, #1
 8013928:	e7c0      	b.n	80138ac <_scanf_float+0x188>
 801392a:	2d03      	cmp	r5, #3
 801392c:	d0e2      	beq.n	80138f4 <_scanf_float+0x1d0>
 801392e:	2d05      	cmp	r5, #5
 8013930:	e7de      	b.n	80138f0 <_scanf_float+0x1cc>
 8013932:	2d02      	cmp	r5, #2
 8013934:	f47f af26 	bne.w	8013784 <_scanf_float+0x60>
 8013938:	2503      	movs	r5, #3
 801393a:	e7b7      	b.n	80138ac <_scanf_float+0x188>
 801393c:	2d06      	cmp	r5, #6
 801393e:	f47f af21 	bne.w	8013784 <_scanf_float+0x60>
 8013942:	2507      	movs	r5, #7
 8013944:	e7b2      	b.n	80138ac <_scanf_float+0x188>
 8013946:	6822      	ldr	r2, [r4, #0]
 8013948:	0591      	lsls	r1, r2, #22
 801394a:	f57f af1b 	bpl.w	8013784 <_scanf_float+0x60>
 801394e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013952:	6022      	str	r2, [r4, #0]
 8013954:	f8cd 9004 	str.w	r9, [sp, #4]
 8013958:	e7a8      	b.n	80138ac <_scanf_float+0x188>
 801395a:	6822      	ldr	r2, [r4, #0]
 801395c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013960:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013964:	d006      	beq.n	8013974 <_scanf_float+0x250>
 8013966:	0550      	lsls	r0, r2, #21
 8013968:	f57f af0c 	bpl.w	8013784 <_scanf_float+0x60>
 801396c:	f1b9 0f00 	cmp.w	r9, #0
 8013970:	f43f af0f 	beq.w	8013792 <_scanf_float+0x6e>
 8013974:	0591      	lsls	r1, r2, #22
 8013976:	bf58      	it	pl
 8013978:	9901      	ldrpl	r1, [sp, #4]
 801397a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801397e:	bf58      	it	pl
 8013980:	eba9 0101 	subpl.w	r1, r9, r1
 8013984:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013988:	bf58      	it	pl
 801398a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801398e:	6022      	str	r2, [r4, #0]
 8013990:	f04f 0900 	mov.w	r9, #0
 8013994:	e78a      	b.n	80138ac <_scanf_float+0x188>
 8013996:	f04f 0a03 	mov.w	sl, #3
 801399a:	e787      	b.n	80138ac <_scanf_float+0x188>
 801399c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80139a0:	4639      	mov	r1, r7
 80139a2:	4640      	mov	r0, r8
 80139a4:	4798      	blx	r3
 80139a6:	2800      	cmp	r0, #0
 80139a8:	f43f aedf 	beq.w	801376a <_scanf_float+0x46>
 80139ac:	e6ea      	b.n	8013784 <_scanf_float+0x60>
 80139ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80139b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80139b6:	463a      	mov	r2, r7
 80139b8:	4640      	mov	r0, r8
 80139ba:	4798      	blx	r3
 80139bc:	6923      	ldr	r3, [r4, #16]
 80139be:	3b01      	subs	r3, #1
 80139c0:	6123      	str	r3, [r4, #16]
 80139c2:	e6ec      	b.n	801379e <_scanf_float+0x7a>
 80139c4:	1e6b      	subs	r3, r5, #1
 80139c6:	2b06      	cmp	r3, #6
 80139c8:	d825      	bhi.n	8013a16 <_scanf_float+0x2f2>
 80139ca:	2d02      	cmp	r5, #2
 80139cc:	d836      	bhi.n	8013a3c <_scanf_float+0x318>
 80139ce:	455e      	cmp	r6, fp
 80139d0:	f67f aee8 	bls.w	80137a4 <_scanf_float+0x80>
 80139d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80139d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80139dc:	463a      	mov	r2, r7
 80139de:	4640      	mov	r0, r8
 80139e0:	4798      	blx	r3
 80139e2:	6923      	ldr	r3, [r4, #16]
 80139e4:	3b01      	subs	r3, #1
 80139e6:	6123      	str	r3, [r4, #16]
 80139e8:	e7f1      	b.n	80139ce <_scanf_float+0x2aa>
 80139ea:	9802      	ldr	r0, [sp, #8]
 80139ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80139f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80139f4:	9002      	str	r0, [sp, #8]
 80139f6:	463a      	mov	r2, r7
 80139f8:	4640      	mov	r0, r8
 80139fa:	4798      	blx	r3
 80139fc:	6923      	ldr	r3, [r4, #16]
 80139fe:	3b01      	subs	r3, #1
 8013a00:	6123      	str	r3, [r4, #16]
 8013a02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013a06:	fa5f fa8a 	uxtb.w	sl, sl
 8013a0a:	f1ba 0f02 	cmp.w	sl, #2
 8013a0e:	d1ec      	bne.n	80139ea <_scanf_float+0x2c6>
 8013a10:	3d03      	subs	r5, #3
 8013a12:	b2ed      	uxtb	r5, r5
 8013a14:	1b76      	subs	r6, r6, r5
 8013a16:	6823      	ldr	r3, [r4, #0]
 8013a18:	05da      	lsls	r2, r3, #23
 8013a1a:	d52f      	bpl.n	8013a7c <_scanf_float+0x358>
 8013a1c:	055b      	lsls	r3, r3, #21
 8013a1e:	d510      	bpl.n	8013a42 <_scanf_float+0x31e>
 8013a20:	455e      	cmp	r6, fp
 8013a22:	f67f aebf 	bls.w	80137a4 <_scanf_float+0x80>
 8013a26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013a2e:	463a      	mov	r2, r7
 8013a30:	4640      	mov	r0, r8
 8013a32:	4798      	blx	r3
 8013a34:	6923      	ldr	r3, [r4, #16]
 8013a36:	3b01      	subs	r3, #1
 8013a38:	6123      	str	r3, [r4, #16]
 8013a3a:	e7f1      	b.n	8013a20 <_scanf_float+0x2fc>
 8013a3c:	46aa      	mov	sl, r5
 8013a3e:	9602      	str	r6, [sp, #8]
 8013a40:	e7df      	b.n	8013a02 <_scanf_float+0x2de>
 8013a42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013a46:	6923      	ldr	r3, [r4, #16]
 8013a48:	2965      	cmp	r1, #101	; 0x65
 8013a4a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8013a4e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8013a52:	6123      	str	r3, [r4, #16]
 8013a54:	d00c      	beq.n	8013a70 <_scanf_float+0x34c>
 8013a56:	2945      	cmp	r1, #69	; 0x45
 8013a58:	d00a      	beq.n	8013a70 <_scanf_float+0x34c>
 8013a5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a5e:	463a      	mov	r2, r7
 8013a60:	4640      	mov	r0, r8
 8013a62:	4798      	blx	r3
 8013a64:	6923      	ldr	r3, [r4, #16]
 8013a66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013a6a:	3b01      	subs	r3, #1
 8013a6c:	1eb5      	subs	r5, r6, #2
 8013a6e:	6123      	str	r3, [r4, #16]
 8013a70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013a74:	463a      	mov	r2, r7
 8013a76:	4640      	mov	r0, r8
 8013a78:	4798      	blx	r3
 8013a7a:	462e      	mov	r6, r5
 8013a7c:	6825      	ldr	r5, [r4, #0]
 8013a7e:	f015 0510 	ands.w	r5, r5, #16
 8013a82:	d14e      	bne.n	8013b22 <_scanf_float+0x3fe>
 8013a84:	7035      	strb	r5, [r6, #0]
 8013a86:	6823      	ldr	r3, [r4, #0]
 8013a88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013a90:	d119      	bne.n	8013ac6 <_scanf_float+0x3a2>
 8013a92:	9b01      	ldr	r3, [sp, #4]
 8013a94:	454b      	cmp	r3, r9
 8013a96:	eba3 0209 	sub.w	r2, r3, r9
 8013a9a:	d121      	bne.n	8013ae0 <_scanf_float+0x3bc>
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	4659      	mov	r1, fp
 8013aa0:	4640      	mov	r0, r8
 8013aa2:	f000 ff5f 	bl	8014964 <_strtod_r>
 8013aa6:	6822      	ldr	r2, [r4, #0]
 8013aa8:	9b03      	ldr	r3, [sp, #12]
 8013aaa:	f012 0f02 	tst.w	r2, #2
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	d021      	beq.n	8013af6 <_scanf_float+0x3d2>
 8013ab2:	9903      	ldr	r1, [sp, #12]
 8013ab4:	1d1a      	adds	r2, r3, #4
 8013ab6:	600a      	str	r2, [r1, #0]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	ed83 0b00 	vstr	d0, [r3]
 8013abe:	68e3      	ldr	r3, [r4, #12]
 8013ac0:	3301      	adds	r3, #1
 8013ac2:	60e3      	str	r3, [r4, #12]
 8013ac4:	e66f      	b.n	80137a6 <_scanf_float+0x82>
 8013ac6:	9b04      	ldr	r3, [sp, #16]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d0e7      	beq.n	8013a9c <_scanf_float+0x378>
 8013acc:	9905      	ldr	r1, [sp, #20]
 8013ace:	230a      	movs	r3, #10
 8013ad0:	462a      	mov	r2, r5
 8013ad2:	3101      	adds	r1, #1
 8013ad4:	4640      	mov	r0, r8
 8013ad6:	f000 ffcd 	bl	8014a74 <_strtol_r>
 8013ada:	9b04      	ldr	r3, [sp, #16]
 8013adc:	9e05      	ldr	r6, [sp, #20]
 8013ade:	1ac2      	subs	r2, r0, r3
 8013ae0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013ae4:	429e      	cmp	r6, r3
 8013ae6:	bf28      	it	cs
 8013ae8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013aec:	490e      	ldr	r1, [pc, #56]	; (8013b28 <_scanf_float+0x404>)
 8013aee:	4630      	mov	r0, r6
 8013af0:	f000 f8f4 	bl	8013cdc <siprintf>
 8013af4:	e7d2      	b.n	8013a9c <_scanf_float+0x378>
 8013af6:	9903      	ldr	r1, [sp, #12]
 8013af8:	f012 0f04 	tst.w	r2, #4
 8013afc:	f103 0204 	add.w	r2, r3, #4
 8013b00:	600a      	str	r2, [r1, #0]
 8013b02:	d1d9      	bne.n	8013ab8 <_scanf_float+0x394>
 8013b04:	eeb4 0b40 	vcmp.f64	d0, d0
 8013b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b0c:	681e      	ldr	r6, [r3, #0]
 8013b0e:	d705      	bvc.n	8013b1c <_scanf_float+0x3f8>
 8013b10:	4806      	ldr	r0, [pc, #24]	; (8013b2c <_scanf_float+0x408>)
 8013b12:	f000 f8a9 	bl	8013c68 <nanf>
 8013b16:	ed86 0a00 	vstr	s0, [r6]
 8013b1a:	e7d0      	b.n	8013abe <_scanf_float+0x39a>
 8013b1c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013b20:	e7f9      	b.n	8013b16 <_scanf_float+0x3f2>
 8013b22:	2500      	movs	r5, #0
 8013b24:	e63f      	b.n	80137a6 <_scanf_float+0x82>
 8013b26:	bf00      	nop
 8013b28:	08018678 	.word	0x08018678
 8013b2c:	0801877b 	.word	0x0801877b

08013b30 <iprintf>:
 8013b30:	b40f      	push	{r0, r1, r2, r3}
 8013b32:	4b0a      	ldr	r3, [pc, #40]	; (8013b5c <iprintf+0x2c>)
 8013b34:	b513      	push	{r0, r1, r4, lr}
 8013b36:	681c      	ldr	r4, [r3, #0]
 8013b38:	b124      	cbz	r4, 8013b44 <iprintf+0x14>
 8013b3a:	69a3      	ldr	r3, [r4, #24]
 8013b3c:	b913      	cbnz	r3, 8013b44 <iprintf+0x14>
 8013b3e:	4620      	mov	r0, r4
 8013b40:	f002 f84e 	bl	8015be0 <__sinit>
 8013b44:	ab05      	add	r3, sp, #20
 8013b46:	9a04      	ldr	r2, [sp, #16]
 8013b48:	68a1      	ldr	r1, [r4, #8]
 8013b4a:	9301      	str	r3, [sp, #4]
 8013b4c:	4620      	mov	r0, r4
 8013b4e:	f003 fb5f 	bl	8017210 <_vfiprintf_r>
 8013b52:	b002      	add	sp, #8
 8013b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b58:	b004      	add	sp, #16
 8013b5a:	4770      	bx	lr
 8013b5c:	20000de8 	.word	0x20000de8

08013b60 <srand>:
 8013b60:	b538      	push	{r3, r4, r5, lr}
 8013b62:	4b10      	ldr	r3, [pc, #64]	; (8013ba4 <srand+0x44>)
 8013b64:	681d      	ldr	r5, [r3, #0]
 8013b66:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8013b68:	4604      	mov	r4, r0
 8013b6a:	b9b3      	cbnz	r3, 8013b9a <srand+0x3a>
 8013b6c:	2018      	movs	r0, #24
 8013b6e:	f7ff f87b 	bl	8012c68 <malloc>
 8013b72:	4602      	mov	r2, r0
 8013b74:	63a8      	str	r0, [r5, #56]	; 0x38
 8013b76:	b920      	cbnz	r0, 8013b82 <srand+0x22>
 8013b78:	4b0b      	ldr	r3, [pc, #44]	; (8013ba8 <srand+0x48>)
 8013b7a:	480c      	ldr	r0, [pc, #48]	; (8013bac <srand+0x4c>)
 8013b7c:	2142      	movs	r1, #66	; 0x42
 8013b7e:	f001 f8f1 	bl	8014d64 <__assert_func>
 8013b82:	490b      	ldr	r1, [pc, #44]	; (8013bb0 <srand+0x50>)
 8013b84:	4b0b      	ldr	r3, [pc, #44]	; (8013bb4 <srand+0x54>)
 8013b86:	e9c0 1300 	strd	r1, r3, [r0]
 8013b8a:	4b0b      	ldr	r3, [pc, #44]	; (8013bb8 <srand+0x58>)
 8013b8c:	6083      	str	r3, [r0, #8]
 8013b8e:	230b      	movs	r3, #11
 8013b90:	8183      	strh	r3, [r0, #12]
 8013b92:	2100      	movs	r1, #0
 8013b94:	2001      	movs	r0, #1
 8013b96:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013b9a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	611c      	str	r4, [r3, #16]
 8013ba0:	615a      	str	r2, [r3, #20]
 8013ba2:	bd38      	pop	{r3, r4, r5, pc}
 8013ba4:	20000de8 	.word	0x20000de8
 8013ba8:	0801867d 	.word	0x0801867d
 8013bac:	08018694 	.word	0x08018694
 8013bb0:	abcd330e 	.word	0xabcd330e
 8013bb4:	e66d1234 	.word	0xe66d1234
 8013bb8:	0005deec 	.word	0x0005deec

08013bbc <rand>:
 8013bbc:	4b16      	ldr	r3, [pc, #88]	; (8013c18 <rand+0x5c>)
 8013bbe:	b510      	push	{r4, lr}
 8013bc0:	681c      	ldr	r4, [r3, #0]
 8013bc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013bc4:	b9b3      	cbnz	r3, 8013bf4 <rand+0x38>
 8013bc6:	2018      	movs	r0, #24
 8013bc8:	f7ff f84e 	bl	8012c68 <malloc>
 8013bcc:	63a0      	str	r0, [r4, #56]	; 0x38
 8013bce:	b928      	cbnz	r0, 8013bdc <rand+0x20>
 8013bd0:	4602      	mov	r2, r0
 8013bd2:	4b12      	ldr	r3, [pc, #72]	; (8013c1c <rand+0x60>)
 8013bd4:	4812      	ldr	r0, [pc, #72]	; (8013c20 <rand+0x64>)
 8013bd6:	214e      	movs	r1, #78	; 0x4e
 8013bd8:	f001 f8c4 	bl	8014d64 <__assert_func>
 8013bdc:	4a11      	ldr	r2, [pc, #68]	; (8013c24 <rand+0x68>)
 8013bde:	4b12      	ldr	r3, [pc, #72]	; (8013c28 <rand+0x6c>)
 8013be0:	e9c0 2300 	strd	r2, r3, [r0]
 8013be4:	4b11      	ldr	r3, [pc, #68]	; (8013c2c <rand+0x70>)
 8013be6:	6083      	str	r3, [r0, #8]
 8013be8:	230b      	movs	r3, #11
 8013bea:	8183      	strh	r3, [r0, #12]
 8013bec:	2201      	movs	r2, #1
 8013bee:	2300      	movs	r3, #0
 8013bf0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013bf4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8013bf6:	4a0e      	ldr	r2, [pc, #56]	; (8013c30 <rand+0x74>)
 8013bf8:	6920      	ldr	r0, [r4, #16]
 8013bfa:	6963      	ldr	r3, [r4, #20]
 8013bfc:	490d      	ldr	r1, [pc, #52]	; (8013c34 <rand+0x78>)
 8013bfe:	4342      	muls	r2, r0
 8013c00:	fb01 2203 	mla	r2, r1, r3, r2
 8013c04:	fba0 0101 	umull	r0, r1, r0, r1
 8013c08:	1c43      	adds	r3, r0, #1
 8013c0a:	eb42 0001 	adc.w	r0, r2, r1
 8013c0e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8013c12:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013c16:	bd10      	pop	{r4, pc}
 8013c18:	20000de8 	.word	0x20000de8
 8013c1c:	0801867d 	.word	0x0801867d
 8013c20:	08018694 	.word	0x08018694
 8013c24:	abcd330e 	.word	0xabcd330e
 8013c28:	e66d1234 	.word	0xe66d1234
 8013c2c:	0005deec 	.word	0x0005deec
 8013c30:	5851f42d 	.word	0x5851f42d
 8013c34:	4c957f2d 	.word	0x4c957f2d

08013c38 <realloc>:
 8013c38:	4b02      	ldr	r3, [pc, #8]	; (8013c44 <realloc+0xc>)
 8013c3a:	460a      	mov	r2, r1
 8013c3c:	4601      	mov	r1, r0
 8013c3e:	6818      	ldr	r0, [r3, #0]
 8013c40:	f003 b932 	b.w	8016ea8 <_realloc_r>
 8013c44:	20000de8 	.word	0x20000de8

08013c48 <_sbrk_r>:
 8013c48:	b538      	push	{r3, r4, r5, lr}
 8013c4a:	4d06      	ldr	r5, [pc, #24]	; (8013c64 <_sbrk_r+0x1c>)
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	4604      	mov	r4, r0
 8013c50:	4608      	mov	r0, r1
 8013c52:	602b      	str	r3, [r5, #0]
 8013c54:	f7ed fd66 	bl	8001724 <_sbrk>
 8013c58:	1c43      	adds	r3, r0, #1
 8013c5a:	d102      	bne.n	8013c62 <_sbrk_r+0x1a>
 8013c5c:	682b      	ldr	r3, [r5, #0]
 8013c5e:	b103      	cbz	r3, 8013c62 <_sbrk_r+0x1a>
 8013c60:	6023      	str	r3, [r4, #0]
 8013c62:	bd38      	pop	{r3, r4, r5, pc}
 8013c64:	2000eafc 	.word	0x2000eafc

08013c68 <nanf>:
 8013c68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013c70 <nanf+0x8>
 8013c6c:	4770      	bx	lr
 8013c6e:	bf00      	nop
 8013c70:	7fc00000 	.word	0x7fc00000

08013c74 <sniprintf>:
 8013c74:	b40c      	push	{r2, r3}
 8013c76:	b530      	push	{r4, r5, lr}
 8013c78:	4b17      	ldr	r3, [pc, #92]	; (8013cd8 <sniprintf+0x64>)
 8013c7a:	1e0c      	subs	r4, r1, #0
 8013c7c:	681d      	ldr	r5, [r3, #0]
 8013c7e:	b09d      	sub	sp, #116	; 0x74
 8013c80:	da08      	bge.n	8013c94 <sniprintf+0x20>
 8013c82:	238b      	movs	r3, #139	; 0x8b
 8013c84:	602b      	str	r3, [r5, #0]
 8013c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c8a:	b01d      	add	sp, #116	; 0x74
 8013c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c90:	b002      	add	sp, #8
 8013c92:	4770      	bx	lr
 8013c94:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013c98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013c9c:	bf14      	ite	ne
 8013c9e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8013ca2:	4623      	moveq	r3, r4
 8013ca4:	9304      	str	r3, [sp, #16]
 8013ca6:	9307      	str	r3, [sp, #28]
 8013ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013cac:	9002      	str	r0, [sp, #8]
 8013cae:	9006      	str	r0, [sp, #24]
 8013cb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013cb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013cb6:	ab21      	add	r3, sp, #132	; 0x84
 8013cb8:	a902      	add	r1, sp, #8
 8013cba:	4628      	mov	r0, r5
 8013cbc:	9301      	str	r3, [sp, #4]
 8013cbe:	f003 f97d 	bl	8016fbc <_svfiprintf_r>
 8013cc2:	1c43      	adds	r3, r0, #1
 8013cc4:	bfbc      	itt	lt
 8013cc6:	238b      	movlt	r3, #139	; 0x8b
 8013cc8:	602b      	strlt	r3, [r5, #0]
 8013cca:	2c00      	cmp	r4, #0
 8013ccc:	d0dd      	beq.n	8013c8a <sniprintf+0x16>
 8013cce:	9b02      	ldr	r3, [sp, #8]
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	701a      	strb	r2, [r3, #0]
 8013cd4:	e7d9      	b.n	8013c8a <sniprintf+0x16>
 8013cd6:	bf00      	nop
 8013cd8:	20000de8 	.word	0x20000de8

08013cdc <siprintf>:
 8013cdc:	b40e      	push	{r1, r2, r3}
 8013cde:	b500      	push	{lr}
 8013ce0:	b09c      	sub	sp, #112	; 0x70
 8013ce2:	ab1d      	add	r3, sp, #116	; 0x74
 8013ce4:	9002      	str	r0, [sp, #8]
 8013ce6:	9006      	str	r0, [sp, #24]
 8013ce8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013cec:	4809      	ldr	r0, [pc, #36]	; (8013d14 <siprintf+0x38>)
 8013cee:	9107      	str	r1, [sp, #28]
 8013cf0:	9104      	str	r1, [sp, #16]
 8013cf2:	4909      	ldr	r1, [pc, #36]	; (8013d18 <siprintf+0x3c>)
 8013cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cf8:	9105      	str	r1, [sp, #20]
 8013cfa:	6800      	ldr	r0, [r0, #0]
 8013cfc:	9301      	str	r3, [sp, #4]
 8013cfe:	a902      	add	r1, sp, #8
 8013d00:	f003 f95c 	bl	8016fbc <_svfiprintf_r>
 8013d04:	9b02      	ldr	r3, [sp, #8]
 8013d06:	2200      	movs	r2, #0
 8013d08:	701a      	strb	r2, [r3, #0]
 8013d0a:	b01c      	add	sp, #112	; 0x70
 8013d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d10:	b003      	add	sp, #12
 8013d12:	4770      	bx	lr
 8013d14:	20000de8 	.word	0x20000de8
 8013d18:	ffff0208 	.word	0xffff0208

08013d1c <strchr>:
 8013d1c:	b2c9      	uxtb	r1, r1
 8013d1e:	4603      	mov	r3, r0
 8013d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d24:	b11a      	cbz	r2, 8013d2e <strchr+0x12>
 8013d26:	428a      	cmp	r2, r1
 8013d28:	d1f9      	bne.n	8013d1e <strchr+0x2>
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	4770      	bx	lr
 8013d2e:	2900      	cmp	r1, #0
 8013d30:	bf18      	it	ne
 8013d32:	2300      	movne	r3, #0
 8013d34:	e7f9      	b.n	8013d2a <strchr+0xe>

08013d36 <strcpy>:
 8013d36:	4603      	mov	r3, r0
 8013d38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d3c:	f803 2b01 	strb.w	r2, [r3], #1
 8013d40:	2a00      	cmp	r2, #0
 8013d42:	d1f9      	bne.n	8013d38 <strcpy+0x2>
 8013d44:	4770      	bx	lr

08013d46 <strncmp>:
 8013d46:	b510      	push	{r4, lr}
 8013d48:	b17a      	cbz	r2, 8013d6a <strncmp+0x24>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	3901      	subs	r1, #1
 8013d4e:	1884      	adds	r4, r0, r2
 8013d50:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013d54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013d58:	4290      	cmp	r0, r2
 8013d5a:	d101      	bne.n	8013d60 <strncmp+0x1a>
 8013d5c:	42a3      	cmp	r3, r4
 8013d5e:	d101      	bne.n	8013d64 <strncmp+0x1e>
 8013d60:	1a80      	subs	r0, r0, r2
 8013d62:	bd10      	pop	{r4, pc}
 8013d64:	2800      	cmp	r0, #0
 8013d66:	d1f3      	bne.n	8013d50 <strncmp+0xa>
 8013d68:	e7fa      	b.n	8013d60 <strncmp+0x1a>
 8013d6a:	4610      	mov	r0, r2
 8013d6c:	e7f9      	b.n	8013d62 <strncmp+0x1c>

08013d6e <strncpy>:
 8013d6e:	b510      	push	{r4, lr}
 8013d70:	3901      	subs	r1, #1
 8013d72:	4603      	mov	r3, r0
 8013d74:	b132      	cbz	r2, 8013d84 <strncpy+0x16>
 8013d76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013d7a:	f803 4b01 	strb.w	r4, [r3], #1
 8013d7e:	3a01      	subs	r2, #1
 8013d80:	2c00      	cmp	r4, #0
 8013d82:	d1f7      	bne.n	8013d74 <strncpy+0x6>
 8013d84:	441a      	add	r2, r3
 8013d86:	2100      	movs	r1, #0
 8013d88:	4293      	cmp	r3, r2
 8013d8a:	d100      	bne.n	8013d8e <strncpy+0x20>
 8013d8c:	bd10      	pop	{r4, pc}
 8013d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8013d92:	e7f9      	b.n	8013d88 <strncpy+0x1a>

08013d94 <strstr>:
 8013d94:	780a      	ldrb	r2, [r1, #0]
 8013d96:	b570      	push	{r4, r5, r6, lr}
 8013d98:	b96a      	cbnz	r2, 8013db6 <strstr+0x22>
 8013d9a:	bd70      	pop	{r4, r5, r6, pc}
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d109      	bne.n	8013db4 <strstr+0x20>
 8013da0:	460c      	mov	r4, r1
 8013da2:	4605      	mov	r5, r0
 8013da4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d0f6      	beq.n	8013d9a <strstr+0x6>
 8013dac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013db0:	429e      	cmp	r6, r3
 8013db2:	d0f7      	beq.n	8013da4 <strstr+0x10>
 8013db4:	3001      	adds	r0, #1
 8013db6:	7803      	ldrb	r3, [r0, #0]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d1ef      	bne.n	8013d9c <strstr+0x8>
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	e7ec      	b.n	8013d9a <strstr+0x6>

08013dc0 <sulp>:
 8013dc0:	b570      	push	{r4, r5, r6, lr}
 8013dc2:	4604      	mov	r4, r0
 8013dc4:	460d      	mov	r5, r1
 8013dc6:	4616      	mov	r6, r2
 8013dc8:	ec45 4b10 	vmov	d0, r4, r5
 8013dcc:	f002 ff20 	bl	8016c10 <__ulp>
 8013dd0:	b17e      	cbz	r6, 8013df2 <sulp+0x32>
 8013dd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013dd6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	dd09      	ble.n	8013df2 <sulp+0x32>
 8013dde:	051b      	lsls	r3, r3, #20
 8013de0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8013de4:	2000      	movs	r0, #0
 8013de6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8013dea:	ec41 0b17 	vmov	d7, r0, r1
 8013dee:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013df2:	bd70      	pop	{r4, r5, r6, pc}
 8013df4:	0000      	movs	r0, r0
	...

08013df8 <_strtod_l>:
 8013df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dfc:	ed2d 8b0e 	vpush	{d8-d14}
 8013e00:	b097      	sub	sp, #92	; 0x5c
 8013e02:	461f      	mov	r7, r3
 8013e04:	2300      	movs	r3, #0
 8013e06:	9312      	str	r3, [sp, #72]	; 0x48
 8013e08:	4ba1      	ldr	r3, [pc, #644]	; (8014090 <_strtod_l+0x298>)
 8013e0a:	920d      	str	r2, [sp, #52]	; 0x34
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	9307      	str	r3, [sp, #28]
 8013e10:	4604      	mov	r4, r0
 8013e12:	4618      	mov	r0, r3
 8013e14:	468b      	mov	fp, r1
 8013e16:	f7ec fa6d 	bl	80002f4 <strlen>
 8013e1a:	f04f 0800 	mov.w	r8, #0
 8013e1e:	4605      	mov	r5, r0
 8013e20:	f04f 0900 	mov.w	r9, #0
 8013e24:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8013e28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013e2a:	7813      	ldrb	r3, [r2, #0]
 8013e2c:	2b2b      	cmp	r3, #43	; 0x2b
 8013e2e:	d04d      	beq.n	8013ecc <_strtod_l+0xd4>
 8013e30:	d83a      	bhi.n	8013ea8 <_strtod_l+0xb0>
 8013e32:	2b0d      	cmp	r3, #13
 8013e34:	d833      	bhi.n	8013e9e <_strtod_l+0xa6>
 8013e36:	2b08      	cmp	r3, #8
 8013e38:	d833      	bhi.n	8013ea2 <_strtod_l+0xaa>
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d03d      	beq.n	8013eba <_strtod_l+0xc2>
 8013e3e:	2300      	movs	r3, #0
 8013e40:	9308      	str	r3, [sp, #32]
 8013e42:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013e44:	7833      	ldrb	r3, [r6, #0]
 8013e46:	2b30      	cmp	r3, #48	; 0x30
 8013e48:	f040 80b0 	bne.w	8013fac <_strtod_l+0x1b4>
 8013e4c:	7873      	ldrb	r3, [r6, #1]
 8013e4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013e52:	2b58      	cmp	r3, #88	; 0x58
 8013e54:	d167      	bne.n	8013f26 <_strtod_l+0x12e>
 8013e56:	9b08      	ldr	r3, [sp, #32]
 8013e58:	9301      	str	r3, [sp, #4]
 8013e5a:	ab12      	add	r3, sp, #72	; 0x48
 8013e5c:	9702      	str	r7, [sp, #8]
 8013e5e:	9300      	str	r3, [sp, #0]
 8013e60:	4a8c      	ldr	r2, [pc, #560]	; (8014094 <_strtod_l+0x29c>)
 8013e62:	ab13      	add	r3, sp, #76	; 0x4c
 8013e64:	a911      	add	r1, sp, #68	; 0x44
 8013e66:	4620      	mov	r0, r4
 8013e68:	f001 ffd0 	bl	8015e0c <__gethex>
 8013e6c:	f010 0507 	ands.w	r5, r0, #7
 8013e70:	4607      	mov	r7, r0
 8013e72:	d005      	beq.n	8013e80 <_strtod_l+0x88>
 8013e74:	2d06      	cmp	r5, #6
 8013e76:	d12b      	bne.n	8013ed0 <_strtod_l+0xd8>
 8013e78:	3601      	adds	r6, #1
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	9611      	str	r6, [sp, #68]	; 0x44
 8013e7e:	9308      	str	r3, [sp, #32]
 8013e80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	f040 854e 	bne.w	8014924 <_strtod_l+0xb2c>
 8013e88:	9b08      	ldr	r3, [sp, #32]
 8013e8a:	b1e3      	cbz	r3, 8013ec6 <_strtod_l+0xce>
 8013e8c:	ec49 8b17 	vmov	d7, r8, r9
 8013e90:	eeb1 0b47 	vneg.f64	d0, d7
 8013e94:	b017      	add	sp, #92	; 0x5c
 8013e96:	ecbd 8b0e 	vpop	{d8-d14}
 8013e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e9e:	2b20      	cmp	r3, #32
 8013ea0:	d1cd      	bne.n	8013e3e <_strtod_l+0x46>
 8013ea2:	3201      	adds	r2, #1
 8013ea4:	9211      	str	r2, [sp, #68]	; 0x44
 8013ea6:	e7bf      	b.n	8013e28 <_strtod_l+0x30>
 8013ea8:	2b2d      	cmp	r3, #45	; 0x2d
 8013eaa:	d1c8      	bne.n	8013e3e <_strtod_l+0x46>
 8013eac:	2301      	movs	r3, #1
 8013eae:	9308      	str	r3, [sp, #32]
 8013eb0:	1c53      	adds	r3, r2, #1
 8013eb2:	9311      	str	r3, [sp, #68]	; 0x44
 8013eb4:	7853      	ldrb	r3, [r2, #1]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d1c3      	bne.n	8013e42 <_strtod_l+0x4a>
 8013eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ebc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	f040 852d 	bne.w	8014920 <_strtod_l+0xb28>
 8013ec6:	ec49 8b10 	vmov	d0, r8, r9
 8013eca:	e7e3      	b.n	8013e94 <_strtod_l+0x9c>
 8013ecc:	2300      	movs	r3, #0
 8013ece:	e7ee      	b.n	8013eae <_strtod_l+0xb6>
 8013ed0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013ed2:	b13a      	cbz	r2, 8013ee4 <_strtod_l+0xec>
 8013ed4:	2135      	movs	r1, #53	; 0x35
 8013ed6:	a814      	add	r0, sp, #80	; 0x50
 8013ed8:	f002 ffa2 	bl	8016e20 <__copybits>
 8013edc:	9912      	ldr	r1, [sp, #72]	; 0x48
 8013ede:	4620      	mov	r0, r4
 8013ee0:	f002 fb64 	bl	80165ac <_Bfree>
 8013ee4:	3d01      	subs	r5, #1
 8013ee6:	2d04      	cmp	r5, #4
 8013ee8:	d806      	bhi.n	8013ef8 <_strtod_l+0x100>
 8013eea:	e8df f005 	tbb	[pc, r5]
 8013eee:	030a      	.short	0x030a
 8013ef0:	1714      	.short	0x1714
 8013ef2:	0a          	.byte	0x0a
 8013ef3:	00          	.byte	0x00
 8013ef4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8013ef8:	073f      	lsls	r7, r7, #28
 8013efa:	d5c1      	bpl.n	8013e80 <_strtod_l+0x88>
 8013efc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8013f00:	e7be      	b.n	8013e80 <_strtod_l+0x88>
 8013f02:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8013f06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013f08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013f0c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013f10:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8013f14:	e7f0      	b.n	8013ef8 <_strtod_l+0x100>
 8013f16:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8014098 <_strtod_l+0x2a0>
 8013f1a:	e7ed      	b.n	8013ef8 <_strtod_l+0x100>
 8013f1c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013f20:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8013f24:	e7e8      	b.n	8013ef8 <_strtod_l+0x100>
 8013f26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f28:	1c5a      	adds	r2, r3, #1
 8013f2a:	9211      	str	r2, [sp, #68]	; 0x44
 8013f2c:	785b      	ldrb	r3, [r3, #1]
 8013f2e:	2b30      	cmp	r3, #48	; 0x30
 8013f30:	d0f9      	beq.n	8013f26 <_strtod_l+0x12e>
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d0a4      	beq.n	8013e80 <_strtod_l+0x88>
 8013f36:	2301      	movs	r3, #1
 8013f38:	f04f 0a00 	mov.w	sl, #0
 8013f3c:	9304      	str	r3, [sp, #16]
 8013f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013f40:	930a      	str	r3, [sp, #40]	; 0x28
 8013f42:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8013f46:	f8cd a018 	str.w	sl, [sp, #24]
 8013f4a:	220a      	movs	r2, #10
 8013f4c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013f4e:	7807      	ldrb	r7, [r0, #0]
 8013f50:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013f54:	b2d9      	uxtb	r1, r3
 8013f56:	2909      	cmp	r1, #9
 8013f58:	d92a      	bls.n	8013fb0 <_strtod_l+0x1b8>
 8013f5a:	9907      	ldr	r1, [sp, #28]
 8013f5c:	462a      	mov	r2, r5
 8013f5e:	f7ff fef2 	bl	8013d46 <strncmp>
 8013f62:	2800      	cmp	r0, #0
 8013f64:	d033      	beq.n	8013fce <_strtod_l+0x1d6>
 8013f66:	2000      	movs	r0, #0
 8013f68:	9b06      	ldr	r3, [sp, #24]
 8013f6a:	463a      	mov	r2, r7
 8013f6c:	4601      	mov	r1, r0
 8013f6e:	4607      	mov	r7, r0
 8013f70:	2a65      	cmp	r2, #101	; 0x65
 8013f72:	d001      	beq.n	8013f78 <_strtod_l+0x180>
 8013f74:	2a45      	cmp	r2, #69	; 0x45
 8013f76:	d117      	bne.n	8013fa8 <_strtod_l+0x1b0>
 8013f78:	b91b      	cbnz	r3, 8013f82 <_strtod_l+0x18a>
 8013f7a:	9b04      	ldr	r3, [sp, #16]
 8013f7c:	4303      	orrs	r3, r0
 8013f7e:	d09c      	beq.n	8013eba <_strtod_l+0xc2>
 8013f80:	2300      	movs	r3, #0
 8013f82:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8013f86:	f10b 0201 	add.w	r2, fp, #1
 8013f8a:	9211      	str	r2, [sp, #68]	; 0x44
 8013f8c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8013f90:	2a2b      	cmp	r2, #43	; 0x2b
 8013f92:	d071      	beq.n	8014078 <_strtod_l+0x280>
 8013f94:	2a2d      	cmp	r2, #45	; 0x2d
 8013f96:	d077      	beq.n	8014088 <_strtod_l+0x290>
 8013f98:	f04f 0e00 	mov.w	lr, #0
 8013f9c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8013fa0:	2d09      	cmp	r5, #9
 8013fa2:	d97f      	bls.n	80140a4 <_strtod_l+0x2ac>
 8013fa4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8013fa8:	2500      	movs	r5, #0
 8013faa:	e09b      	b.n	80140e4 <_strtod_l+0x2ec>
 8013fac:	2300      	movs	r3, #0
 8013fae:	e7c3      	b.n	8013f38 <_strtod_l+0x140>
 8013fb0:	9906      	ldr	r1, [sp, #24]
 8013fb2:	2908      	cmp	r1, #8
 8013fb4:	bfdd      	ittte	le
 8013fb6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8013fb8:	fb02 3301 	mlale	r3, r2, r1, r3
 8013fbc:	9309      	strle	r3, [sp, #36]	; 0x24
 8013fbe:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8013fc2:	9b06      	ldr	r3, [sp, #24]
 8013fc4:	3001      	adds	r0, #1
 8013fc6:	3301      	adds	r3, #1
 8013fc8:	9306      	str	r3, [sp, #24]
 8013fca:	9011      	str	r0, [sp, #68]	; 0x44
 8013fcc:	e7be      	b.n	8013f4c <_strtod_l+0x154>
 8013fce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013fd0:	195a      	adds	r2, r3, r5
 8013fd2:	9211      	str	r2, [sp, #68]	; 0x44
 8013fd4:	5d5a      	ldrb	r2, [r3, r5]
 8013fd6:	9b06      	ldr	r3, [sp, #24]
 8013fd8:	b3a3      	cbz	r3, 8014044 <_strtod_l+0x24c>
 8013fda:	4607      	mov	r7, r0
 8013fdc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013fe0:	2909      	cmp	r1, #9
 8013fe2:	d912      	bls.n	801400a <_strtod_l+0x212>
 8013fe4:	2101      	movs	r1, #1
 8013fe6:	e7c3      	b.n	8013f70 <_strtod_l+0x178>
 8013fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013fea:	1c5a      	adds	r2, r3, #1
 8013fec:	9211      	str	r2, [sp, #68]	; 0x44
 8013fee:	785a      	ldrb	r2, [r3, #1]
 8013ff0:	3001      	adds	r0, #1
 8013ff2:	2a30      	cmp	r2, #48	; 0x30
 8013ff4:	d0f8      	beq.n	8013fe8 <_strtod_l+0x1f0>
 8013ff6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013ffa:	2b08      	cmp	r3, #8
 8013ffc:	f200 8497 	bhi.w	801492e <_strtod_l+0xb36>
 8014000:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014002:	930a      	str	r3, [sp, #40]	; 0x28
 8014004:	4607      	mov	r7, r0
 8014006:	2000      	movs	r0, #0
 8014008:	4603      	mov	r3, r0
 801400a:	3a30      	subs	r2, #48	; 0x30
 801400c:	f100 0101 	add.w	r1, r0, #1
 8014010:	d012      	beq.n	8014038 <_strtod_l+0x240>
 8014012:	440f      	add	r7, r1
 8014014:	eb00 0c03 	add.w	ip, r0, r3
 8014018:	4619      	mov	r1, r3
 801401a:	250a      	movs	r5, #10
 801401c:	4561      	cmp	r1, ip
 801401e:	d113      	bne.n	8014048 <_strtod_l+0x250>
 8014020:	1819      	adds	r1, r3, r0
 8014022:	2908      	cmp	r1, #8
 8014024:	f103 0301 	add.w	r3, r3, #1
 8014028:	4403      	add	r3, r0
 801402a:	dc1c      	bgt.n	8014066 <_strtod_l+0x26e>
 801402c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801402e:	210a      	movs	r1, #10
 8014030:	fb01 2200 	mla	r2, r1, r0, r2
 8014034:	9209      	str	r2, [sp, #36]	; 0x24
 8014036:	2100      	movs	r1, #0
 8014038:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801403a:	1c50      	adds	r0, r2, #1
 801403c:	9011      	str	r0, [sp, #68]	; 0x44
 801403e:	7852      	ldrb	r2, [r2, #1]
 8014040:	4608      	mov	r0, r1
 8014042:	e7cb      	b.n	8013fdc <_strtod_l+0x1e4>
 8014044:	9806      	ldr	r0, [sp, #24]
 8014046:	e7d4      	b.n	8013ff2 <_strtod_l+0x1fa>
 8014048:	2908      	cmp	r1, #8
 801404a:	dc04      	bgt.n	8014056 <_strtod_l+0x25e>
 801404c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801404e:	436e      	muls	r6, r5
 8014050:	9609      	str	r6, [sp, #36]	; 0x24
 8014052:	3101      	adds	r1, #1
 8014054:	e7e2      	b.n	801401c <_strtod_l+0x224>
 8014056:	f101 0e01 	add.w	lr, r1, #1
 801405a:	f1be 0f10 	cmp.w	lr, #16
 801405e:	bfd8      	it	le
 8014060:	fb05 fa0a 	mulle.w	sl, r5, sl
 8014064:	e7f5      	b.n	8014052 <_strtod_l+0x25a>
 8014066:	2b10      	cmp	r3, #16
 8014068:	bfdc      	itt	le
 801406a:	210a      	movle	r1, #10
 801406c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8014070:	e7e1      	b.n	8014036 <_strtod_l+0x23e>
 8014072:	2700      	movs	r7, #0
 8014074:	2101      	movs	r1, #1
 8014076:	e780      	b.n	8013f7a <_strtod_l+0x182>
 8014078:	f04f 0e00 	mov.w	lr, #0
 801407c:	f10b 0202 	add.w	r2, fp, #2
 8014080:	9211      	str	r2, [sp, #68]	; 0x44
 8014082:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8014086:	e789      	b.n	8013f9c <_strtod_l+0x1a4>
 8014088:	f04f 0e01 	mov.w	lr, #1
 801408c:	e7f6      	b.n	801407c <_strtod_l+0x284>
 801408e:	bf00      	nop
 8014090:	080188c0 	.word	0x080188c0
 8014094:	080186f0 	.word	0x080186f0
 8014098:	7ff00000 	.word	0x7ff00000
 801409c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801409e:	1c55      	adds	r5, r2, #1
 80140a0:	9511      	str	r5, [sp, #68]	; 0x44
 80140a2:	7852      	ldrb	r2, [r2, #1]
 80140a4:	2a30      	cmp	r2, #48	; 0x30
 80140a6:	d0f9      	beq.n	801409c <_strtod_l+0x2a4>
 80140a8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80140ac:	2d08      	cmp	r5, #8
 80140ae:	f63f af7b 	bhi.w	8013fa8 <_strtod_l+0x1b0>
 80140b2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80140b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80140b8:	9207      	str	r2, [sp, #28]
 80140ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80140bc:	1c55      	adds	r5, r2, #1
 80140be:	9511      	str	r5, [sp, #68]	; 0x44
 80140c0:	7852      	ldrb	r2, [r2, #1]
 80140c2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80140c6:	2e09      	cmp	r6, #9
 80140c8:	d937      	bls.n	801413a <_strtod_l+0x342>
 80140ca:	9e07      	ldr	r6, [sp, #28]
 80140cc:	1bad      	subs	r5, r5, r6
 80140ce:	2d08      	cmp	r5, #8
 80140d0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80140d4:	dc02      	bgt.n	80140dc <_strtod_l+0x2e4>
 80140d6:	4565      	cmp	r5, ip
 80140d8:	bfa8      	it	ge
 80140da:	4665      	movge	r5, ip
 80140dc:	f1be 0f00 	cmp.w	lr, #0
 80140e0:	d000      	beq.n	80140e4 <_strtod_l+0x2ec>
 80140e2:	426d      	negs	r5, r5
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d14d      	bne.n	8014184 <_strtod_l+0x38c>
 80140e8:	9b04      	ldr	r3, [sp, #16]
 80140ea:	4303      	orrs	r3, r0
 80140ec:	f47f aec8 	bne.w	8013e80 <_strtod_l+0x88>
 80140f0:	2900      	cmp	r1, #0
 80140f2:	f47f aee2 	bne.w	8013eba <_strtod_l+0xc2>
 80140f6:	2a69      	cmp	r2, #105	; 0x69
 80140f8:	d027      	beq.n	801414a <_strtod_l+0x352>
 80140fa:	dc24      	bgt.n	8014146 <_strtod_l+0x34e>
 80140fc:	2a49      	cmp	r2, #73	; 0x49
 80140fe:	d024      	beq.n	801414a <_strtod_l+0x352>
 8014100:	2a4e      	cmp	r2, #78	; 0x4e
 8014102:	f47f aeda 	bne.w	8013eba <_strtod_l+0xc2>
 8014106:	4996      	ldr	r1, [pc, #600]	; (8014360 <_strtod_l+0x568>)
 8014108:	a811      	add	r0, sp, #68	; 0x44
 801410a:	f002 f8d7 	bl	80162bc <__match>
 801410e:	2800      	cmp	r0, #0
 8014110:	f43f aed3 	beq.w	8013eba <_strtod_l+0xc2>
 8014114:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	2b28      	cmp	r3, #40	; 0x28
 801411a:	d12d      	bne.n	8014178 <_strtod_l+0x380>
 801411c:	4991      	ldr	r1, [pc, #580]	; (8014364 <_strtod_l+0x56c>)
 801411e:	aa14      	add	r2, sp, #80	; 0x50
 8014120:	a811      	add	r0, sp, #68	; 0x44
 8014122:	f002 f8df 	bl	80162e4 <__hexnan>
 8014126:	2805      	cmp	r0, #5
 8014128:	d126      	bne.n	8014178 <_strtod_l+0x380>
 801412a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801412c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8014130:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014134:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014138:	e6a2      	b.n	8013e80 <_strtod_l+0x88>
 801413a:	250a      	movs	r5, #10
 801413c:	fb05 250c 	mla	r5, r5, ip, r2
 8014140:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8014144:	e7b9      	b.n	80140ba <_strtod_l+0x2c2>
 8014146:	2a6e      	cmp	r2, #110	; 0x6e
 8014148:	e7db      	b.n	8014102 <_strtod_l+0x30a>
 801414a:	4987      	ldr	r1, [pc, #540]	; (8014368 <_strtod_l+0x570>)
 801414c:	a811      	add	r0, sp, #68	; 0x44
 801414e:	f002 f8b5 	bl	80162bc <__match>
 8014152:	2800      	cmp	r0, #0
 8014154:	f43f aeb1 	beq.w	8013eba <_strtod_l+0xc2>
 8014158:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801415a:	4984      	ldr	r1, [pc, #528]	; (801436c <_strtod_l+0x574>)
 801415c:	3b01      	subs	r3, #1
 801415e:	a811      	add	r0, sp, #68	; 0x44
 8014160:	9311      	str	r3, [sp, #68]	; 0x44
 8014162:	f002 f8ab 	bl	80162bc <__match>
 8014166:	b910      	cbnz	r0, 801416e <_strtod_l+0x376>
 8014168:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801416a:	3301      	adds	r3, #1
 801416c:	9311      	str	r3, [sp, #68]	; 0x44
 801416e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8014380 <_strtod_l+0x588>
 8014172:	f04f 0800 	mov.w	r8, #0
 8014176:	e683      	b.n	8013e80 <_strtod_l+0x88>
 8014178:	487d      	ldr	r0, [pc, #500]	; (8014370 <_strtod_l+0x578>)
 801417a:	f003 f979 	bl	8017470 <nan>
 801417e:	ec59 8b10 	vmov	r8, r9, d0
 8014182:	e67d      	b.n	8013e80 <_strtod_l+0x88>
 8014184:	1bea      	subs	r2, r5, r7
 8014186:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 801418a:	9207      	str	r2, [sp, #28]
 801418c:	9a06      	ldr	r2, [sp, #24]
 801418e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014192:	2a00      	cmp	r2, #0
 8014194:	bf08      	it	eq
 8014196:	461a      	moveq	r2, r3
 8014198:	2b10      	cmp	r3, #16
 801419a:	9206      	str	r2, [sp, #24]
 801419c:	461a      	mov	r2, r3
 801419e:	bfa8      	it	ge
 80141a0:	2210      	movge	r2, #16
 80141a2:	2b09      	cmp	r3, #9
 80141a4:	ec59 8b17 	vmov	r8, r9, d7
 80141a8:	dd0c      	ble.n	80141c4 <_strtod_l+0x3cc>
 80141aa:	4972      	ldr	r1, [pc, #456]	; (8014374 <_strtod_l+0x57c>)
 80141ac:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80141b0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80141b4:	ee06 aa90 	vmov	s13, sl
 80141b8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80141bc:	eea7 6b05 	vfma.f64	d6, d7, d5
 80141c0:	ec59 8b16 	vmov	r8, r9, d6
 80141c4:	2b0f      	cmp	r3, #15
 80141c6:	dc36      	bgt.n	8014236 <_strtod_l+0x43e>
 80141c8:	9907      	ldr	r1, [sp, #28]
 80141ca:	2900      	cmp	r1, #0
 80141cc:	f43f ae58 	beq.w	8013e80 <_strtod_l+0x88>
 80141d0:	dd23      	ble.n	801421a <_strtod_l+0x422>
 80141d2:	2916      	cmp	r1, #22
 80141d4:	dc0b      	bgt.n	80141ee <_strtod_l+0x3f6>
 80141d6:	4b67      	ldr	r3, [pc, #412]	; (8014374 <_strtod_l+0x57c>)
 80141d8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80141dc:	ed93 7b00 	vldr	d7, [r3]
 80141e0:	ec49 8b16 	vmov	d6, r8, r9
 80141e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80141e8:	ec59 8b17 	vmov	r8, r9, d7
 80141ec:	e648      	b.n	8013e80 <_strtod_l+0x88>
 80141ee:	9807      	ldr	r0, [sp, #28]
 80141f0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80141f4:	4281      	cmp	r1, r0
 80141f6:	db1e      	blt.n	8014236 <_strtod_l+0x43e>
 80141f8:	4a5e      	ldr	r2, [pc, #376]	; (8014374 <_strtod_l+0x57c>)
 80141fa:	f1c3 030f 	rsb	r3, r3, #15
 80141fe:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8014202:	ed91 7b00 	vldr	d7, [r1]
 8014206:	ec49 8b16 	vmov	d6, r8, r9
 801420a:	1ac3      	subs	r3, r0, r3
 801420c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014210:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014214:	ed92 6b00 	vldr	d6, [r2]
 8014218:	e7e4      	b.n	80141e4 <_strtod_l+0x3ec>
 801421a:	9907      	ldr	r1, [sp, #28]
 801421c:	3116      	adds	r1, #22
 801421e:	db0a      	blt.n	8014236 <_strtod_l+0x43e>
 8014220:	4b54      	ldr	r3, [pc, #336]	; (8014374 <_strtod_l+0x57c>)
 8014222:	1b7d      	subs	r5, r7, r5
 8014224:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014228:	ed95 7b00 	vldr	d7, [r5]
 801422c:	ec49 8b16 	vmov	d6, r8, r9
 8014230:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014234:	e7d8      	b.n	80141e8 <_strtod_l+0x3f0>
 8014236:	9907      	ldr	r1, [sp, #28]
 8014238:	1a9a      	subs	r2, r3, r2
 801423a:	440a      	add	r2, r1
 801423c:	2a00      	cmp	r2, #0
 801423e:	dd6f      	ble.n	8014320 <_strtod_l+0x528>
 8014240:	f012 000f 	ands.w	r0, r2, #15
 8014244:	d00a      	beq.n	801425c <_strtod_l+0x464>
 8014246:	494b      	ldr	r1, [pc, #300]	; (8014374 <_strtod_l+0x57c>)
 8014248:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801424c:	ed91 7b00 	vldr	d7, [r1]
 8014250:	ec49 8b16 	vmov	d6, r8, r9
 8014254:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014258:	ec59 8b17 	vmov	r8, r9, d7
 801425c:	f032 020f 	bics.w	r2, r2, #15
 8014260:	d04f      	beq.n	8014302 <_strtod_l+0x50a>
 8014262:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8014266:	dd22      	ble.n	80142ae <_strtod_l+0x4b6>
 8014268:	2500      	movs	r5, #0
 801426a:	462e      	mov	r6, r5
 801426c:	9506      	str	r5, [sp, #24]
 801426e:	462f      	mov	r7, r5
 8014270:	2322      	movs	r3, #34	; 0x22
 8014272:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8014380 <_strtod_l+0x588>
 8014276:	6023      	str	r3, [r4, #0]
 8014278:	f04f 0800 	mov.w	r8, #0
 801427c:	9b06      	ldr	r3, [sp, #24]
 801427e:	2b00      	cmp	r3, #0
 8014280:	f43f adfe 	beq.w	8013e80 <_strtod_l+0x88>
 8014284:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014286:	4620      	mov	r0, r4
 8014288:	f002 f990 	bl	80165ac <_Bfree>
 801428c:	4639      	mov	r1, r7
 801428e:	4620      	mov	r0, r4
 8014290:	f002 f98c 	bl	80165ac <_Bfree>
 8014294:	4631      	mov	r1, r6
 8014296:	4620      	mov	r0, r4
 8014298:	f002 f988 	bl	80165ac <_Bfree>
 801429c:	9906      	ldr	r1, [sp, #24]
 801429e:	4620      	mov	r0, r4
 80142a0:	f002 f984 	bl	80165ac <_Bfree>
 80142a4:	4629      	mov	r1, r5
 80142a6:	4620      	mov	r0, r4
 80142a8:	f002 f980 	bl	80165ac <_Bfree>
 80142ac:	e5e8      	b.n	8013e80 <_strtod_l+0x88>
 80142ae:	2000      	movs	r0, #0
 80142b0:	ec49 8b17 	vmov	d7, r8, r9
 80142b4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8014378 <_strtod_l+0x580>
 80142b8:	1112      	asrs	r2, r2, #4
 80142ba:	4601      	mov	r1, r0
 80142bc:	2a01      	cmp	r2, #1
 80142be:	dc23      	bgt.n	8014308 <_strtod_l+0x510>
 80142c0:	b108      	cbz	r0, 80142c6 <_strtod_l+0x4ce>
 80142c2:	ec59 8b17 	vmov	r8, r9, d7
 80142c6:	4a2c      	ldr	r2, [pc, #176]	; (8014378 <_strtod_l+0x580>)
 80142c8:	482c      	ldr	r0, [pc, #176]	; (801437c <_strtod_l+0x584>)
 80142ca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80142ce:	ed92 7b00 	vldr	d7, [r2]
 80142d2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80142d6:	ec49 8b16 	vmov	d6, r8, r9
 80142da:	4a29      	ldr	r2, [pc, #164]	; (8014380 <_strtod_l+0x588>)
 80142dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80142e0:	ee17 1a90 	vmov	r1, s15
 80142e4:	400a      	ands	r2, r1
 80142e6:	4282      	cmp	r2, r0
 80142e8:	ec59 8b17 	vmov	r8, r9, d7
 80142ec:	d8bc      	bhi.n	8014268 <_strtod_l+0x470>
 80142ee:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80142f2:	4282      	cmp	r2, r0
 80142f4:	bf86      	itte	hi
 80142f6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8014384 <_strtod_l+0x58c>
 80142fa:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80142fe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8014302:	2200      	movs	r2, #0
 8014304:	9204      	str	r2, [sp, #16]
 8014306:	e078      	b.n	80143fa <_strtod_l+0x602>
 8014308:	07d6      	lsls	r6, r2, #31
 801430a:	d504      	bpl.n	8014316 <_strtod_l+0x51e>
 801430c:	ed9c 6b00 	vldr	d6, [ip]
 8014310:	2001      	movs	r0, #1
 8014312:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014316:	3101      	adds	r1, #1
 8014318:	1052      	asrs	r2, r2, #1
 801431a:	f10c 0c08 	add.w	ip, ip, #8
 801431e:	e7cd      	b.n	80142bc <_strtod_l+0x4c4>
 8014320:	d0ef      	beq.n	8014302 <_strtod_l+0x50a>
 8014322:	4252      	negs	r2, r2
 8014324:	f012 000f 	ands.w	r0, r2, #15
 8014328:	d00a      	beq.n	8014340 <_strtod_l+0x548>
 801432a:	4912      	ldr	r1, [pc, #72]	; (8014374 <_strtod_l+0x57c>)
 801432c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014330:	ed91 7b00 	vldr	d7, [r1]
 8014334:	ec49 8b16 	vmov	d6, r8, r9
 8014338:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801433c:	ec59 8b17 	vmov	r8, r9, d7
 8014340:	1112      	asrs	r2, r2, #4
 8014342:	d0de      	beq.n	8014302 <_strtod_l+0x50a>
 8014344:	2a1f      	cmp	r2, #31
 8014346:	dd1f      	ble.n	8014388 <_strtod_l+0x590>
 8014348:	2500      	movs	r5, #0
 801434a:	462e      	mov	r6, r5
 801434c:	9506      	str	r5, [sp, #24]
 801434e:	462f      	mov	r7, r5
 8014350:	2322      	movs	r3, #34	; 0x22
 8014352:	f04f 0800 	mov.w	r8, #0
 8014356:	f04f 0900 	mov.w	r9, #0
 801435a:	6023      	str	r3, [r4, #0]
 801435c:	e78e      	b.n	801427c <_strtod_l+0x484>
 801435e:	bf00      	nop
 8014360:	08018651 	.word	0x08018651
 8014364:	08018704 	.word	0x08018704
 8014368:	08018649 	.word	0x08018649
 801436c:	0801877f 	.word	0x0801877f
 8014370:	0801877b 	.word	0x0801877b
 8014374:	08018958 	.word	0x08018958
 8014378:	08018930 	.word	0x08018930
 801437c:	7ca00000 	.word	0x7ca00000
 8014380:	7ff00000 	.word	0x7ff00000
 8014384:	7fefffff 	.word	0x7fefffff
 8014388:	f012 0110 	ands.w	r1, r2, #16
 801438c:	bf18      	it	ne
 801438e:	216a      	movne	r1, #106	; 0x6a
 8014390:	9104      	str	r1, [sp, #16]
 8014392:	ec49 8b17 	vmov	d7, r8, r9
 8014396:	49be      	ldr	r1, [pc, #760]	; (8014690 <_strtod_l+0x898>)
 8014398:	2000      	movs	r0, #0
 801439a:	07d6      	lsls	r6, r2, #31
 801439c:	d504      	bpl.n	80143a8 <_strtod_l+0x5b0>
 801439e:	ed91 6b00 	vldr	d6, [r1]
 80143a2:	2001      	movs	r0, #1
 80143a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80143a8:	1052      	asrs	r2, r2, #1
 80143aa:	f101 0108 	add.w	r1, r1, #8
 80143ae:	d1f4      	bne.n	801439a <_strtod_l+0x5a2>
 80143b0:	b108      	cbz	r0, 80143b6 <_strtod_l+0x5be>
 80143b2:	ec59 8b17 	vmov	r8, r9, d7
 80143b6:	9a04      	ldr	r2, [sp, #16]
 80143b8:	b1c2      	cbz	r2, 80143ec <_strtod_l+0x5f4>
 80143ba:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80143be:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80143c2:	2a00      	cmp	r2, #0
 80143c4:	4648      	mov	r0, r9
 80143c6:	dd11      	ble.n	80143ec <_strtod_l+0x5f4>
 80143c8:	2a1f      	cmp	r2, #31
 80143ca:	f340 812e 	ble.w	801462a <_strtod_l+0x832>
 80143ce:	2a34      	cmp	r2, #52	; 0x34
 80143d0:	bfde      	ittt	le
 80143d2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80143d6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80143da:	fa02 f101 	lslle.w	r1, r2, r1
 80143de:	f04f 0800 	mov.w	r8, #0
 80143e2:	bfcc      	ite	gt
 80143e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80143e8:	ea01 0900 	andle.w	r9, r1, r0
 80143ec:	ec49 8b17 	vmov	d7, r8, r9
 80143f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80143f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143f8:	d0a6      	beq.n	8014348 <_strtod_l+0x550>
 80143fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143fc:	9200      	str	r2, [sp, #0]
 80143fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014400:	9a06      	ldr	r2, [sp, #24]
 8014402:	4620      	mov	r0, r4
 8014404:	f002 f93a 	bl	801667c <__s2b>
 8014408:	9006      	str	r0, [sp, #24]
 801440a:	2800      	cmp	r0, #0
 801440c:	f43f af2c 	beq.w	8014268 <_strtod_l+0x470>
 8014410:	9b07      	ldr	r3, [sp, #28]
 8014412:	1b7d      	subs	r5, r7, r5
 8014414:	2b00      	cmp	r3, #0
 8014416:	bfb4      	ite	lt
 8014418:	462b      	movlt	r3, r5
 801441a:	2300      	movge	r3, #0
 801441c:	9309      	str	r3, [sp, #36]	; 0x24
 801441e:	9b07      	ldr	r3, [sp, #28]
 8014420:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8014670 <_strtod_l+0x878>
 8014424:	ed9f ab94 	vldr	d10, [pc, #592]	; 8014678 <_strtod_l+0x880>
 8014428:	ed9f bb95 	vldr	d11, [pc, #596]	; 8014680 <_strtod_l+0x888>
 801442c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014430:	2500      	movs	r5, #0
 8014432:	930c      	str	r3, [sp, #48]	; 0x30
 8014434:	462e      	mov	r6, r5
 8014436:	9b06      	ldr	r3, [sp, #24]
 8014438:	4620      	mov	r0, r4
 801443a:	6859      	ldr	r1, [r3, #4]
 801443c:	f002 f876 	bl	801652c <_Balloc>
 8014440:	4607      	mov	r7, r0
 8014442:	2800      	cmp	r0, #0
 8014444:	f43f af14 	beq.w	8014270 <_strtod_l+0x478>
 8014448:	9b06      	ldr	r3, [sp, #24]
 801444a:	691a      	ldr	r2, [r3, #16]
 801444c:	3202      	adds	r2, #2
 801444e:	f103 010c 	add.w	r1, r3, #12
 8014452:	0092      	lsls	r2, r2, #2
 8014454:	300c      	adds	r0, #12
 8014456:	f7fe fc17 	bl	8012c88 <memcpy>
 801445a:	ec49 8b10 	vmov	d0, r8, r9
 801445e:	aa14      	add	r2, sp, #80	; 0x50
 8014460:	a913      	add	r1, sp, #76	; 0x4c
 8014462:	4620      	mov	r0, r4
 8014464:	f002 fc50 	bl	8016d08 <__d2b>
 8014468:	ec49 8b18 	vmov	d8, r8, r9
 801446c:	9012      	str	r0, [sp, #72]	; 0x48
 801446e:	2800      	cmp	r0, #0
 8014470:	f43f aefe 	beq.w	8014270 <_strtod_l+0x478>
 8014474:	2101      	movs	r1, #1
 8014476:	4620      	mov	r0, r4
 8014478:	f002 f99a 	bl	80167b0 <__i2b>
 801447c:	4606      	mov	r6, r0
 801447e:	2800      	cmp	r0, #0
 8014480:	f43f aef6 	beq.w	8014270 <_strtod_l+0x478>
 8014484:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014486:	9914      	ldr	r1, [sp, #80]	; 0x50
 8014488:	2b00      	cmp	r3, #0
 801448a:	bfab      	itete	ge
 801448c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801448e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8014490:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8014494:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8014498:	bfac      	ite	ge
 801449a:	eb03 0b02 	addge.w	fp, r3, r2
 801449e:	eba2 0a03 	sublt.w	sl, r2, r3
 80144a2:	9a04      	ldr	r2, [sp, #16]
 80144a4:	1a9b      	subs	r3, r3, r2
 80144a6:	440b      	add	r3, r1
 80144a8:	4a7a      	ldr	r2, [pc, #488]	; (8014694 <_strtod_l+0x89c>)
 80144aa:	3b01      	subs	r3, #1
 80144ac:	4293      	cmp	r3, r2
 80144ae:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80144b2:	f280 80cd 	bge.w	8014650 <_strtod_l+0x858>
 80144b6:	1ad2      	subs	r2, r2, r3
 80144b8:	2a1f      	cmp	r2, #31
 80144ba:	eba1 0102 	sub.w	r1, r1, r2
 80144be:	f04f 0001 	mov.w	r0, #1
 80144c2:	f300 80b9 	bgt.w	8014638 <_strtod_l+0x840>
 80144c6:	fa00 f302 	lsl.w	r3, r0, r2
 80144ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80144cc:	2300      	movs	r3, #0
 80144ce:	930a      	str	r3, [sp, #40]	; 0x28
 80144d0:	eb0b 0301 	add.w	r3, fp, r1
 80144d4:	9a04      	ldr	r2, [sp, #16]
 80144d6:	459b      	cmp	fp, r3
 80144d8:	448a      	add	sl, r1
 80144da:	4492      	add	sl, r2
 80144dc:	465a      	mov	r2, fp
 80144de:	bfa8      	it	ge
 80144e0:	461a      	movge	r2, r3
 80144e2:	4552      	cmp	r2, sl
 80144e4:	bfa8      	it	ge
 80144e6:	4652      	movge	r2, sl
 80144e8:	2a00      	cmp	r2, #0
 80144ea:	bfc2      	ittt	gt
 80144ec:	1a9b      	subgt	r3, r3, r2
 80144ee:	ebaa 0a02 	subgt.w	sl, sl, r2
 80144f2:	ebab 0b02 	subgt.w	fp, fp, r2
 80144f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144f8:	2a00      	cmp	r2, #0
 80144fa:	dd18      	ble.n	801452e <_strtod_l+0x736>
 80144fc:	4631      	mov	r1, r6
 80144fe:	4620      	mov	r0, r4
 8014500:	930f      	str	r3, [sp, #60]	; 0x3c
 8014502:	f002 fa15 	bl	8016930 <__pow5mult>
 8014506:	4606      	mov	r6, r0
 8014508:	2800      	cmp	r0, #0
 801450a:	f43f aeb1 	beq.w	8014270 <_strtod_l+0x478>
 801450e:	4601      	mov	r1, r0
 8014510:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014512:	4620      	mov	r0, r4
 8014514:	f002 f962 	bl	80167dc <__multiply>
 8014518:	900e      	str	r0, [sp, #56]	; 0x38
 801451a:	2800      	cmp	r0, #0
 801451c:	f43f aea8 	beq.w	8014270 <_strtod_l+0x478>
 8014520:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014522:	4620      	mov	r0, r4
 8014524:	f002 f842 	bl	80165ac <_Bfree>
 8014528:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801452a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801452c:	9212      	str	r2, [sp, #72]	; 0x48
 801452e:	2b00      	cmp	r3, #0
 8014530:	f300 8093 	bgt.w	801465a <_strtod_l+0x862>
 8014534:	9b07      	ldr	r3, [sp, #28]
 8014536:	2b00      	cmp	r3, #0
 8014538:	dd08      	ble.n	801454c <_strtod_l+0x754>
 801453a:	4639      	mov	r1, r7
 801453c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801453e:	4620      	mov	r0, r4
 8014540:	f002 f9f6 	bl	8016930 <__pow5mult>
 8014544:	4607      	mov	r7, r0
 8014546:	2800      	cmp	r0, #0
 8014548:	f43f ae92 	beq.w	8014270 <_strtod_l+0x478>
 801454c:	f1ba 0f00 	cmp.w	sl, #0
 8014550:	dd08      	ble.n	8014564 <_strtod_l+0x76c>
 8014552:	4639      	mov	r1, r7
 8014554:	4652      	mov	r2, sl
 8014556:	4620      	mov	r0, r4
 8014558:	f002 fa44 	bl	80169e4 <__lshift>
 801455c:	4607      	mov	r7, r0
 801455e:	2800      	cmp	r0, #0
 8014560:	f43f ae86 	beq.w	8014270 <_strtod_l+0x478>
 8014564:	f1bb 0f00 	cmp.w	fp, #0
 8014568:	dd08      	ble.n	801457c <_strtod_l+0x784>
 801456a:	4631      	mov	r1, r6
 801456c:	465a      	mov	r2, fp
 801456e:	4620      	mov	r0, r4
 8014570:	f002 fa38 	bl	80169e4 <__lshift>
 8014574:	4606      	mov	r6, r0
 8014576:	2800      	cmp	r0, #0
 8014578:	f43f ae7a 	beq.w	8014270 <_strtod_l+0x478>
 801457c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801457e:	463a      	mov	r2, r7
 8014580:	4620      	mov	r0, r4
 8014582:	f002 fabb 	bl	8016afc <__mdiff>
 8014586:	4605      	mov	r5, r0
 8014588:	2800      	cmp	r0, #0
 801458a:	f43f ae71 	beq.w	8014270 <_strtod_l+0x478>
 801458e:	2300      	movs	r3, #0
 8014590:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8014594:	60c3      	str	r3, [r0, #12]
 8014596:	4631      	mov	r1, r6
 8014598:	f002 fa94 	bl	8016ac4 <__mcmp>
 801459c:	2800      	cmp	r0, #0
 801459e:	da7d      	bge.n	801469c <_strtod_l+0x8a4>
 80145a0:	ea5a 0308 	orrs.w	r3, sl, r8
 80145a4:	f040 80a3 	bne.w	80146ee <_strtod_l+0x8f6>
 80145a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	f040 809e 	bne.w	80146ee <_strtod_l+0x8f6>
 80145b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80145b6:	0d1b      	lsrs	r3, r3, #20
 80145b8:	051b      	lsls	r3, r3, #20
 80145ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80145be:	f240 8096 	bls.w	80146ee <_strtod_l+0x8f6>
 80145c2:	696b      	ldr	r3, [r5, #20]
 80145c4:	b91b      	cbnz	r3, 80145ce <_strtod_l+0x7d6>
 80145c6:	692b      	ldr	r3, [r5, #16]
 80145c8:	2b01      	cmp	r3, #1
 80145ca:	f340 8090 	ble.w	80146ee <_strtod_l+0x8f6>
 80145ce:	4629      	mov	r1, r5
 80145d0:	2201      	movs	r2, #1
 80145d2:	4620      	mov	r0, r4
 80145d4:	f002 fa06 	bl	80169e4 <__lshift>
 80145d8:	4631      	mov	r1, r6
 80145da:	4605      	mov	r5, r0
 80145dc:	f002 fa72 	bl	8016ac4 <__mcmp>
 80145e0:	2800      	cmp	r0, #0
 80145e2:	f340 8084 	ble.w	80146ee <_strtod_l+0x8f6>
 80145e6:	9904      	ldr	r1, [sp, #16]
 80145e8:	4a2b      	ldr	r2, [pc, #172]	; (8014698 <_strtod_l+0x8a0>)
 80145ea:	464b      	mov	r3, r9
 80145ec:	2900      	cmp	r1, #0
 80145ee:	f000 809d 	beq.w	801472c <_strtod_l+0x934>
 80145f2:	ea02 0109 	and.w	r1, r2, r9
 80145f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80145fa:	f300 8097 	bgt.w	801472c <_strtod_l+0x934>
 80145fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014602:	f77f aea5 	ble.w	8014350 <_strtod_l+0x558>
 8014606:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014688 <_strtod_l+0x890>
 801460a:	ec49 8b16 	vmov	d6, r8, r9
 801460e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014612:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014616:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801461a:	4313      	orrs	r3, r2
 801461c:	bf08      	it	eq
 801461e:	2322      	moveq	r3, #34	; 0x22
 8014620:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014624:	bf08      	it	eq
 8014626:	6023      	streq	r3, [r4, #0]
 8014628:	e62c      	b.n	8014284 <_strtod_l+0x48c>
 801462a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801462e:	fa01 f202 	lsl.w	r2, r1, r2
 8014632:	ea02 0808 	and.w	r8, r2, r8
 8014636:	e6d9      	b.n	80143ec <_strtod_l+0x5f4>
 8014638:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801463c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8014640:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8014644:	33e2      	adds	r3, #226	; 0xe2
 8014646:	fa00 f303 	lsl.w	r3, r0, r3
 801464a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801464e:	e73f      	b.n	80144d0 <_strtod_l+0x6d8>
 8014650:	2200      	movs	r2, #0
 8014652:	2301      	movs	r3, #1
 8014654:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014658:	e73a      	b.n	80144d0 <_strtod_l+0x6d8>
 801465a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801465c:	461a      	mov	r2, r3
 801465e:	4620      	mov	r0, r4
 8014660:	f002 f9c0 	bl	80169e4 <__lshift>
 8014664:	9012      	str	r0, [sp, #72]	; 0x48
 8014666:	2800      	cmp	r0, #0
 8014668:	f47f af64 	bne.w	8014534 <_strtod_l+0x73c>
 801466c:	e600      	b.n	8014270 <_strtod_l+0x478>
 801466e:	bf00      	nop
 8014670:	94a03595 	.word	0x94a03595
 8014674:	3fcfffff 	.word	0x3fcfffff
 8014678:	94a03595 	.word	0x94a03595
 801467c:	3fdfffff 	.word	0x3fdfffff
 8014680:	35afe535 	.word	0x35afe535
 8014684:	3fe00000 	.word	0x3fe00000
 8014688:	00000000 	.word	0x00000000
 801468c:	39500000 	.word	0x39500000
 8014690:	08018718 	.word	0x08018718
 8014694:	fffffc02 	.word	0xfffffc02
 8014698:	7ff00000 	.word	0x7ff00000
 801469c:	46cb      	mov	fp, r9
 801469e:	d15f      	bne.n	8014760 <_strtod_l+0x968>
 80146a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80146a4:	f1ba 0f00 	cmp.w	sl, #0
 80146a8:	d02a      	beq.n	8014700 <_strtod_l+0x908>
 80146aa:	4aa7      	ldr	r2, [pc, #668]	; (8014948 <_strtod_l+0xb50>)
 80146ac:	4293      	cmp	r3, r2
 80146ae:	d12b      	bne.n	8014708 <_strtod_l+0x910>
 80146b0:	9b04      	ldr	r3, [sp, #16]
 80146b2:	4642      	mov	r2, r8
 80146b4:	b1fb      	cbz	r3, 80146f6 <_strtod_l+0x8fe>
 80146b6:	4ba5      	ldr	r3, [pc, #660]	; (801494c <_strtod_l+0xb54>)
 80146b8:	ea09 0303 	and.w	r3, r9, r3
 80146bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80146c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80146c4:	d81a      	bhi.n	80146fc <_strtod_l+0x904>
 80146c6:	0d1b      	lsrs	r3, r3, #20
 80146c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80146cc:	fa01 f303 	lsl.w	r3, r1, r3
 80146d0:	429a      	cmp	r2, r3
 80146d2:	d119      	bne.n	8014708 <_strtod_l+0x910>
 80146d4:	4b9e      	ldr	r3, [pc, #632]	; (8014950 <_strtod_l+0xb58>)
 80146d6:	459b      	cmp	fp, r3
 80146d8:	d102      	bne.n	80146e0 <_strtod_l+0x8e8>
 80146da:	3201      	adds	r2, #1
 80146dc:	f43f adc8 	beq.w	8014270 <_strtod_l+0x478>
 80146e0:	4b9a      	ldr	r3, [pc, #616]	; (801494c <_strtod_l+0xb54>)
 80146e2:	ea0b 0303 	and.w	r3, fp, r3
 80146e6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80146ea:	f04f 0800 	mov.w	r8, #0
 80146ee:	9b04      	ldr	r3, [sp, #16]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d188      	bne.n	8014606 <_strtod_l+0x80e>
 80146f4:	e5c6      	b.n	8014284 <_strtod_l+0x48c>
 80146f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80146fa:	e7e9      	b.n	80146d0 <_strtod_l+0x8d8>
 80146fc:	460b      	mov	r3, r1
 80146fe:	e7e7      	b.n	80146d0 <_strtod_l+0x8d8>
 8014700:	ea53 0308 	orrs.w	r3, r3, r8
 8014704:	f43f af6f 	beq.w	80145e6 <_strtod_l+0x7ee>
 8014708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801470a:	b1cb      	cbz	r3, 8014740 <_strtod_l+0x948>
 801470c:	ea13 0f0b 	tst.w	r3, fp
 8014710:	d0ed      	beq.n	80146ee <_strtod_l+0x8f6>
 8014712:	9a04      	ldr	r2, [sp, #16]
 8014714:	4640      	mov	r0, r8
 8014716:	4649      	mov	r1, r9
 8014718:	f1ba 0f00 	cmp.w	sl, #0
 801471c:	d014      	beq.n	8014748 <_strtod_l+0x950>
 801471e:	f7ff fb4f 	bl	8013dc0 <sulp>
 8014722:	ee38 7b00 	vadd.f64	d7, d8, d0
 8014726:	ec59 8b17 	vmov	r8, r9, d7
 801472a:	e7e0      	b.n	80146ee <_strtod_l+0x8f6>
 801472c:	4013      	ands	r3, r2
 801472e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014732:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8014736:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801473a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801473e:	e7d6      	b.n	80146ee <_strtod_l+0x8f6>
 8014740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014742:	ea13 0f08 	tst.w	r3, r8
 8014746:	e7e3      	b.n	8014710 <_strtod_l+0x918>
 8014748:	f7ff fb3a 	bl	8013dc0 <sulp>
 801474c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8014750:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8014754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014758:	ec59 8b10 	vmov	r8, r9, d0
 801475c:	d1c7      	bne.n	80146ee <_strtod_l+0x8f6>
 801475e:	e5f7      	b.n	8014350 <_strtod_l+0x558>
 8014760:	4631      	mov	r1, r6
 8014762:	4628      	mov	r0, r5
 8014764:	f002 fb2c 	bl	8016dc0 <__ratio>
 8014768:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801476c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014774:	d865      	bhi.n	8014842 <_strtod_l+0xa4a>
 8014776:	f1ba 0f00 	cmp.w	sl, #0
 801477a:	d042      	beq.n	8014802 <_strtod_l+0xa0a>
 801477c:	4b75      	ldr	r3, [pc, #468]	; (8014954 <_strtod_l+0xb5c>)
 801477e:	2200      	movs	r2, #0
 8014780:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8014784:	4871      	ldr	r0, [pc, #452]	; (801494c <_strtod_l+0xb54>)
 8014786:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8014960 <_strtod_l+0xb68>
 801478a:	ea0b 0100 	and.w	r1, fp, r0
 801478e:	4561      	cmp	r1, ip
 8014790:	f040 808e 	bne.w	80148b0 <_strtod_l+0xab8>
 8014794:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8014798:	ec49 8b10 	vmov	d0, r8, r9
 801479c:	ec43 2b1c 	vmov	d12, r2, r3
 80147a0:	910a      	str	r1, [sp, #40]	; 0x28
 80147a2:	f002 fa35 	bl	8016c10 <__ulp>
 80147a6:	ec49 8b1e 	vmov	d14, r8, r9
 80147aa:	4868      	ldr	r0, [pc, #416]	; (801494c <_strtod_l+0xb54>)
 80147ac:	eeac eb00 	vfma.f64	d14, d12, d0
 80147b0:	ee1e 3a90 	vmov	r3, s29
 80147b4:	4a68      	ldr	r2, [pc, #416]	; (8014958 <_strtod_l+0xb60>)
 80147b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80147b8:	4018      	ands	r0, r3
 80147ba:	4290      	cmp	r0, r2
 80147bc:	ec59 8b1e 	vmov	r8, r9, d14
 80147c0:	d94e      	bls.n	8014860 <_strtod_l+0xa68>
 80147c2:	ee18 3a90 	vmov	r3, s17
 80147c6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80147ca:	4293      	cmp	r3, r2
 80147cc:	d104      	bne.n	80147d8 <_strtod_l+0x9e0>
 80147ce:	ee18 3a10 	vmov	r3, s16
 80147d2:	3301      	adds	r3, #1
 80147d4:	f43f ad4c 	beq.w	8014270 <_strtod_l+0x478>
 80147d8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8014950 <_strtod_l+0xb58>
 80147dc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80147e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80147e2:	4620      	mov	r0, r4
 80147e4:	f001 fee2 	bl	80165ac <_Bfree>
 80147e8:	4639      	mov	r1, r7
 80147ea:	4620      	mov	r0, r4
 80147ec:	f001 fede 	bl	80165ac <_Bfree>
 80147f0:	4631      	mov	r1, r6
 80147f2:	4620      	mov	r0, r4
 80147f4:	f001 feda 	bl	80165ac <_Bfree>
 80147f8:	4629      	mov	r1, r5
 80147fa:	4620      	mov	r0, r4
 80147fc:	f001 fed6 	bl	80165ac <_Bfree>
 8014800:	e619      	b.n	8014436 <_strtod_l+0x63e>
 8014802:	f1b8 0f00 	cmp.w	r8, #0
 8014806:	d112      	bne.n	801482e <_strtod_l+0xa36>
 8014808:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801480c:	b9b3      	cbnz	r3, 801483c <_strtod_l+0xa44>
 801480e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014812:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8014816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801481a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801481e:	bf58      	it	pl
 8014820:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8014824:	eeb1 7b4d 	vneg.f64	d7, d13
 8014828:	ec53 2b17 	vmov	r2, r3, d7
 801482c:	e7aa      	b.n	8014784 <_strtod_l+0x98c>
 801482e:	f1b8 0f01 	cmp.w	r8, #1
 8014832:	d103      	bne.n	801483c <_strtod_l+0xa44>
 8014834:	f1b9 0f00 	cmp.w	r9, #0
 8014838:	f43f ad8a 	beq.w	8014350 <_strtod_l+0x558>
 801483c:	4b47      	ldr	r3, [pc, #284]	; (801495c <_strtod_l+0xb64>)
 801483e:	2200      	movs	r2, #0
 8014840:	e79e      	b.n	8014780 <_strtod_l+0x988>
 8014842:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8014846:	ee20 db0d 	vmul.f64	d13, d0, d13
 801484a:	f1ba 0f00 	cmp.w	sl, #0
 801484e:	d104      	bne.n	801485a <_strtod_l+0xa62>
 8014850:	eeb1 7b4d 	vneg.f64	d7, d13
 8014854:	ec53 2b17 	vmov	r2, r3, d7
 8014858:	e794      	b.n	8014784 <_strtod_l+0x98c>
 801485a:	eeb0 7b4d 	vmov.f64	d7, d13
 801485e:	e7f9      	b.n	8014854 <_strtod_l+0xa5c>
 8014860:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8014864:	9b04      	ldr	r3, [sp, #16]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d1ba      	bne.n	80147e0 <_strtod_l+0x9e8>
 801486a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801486e:	0d1b      	lsrs	r3, r3, #20
 8014870:	051b      	lsls	r3, r3, #20
 8014872:	4299      	cmp	r1, r3
 8014874:	d1b4      	bne.n	80147e0 <_strtod_l+0x9e8>
 8014876:	ec51 0b1d 	vmov	r0, r1, d13
 801487a:	f7eb ff67 	bl	800074c <__aeabi_d2lz>
 801487e:	f7eb fecf 	bl	8000620 <__aeabi_l2d>
 8014882:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014886:	ec41 0b17 	vmov	d7, r0, r1
 801488a:	ea43 0308 	orr.w	r3, r3, r8
 801488e:	ea53 030a 	orrs.w	r3, r3, sl
 8014892:	ee3d db47 	vsub.f64	d13, d13, d7
 8014896:	d03c      	beq.n	8014912 <_strtod_l+0xb1a>
 8014898:	eeb4 dbca 	vcmpe.f64	d13, d10
 801489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148a0:	f53f acf0 	bmi.w	8014284 <_strtod_l+0x48c>
 80148a4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80148a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ac:	dd98      	ble.n	80147e0 <_strtod_l+0x9e8>
 80148ae:	e4e9      	b.n	8014284 <_strtod_l+0x48c>
 80148b0:	9804      	ldr	r0, [sp, #16]
 80148b2:	b1f0      	cbz	r0, 80148f2 <_strtod_l+0xafa>
 80148b4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80148b8:	d81b      	bhi.n	80148f2 <_strtod_l+0xafa>
 80148ba:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8014940 <_strtod_l+0xb48>
 80148be:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80148c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148c6:	d811      	bhi.n	80148ec <_strtod_l+0xaf4>
 80148c8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80148cc:	ee1d 3a10 	vmov	r3, s26
 80148d0:	2b01      	cmp	r3, #1
 80148d2:	bf38      	it	cc
 80148d4:	2301      	movcc	r3, #1
 80148d6:	ee0d 3a10 	vmov	s26, r3
 80148da:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80148de:	f1ba 0f00 	cmp.w	sl, #0
 80148e2:	d113      	bne.n	801490c <_strtod_l+0xb14>
 80148e4:	eeb1 7b4d 	vneg.f64	d7, d13
 80148e8:	ec53 2b17 	vmov	r2, r3, d7
 80148ec:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80148f0:	1a43      	subs	r3, r0, r1
 80148f2:	eeb0 0b48 	vmov.f64	d0, d8
 80148f6:	ec43 2b1c 	vmov	d12, r2, r3
 80148fa:	910a      	str	r1, [sp, #40]	; 0x28
 80148fc:	f002 f988 	bl	8016c10 <__ulp>
 8014900:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014902:	eeac 8b00 	vfma.f64	d8, d12, d0
 8014906:	ec59 8b18 	vmov	r8, r9, d8
 801490a:	e7ab      	b.n	8014864 <_strtod_l+0xa6c>
 801490c:	eeb0 7b4d 	vmov.f64	d7, d13
 8014910:	e7ea      	b.n	80148e8 <_strtod_l+0xaf0>
 8014912:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8014916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801491a:	f57f af61 	bpl.w	80147e0 <_strtod_l+0x9e8>
 801491e:	e4b1      	b.n	8014284 <_strtod_l+0x48c>
 8014920:	2300      	movs	r3, #0
 8014922:	9308      	str	r3, [sp, #32]
 8014924:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014926:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014928:	6013      	str	r3, [r2, #0]
 801492a:	f7ff baad 	b.w	8013e88 <_strtod_l+0x90>
 801492e:	2a65      	cmp	r2, #101	; 0x65
 8014930:	f43f ab9f 	beq.w	8014072 <_strtod_l+0x27a>
 8014934:	2a45      	cmp	r2, #69	; 0x45
 8014936:	f43f ab9c 	beq.w	8014072 <_strtod_l+0x27a>
 801493a:	2101      	movs	r1, #1
 801493c:	f7ff bbd4 	b.w	80140e8 <_strtod_l+0x2f0>
 8014940:	ffc00000 	.word	0xffc00000
 8014944:	41dfffff 	.word	0x41dfffff
 8014948:	000fffff 	.word	0x000fffff
 801494c:	7ff00000 	.word	0x7ff00000
 8014950:	7fefffff 	.word	0x7fefffff
 8014954:	3ff00000 	.word	0x3ff00000
 8014958:	7c9fffff 	.word	0x7c9fffff
 801495c:	bff00000 	.word	0xbff00000
 8014960:	7fe00000 	.word	0x7fe00000

08014964 <_strtod_r>:
 8014964:	4b01      	ldr	r3, [pc, #4]	; (801496c <_strtod_r+0x8>)
 8014966:	f7ff ba47 	b.w	8013df8 <_strtod_l>
 801496a:	bf00      	nop
 801496c:	20000e50 	.word	0x20000e50

08014970 <_strtol_l.constprop.0>:
 8014970:	2b01      	cmp	r3, #1
 8014972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014976:	d001      	beq.n	801497c <_strtol_l.constprop.0+0xc>
 8014978:	2b24      	cmp	r3, #36	; 0x24
 801497a:	d906      	bls.n	801498a <_strtol_l.constprop.0+0x1a>
 801497c:	f7fe f87c 	bl	8012a78 <__errno>
 8014980:	2316      	movs	r3, #22
 8014982:	6003      	str	r3, [r0, #0]
 8014984:	2000      	movs	r0, #0
 8014986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801498a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014a70 <_strtol_l.constprop.0+0x100>
 801498e:	460d      	mov	r5, r1
 8014990:	462e      	mov	r6, r5
 8014992:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014996:	f814 700c 	ldrb.w	r7, [r4, ip]
 801499a:	f017 0708 	ands.w	r7, r7, #8
 801499e:	d1f7      	bne.n	8014990 <_strtol_l.constprop.0+0x20>
 80149a0:	2c2d      	cmp	r4, #45	; 0x2d
 80149a2:	d132      	bne.n	8014a0a <_strtol_l.constprop.0+0x9a>
 80149a4:	782c      	ldrb	r4, [r5, #0]
 80149a6:	2701      	movs	r7, #1
 80149a8:	1cb5      	adds	r5, r6, #2
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d05b      	beq.n	8014a66 <_strtol_l.constprop.0+0xf6>
 80149ae:	2b10      	cmp	r3, #16
 80149b0:	d109      	bne.n	80149c6 <_strtol_l.constprop.0+0x56>
 80149b2:	2c30      	cmp	r4, #48	; 0x30
 80149b4:	d107      	bne.n	80149c6 <_strtol_l.constprop.0+0x56>
 80149b6:	782c      	ldrb	r4, [r5, #0]
 80149b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80149bc:	2c58      	cmp	r4, #88	; 0x58
 80149be:	d14d      	bne.n	8014a5c <_strtol_l.constprop.0+0xec>
 80149c0:	786c      	ldrb	r4, [r5, #1]
 80149c2:	2310      	movs	r3, #16
 80149c4:	3502      	adds	r5, #2
 80149c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80149ca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80149ce:	f04f 0c00 	mov.w	ip, #0
 80149d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80149d6:	4666      	mov	r6, ip
 80149d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80149dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80149e0:	f1be 0f09 	cmp.w	lr, #9
 80149e4:	d816      	bhi.n	8014a14 <_strtol_l.constprop.0+0xa4>
 80149e6:	4674      	mov	r4, lr
 80149e8:	42a3      	cmp	r3, r4
 80149ea:	dd24      	ble.n	8014a36 <_strtol_l.constprop.0+0xc6>
 80149ec:	f1bc 0f00 	cmp.w	ip, #0
 80149f0:	db1e      	blt.n	8014a30 <_strtol_l.constprop.0+0xc0>
 80149f2:	45b1      	cmp	r9, r6
 80149f4:	d31c      	bcc.n	8014a30 <_strtol_l.constprop.0+0xc0>
 80149f6:	d101      	bne.n	80149fc <_strtol_l.constprop.0+0x8c>
 80149f8:	45a2      	cmp	sl, r4
 80149fa:	db19      	blt.n	8014a30 <_strtol_l.constprop.0+0xc0>
 80149fc:	fb06 4603 	mla	r6, r6, r3, r4
 8014a00:	f04f 0c01 	mov.w	ip, #1
 8014a04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014a08:	e7e8      	b.n	80149dc <_strtol_l.constprop.0+0x6c>
 8014a0a:	2c2b      	cmp	r4, #43	; 0x2b
 8014a0c:	bf04      	itt	eq
 8014a0e:	782c      	ldrbeq	r4, [r5, #0]
 8014a10:	1cb5      	addeq	r5, r6, #2
 8014a12:	e7ca      	b.n	80149aa <_strtol_l.constprop.0+0x3a>
 8014a14:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014a18:	f1be 0f19 	cmp.w	lr, #25
 8014a1c:	d801      	bhi.n	8014a22 <_strtol_l.constprop.0+0xb2>
 8014a1e:	3c37      	subs	r4, #55	; 0x37
 8014a20:	e7e2      	b.n	80149e8 <_strtol_l.constprop.0+0x78>
 8014a22:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014a26:	f1be 0f19 	cmp.w	lr, #25
 8014a2a:	d804      	bhi.n	8014a36 <_strtol_l.constprop.0+0xc6>
 8014a2c:	3c57      	subs	r4, #87	; 0x57
 8014a2e:	e7db      	b.n	80149e8 <_strtol_l.constprop.0+0x78>
 8014a30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8014a34:	e7e6      	b.n	8014a04 <_strtol_l.constprop.0+0x94>
 8014a36:	f1bc 0f00 	cmp.w	ip, #0
 8014a3a:	da05      	bge.n	8014a48 <_strtol_l.constprop.0+0xd8>
 8014a3c:	2322      	movs	r3, #34	; 0x22
 8014a3e:	6003      	str	r3, [r0, #0]
 8014a40:	4646      	mov	r6, r8
 8014a42:	b942      	cbnz	r2, 8014a56 <_strtol_l.constprop.0+0xe6>
 8014a44:	4630      	mov	r0, r6
 8014a46:	e79e      	b.n	8014986 <_strtol_l.constprop.0+0x16>
 8014a48:	b107      	cbz	r7, 8014a4c <_strtol_l.constprop.0+0xdc>
 8014a4a:	4276      	negs	r6, r6
 8014a4c:	2a00      	cmp	r2, #0
 8014a4e:	d0f9      	beq.n	8014a44 <_strtol_l.constprop.0+0xd4>
 8014a50:	f1bc 0f00 	cmp.w	ip, #0
 8014a54:	d000      	beq.n	8014a58 <_strtol_l.constprop.0+0xe8>
 8014a56:	1e69      	subs	r1, r5, #1
 8014a58:	6011      	str	r1, [r2, #0]
 8014a5a:	e7f3      	b.n	8014a44 <_strtol_l.constprop.0+0xd4>
 8014a5c:	2430      	movs	r4, #48	; 0x30
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d1b1      	bne.n	80149c6 <_strtol_l.constprop.0+0x56>
 8014a62:	2308      	movs	r3, #8
 8014a64:	e7af      	b.n	80149c6 <_strtol_l.constprop.0+0x56>
 8014a66:	2c30      	cmp	r4, #48	; 0x30
 8014a68:	d0a5      	beq.n	80149b6 <_strtol_l.constprop.0+0x46>
 8014a6a:	230a      	movs	r3, #10
 8014a6c:	e7ab      	b.n	80149c6 <_strtol_l.constprop.0+0x56>
 8014a6e:	bf00      	nop
 8014a70:	0801853f 	.word	0x0801853f

08014a74 <_strtol_r>:
 8014a74:	f7ff bf7c 	b.w	8014970 <_strtol_l.constprop.0>

08014a78 <_strtoul_l.constprop.0>:
 8014a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a7c:	4f36      	ldr	r7, [pc, #216]	; (8014b58 <_strtoul_l.constprop.0+0xe0>)
 8014a7e:	4686      	mov	lr, r0
 8014a80:	460d      	mov	r5, r1
 8014a82:	4628      	mov	r0, r5
 8014a84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014a88:	5de6      	ldrb	r6, [r4, r7]
 8014a8a:	f016 0608 	ands.w	r6, r6, #8
 8014a8e:	d1f8      	bne.n	8014a82 <_strtoul_l.constprop.0+0xa>
 8014a90:	2c2d      	cmp	r4, #45	; 0x2d
 8014a92:	d12f      	bne.n	8014af4 <_strtoul_l.constprop.0+0x7c>
 8014a94:	782c      	ldrb	r4, [r5, #0]
 8014a96:	2601      	movs	r6, #1
 8014a98:	1c85      	adds	r5, r0, #2
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d057      	beq.n	8014b4e <_strtoul_l.constprop.0+0xd6>
 8014a9e:	2b10      	cmp	r3, #16
 8014aa0:	d109      	bne.n	8014ab6 <_strtoul_l.constprop.0+0x3e>
 8014aa2:	2c30      	cmp	r4, #48	; 0x30
 8014aa4:	d107      	bne.n	8014ab6 <_strtoul_l.constprop.0+0x3e>
 8014aa6:	7828      	ldrb	r0, [r5, #0]
 8014aa8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014aac:	2858      	cmp	r0, #88	; 0x58
 8014aae:	d149      	bne.n	8014b44 <_strtoul_l.constprop.0+0xcc>
 8014ab0:	786c      	ldrb	r4, [r5, #1]
 8014ab2:	2310      	movs	r3, #16
 8014ab4:	3502      	adds	r5, #2
 8014ab6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8014aba:	2700      	movs	r7, #0
 8014abc:	fbb8 f8f3 	udiv	r8, r8, r3
 8014ac0:	fb03 f908 	mul.w	r9, r3, r8
 8014ac4:	ea6f 0909 	mvn.w	r9, r9
 8014ac8:	4638      	mov	r0, r7
 8014aca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014ace:	f1bc 0f09 	cmp.w	ip, #9
 8014ad2:	d814      	bhi.n	8014afe <_strtoul_l.constprop.0+0x86>
 8014ad4:	4664      	mov	r4, ip
 8014ad6:	42a3      	cmp	r3, r4
 8014ad8:	dd22      	ble.n	8014b20 <_strtoul_l.constprop.0+0xa8>
 8014ada:	2f00      	cmp	r7, #0
 8014adc:	db1d      	blt.n	8014b1a <_strtoul_l.constprop.0+0xa2>
 8014ade:	4580      	cmp	r8, r0
 8014ae0:	d31b      	bcc.n	8014b1a <_strtoul_l.constprop.0+0xa2>
 8014ae2:	d101      	bne.n	8014ae8 <_strtoul_l.constprop.0+0x70>
 8014ae4:	45a1      	cmp	r9, r4
 8014ae6:	db18      	blt.n	8014b1a <_strtoul_l.constprop.0+0xa2>
 8014ae8:	fb00 4003 	mla	r0, r0, r3, r4
 8014aec:	2701      	movs	r7, #1
 8014aee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014af2:	e7ea      	b.n	8014aca <_strtoul_l.constprop.0+0x52>
 8014af4:	2c2b      	cmp	r4, #43	; 0x2b
 8014af6:	bf04      	itt	eq
 8014af8:	782c      	ldrbeq	r4, [r5, #0]
 8014afa:	1c85      	addeq	r5, r0, #2
 8014afc:	e7cd      	b.n	8014a9a <_strtoul_l.constprop.0+0x22>
 8014afe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014b02:	f1bc 0f19 	cmp.w	ip, #25
 8014b06:	d801      	bhi.n	8014b0c <_strtoul_l.constprop.0+0x94>
 8014b08:	3c37      	subs	r4, #55	; 0x37
 8014b0a:	e7e4      	b.n	8014ad6 <_strtoul_l.constprop.0+0x5e>
 8014b0c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014b10:	f1bc 0f19 	cmp.w	ip, #25
 8014b14:	d804      	bhi.n	8014b20 <_strtoul_l.constprop.0+0xa8>
 8014b16:	3c57      	subs	r4, #87	; 0x57
 8014b18:	e7dd      	b.n	8014ad6 <_strtoul_l.constprop.0+0x5e>
 8014b1a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014b1e:	e7e6      	b.n	8014aee <_strtoul_l.constprop.0+0x76>
 8014b20:	2f00      	cmp	r7, #0
 8014b22:	da07      	bge.n	8014b34 <_strtoul_l.constprop.0+0xbc>
 8014b24:	2322      	movs	r3, #34	; 0x22
 8014b26:	f8ce 3000 	str.w	r3, [lr]
 8014b2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b2e:	b932      	cbnz	r2, 8014b3e <_strtoul_l.constprop.0+0xc6>
 8014b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b34:	b106      	cbz	r6, 8014b38 <_strtoul_l.constprop.0+0xc0>
 8014b36:	4240      	negs	r0, r0
 8014b38:	2a00      	cmp	r2, #0
 8014b3a:	d0f9      	beq.n	8014b30 <_strtoul_l.constprop.0+0xb8>
 8014b3c:	b107      	cbz	r7, 8014b40 <_strtoul_l.constprop.0+0xc8>
 8014b3e:	1e69      	subs	r1, r5, #1
 8014b40:	6011      	str	r1, [r2, #0]
 8014b42:	e7f5      	b.n	8014b30 <_strtoul_l.constprop.0+0xb8>
 8014b44:	2430      	movs	r4, #48	; 0x30
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d1b5      	bne.n	8014ab6 <_strtoul_l.constprop.0+0x3e>
 8014b4a:	2308      	movs	r3, #8
 8014b4c:	e7b3      	b.n	8014ab6 <_strtoul_l.constprop.0+0x3e>
 8014b4e:	2c30      	cmp	r4, #48	; 0x30
 8014b50:	d0a9      	beq.n	8014aa6 <_strtoul_l.constprop.0+0x2e>
 8014b52:	230a      	movs	r3, #10
 8014b54:	e7af      	b.n	8014ab6 <_strtoul_l.constprop.0+0x3e>
 8014b56:	bf00      	nop
 8014b58:	0801853f 	.word	0x0801853f

08014b5c <strtoul>:
 8014b5c:	4613      	mov	r3, r2
 8014b5e:	460a      	mov	r2, r1
 8014b60:	4601      	mov	r1, r0
 8014b62:	4802      	ldr	r0, [pc, #8]	; (8014b6c <strtoul+0x10>)
 8014b64:	6800      	ldr	r0, [r0, #0]
 8014b66:	f7ff bf87 	b.w	8014a78 <_strtoul_l.constprop.0>
 8014b6a:	bf00      	nop
 8014b6c:	20000de8 	.word	0x20000de8

08014b70 <_vsniprintf_r>:
 8014b70:	b530      	push	{r4, r5, lr}
 8014b72:	4614      	mov	r4, r2
 8014b74:	2c00      	cmp	r4, #0
 8014b76:	b09b      	sub	sp, #108	; 0x6c
 8014b78:	4605      	mov	r5, r0
 8014b7a:	461a      	mov	r2, r3
 8014b7c:	da05      	bge.n	8014b8a <_vsniprintf_r+0x1a>
 8014b7e:	238b      	movs	r3, #139	; 0x8b
 8014b80:	6003      	str	r3, [r0, #0]
 8014b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b86:	b01b      	add	sp, #108	; 0x6c
 8014b88:	bd30      	pop	{r4, r5, pc}
 8014b8a:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014b8e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014b92:	bf14      	ite	ne
 8014b94:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8014b98:	4623      	moveq	r3, r4
 8014b9a:	9302      	str	r3, [sp, #8]
 8014b9c:	9305      	str	r3, [sp, #20]
 8014b9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ba2:	9100      	str	r1, [sp, #0]
 8014ba4:	9104      	str	r1, [sp, #16]
 8014ba6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014baa:	4669      	mov	r1, sp
 8014bac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8014bae:	f002 fa05 	bl	8016fbc <_svfiprintf_r>
 8014bb2:	1c43      	adds	r3, r0, #1
 8014bb4:	bfbc      	itt	lt
 8014bb6:	238b      	movlt	r3, #139	; 0x8b
 8014bb8:	602b      	strlt	r3, [r5, #0]
 8014bba:	2c00      	cmp	r4, #0
 8014bbc:	d0e3      	beq.n	8014b86 <_vsniprintf_r+0x16>
 8014bbe:	9b00      	ldr	r3, [sp, #0]
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	701a      	strb	r2, [r3, #0]
 8014bc4:	e7df      	b.n	8014b86 <_vsniprintf_r+0x16>
	...

08014bc8 <vsniprintf>:
 8014bc8:	b507      	push	{r0, r1, r2, lr}
 8014bca:	9300      	str	r3, [sp, #0]
 8014bcc:	4613      	mov	r3, r2
 8014bce:	460a      	mov	r2, r1
 8014bd0:	4601      	mov	r1, r0
 8014bd2:	4803      	ldr	r0, [pc, #12]	; (8014be0 <vsniprintf+0x18>)
 8014bd4:	6800      	ldr	r0, [r0, #0]
 8014bd6:	f7ff ffcb 	bl	8014b70 <_vsniprintf_r>
 8014bda:	b003      	add	sp, #12
 8014bdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8014be0:	20000de8 	.word	0x20000de8

08014be4 <__swbuf_r>:
 8014be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014be6:	460e      	mov	r6, r1
 8014be8:	4614      	mov	r4, r2
 8014bea:	4605      	mov	r5, r0
 8014bec:	b118      	cbz	r0, 8014bf6 <__swbuf_r+0x12>
 8014bee:	6983      	ldr	r3, [r0, #24]
 8014bf0:	b90b      	cbnz	r3, 8014bf6 <__swbuf_r+0x12>
 8014bf2:	f000 fff5 	bl	8015be0 <__sinit>
 8014bf6:	4b21      	ldr	r3, [pc, #132]	; (8014c7c <__swbuf_r+0x98>)
 8014bf8:	429c      	cmp	r4, r3
 8014bfa:	d12b      	bne.n	8014c54 <__swbuf_r+0x70>
 8014bfc:	686c      	ldr	r4, [r5, #4]
 8014bfe:	69a3      	ldr	r3, [r4, #24]
 8014c00:	60a3      	str	r3, [r4, #8]
 8014c02:	89a3      	ldrh	r3, [r4, #12]
 8014c04:	071a      	lsls	r2, r3, #28
 8014c06:	d52f      	bpl.n	8014c68 <__swbuf_r+0x84>
 8014c08:	6923      	ldr	r3, [r4, #16]
 8014c0a:	b36b      	cbz	r3, 8014c68 <__swbuf_r+0x84>
 8014c0c:	6923      	ldr	r3, [r4, #16]
 8014c0e:	6820      	ldr	r0, [r4, #0]
 8014c10:	1ac0      	subs	r0, r0, r3
 8014c12:	6963      	ldr	r3, [r4, #20]
 8014c14:	b2f6      	uxtb	r6, r6
 8014c16:	4283      	cmp	r3, r0
 8014c18:	4637      	mov	r7, r6
 8014c1a:	dc04      	bgt.n	8014c26 <__swbuf_r+0x42>
 8014c1c:	4621      	mov	r1, r4
 8014c1e:	4628      	mov	r0, r5
 8014c20:	f000 ff4a 	bl	8015ab8 <_fflush_r>
 8014c24:	bb30      	cbnz	r0, 8014c74 <__swbuf_r+0x90>
 8014c26:	68a3      	ldr	r3, [r4, #8]
 8014c28:	3b01      	subs	r3, #1
 8014c2a:	60a3      	str	r3, [r4, #8]
 8014c2c:	6823      	ldr	r3, [r4, #0]
 8014c2e:	1c5a      	adds	r2, r3, #1
 8014c30:	6022      	str	r2, [r4, #0]
 8014c32:	701e      	strb	r6, [r3, #0]
 8014c34:	6963      	ldr	r3, [r4, #20]
 8014c36:	3001      	adds	r0, #1
 8014c38:	4283      	cmp	r3, r0
 8014c3a:	d004      	beq.n	8014c46 <__swbuf_r+0x62>
 8014c3c:	89a3      	ldrh	r3, [r4, #12]
 8014c3e:	07db      	lsls	r3, r3, #31
 8014c40:	d506      	bpl.n	8014c50 <__swbuf_r+0x6c>
 8014c42:	2e0a      	cmp	r6, #10
 8014c44:	d104      	bne.n	8014c50 <__swbuf_r+0x6c>
 8014c46:	4621      	mov	r1, r4
 8014c48:	4628      	mov	r0, r5
 8014c4a:	f000 ff35 	bl	8015ab8 <_fflush_r>
 8014c4e:	b988      	cbnz	r0, 8014c74 <__swbuf_r+0x90>
 8014c50:	4638      	mov	r0, r7
 8014c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c54:	4b0a      	ldr	r3, [pc, #40]	; (8014c80 <__swbuf_r+0x9c>)
 8014c56:	429c      	cmp	r4, r3
 8014c58:	d101      	bne.n	8014c5e <__swbuf_r+0x7a>
 8014c5a:	68ac      	ldr	r4, [r5, #8]
 8014c5c:	e7cf      	b.n	8014bfe <__swbuf_r+0x1a>
 8014c5e:	4b09      	ldr	r3, [pc, #36]	; (8014c84 <__swbuf_r+0xa0>)
 8014c60:	429c      	cmp	r4, r3
 8014c62:	bf08      	it	eq
 8014c64:	68ec      	ldreq	r4, [r5, #12]
 8014c66:	e7ca      	b.n	8014bfe <__swbuf_r+0x1a>
 8014c68:	4621      	mov	r1, r4
 8014c6a:	4628      	mov	r0, r5
 8014c6c:	f000 f80c 	bl	8014c88 <__swsetup_r>
 8014c70:	2800      	cmp	r0, #0
 8014c72:	d0cb      	beq.n	8014c0c <__swbuf_r+0x28>
 8014c74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014c78:	e7ea      	b.n	8014c50 <__swbuf_r+0x6c>
 8014c7a:	bf00      	nop
 8014c7c:	08018818 	.word	0x08018818
 8014c80:	08018838 	.word	0x08018838
 8014c84:	080187f8 	.word	0x080187f8

08014c88 <__swsetup_r>:
 8014c88:	4b32      	ldr	r3, [pc, #200]	; (8014d54 <__swsetup_r+0xcc>)
 8014c8a:	b570      	push	{r4, r5, r6, lr}
 8014c8c:	681d      	ldr	r5, [r3, #0]
 8014c8e:	4606      	mov	r6, r0
 8014c90:	460c      	mov	r4, r1
 8014c92:	b125      	cbz	r5, 8014c9e <__swsetup_r+0x16>
 8014c94:	69ab      	ldr	r3, [r5, #24]
 8014c96:	b913      	cbnz	r3, 8014c9e <__swsetup_r+0x16>
 8014c98:	4628      	mov	r0, r5
 8014c9a:	f000 ffa1 	bl	8015be0 <__sinit>
 8014c9e:	4b2e      	ldr	r3, [pc, #184]	; (8014d58 <__swsetup_r+0xd0>)
 8014ca0:	429c      	cmp	r4, r3
 8014ca2:	d10f      	bne.n	8014cc4 <__swsetup_r+0x3c>
 8014ca4:	686c      	ldr	r4, [r5, #4]
 8014ca6:	89a3      	ldrh	r3, [r4, #12]
 8014ca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014cac:	0719      	lsls	r1, r3, #28
 8014cae:	d42c      	bmi.n	8014d0a <__swsetup_r+0x82>
 8014cb0:	06dd      	lsls	r5, r3, #27
 8014cb2:	d411      	bmi.n	8014cd8 <__swsetup_r+0x50>
 8014cb4:	2309      	movs	r3, #9
 8014cb6:	6033      	str	r3, [r6, #0]
 8014cb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014cbc:	81a3      	strh	r3, [r4, #12]
 8014cbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014cc2:	e03e      	b.n	8014d42 <__swsetup_r+0xba>
 8014cc4:	4b25      	ldr	r3, [pc, #148]	; (8014d5c <__swsetup_r+0xd4>)
 8014cc6:	429c      	cmp	r4, r3
 8014cc8:	d101      	bne.n	8014cce <__swsetup_r+0x46>
 8014cca:	68ac      	ldr	r4, [r5, #8]
 8014ccc:	e7eb      	b.n	8014ca6 <__swsetup_r+0x1e>
 8014cce:	4b24      	ldr	r3, [pc, #144]	; (8014d60 <__swsetup_r+0xd8>)
 8014cd0:	429c      	cmp	r4, r3
 8014cd2:	bf08      	it	eq
 8014cd4:	68ec      	ldreq	r4, [r5, #12]
 8014cd6:	e7e6      	b.n	8014ca6 <__swsetup_r+0x1e>
 8014cd8:	0758      	lsls	r0, r3, #29
 8014cda:	d512      	bpl.n	8014d02 <__swsetup_r+0x7a>
 8014cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014cde:	b141      	cbz	r1, 8014cf2 <__swsetup_r+0x6a>
 8014ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ce4:	4299      	cmp	r1, r3
 8014ce6:	d002      	beq.n	8014cee <__swsetup_r+0x66>
 8014ce8:	4630      	mov	r0, r6
 8014cea:	f7fd fff9 	bl	8012ce0 <_free_r>
 8014cee:	2300      	movs	r3, #0
 8014cf0:	6363      	str	r3, [r4, #52]	; 0x34
 8014cf2:	89a3      	ldrh	r3, [r4, #12]
 8014cf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014cf8:	81a3      	strh	r3, [r4, #12]
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	6063      	str	r3, [r4, #4]
 8014cfe:	6923      	ldr	r3, [r4, #16]
 8014d00:	6023      	str	r3, [r4, #0]
 8014d02:	89a3      	ldrh	r3, [r4, #12]
 8014d04:	f043 0308 	orr.w	r3, r3, #8
 8014d08:	81a3      	strh	r3, [r4, #12]
 8014d0a:	6923      	ldr	r3, [r4, #16]
 8014d0c:	b94b      	cbnz	r3, 8014d22 <__swsetup_r+0x9a>
 8014d0e:	89a3      	ldrh	r3, [r4, #12]
 8014d10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d18:	d003      	beq.n	8014d22 <__swsetup_r+0x9a>
 8014d1a:	4621      	mov	r1, r4
 8014d1c:	4630      	mov	r0, r6
 8014d1e:	f001 fba7 	bl	8016470 <__smakebuf_r>
 8014d22:	89a0      	ldrh	r0, [r4, #12]
 8014d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d28:	f010 0301 	ands.w	r3, r0, #1
 8014d2c:	d00a      	beq.n	8014d44 <__swsetup_r+0xbc>
 8014d2e:	2300      	movs	r3, #0
 8014d30:	60a3      	str	r3, [r4, #8]
 8014d32:	6963      	ldr	r3, [r4, #20]
 8014d34:	425b      	negs	r3, r3
 8014d36:	61a3      	str	r3, [r4, #24]
 8014d38:	6923      	ldr	r3, [r4, #16]
 8014d3a:	b943      	cbnz	r3, 8014d4e <__swsetup_r+0xc6>
 8014d3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014d40:	d1ba      	bne.n	8014cb8 <__swsetup_r+0x30>
 8014d42:	bd70      	pop	{r4, r5, r6, pc}
 8014d44:	0781      	lsls	r1, r0, #30
 8014d46:	bf58      	it	pl
 8014d48:	6963      	ldrpl	r3, [r4, #20]
 8014d4a:	60a3      	str	r3, [r4, #8]
 8014d4c:	e7f4      	b.n	8014d38 <__swsetup_r+0xb0>
 8014d4e:	2000      	movs	r0, #0
 8014d50:	e7f7      	b.n	8014d42 <__swsetup_r+0xba>
 8014d52:	bf00      	nop
 8014d54:	20000de8 	.word	0x20000de8
 8014d58:	08018818 	.word	0x08018818
 8014d5c:	08018838 	.word	0x08018838
 8014d60:	080187f8 	.word	0x080187f8

08014d64 <__assert_func>:
 8014d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014d66:	4614      	mov	r4, r2
 8014d68:	461a      	mov	r2, r3
 8014d6a:	4b09      	ldr	r3, [pc, #36]	; (8014d90 <__assert_func+0x2c>)
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	4605      	mov	r5, r0
 8014d70:	68d8      	ldr	r0, [r3, #12]
 8014d72:	b14c      	cbz	r4, 8014d88 <__assert_func+0x24>
 8014d74:	4b07      	ldr	r3, [pc, #28]	; (8014d94 <__assert_func+0x30>)
 8014d76:	9100      	str	r1, [sp, #0]
 8014d78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014d7c:	4906      	ldr	r1, [pc, #24]	; (8014d98 <__assert_func+0x34>)
 8014d7e:	462b      	mov	r3, r5
 8014d80:	f000 ffac 	bl	8015cdc <fiprintf>
 8014d84:	f002 fbde 	bl	8017544 <abort>
 8014d88:	4b04      	ldr	r3, [pc, #16]	; (8014d9c <__assert_func+0x38>)
 8014d8a:	461c      	mov	r4, r3
 8014d8c:	e7f3      	b.n	8014d76 <__assert_func+0x12>
 8014d8e:	bf00      	nop
 8014d90:	20000de8 	.word	0x20000de8
 8014d94:	08018740 	.word	0x08018740
 8014d98:	0801874d 	.word	0x0801874d
 8014d9c:	0801877b 	.word	0x0801877b

08014da0 <quorem>:
 8014da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014da4:	6903      	ldr	r3, [r0, #16]
 8014da6:	690c      	ldr	r4, [r1, #16]
 8014da8:	42a3      	cmp	r3, r4
 8014daa:	4607      	mov	r7, r0
 8014dac:	f2c0 8081 	blt.w	8014eb2 <quorem+0x112>
 8014db0:	3c01      	subs	r4, #1
 8014db2:	f101 0814 	add.w	r8, r1, #20
 8014db6:	f100 0514 	add.w	r5, r0, #20
 8014dba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014dbe:	9301      	str	r3, [sp, #4]
 8014dc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014dc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014dc8:	3301      	adds	r3, #1
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014dd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014dd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8014dd8:	d331      	bcc.n	8014e3e <quorem+0x9e>
 8014dda:	f04f 0e00 	mov.w	lr, #0
 8014dde:	4640      	mov	r0, r8
 8014de0:	46ac      	mov	ip, r5
 8014de2:	46f2      	mov	sl, lr
 8014de4:	f850 2b04 	ldr.w	r2, [r0], #4
 8014de8:	b293      	uxth	r3, r2
 8014dea:	fb06 e303 	mla	r3, r6, r3, lr
 8014dee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014df2:	b29b      	uxth	r3, r3
 8014df4:	ebaa 0303 	sub.w	r3, sl, r3
 8014df8:	f8dc a000 	ldr.w	sl, [ip]
 8014dfc:	0c12      	lsrs	r2, r2, #16
 8014dfe:	fa13 f38a 	uxtah	r3, r3, sl
 8014e02:	fb06 e202 	mla	r2, r6, r2, lr
 8014e06:	9300      	str	r3, [sp, #0]
 8014e08:	9b00      	ldr	r3, [sp, #0]
 8014e0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014e0e:	b292      	uxth	r2, r2
 8014e10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014e14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014e18:	f8bd 3000 	ldrh.w	r3, [sp]
 8014e1c:	4581      	cmp	r9, r0
 8014e1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e22:	f84c 3b04 	str.w	r3, [ip], #4
 8014e26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014e2a:	d2db      	bcs.n	8014de4 <quorem+0x44>
 8014e2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8014e30:	b92b      	cbnz	r3, 8014e3e <quorem+0x9e>
 8014e32:	9b01      	ldr	r3, [sp, #4]
 8014e34:	3b04      	subs	r3, #4
 8014e36:	429d      	cmp	r5, r3
 8014e38:	461a      	mov	r2, r3
 8014e3a:	d32e      	bcc.n	8014e9a <quorem+0xfa>
 8014e3c:	613c      	str	r4, [r7, #16]
 8014e3e:	4638      	mov	r0, r7
 8014e40:	f001 fe40 	bl	8016ac4 <__mcmp>
 8014e44:	2800      	cmp	r0, #0
 8014e46:	db24      	blt.n	8014e92 <quorem+0xf2>
 8014e48:	3601      	adds	r6, #1
 8014e4a:	4628      	mov	r0, r5
 8014e4c:	f04f 0c00 	mov.w	ip, #0
 8014e50:	f858 2b04 	ldr.w	r2, [r8], #4
 8014e54:	f8d0 e000 	ldr.w	lr, [r0]
 8014e58:	b293      	uxth	r3, r2
 8014e5a:	ebac 0303 	sub.w	r3, ip, r3
 8014e5e:	0c12      	lsrs	r2, r2, #16
 8014e60:	fa13 f38e 	uxtah	r3, r3, lr
 8014e64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014e68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014e6c:	b29b      	uxth	r3, r3
 8014e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e72:	45c1      	cmp	r9, r8
 8014e74:	f840 3b04 	str.w	r3, [r0], #4
 8014e78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014e7c:	d2e8      	bcs.n	8014e50 <quorem+0xb0>
 8014e7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e86:	b922      	cbnz	r2, 8014e92 <quorem+0xf2>
 8014e88:	3b04      	subs	r3, #4
 8014e8a:	429d      	cmp	r5, r3
 8014e8c:	461a      	mov	r2, r3
 8014e8e:	d30a      	bcc.n	8014ea6 <quorem+0x106>
 8014e90:	613c      	str	r4, [r7, #16]
 8014e92:	4630      	mov	r0, r6
 8014e94:	b003      	add	sp, #12
 8014e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e9a:	6812      	ldr	r2, [r2, #0]
 8014e9c:	3b04      	subs	r3, #4
 8014e9e:	2a00      	cmp	r2, #0
 8014ea0:	d1cc      	bne.n	8014e3c <quorem+0x9c>
 8014ea2:	3c01      	subs	r4, #1
 8014ea4:	e7c7      	b.n	8014e36 <quorem+0x96>
 8014ea6:	6812      	ldr	r2, [r2, #0]
 8014ea8:	3b04      	subs	r3, #4
 8014eaa:	2a00      	cmp	r2, #0
 8014eac:	d1f0      	bne.n	8014e90 <quorem+0xf0>
 8014eae:	3c01      	subs	r4, #1
 8014eb0:	e7eb      	b.n	8014e8a <quorem+0xea>
 8014eb2:	2000      	movs	r0, #0
 8014eb4:	e7ee      	b.n	8014e94 <quorem+0xf4>
	...

08014eb8 <_dtoa_r>:
 8014eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ebc:	ed2d 8b02 	vpush	{d8}
 8014ec0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014ec2:	b091      	sub	sp, #68	; 0x44
 8014ec4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014ec8:	ec59 8b10 	vmov	r8, r9, d0
 8014ecc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8014ece:	9106      	str	r1, [sp, #24]
 8014ed0:	4606      	mov	r6, r0
 8014ed2:	9208      	str	r2, [sp, #32]
 8014ed4:	930c      	str	r3, [sp, #48]	; 0x30
 8014ed6:	b975      	cbnz	r5, 8014ef6 <_dtoa_r+0x3e>
 8014ed8:	2010      	movs	r0, #16
 8014eda:	f7fd fec5 	bl	8012c68 <malloc>
 8014ede:	4602      	mov	r2, r0
 8014ee0:	6270      	str	r0, [r6, #36]	; 0x24
 8014ee2:	b920      	cbnz	r0, 8014eee <_dtoa_r+0x36>
 8014ee4:	4baa      	ldr	r3, [pc, #680]	; (8015190 <_dtoa_r+0x2d8>)
 8014ee6:	21ea      	movs	r1, #234	; 0xea
 8014ee8:	48aa      	ldr	r0, [pc, #680]	; (8015194 <_dtoa_r+0x2dc>)
 8014eea:	f7ff ff3b 	bl	8014d64 <__assert_func>
 8014eee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014ef2:	6005      	str	r5, [r0, #0]
 8014ef4:	60c5      	str	r5, [r0, #12]
 8014ef6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014ef8:	6819      	ldr	r1, [r3, #0]
 8014efa:	b151      	cbz	r1, 8014f12 <_dtoa_r+0x5a>
 8014efc:	685a      	ldr	r2, [r3, #4]
 8014efe:	604a      	str	r2, [r1, #4]
 8014f00:	2301      	movs	r3, #1
 8014f02:	4093      	lsls	r3, r2
 8014f04:	608b      	str	r3, [r1, #8]
 8014f06:	4630      	mov	r0, r6
 8014f08:	f001 fb50 	bl	80165ac <_Bfree>
 8014f0c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014f0e:	2200      	movs	r2, #0
 8014f10:	601a      	str	r2, [r3, #0]
 8014f12:	f1b9 0300 	subs.w	r3, r9, #0
 8014f16:	bfbb      	ittet	lt
 8014f18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014f1c:	9303      	strlt	r3, [sp, #12]
 8014f1e:	2300      	movge	r3, #0
 8014f20:	2201      	movlt	r2, #1
 8014f22:	bfac      	ite	ge
 8014f24:	6023      	strge	r3, [r4, #0]
 8014f26:	6022      	strlt	r2, [r4, #0]
 8014f28:	4b9b      	ldr	r3, [pc, #620]	; (8015198 <_dtoa_r+0x2e0>)
 8014f2a:	9c03      	ldr	r4, [sp, #12]
 8014f2c:	43a3      	bics	r3, r4
 8014f2e:	d11c      	bne.n	8014f6a <_dtoa_r+0xb2>
 8014f30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f32:	f242 730f 	movw	r3, #9999	; 0x270f
 8014f36:	6013      	str	r3, [r2, #0]
 8014f38:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8014f3c:	ea53 0308 	orrs.w	r3, r3, r8
 8014f40:	f000 84fd 	beq.w	801593e <_dtoa_r+0xa86>
 8014f44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f46:	b963      	cbnz	r3, 8014f62 <_dtoa_r+0xaa>
 8014f48:	4b94      	ldr	r3, [pc, #592]	; (801519c <_dtoa_r+0x2e4>)
 8014f4a:	e01f      	b.n	8014f8c <_dtoa_r+0xd4>
 8014f4c:	4b94      	ldr	r3, [pc, #592]	; (80151a0 <_dtoa_r+0x2e8>)
 8014f4e:	9301      	str	r3, [sp, #4]
 8014f50:	3308      	adds	r3, #8
 8014f52:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014f54:	6013      	str	r3, [r2, #0]
 8014f56:	9801      	ldr	r0, [sp, #4]
 8014f58:	b011      	add	sp, #68	; 0x44
 8014f5a:	ecbd 8b02 	vpop	{d8}
 8014f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f62:	4b8e      	ldr	r3, [pc, #568]	; (801519c <_dtoa_r+0x2e4>)
 8014f64:	9301      	str	r3, [sp, #4]
 8014f66:	3303      	adds	r3, #3
 8014f68:	e7f3      	b.n	8014f52 <_dtoa_r+0x9a>
 8014f6a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8014f6e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f76:	d10b      	bne.n	8014f90 <_dtoa_r+0xd8>
 8014f78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f7a:	2301      	movs	r3, #1
 8014f7c:	6013      	str	r3, [r2, #0]
 8014f7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	f000 84d9 	beq.w	8015938 <_dtoa_r+0xa80>
 8014f86:	4887      	ldr	r0, [pc, #540]	; (80151a4 <_dtoa_r+0x2ec>)
 8014f88:	6018      	str	r0, [r3, #0]
 8014f8a:	1e43      	subs	r3, r0, #1
 8014f8c:	9301      	str	r3, [sp, #4]
 8014f8e:	e7e2      	b.n	8014f56 <_dtoa_r+0x9e>
 8014f90:	a90f      	add	r1, sp, #60	; 0x3c
 8014f92:	aa0e      	add	r2, sp, #56	; 0x38
 8014f94:	4630      	mov	r0, r6
 8014f96:	eeb0 0b48 	vmov.f64	d0, d8
 8014f9a:	f001 feb5 	bl	8016d08 <__d2b>
 8014f9e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8014fa2:	4605      	mov	r5, r0
 8014fa4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014fa6:	2900      	cmp	r1, #0
 8014fa8:	d046      	beq.n	8015038 <_dtoa_r+0x180>
 8014faa:	ee18 4a90 	vmov	r4, s17
 8014fae:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014fb2:	ec53 2b18 	vmov	r2, r3, d8
 8014fb6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8014fba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014fbe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014fc2:	2400      	movs	r4, #0
 8014fc4:	ec43 2b16 	vmov	d6, r2, r3
 8014fc8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8014fcc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8015178 <_dtoa_r+0x2c0>
 8014fd0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014fd4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8015180 <_dtoa_r+0x2c8>
 8014fd8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014fdc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8015188 <_dtoa_r+0x2d0>
 8014fe0:	ee07 1a90 	vmov	s15, r1
 8014fe4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014fe8:	eeb0 7b46 	vmov.f64	d7, d6
 8014fec:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014ff0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014ff4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ffc:	ee16 ba90 	vmov	fp, s13
 8015000:	940a      	str	r4, [sp, #40]	; 0x28
 8015002:	d508      	bpl.n	8015016 <_dtoa_r+0x15e>
 8015004:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015008:	eeb4 6b47 	vcmp.f64	d6, d7
 801500c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015010:	bf18      	it	ne
 8015012:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8015016:	f1bb 0f16 	cmp.w	fp, #22
 801501a:	d82f      	bhi.n	801507c <_dtoa_r+0x1c4>
 801501c:	4b62      	ldr	r3, [pc, #392]	; (80151a8 <_dtoa_r+0x2f0>)
 801501e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015022:	ed93 7b00 	vldr	d7, [r3]
 8015026:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801502a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801502e:	d501      	bpl.n	8015034 <_dtoa_r+0x17c>
 8015030:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8015034:	2300      	movs	r3, #0
 8015036:	e022      	b.n	801507e <_dtoa_r+0x1c6>
 8015038:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801503a:	4401      	add	r1, r0
 801503c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8015040:	2b20      	cmp	r3, #32
 8015042:	bfc1      	itttt	gt
 8015044:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015048:	fa04 f303 	lslgt.w	r3, r4, r3
 801504c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8015050:	fa28 f804 	lsrgt.w	r8, r8, r4
 8015054:	bfd6      	itet	le
 8015056:	f1c3 0320 	rsble	r3, r3, #32
 801505a:	ea43 0808 	orrgt.w	r8, r3, r8
 801505e:	fa08 f803 	lslle.w	r8, r8, r3
 8015062:	ee07 8a90 	vmov	s15, r8
 8015066:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801506a:	3901      	subs	r1, #1
 801506c:	ee17 4a90 	vmov	r4, s15
 8015070:	ec53 2b17 	vmov	r2, r3, d7
 8015074:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8015078:	2401      	movs	r4, #1
 801507a:	e7a3      	b.n	8014fc4 <_dtoa_r+0x10c>
 801507c:	2301      	movs	r3, #1
 801507e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015080:	1a43      	subs	r3, r0, r1
 8015082:	1e5a      	subs	r2, r3, #1
 8015084:	bf45      	ittet	mi
 8015086:	f1c3 0301 	rsbmi	r3, r3, #1
 801508a:	9304      	strmi	r3, [sp, #16]
 801508c:	2300      	movpl	r3, #0
 801508e:	2300      	movmi	r3, #0
 8015090:	9205      	str	r2, [sp, #20]
 8015092:	bf54      	ite	pl
 8015094:	9304      	strpl	r3, [sp, #16]
 8015096:	9305      	strmi	r3, [sp, #20]
 8015098:	f1bb 0f00 	cmp.w	fp, #0
 801509c:	db18      	blt.n	80150d0 <_dtoa_r+0x218>
 801509e:	9b05      	ldr	r3, [sp, #20]
 80150a0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80150a4:	445b      	add	r3, fp
 80150a6:	9305      	str	r3, [sp, #20]
 80150a8:	2300      	movs	r3, #0
 80150aa:	9a06      	ldr	r2, [sp, #24]
 80150ac:	2a09      	cmp	r2, #9
 80150ae:	d849      	bhi.n	8015144 <_dtoa_r+0x28c>
 80150b0:	2a05      	cmp	r2, #5
 80150b2:	bfc4      	itt	gt
 80150b4:	3a04      	subgt	r2, #4
 80150b6:	9206      	strgt	r2, [sp, #24]
 80150b8:	9a06      	ldr	r2, [sp, #24]
 80150ba:	f1a2 0202 	sub.w	r2, r2, #2
 80150be:	bfcc      	ite	gt
 80150c0:	2400      	movgt	r4, #0
 80150c2:	2401      	movle	r4, #1
 80150c4:	2a03      	cmp	r2, #3
 80150c6:	d848      	bhi.n	801515a <_dtoa_r+0x2a2>
 80150c8:	e8df f002 	tbb	[pc, r2]
 80150cc:	3a2c2e0b 	.word	0x3a2c2e0b
 80150d0:	9b04      	ldr	r3, [sp, #16]
 80150d2:	2200      	movs	r2, #0
 80150d4:	eba3 030b 	sub.w	r3, r3, fp
 80150d8:	9304      	str	r3, [sp, #16]
 80150da:	9209      	str	r2, [sp, #36]	; 0x24
 80150dc:	f1cb 0300 	rsb	r3, fp, #0
 80150e0:	e7e3      	b.n	80150aa <_dtoa_r+0x1f2>
 80150e2:	2200      	movs	r2, #0
 80150e4:	9207      	str	r2, [sp, #28]
 80150e6:	9a08      	ldr	r2, [sp, #32]
 80150e8:	2a00      	cmp	r2, #0
 80150ea:	dc39      	bgt.n	8015160 <_dtoa_r+0x2a8>
 80150ec:	f04f 0a01 	mov.w	sl, #1
 80150f0:	46d1      	mov	r9, sl
 80150f2:	4652      	mov	r2, sl
 80150f4:	f8cd a020 	str.w	sl, [sp, #32]
 80150f8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80150fa:	2100      	movs	r1, #0
 80150fc:	6079      	str	r1, [r7, #4]
 80150fe:	2004      	movs	r0, #4
 8015100:	f100 0c14 	add.w	ip, r0, #20
 8015104:	4594      	cmp	ip, r2
 8015106:	6879      	ldr	r1, [r7, #4]
 8015108:	d92f      	bls.n	801516a <_dtoa_r+0x2b2>
 801510a:	4630      	mov	r0, r6
 801510c:	930d      	str	r3, [sp, #52]	; 0x34
 801510e:	f001 fa0d 	bl	801652c <_Balloc>
 8015112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015114:	9001      	str	r0, [sp, #4]
 8015116:	4602      	mov	r2, r0
 8015118:	2800      	cmp	r0, #0
 801511a:	d149      	bne.n	80151b0 <_dtoa_r+0x2f8>
 801511c:	4b23      	ldr	r3, [pc, #140]	; (80151ac <_dtoa_r+0x2f4>)
 801511e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015122:	e6e1      	b.n	8014ee8 <_dtoa_r+0x30>
 8015124:	2201      	movs	r2, #1
 8015126:	e7dd      	b.n	80150e4 <_dtoa_r+0x22c>
 8015128:	2200      	movs	r2, #0
 801512a:	9207      	str	r2, [sp, #28]
 801512c:	9a08      	ldr	r2, [sp, #32]
 801512e:	eb0b 0a02 	add.w	sl, fp, r2
 8015132:	f10a 0901 	add.w	r9, sl, #1
 8015136:	464a      	mov	r2, r9
 8015138:	2a01      	cmp	r2, #1
 801513a:	bfb8      	it	lt
 801513c:	2201      	movlt	r2, #1
 801513e:	e7db      	b.n	80150f8 <_dtoa_r+0x240>
 8015140:	2201      	movs	r2, #1
 8015142:	e7f2      	b.n	801512a <_dtoa_r+0x272>
 8015144:	2401      	movs	r4, #1
 8015146:	2200      	movs	r2, #0
 8015148:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801514c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8015150:	2100      	movs	r1, #0
 8015152:	46d1      	mov	r9, sl
 8015154:	2212      	movs	r2, #18
 8015156:	9108      	str	r1, [sp, #32]
 8015158:	e7ce      	b.n	80150f8 <_dtoa_r+0x240>
 801515a:	2201      	movs	r2, #1
 801515c:	9207      	str	r2, [sp, #28]
 801515e:	e7f5      	b.n	801514c <_dtoa_r+0x294>
 8015160:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015164:	46d1      	mov	r9, sl
 8015166:	4652      	mov	r2, sl
 8015168:	e7c6      	b.n	80150f8 <_dtoa_r+0x240>
 801516a:	3101      	adds	r1, #1
 801516c:	6079      	str	r1, [r7, #4]
 801516e:	0040      	lsls	r0, r0, #1
 8015170:	e7c6      	b.n	8015100 <_dtoa_r+0x248>
 8015172:	bf00      	nop
 8015174:	f3af 8000 	nop.w
 8015178:	636f4361 	.word	0x636f4361
 801517c:	3fd287a7 	.word	0x3fd287a7
 8015180:	8b60c8b3 	.word	0x8b60c8b3
 8015184:	3fc68a28 	.word	0x3fc68a28
 8015188:	509f79fb 	.word	0x509f79fb
 801518c:	3fd34413 	.word	0x3fd34413
 8015190:	0801867d 	.word	0x0801867d
 8015194:	08018789 	.word	0x08018789
 8015198:	7ff00000 	.word	0x7ff00000
 801519c:	08018785 	.word	0x08018785
 80151a0:	0801877c 	.word	0x0801877c
 80151a4:	08018655 	.word	0x08018655
 80151a8:	08018958 	.word	0x08018958
 80151ac:	080187e4 	.word	0x080187e4
 80151b0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80151b2:	9901      	ldr	r1, [sp, #4]
 80151b4:	6011      	str	r1, [r2, #0]
 80151b6:	f1b9 0f0e 	cmp.w	r9, #14
 80151ba:	d86c      	bhi.n	8015296 <_dtoa_r+0x3de>
 80151bc:	2c00      	cmp	r4, #0
 80151be:	d06a      	beq.n	8015296 <_dtoa_r+0x3de>
 80151c0:	f1bb 0f00 	cmp.w	fp, #0
 80151c4:	f340 80a0 	ble.w	8015308 <_dtoa_r+0x450>
 80151c8:	49c1      	ldr	r1, [pc, #772]	; (80154d0 <_dtoa_r+0x618>)
 80151ca:	f00b 020f 	and.w	r2, fp, #15
 80151ce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80151d2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80151d6:	ed92 7b00 	vldr	d7, [r2]
 80151da:	ea4f 112b 	mov.w	r1, fp, asr #4
 80151de:	f000 8087 	beq.w	80152f0 <_dtoa_r+0x438>
 80151e2:	4abc      	ldr	r2, [pc, #752]	; (80154d4 <_dtoa_r+0x61c>)
 80151e4:	ed92 6b08 	vldr	d6, [r2, #32]
 80151e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80151ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80151f0:	f001 010f 	and.w	r1, r1, #15
 80151f4:	2203      	movs	r2, #3
 80151f6:	48b7      	ldr	r0, [pc, #732]	; (80154d4 <_dtoa_r+0x61c>)
 80151f8:	2900      	cmp	r1, #0
 80151fa:	d17b      	bne.n	80152f4 <_dtoa_r+0x43c>
 80151fc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015200:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015204:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015208:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801520a:	2900      	cmp	r1, #0
 801520c:	f000 80a2 	beq.w	8015354 <_dtoa_r+0x49c>
 8015210:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015214:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015218:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801521c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015220:	f140 8098 	bpl.w	8015354 <_dtoa_r+0x49c>
 8015224:	f1b9 0f00 	cmp.w	r9, #0
 8015228:	f000 8094 	beq.w	8015354 <_dtoa_r+0x49c>
 801522c:	f1ba 0f00 	cmp.w	sl, #0
 8015230:	dd2f      	ble.n	8015292 <_dtoa_r+0x3da>
 8015232:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8015236:	ee27 7b06 	vmul.f64	d7, d7, d6
 801523a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801523e:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8015242:	3201      	adds	r2, #1
 8015244:	4650      	mov	r0, sl
 8015246:	ed9d 6b02 	vldr	d6, [sp, #8]
 801524a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801524e:	ee07 2a90 	vmov	s15, r2
 8015252:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015256:	eea7 5b06 	vfma.f64	d5, d7, d6
 801525a:	ee15 4a90 	vmov	r4, s11
 801525e:	ec52 1b15 	vmov	r1, r2, d5
 8015262:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8015266:	2800      	cmp	r0, #0
 8015268:	d177      	bne.n	801535a <_dtoa_r+0x4a2>
 801526a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801526e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015272:	ec42 1b17 	vmov	d7, r1, r2
 8015276:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801527e:	f300 8263 	bgt.w	8015748 <_dtoa_r+0x890>
 8015282:	eeb1 7b47 	vneg.f64	d7, d7
 8015286:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801528a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801528e:	f100 8258 	bmi.w	8015742 <_dtoa_r+0x88a>
 8015292:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015296:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015298:	2a00      	cmp	r2, #0
 801529a:	f2c0 811d 	blt.w	80154d8 <_dtoa_r+0x620>
 801529e:	f1bb 0f0e 	cmp.w	fp, #14
 80152a2:	f300 8119 	bgt.w	80154d8 <_dtoa_r+0x620>
 80152a6:	4b8a      	ldr	r3, [pc, #552]	; (80154d0 <_dtoa_r+0x618>)
 80152a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80152ac:	ed93 6b00 	vldr	d6, [r3]
 80152b0:	9b08      	ldr	r3, [sp, #32]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	f280 80b7 	bge.w	8015426 <_dtoa_r+0x56e>
 80152b8:	f1b9 0f00 	cmp.w	r9, #0
 80152bc:	f300 80b3 	bgt.w	8015426 <_dtoa_r+0x56e>
 80152c0:	f040 823f 	bne.w	8015742 <_dtoa_r+0x88a>
 80152c4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80152c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80152cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80152d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80152d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152d8:	464c      	mov	r4, r9
 80152da:	464f      	mov	r7, r9
 80152dc:	f280 8215 	bge.w	801570a <_dtoa_r+0x852>
 80152e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80152e4:	2331      	movs	r3, #49	; 0x31
 80152e6:	f808 3b01 	strb.w	r3, [r8], #1
 80152ea:	f10b 0b01 	add.w	fp, fp, #1
 80152ee:	e211      	b.n	8015714 <_dtoa_r+0x85c>
 80152f0:	2202      	movs	r2, #2
 80152f2:	e780      	b.n	80151f6 <_dtoa_r+0x33e>
 80152f4:	07cc      	lsls	r4, r1, #31
 80152f6:	d504      	bpl.n	8015302 <_dtoa_r+0x44a>
 80152f8:	ed90 6b00 	vldr	d6, [r0]
 80152fc:	3201      	adds	r2, #1
 80152fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015302:	1049      	asrs	r1, r1, #1
 8015304:	3008      	adds	r0, #8
 8015306:	e777      	b.n	80151f8 <_dtoa_r+0x340>
 8015308:	d022      	beq.n	8015350 <_dtoa_r+0x498>
 801530a:	f1cb 0100 	rsb	r1, fp, #0
 801530e:	4a70      	ldr	r2, [pc, #448]	; (80154d0 <_dtoa_r+0x618>)
 8015310:	f001 000f 	and.w	r0, r1, #15
 8015314:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015318:	ed92 7b00 	vldr	d7, [r2]
 801531c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015320:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015324:	486b      	ldr	r0, [pc, #428]	; (80154d4 <_dtoa_r+0x61c>)
 8015326:	1109      	asrs	r1, r1, #4
 8015328:	2400      	movs	r4, #0
 801532a:	2202      	movs	r2, #2
 801532c:	b929      	cbnz	r1, 801533a <_dtoa_r+0x482>
 801532e:	2c00      	cmp	r4, #0
 8015330:	f43f af6a 	beq.w	8015208 <_dtoa_r+0x350>
 8015334:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015338:	e766      	b.n	8015208 <_dtoa_r+0x350>
 801533a:	07cf      	lsls	r7, r1, #31
 801533c:	d505      	bpl.n	801534a <_dtoa_r+0x492>
 801533e:	ed90 6b00 	vldr	d6, [r0]
 8015342:	3201      	adds	r2, #1
 8015344:	2401      	movs	r4, #1
 8015346:	ee27 7b06 	vmul.f64	d7, d7, d6
 801534a:	1049      	asrs	r1, r1, #1
 801534c:	3008      	adds	r0, #8
 801534e:	e7ed      	b.n	801532c <_dtoa_r+0x474>
 8015350:	2202      	movs	r2, #2
 8015352:	e759      	b.n	8015208 <_dtoa_r+0x350>
 8015354:	465f      	mov	r7, fp
 8015356:	4648      	mov	r0, r9
 8015358:	e775      	b.n	8015246 <_dtoa_r+0x38e>
 801535a:	ec42 1b17 	vmov	d7, r1, r2
 801535e:	4a5c      	ldr	r2, [pc, #368]	; (80154d0 <_dtoa_r+0x618>)
 8015360:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015364:	ed12 4b02 	vldr	d4, [r2, #-8]
 8015368:	9a01      	ldr	r2, [sp, #4]
 801536a:	1814      	adds	r4, r2, r0
 801536c:	9a07      	ldr	r2, [sp, #28]
 801536e:	b352      	cbz	r2, 80153c6 <_dtoa_r+0x50e>
 8015370:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8015374:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015378:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801537c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015380:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015384:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015388:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801538c:	ee14 2a90 	vmov	r2, s9
 8015390:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015394:	3230      	adds	r2, #48	; 0x30
 8015396:	ee36 6b45 	vsub.f64	d6, d6, d5
 801539a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801539e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153a2:	f808 2b01 	strb.w	r2, [r8], #1
 80153a6:	d439      	bmi.n	801541c <_dtoa_r+0x564>
 80153a8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80153ac:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80153b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153b4:	d472      	bmi.n	801549c <_dtoa_r+0x5e4>
 80153b6:	45a0      	cmp	r8, r4
 80153b8:	f43f af6b 	beq.w	8015292 <_dtoa_r+0x3da>
 80153bc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80153c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80153c4:	e7e0      	b.n	8015388 <_dtoa_r+0x4d0>
 80153c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80153ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 80153ce:	4621      	mov	r1, r4
 80153d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80153d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80153d8:	ee14 2a90 	vmov	r2, s9
 80153dc:	3230      	adds	r2, #48	; 0x30
 80153de:	f808 2b01 	strb.w	r2, [r8], #1
 80153e2:	45a0      	cmp	r8, r4
 80153e4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80153e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80153ec:	d118      	bne.n	8015420 <_dtoa_r+0x568>
 80153ee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80153f2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80153f6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80153fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153fe:	dc4d      	bgt.n	801549c <_dtoa_r+0x5e4>
 8015400:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015404:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801540c:	f57f af41 	bpl.w	8015292 <_dtoa_r+0x3da>
 8015410:	4688      	mov	r8, r1
 8015412:	3901      	subs	r1, #1
 8015414:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015418:	2b30      	cmp	r3, #48	; 0x30
 801541a:	d0f9      	beq.n	8015410 <_dtoa_r+0x558>
 801541c:	46bb      	mov	fp, r7
 801541e:	e02a      	b.n	8015476 <_dtoa_r+0x5be>
 8015420:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015424:	e7d6      	b.n	80153d4 <_dtoa_r+0x51c>
 8015426:	ed9d 7b02 	vldr	d7, [sp, #8]
 801542a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801542e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015432:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015436:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801543a:	ee15 3a10 	vmov	r3, s10
 801543e:	3330      	adds	r3, #48	; 0x30
 8015440:	f808 3b01 	strb.w	r3, [r8], #1
 8015444:	9b01      	ldr	r3, [sp, #4]
 8015446:	eba8 0303 	sub.w	r3, r8, r3
 801544a:	4599      	cmp	r9, r3
 801544c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015450:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015454:	d133      	bne.n	80154be <_dtoa_r+0x606>
 8015456:	ee37 7b07 	vadd.f64	d7, d7, d7
 801545a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801545e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015462:	dc1a      	bgt.n	801549a <_dtoa_r+0x5e2>
 8015464:	eeb4 7b46 	vcmp.f64	d7, d6
 8015468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801546c:	d103      	bne.n	8015476 <_dtoa_r+0x5be>
 801546e:	ee15 3a10 	vmov	r3, s10
 8015472:	07d9      	lsls	r1, r3, #31
 8015474:	d411      	bmi.n	801549a <_dtoa_r+0x5e2>
 8015476:	4629      	mov	r1, r5
 8015478:	4630      	mov	r0, r6
 801547a:	f001 f897 	bl	80165ac <_Bfree>
 801547e:	2300      	movs	r3, #0
 8015480:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015482:	f888 3000 	strb.w	r3, [r8]
 8015486:	f10b 0301 	add.w	r3, fp, #1
 801548a:	6013      	str	r3, [r2, #0]
 801548c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801548e:	2b00      	cmp	r3, #0
 8015490:	f43f ad61 	beq.w	8014f56 <_dtoa_r+0x9e>
 8015494:	f8c3 8000 	str.w	r8, [r3]
 8015498:	e55d      	b.n	8014f56 <_dtoa_r+0x9e>
 801549a:	465f      	mov	r7, fp
 801549c:	4643      	mov	r3, r8
 801549e:	4698      	mov	r8, r3
 80154a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80154a4:	2a39      	cmp	r2, #57	; 0x39
 80154a6:	d106      	bne.n	80154b6 <_dtoa_r+0x5fe>
 80154a8:	9a01      	ldr	r2, [sp, #4]
 80154aa:	429a      	cmp	r2, r3
 80154ac:	d1f7      	bne.n	801549e <_dtoa_r+0x5e6>
 80154ae:	9901      	ldr	r1, [sp, #4]
 80154b0:	2230      	movs	r2, #48	; 0x30
 80154b2:	3701      	adds	r7, #1
 80154b4:	700a      	strb	r2, [r1, #0]
 80154b6:	781a      	ldrb	r2, [r3, #0]
 80154b8:	3201      	adds	r2, #1
 80154ba:	701a      	strb	r2, [r3, #0]
 80154bc:	e7ae      	b.n	801541c <_dtoa_r+0x564>
 80154be:	ee27 7b04 	vmul.f64	d7, d7, d4
 80154c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80154c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154ca:	d1b2      	bne.n	8015432 <_dtoa_r+0x57a>
 80154cc:	e7d3      	b.n	8015476 <_dtoa_r+0x5be>
 80154ce:	bf00      	nop
 80154d0:	08018958 	.word	0x08018958
 80154d4:	08018930 	.word	0x08018930
 80154d8:	9907      	ldr	r1, [sp, #28]
 80154da:	2900      	cmp	r1, #0
 80154dc:	f000 80d0 	beq.w	8015680 <_dtoa_r+0x7c8>
 80154e0:	9906      	ldr	r1, [sp, #24]
 80154e2:	2901      	cmp	r1, #1
 80154e4:	f300 80b4 	bgt.w	8015650 <_dtoa_r+0x798>
 80154e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80154ea:	2900      	cmp	r1, #0
 80154ec:	f000 80ac 	beq.w	8015648 <_dtoa_r+0x790>
 80154f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80154f4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80154f8:	461c      	mov	r4, r3
 80154fa:	930a      	str	r3, [sp, #40]	; 0x28
 80154fc:	9b04      	ldr	r3, [sp, #16]
 80154fe:	4413      	add	r3, r2
 8015500:	9304      	str	r3, [sp, #16]
 8015502:	9b05      	ldr	r3, [sp, #20]
 8015504:	2101      	movs	r1, #1
 8015506:	4413      	add	r3, r2
 8015508:	4630      	mov	r0, r6
 801550a:	9305      	str	r3, [sp, #20]
 801550c:	f001 f950 	bl	80167b0 <__i2b>
 8015510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015512:	4607      	mov	r7, r0
 8015514:	f1b8 0f00 	cmp.w	r8, #0
 8015518:	dd0d      	ble.n	8015536 <_dtoa_r+0x67e>
 801551a:	9a05      	ldr	r2, [sp, #20]
 801551c:	2a00      	cmp	r2, #0
 801551e:	dd0a      	ble.n	8015536 <_dtoa_r+0x67e>
 8015520:	4542      	cmp	r2, r8
 8015522:	9904      	ldr	r1, [sp, #16]
 8015524:	bfa8      	it	ge
 8015526:	4642      	movge	r2, r8
 8015528:	1a89      	subs	r1, r1, r2
 801552a:	9104      	str	r1, [sp, #16]
 801552c:	9905      	ldr	r1, [sp, #20]
 801552e:	eba8 0802 	sub.w	r8, r8, r2
 8015532:	1a8a      	subs	r2, r1, r2
 8015534:	9205      	str	r2, [sp, #20]
 8015536:	b303      	cbz	r3, 801557a <_dtoa_r+0x6c2>
 8015538:	9a07      	ldr	r2, [sp, #28]
 801553a:	2a00      	cmp	r2, #0
 801553c:	f000 80a5 	beq.w	801568a <_dtoa_r+0x7d2>
 8015540:	2c00      	cmp	r4, #0
 8015542:	dd13      	ble.n	801556c <_dtoa_r+0x6b4>
 8015544:	4639      	mov	r1, r7
 8015546:	4622      	mov	r2, r4
 8015548:	4630      	mov	r0, r6
 801554a:	930d      	str	r3, [sp, #52]	; 0x34
 801554c:	f001 f9f0 	bl	8016930 <__pow5mult>
 8015550:	462a      	mov	r2, r5
 8015552:	4601      	mov	r1, r0
 8015554:	4607      	mov	r7, r0
 8015556:	4630      	mov	r0, r6
 8015558:	f001 f940 	bl	80167dc <__multiply>
 801555c:	4629      	mov	r1, r5
 801555e:	900a      	str	r0, [sp, #40]	; 0x28
 8015560:	4630      	mov	r0, r6
 8015562:	f001 f823 	bl	80165ac <_Bfree>
 8015566:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801556a:	4615      	mov	r5, r2
 801556c:	1b1a      	subs	r2, r3, r4
 801556e:	d004      	beq.n	801557a <_dtoa_r+0x6c2>
 8015570:	4629      	mov	r1, r5
 8015572:	4630      	mov	r0, r6
 8015574:	f001 f9dc 	bl	8016930 <__pow5mult>
 8015578:	4605      	mov	r5, r0
 801557a:	2101      	movs	r1, #1
 801557c:	4630      	mov	r0, r6
 801557e:	f001 f917 	bl	80167b0 <__i2b>
 8015582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015584:	2b00      	cmp	r3, #0
 8015586:	4604      	mov	r4, r0
 8015588:	f340 8081 	ble.w	801568e <_dtoa_r+0x7d6>
 801558c:	461a      	mov	r2, r3
 801558e:	4601      	mov	r1, r0
 8015590:	4630      	mov	r0, r6
 8015592:	f001 f9cd 	bl	8016930 <__pow5mult>
 8015596:	9b06      	ldr	r3, [sp, #24]
 8015598:	2b01      	cmp	r3, #1
 801559a:	4604      	mov	r4, r0
 801559c:	dd7a      	ble.n	8015694 <_dtoa_r+0x7dc>
 801559e:	2300      	movs	r3, #0
 80155a0:	930a      	str	r3, [sp, #40]	; 0x28
 80155a2:	6922      	ldr	r2, [r4, #16]
 80155a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80155a8:	6910      	ldr	r0, [r2, #16]
 80155aa:	f001 f8b1 	bl	8016710 <__hi0bits>
 80155ae:	f1c0 0020 	rsb	r0, r0, #32
 80155b2:	9b05      	ldr	r3, [sp, #20]
 80155b4:	4418      	add	r0, r3
 80155b6:	f010 001f 	ands.w	r0, r0, #31
 80155ba:	f000 808c 	beq.w	80156d6 <_dtoa_r+0x81e>
 80155be:	f1c0 0220 	rsb	r2, r0, #32
 80155c2:	2a04      	cmp	r2, #4
 80155c4:	f340 8085 	ble.w	80156d2 <_dtoa_r+0x81a>
 80155c8:	f1c0 001c 	rsb	r0, r0, #28
 80155cc:	9b04      	ldr	r3, [sp, #16]
 80155ce:	4403      	add	r3, r0
 80155d0:	9304      	str	r3, [sp, #16]
 80155d2:	9b05      	ldr	r3, [sp, #20]
 80155d4:	4403      	add	r3, r0
 80155d6:	4480      	add	r8, r0
 80155d8:	9305      	str	r3, [sp, #20]
 80155da:	9b04      	ldr	r3, [sp, #16]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	dd05      	ble.n	80155ec <_dtoa_r+0x734>
 80155e0:	4629      	mov	r1, r5
 80155e2:	461a      	mov	r2, r3
 80155e4:	4630      	mov	r0, r6
 80155e6:	f001 f9fd 	bl	80169e4 <__lshift>
 80155ea:	4605      	mov	r5, r0
 80155ec:	9b05      	ldr	r3, [sp, #20]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	dd05      	ble.n	80155fe <_dtoa_r+0x746>
 80155f2:	4621      	mov	r1, r4
 80155f4:	461a      	mov	r2, r3
 80155f6:	4630      	mov	r0, r6
 80155f8:	f001 f9f4 	bl	80169e4 <__lshift>
 80155fc:	4604      	mov	r4, r0
 80155fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015600:	2b00      	cmp	r3, #0
 8015602:	d06a      	beq.n	80156da <_dtoa_r+0x822>
 8015604:	4621      	mov	r1, r4
 8015606:	4628      	mov	r0, r5
 8015608:	f001 fa5c 	bl	8016ac4 <__mcmp>
 801560c:	2800      	cmp	r0, #0
 801560e:	da64      	bge.n	80156da <_dtoa_r+0x822>
 8015610:	2300      	movs	r3, #0
 8015612:	4629      	mov	r1, r5
 8015614:	220a      	movs	r2, #10
 8015616:	4630      	mov	r0, r6
 8015618:	f000 ffea 	bl	80165f0 <__multadd>
 801561c:	9b07      	ldr	r3, [sp, #28]
 801561e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8015622:	4605      	mov	r5, r0
 8015624:	2b00      	cmp	r3, #0
 8015626:	f000 8191 	beq.w	801594c <_dtoa_r+0xa94>
 801562a:	4639      	mov	r1, r7
 801562c:	2300      	movs	r3, #0
 801562e:	220a      	movs	r2, #10
 8015630:	4630      	mov	r0, r6
 8015632:	f000 ffdd 	bl	80165f0 <__multadd>
 8015636:	f1ba 0f00 	cmp.w	sl, #0
 801563a:	4607      	mov	r7, r0
 801563c:	f300 808d 	bgt.w	801575a <_dtoa_r+0x8a2>
 8015640:	9b06      	ldr	r3, [sp, #24]
 8015642:	2b02      	cmp	r3, #2
 8015644:	dc50      	bgt.n	80156e8 <_dtoa_r+0x830>
 8015646:	e088      	b.n	801575a <_dtoa_r+0x8a2>
 8015648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801564a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801564e:	e751      	b.n	80154f4 <_dtoa_r+0x63c>
 8015650:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8015654:	42a3      	cmp	r3, r4
 8015656:	bfbf      	itttt	lt
 8015658:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801565a:	1ae3      	sublt	r3, r4, r3
 801565c:	18d2      	addlt	r2, r2, r3
 801565e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8015660:	bfb6      	itet	lt
 8015662:	4623      	movlt	r3, r4
 8015664:	1b1c      	subge	r4, r3, r4
 8015666:	2400      	movlt	r4, #0
 8015668:	f1b9 0f00 	cmp.w	r9, #0
 801566c:	bfb5      	itete	lt
 801566e:	9a04      	ldrlt	r2, [sp, #16]
 8015670:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8015674:	eba2 0809 	sublt.w	r8, r2, r9
 8015678:	464a      	movge	r2, r9
 801567a:	bfb8      	it	lt
 801567c:	2200      	movlt	r2, #0
 801567e:	e73c      	b.n	80154fa <_dtoa_r+0x642>
 8015680:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015684:	9f07      	ldr	r7, [sp, #28]
 8015686:	461c      	mov	r4, r3
 8015688:	e744      	b.n	8015514 <_dtoa_r+0x65c>
 801568a:	461a      	mov	r2, r3
 801568c:	e770      	b.n	8015570 <_dtoa_r+0x6b8>
 801568e:	9b06      	ldr	r3, [sp, #24]
 8015690:	2b01      	cmp	r3, #1
 8015692:	dc18      	bgt.n	80156c6 <_dtoa_r+0x80e>
 8015694:	9b02      	ldr	r3, [sp, #8]
 8015696:	b9b3      	cbnz	r3, 80156c6 <_dtoa_r+0x80e>
 8015698:	9b03      	ldr	r3, [sp, #12]
 801569a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801569e:	b9a2      	cbnz	r2, 80156ca <_dtoa_r+0x812>
 80156a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80156a4:	0d12      	lsrs	r2, r2, #20
 80156a6:	0512      	lsls	r2, r2, #20
 80156a8:	b18a      	cbz	r2, 80156ce <_dtoa_r+0x816>
 80156aa:	9b04      	ldr	r3, [sp, #16]
 80156ac:	3301      	adds	r3, #1
 80156ae:	9304      	str	r3, [sp, #16]
 80156b0:	9b05      	ldr	r3, [sp, #20]
 80156b2:	3301      	adds	r3, #1
 80156b4:	9305      	str	r3, [sp, #20]
 80156b6:	2301      	movs	r3, #1
 80156b8:	930a      	str	r3, [sp, #40]	; 0x28
 80156ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156bc:	2b00      	cmp	r3, #0
 80156be:	f47f af70 	bne.w	80155a2 <_dtoa_r+0x6ea>
 80156c2:	2001      	movs	r0, #1
 80156c4:	e775      	b.n	80155b2 <_dtoa_r+0x6fa>
 80156c6:	2300      	movs	r3, #0
 80156c8:	e7f6      	b.n	80156b8 <_dtoa_r+0x800>
 80156ca:	9b02      	ldr	r3, [sp, #8]
 80156cc:	e7f4      	b.n	80156b8 <_dtoa_r+0x800>
 80156ce:	920a      	str	r2, [sp, #40]	; 0x28
 80156d0:	e7f3      	b.n	80156ba <_dtoa_r+0x802>
 80156d2:	d082      	beq.n	80155da <_dtoa_r+0x722>
 80156d4:	4610      	mov	r0, r2
 80156d6:	301c      	adds	r0, #28
 80156d8:	e778      	b.n	80155cc <_dtoa_r+0x714>
 80156da:	f1b9 0f00 	cmp.w	r9, #0
 80156de:	dc37      	bgt.n	8015750 <_dtoa_r+0x898>
 80156e0:	9b06      	ldr	r3, [sp, #24]
 80156e2:	2b02      	cmp	r3, #2
 80156e4:	dd34      	ble.n	8015750 <_dtoa_r+0x898>
 80156e6:	46ca      	mov	sl, r9
 80156e8:	f1ba 0f00 	cmp.w	sl, #0
 80156ec:	d10d      	bne.n	801570a <_dtoa_r+0x852>
 80156ee:	4621      	mov	r1, r4
 80156f0:	4653      	mov	r3, sl
 80156f2:	2205      	movs	r2, #5
 80156f4:	4630      	mov	r0, r6
 80156f6:	f000 ff7b 	bl	80165f0 <__multadd>
 80156fa:	4601      	mov	r1, r0
 80156fc:	4604      	mov	r4, r0
 80156fe:	4628      	mov	r0, r5
 8015700:	f001 f9e0 	bl	8016ac4 <__mcmp>
 8015704:	2800      	cmp	r0, #0
 8015706:	f73f adeb 	bgt.w	80152e0 <_dtoa_r+0x428>
 801570a:	9b08      	ldr	r3, [sp, #32]
 801570c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015710:	ea6f 0b03 	mvn.w	fp, r3
 8015714:	f04f 0900 	mov.w	r9, #0
 8015718:	4621      	mov	r1, r4
 801571a:	4630      	mov	r0, r6
 801571c:	f000 ff46 	bl	80165ac <_Bfree>
 8015720:	2f00      	cmp	r7, #0
 8015722:	f43f aea8 	beq.w	8015476 <_dtoa_r+0x5be>
 8015726:	f1b9 0f00 	cmp.w	r9, #0
 801572a:	d005      	beq.n	8015738 <_dtoa_r+0x880>
 801572c:	45b9      	cmp	r9, r7
 801572e:	d003      	beq.n	8015738 <_dtoa_r+0x880>
 8015730:	4649      	mov	r1, r9
 8015732:	4630      	mov	r0, r6
 8015734:	f000 ff3a 	bl	80165ac <_Bfree>
 8015738:	4639      	mov	r1, r7
 801573a:	4630      	mov	r0, r6
 801573c:	f000 ff36 	bl	80165ac <_Bfree>
 8015740:	e699      	b.n	8015476 <_dtoa_r+0x5be>
 8015742:	2400      	movs	r4, #0
 8015744:	4627      	mov	r7, r4
 8015746:	e7e0      	b.n	801570a <_dtoa_r+0x852>
 8015748:	46bb      	mov	fp, r7
 801574a:	4604      	mov	r4, r0
 801574c:	4607      	mov	r7, r0
 801574e:	e5c7      	b.n	80152e0 <_dtoa_r+0x428>
 8015750:	9b07      	ldr	r3, [sp, #28]
 8015752:	46ca      	mov	sl, r9
 8015754:	2b00      	cmp	r3, #0
 8015756:	f000 8100 	beq.w	801595a <_dtoa_r+0xaa2>
 801575a:	f1b8 0f00 	cmp.w	r8, #0
 801575e:	dd05      	ble.n	801576c <_dtoa_r+0x8b4>
 8015760:	4639      	mov	r1, r7
 8015762:	4642      	mov	r2, r8
 8015764:	4630      	mov	r0, r6
 8015766:	f001 f93d 	bl	80169e4 <__lshift>
 801576a:	4607      	mov	r7, r0
 801576c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801576e:	2b00      	cmp	r3, #0
 8015770:	d05d      	beq.n	801582e <_dtoa_r+0x976>
 8015772:	6879      	ldr	r1, [r7, #4]
 8015774:	4630      	mov	r0, r6
 8015776:	f000 fed9 	bl	801652c <_Balloc>
 801577a:	4680      	mov	r8, r0
 801577c:	b928      	cbnz	r0, 801578a <_dtoa_r+0x8d2>
 801577e:	4b82      	ldr	r3, [pc, #520]	; (8015988 <_dtoa_r+0xad0>)
 8015780:	4602      	mov	r2, r0
 8015782:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015786:	f7ff bbaf 	b.w	8014ee8 <_dtoa_r+0x30>
 801578a:	693a      	ldr	r2, [r7, #16]
 801578c:	3202      	adds	r2, #2
 801578e:	0092      	lsls	r2, r2, #2
 8015790:	f107 010c 	add.w	r1, r7, #12
 8015794:	300c      	adds	r0, #12
 8015796:	f7fd fa77 	bl	8012c88 <memcpy>
 801579a:	2201      	movs	r2, #1
 801579c:	4641      	mov	r1, r8
 801579e:	4630      	mov	r0, r6
 80157a0:	f001 f920 	bl	80169e4 <__lshift>
 80157a4:	9b01      	ldr	r3, [sp, #4]
 80157a6:	3301      	adds	r3, #1
 80157a8:	9304      	str	r3, [sp, #16]
 80157aa:	9b01      	ldr	r3, [sp, #4]
 80157ac:	4453      	add	r3, sl
 80157ae:	9308      	str	r3, [sp, #32]
 80157b0:	9b02      	ldr	r3, [sp, #8]
 80157b2:	f003 0301 	and.w	r3, r3, #1
 80157b6:	46b9      	mov	r9, r7
 80157b8:	9307      	str	r3, [sp, #28]
 80157ba:	4607      	mov	r7, r0
 80157bc:	9b04      	ldr	r3, [sp, #16]
 80157be:	4621      	mov	r1, r4
 80157c0:	3b01      	subs	r3, #1
 80157c2:	4628      	mov	r0, r5
 80157c4:	9302      	str	r3, [sp, #8]
 80157c6:	f7ff faeb 	bl	8014da0 <quorem>
 80157ca:	4603      	mov	r3, r0
 80157cc:	3330      	adds	r3, #48	; 0x30
 80157ce:	9005      	str	r0, [sp, #20]
 80157d0:	4649      	mov	r1, r9
 80157d2:	4628      	mov	r0, r5
 80157d4:	9309      	str	r3, [sp, #36]	; 0x24
 80157d6:	f001 f975 	bl	8016ac4 <__mcmp>
 80157da:	463a      	mov	r2, r7
 80157dc:	4682      	mov	sl, r0
 80157de:	4621      	mov	r1, r4
 80157e0:	4630      	mov	r0, r6
 80157e2:	f001 f98b 	bl	8016afc <__mdiff>
 80157e6:	68c2      	ldr	r2, [r0, #12]
 80157e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157ea:	4680      	mov	r8, r0
 80157ec:	bb0a      	cbnz	r2, 8015832 <_dtoa_r+0x97a>
 80157ee:	4601      	mov	r1, r0
 80157f0:	4628      	mov	r0, r5
 80157f2:	f001 f967 	bl	8016ac4 <__mcmp>
 80157f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157f8:	4602      	mov	r2, r0
 80157fa:	4641      	mov	r1, r8
 80157fc:	4630      	mov	r0, r6
 80157fe:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8015802:	f000 fed3 	bl	80165ac <_Bfree>
 8015806:	9b06      	ldr	r3, [sp, #24]
 8015808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801580a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801580e:	ea43 0102 	orr.w	r1, r3, r2
 8015812:	9b07      	ldr	r3, [sp, #28]
 8015814:	430b      	orrs	r3, r1
 8015816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015818:	d10d      	bne.n	8015836 <_dtoa_r+0x97e>
 801581a:	2b39      	cmp	r3, #57	; 0x39
 801581c:	d029      	beq.n	8015872 <_dtoa_r+0x9ba>
 801581e:	f1ba 0f00 	cmp.w	sl, #0
 8015822:	dd01      	ble.n	8015828 <_dtoa_r+0x970>
 8015824:	9b05      	ldr	r3, [sp, #20]
 8015826:	3331      	adds	r3, #49	; 0x31
 8015828:	9a02      	ldr	r2, [sp, #8]
 801582a:	7013      	strb	r3, [r2, #0]
 801582c:	e774      	b.n	8015718 <_dtoa_r+0x860>
 801582e:	4638      	mov	r0, r7
 8015830:	e7b8      	b.n	80157a4 <_dtoa_r+0x8ec>
 8015832:	2201      	movs	r2, #1
 8015834:	e7e1      	b.n	80157fa <_dtoa_r+0x942>
 8015836:	f1ba 0f00 	cmp.w	sl, #0
 801583a:	db06      	blt.n	801584a <_dtoa_r+0x992>
 801583c:	9906      	ldr	r1, [sp, #24]
 801583e:	ea41 0a0a 	orr.w	sl, r1, sl
 8015842:	9907      	ldr	r1, [sp, #28]
 8015844:	ea5a 0101 	orrs.w	r1, sl, r1
 8015848:	d120      	bne.n	801588c <_dtoa_r+0x9d4>
 801584a:	2a00      	cmp	r2, #0
 801584c:	ddec      	ble.n	8015828 <_dtoa_r+0x970>
 801584e:	4629      	mov	r1, r5
 8015850:	2201      	movs	r2, #1
 8015852:	4630      	mov	r0, r6
 8015854:	9304      	str	r3, [sp, #16]
 8015856:	f001 f8c5 	bl	80169e4 <__lshift>
 801585a:	4621      	mov	r1, r4
 801585c:	4605      	mov	r5, r0
 801585e:	f001 f931 	bl	8016ac4 <__mcmp>
 8015862:	2800      	cmp	r0, #0
 8015864:	9b04      	ldr	r3, [sp, #16]
 8015866:	dc02      	bgt.n	801586e <_dtoa_r+0x9b6>
 8015868:	d1de      	bne.n	8015828 <_dtoa_r+0x970>
 801586a:	07da      	lsls	r2, r3, #31
 801586c:	d5dc      	bpl.n	8015828 <_dtoa_r+0x970>
 801586e:	2b39      	cmp	r3, #57	; 0x39
 8015870:	d1d8      	bne.n	8015824 <_dtoa_r+0x96c>
 8015872:	9a02      	ldr	r2, [sp, #8]
 8015874:	2339      	movs	r3, #57	; 0x39
 8015876:	7013      	strb	r3, [r2, #0]
 8015878:	4643      	mov	r3, r8
 801587a:	4698      	mov	r8, r3
 801587c:	3b01      	subs	r3, #1
 801587e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8015882:	2a39      	cmp	r2, #57	; 0x39
 8015884:	d051      	beq.n	801592a <_dtoa_r+0xa72>
 8015886:	3201      	adds	r2, #1
 8015888:	701a      	strb	r2, [r3, #0]
 801588a:	e745      	b.n	8015718 <_dtoa_r+0x860>
 801588c:	2a00      	cmp	r2, #0
 801588e:	dd03      	ble.n	8015898 <_dtoa_r+0x9e0>
 8015890:	2b39      	cmp	r3, #57	; 0x39
 8015892:	d0ee      	beq.n	8015872 <_dtoa_r+0x9ba>
 8015894:	3301      	adds	r3, #1
 8015896:	e7c7      	b.n	8015828 <_dtoa_r+0x970>
 8015898:	9a04      	ldr	r2, [sp, #16]
 801589a:	9908      	ldr	r1, [sp, #32]
 801589c:	f802 3c01 	strb.w	r3, [r2, #-1]
 80158a0:	428a      	cmp	r2, r1
 80158a2:	d02b      	beq.n	80158fc <_dtoa_r+0xa44>
 80158a4:	4629      	mov	r1, r5
 80158a6:	2300      	movs	r3, #0
 80158a8:	220a      	movs	r2, #10
 80158aa:	4630      	mov	r0, r6
 80158ac:	f000 fea0 	bl	80165f0 <__multadd>
 80158b0:	45b9      	cmp	r9, r7
 80158b2:	4605      	mov	r5, r0
 80158b4:	f04f 0300 	mov.w	r3, #0
 80158b8:	f04f 020a 	mov.w	r2, #10
 80158bc:	4649      	mov	r1, r9
 80158be:	4630      	mov	r0, r6
 80158c0:	d107      	bne.n	80158d2 <_dtoa_r+0xa1a>
 80158c2:	f000 fe95 	bl	80165f0 <__multadd>
 80158c6:	4681      	mov	r9, r0
 80158c8:	4607      	mov	r7, r0
 80158ca:	9b04      	ldr	r3, [sp, #16]
 80158cc:	3301      	adds	r3, #1
 80158ce:	9304      	str	r3, [sp, #16]
 80158d0:	e774      	b.n	80157bc <_dtoa_r+0x904>
 80158d2:	f000 fe8d 	bl	80165f0 <__multadd>
 80158d6:	4639      	mov	r1, r7
 80158d8:	4681      	mov	r9, r0
 80158da:	2300      	movs	r3, #0
 80158dc:	220a      	movs	r2, #10
 80158de:	4630      	mov	r0, r6
 80158e0:	f000 fe86 	bl	80165f0 <__multadd>
 80158e4:	4607      	mov	r7, r0
 80158e6:	e7f0      	b.n	80158ca <_dtoa_r+0xa12>
 80158e8:	f1ba 0f00 	cmp.w	sl, #0
 80158ec:	9a01      	ldr	r2, [sp, #4]
 80158ee:	bfcc      	ite	gt
 80158f0:	46d0      	movgt	r8, sl
 80158f2:	f04f 0801 	movle.w	r8, #1
 80158f6:	4490      	add	r8, r2
 80158f8:	f04f 0900 	mov.w	r9, #0
 80158fc:	4629      	mov	r1, r5
 80158fe:	2201      	movs	r2, #1
 8015900:	4630      	mov	r0, r6
 8015902:	9302      	str	r3, [sp, #8]
 8015904:	f001 f86e 	bl	80169e4 <__lshift>
 8015908:	4621      	mov	r1, r4
 801590a:	4605      	mov	r5, r0
 801590c:	f001 f8da 	bl	8016ac4 <__mcmp>
 8015910:	2800      	cmp	r0, #0
 8015912:	dcb1      	bgt.n	8015878 <_dtoa_r+0x9c0>
 8015914:	d102      	bne.n	801591c <_dtoa_r+0xa64>
 8015916:	9b02      	ldr	r3, [sp, #8]
 8015918:	07db      	lsls	r3, r3, #31
 801591a:	d4ad      	bmi.n	8015878 <_dtoa_r+0x9c0>
 801591c:	4643      	mov	r3, r8
 801591e:	4698      	mov	r8, r3
 8015920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015924:	2a30      	cmp	r2, #48	; 0x30
 8015926:	d0fa      	beq.n	801591e <_dtoa_r+0xa66>
 8015928:	e6f6      	b.n	8015718 <_dtoa_r+0x860>
 801592a:	9a01      	ldr	r2, [sp, #4]
 801592c:	429a      	cmp	r2, r3
 801592e:	d1a4      	bne.n	801587a <_dtoa_r+0x9c2>
 8015930:	f10b 0b01 	add.w	fp, fp, #1
 8015934:	2331      	movs	r3, #49	; 0x31
 8015936:	e778      	b.n	801582a <_dtoa_r+0x972>
 8015938:	4b14      	ldr	r3, [pc, #80]	; (801598c <_dtoa_r+0xad4>)
 801593a:	f7ff bb27 	b.w	8014f8c <_dtoa_r+0xd4>
 801593e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015940:	2b00      	cmp	r3, #0
 8015942:	f47f ab03 	bne.w	8014f4c <_dtoa_r+0x94>
 8015946:	4b12      	ldr	r3, [pc, #72]	; (8015990 <_dtoa_r+0xad8>)
 8015948:	f7ff bb20 	b.w	8014f8c <_dtoa_r+0xd4>
 801594c:	f1ba 0f00 	cmp.w	sl, #0
 8015950:	dc03      	bgt.n	801595a <_dtoa_r+0xaa2>
 8015952:	9b06      	ldr	r3, [sp, #24]
 8015954:	2b02      	cmp	r3, #2
 8015956:	f73f aec7 	bgt.w	80156e8 <_dtoa_r+0x830>
 801595a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801595e:	4621      	mov	r1, r4
 8015960:	4628      	mov	r0, r5
 8015962:	f7ff fa1d 	bl	8014da0 <quorem>
 8015966:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801596a:	f808 3b01 	strb.w	r3, [r8], #1
 801596e:	9a01      	ldr	r2, [sp, #4]
 8015970:	eba8 0202 	sub.w	r2, r8, r2
 8015974:	4592      	cmp	sl, r2
 8015976:	ddb7      	ble.n	80158e8 <_dtoa_r+0xa30>
 8015978:	4629      	mov	r1, r5
 801597a:	2300      	movs	r3, #0
 801597c:	220a      	movs	r2, #10
 801597e:	4630      	mov	r0, r6
 8015980:	f000 fe36 	bl	80165f0 <__multadd>
 8015984:	4605      	mov	r5, r0
 8015986:	e7ea      	b.n	801595e <_dtoa_r+0xaa6>
 8015988:	080187e4 	.word	0x080187e4
 801598c:	08018654 	.word	0x08018654
 8015990:	0801877c 	.word	0x0801877c

08015994 <__env_lock>:
 8015994:	4801      	ldr	r0, [pc, #4]	; (801599c <__env_lock+0x8>)
 8015996:	f7fd b964 	b.w	8012c62 <__retarget_lock_acquire_recursive>
 801599a:	bf00      	nop
 801599c:	2000eaf0 	.word	0x2000eaf0

080159a0 <__env_unlock>:
 80159a0:	4801      	ldr	r0, [pc, #4]	; (80159a8 <__env_unlock+0x8>)
 80159a2:	f7fd b95f 	b.w	8012c64 <__retarget_lock_release_recursive>
 80159a6:	bf00      	nop
 80159a8:	2000eaf0 	.word	0x2000eaf0

080159ac <__sflush_r>:
 80159ac:	898a      	ldrh	r2, [r1, #12]
 80159ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159b2:	4605      	mov	r5, r0
 80159b4:	0710      	lsls	r0, r2, #28
 80159b6:	460c      	mov	r4, r1
 80159b8:	d458      	bmi.n	8015a6c <__sflush_r+0xc0>
 80159ba:	684b      	ldr	r3, [r1, #4]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	dc05      	bgt.n	80159cc <__sflush_r+0x20>
 80159c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	dc02      	bgt.n	80159cc <__sflush_r+0x20>
 80159c6:	2000      	movs	r0, #0
 80159c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159ce:	2e00      	cmp	r6, #0
 80159d0:	d0f9      	beq.n	80159c6 <__sflush_r+0x1a>
 80159d2:	2300      	movs	r3, #0
 80159d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80159d8:	682f      	ldr	r7, [r5, #0]
 80159da:	602b      	str	r3, [r5, #0]
 80159dc:	d032      	beq.n	8015a44 <__sflush_r+0x98>
 80159de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80159e0:	89a3      	ldrh	r3, [r4, #12]
 80159e2:	075a      	lsls	r2, r3, #29
 80159e4:	d505      	bpl.n	80159f2 <__sflush_r+0x46>
 80159e6:	6863      	ldr	r3, [r4, #4]
 80159e8:	1ac0      	subs	r0, r0, r3
 80159ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80159ec:	b10b      	cbz	r3, 80159f2 <__sflush_r+0x46>
 80159ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80159f0:	1ac0      	subs	r0, r0, r3
 80159f2:	2300      	movs	r3, #0
 80159f4:	4602      	mov	r2, r0
 80159f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159f8:	6a21      	ldr	r1, [r4, #32]
 80159fa:	4628      	mov	r0, r5
 80159fc:	47b0      	blx	r6
 80159fe:	1c43      	adds	r3, r0, #1
 8015a00:	89a3      	ldrh	r3, [r4, #12]
 8015a02:	d106      	bne.n	8015a12 <__sflush_r+0x66>
 8015a04:	6829      	ldr	r1, [r5, #0]
 8015a06:	291d      	cmp	r1, #29
 8015a08:	d82c      	bhi.n	8015a64 <__sflush_r+0xb8>
 8015a0a:	4a2a      	ldr	r2, [pc, #168]	; (8015ab4 <__sflush_r+0x108>)
 8015a0c:	40ca      	lsrs	r2, r1
 8015a0e:	07d6      	lsls	r6, r2, #31
 8015a10:	d528      	bpl.n	8015a64 <__sflush_r+0xb8>
 8015a12:	2200      	movs	r2, #0
 8015a14:	6062      	str	r2, [r4, #4]
 8015a16:	04d9      	lsls	r1, r3, #19
 8015a18:	6922      	ldr	r2, [r4, #16]
 8015a1a:	6022      	str	r2, [r4, #0]
 8015a1c:	d504      	bpl.n	8015a28 <__sflush_r+0x7c>
 8015a1e:	1c42      	adds	r2, r0, #1
 8015a20:	d101      	bne.n	8015a26 <__sflush_r+0x7a>
 8015a22:	682b      	ldr	r3, [r5, #0]
 8015a24:	b903      	cbnz	r3, 8015a28 <__sflush_r+0x7c>
 8015a26:	6560      	str	r0, [r4, #84]	; 0x54
 8015a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a2a:	602f      	str	r7, [r5, #0]
 8015a2c:	2900      	cmp	r1, #0
 8015a2e:	d0ca      	beq.n	80159c6 <__sflush_r+0x1a>
 8015a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a34:	4299      	cmp	r1, r3
 8015a36:	d002      	beq.n	8015a3e <__sflush_r+0x92>
 8015a38:	4628      	mov	r0, r5
 8015a3a:	f7fd f951 	bl	8012ce0 <_free_r>
 8015a3e:	2000      	movs	r0, #0
 8015a40:	6360      	str	r0, [r4, #52]	; 0x34
 8015a42:	e7c1      	b.n	80159c8 <__sflush_r+0x1c>
 8015a44:	6a21      	ldr	r1, [r4, #32]
 8015a46:	2301      	movs	r3, #1
 8015a48:	4628      	mov	r0, r5
 8015a4a:	47b0      	blx	r6
 8015a4c:	1c41      	adds	r1, r0, #1
 8015a4e:	d1c7      	bne.n	80159e0 <__sflush_r+0x34>
 8015a50:	682b      	ldr	r3, [r5, #0]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d0c4      	beq.n	80159e0 <__sflush_r+0x34>
 8015a56:	2b1d      	cmp	r3, #29
 8015a58:	d001      	beq.n	8015a5e <__sflush_r+0xb2>
 8015a5a:	2b16      	cmp	r3, #22
 8015a5c:	d101      	bne.n	8015a62 <__sflush_r+0xb6>
 8015a5e:	602f      	str	r7, [r5, #0]
 8015a60:	e7b1      	b.n	80159c6 <__sflush_r+0x1a>
 8015a62:	89a3      	ldrh	r3, [r4, #12]
 8015a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a68:	81a3      	strh	r3, [r4, #12]
 8015a6a:	e7ad      	b.n	80159c8 <__sflush_r+0x1c>
 8015a6c:	690f      	ldr	r7, [r1, #16]
 8015a6e:	2f00      	cmp	r7, #0
 8015a70:	d0a9      	beq.n	80159c6 <__sflush_r+0x1a>
 8015a72:	0793      	lsls	r3, r2, #30
 8015a74:	680e      	ldr	r6, [r1, #0]
 8015a76:	bf08      	it	eq
 8015a78:	694b      	ldreq	r3, [r1, #20]
 8015a7a:	600f      	str	r7, [r1, #0]
 8015a7c:	bf18      	it	ne
 8015a7e:	2300      	movne	r3, #0
 8015a80:	eba6 0807 	sub.w	r8, r6, r7
 8015a84:	608b      	str	r3, [r1, #8]
 8015a86:	f1b8 0f00 	cmp.w	r8, #0
 8015a8a:	dd9c      	ble.n	80159c6 <__sflush_r+0x1a>
 8015a8c:	6a21      	ldr	r1, [r4, #32]
 8015a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015a90:	4643      	mov	r3, r8
 8015a92:	463a      	mov	r2, r7
 8015a94:	4628      	mov	r0, r5
 8015a96:	47b0      	blx	r6
 8015a98:	2800      	cmp	r0, #0
 8015a9a:	dc06      	bgt.n	8015aaa <__sflush_r+0xfe>
 8015a9c:	89a3      	ldrh	r3, [r4, #12]
 8015a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015aa2:	81a3      	strh	r3, [r4, #12]
 8015aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015aa8:	e78e      	b.n	80159c8 <__sflush_r+0x1c>
 8015aaa:	4407      	add	r7, r0
 8015aac:	eba8 0800 	sub.w	r8, r8, r0
 8015ab0:	e7e9      	b.n	8015a86 <__sflush_r+0xda>
 8015ab2:	bf00      	nop
 8015ab4:	20400001 	.word	0x20400001

08015ab8 <_fflush_r>:
 8015ab8:	b538      	push	{r3, r4, r5, lr}
 8015aba:	690b      	ldr	r3, [r1, #16]
 8015abc:	4605      	mov	r5, r0
 8015abe:	460c      	mov	r4, r1
 8015ac0:	b913      	cbnz	r3, 8015ac8 <_fflush_r+0x10>
 8015ac2:	2500      	movs	r5, #0
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	bd38      	pop	{r3, r4, r5, pc}
 8015ac8:	b118      	cbz	r0, 8015ad2 <_fflush_r+0x1a>
 8015aca:	6983      	ldr	r3, [r0, #24]
 8015acc:	b90b      	cbnz	r3, 8015ad2 <_fflush_r+0x1a>
 8015ace:	f000 f887 	bl	8015be0 <__sinit>
 8015ad2:	4b14      	ldr	r3, [pc, #80]	; (8015b24 <_fflush_r+0x6c>)
 8015ad4:	429c      	cmp	r4, r3
 8015ad6:	d11b      	bne.n	8015b10 <_fflush_r+0x58>
 8015ad8:	686c      	ldr	r4, [r5, #4]
 8015ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d0ef      	beq.n	8015ac2 <_fflush_r+0xa>
 8015ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015ae4:	07d0      	lsls	r0, r2, #31
 8015ae6:	d404      	bmi.n	8015af2 <_fflush_r+0x3a>
 8015ae8:	0599      	lsls	r1, r3, #22
 8015aea:	d402      	bmi.n	8015af2 <_fflush_r+0x3a>
 8015aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015aee:	f7fd f8b8 	bl	8012c62 <__retarget_lock_acquire_recursive>
 8015af2:	4628      	mov	r0, r5
 8015af4:	4621      	mov	r1, r4
 8015af6:	f7ff ff59 	bl	80159ac <__sflush_r>
 8015afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015afc:	07da      	lsls	r2, r3, #31
 8015afe:	4605      	mov	r5, r0
 8015b00:	d4e0      	bmi.n	8015ac4 <_fflush_r+0xc>
 8015b02:	89a3      	ldrh	r3, [r4, #12]
 8015b04:	059b      	lsls	r3, r3, #22
 8015b06:	d4dd      	bmi.n	8015ac4 <_fflush_r+0xc>
 8015b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b0a:	f7fd f8ab 	bl	8012c64 <__retarget_lock_release_recursive>
 8015b0e:	e7d9      	b.n	8015ac4 <_fflush_r+0xc>
 8015b10:	4b05      	ldr	r3, [pc, #20]	; (8015b28 <_fflush_r+0x70>)
 8015b12:	429c      	cmp	r4, r3
 8015b14:	d101      	bne.n	8015b1a <_fflush_r+0x62>
 8015b16:	68ac      	ldr	r4, [r5, #8]
 8015b18:	e7df      	b.n	8015ada <_fflush_r+0x22>
 8015b1a:	4b04      	ldr	r3, [pc, #16]	; (8015b2c <_fflush_r+0x74>)
 8015b1c:	429c      	cmp	r4, r3
 8015b1e:	bf08      	it	eq
 8015b20:	68ec      	ldreq	r4, [r5, #12]
 8015b22:	e7da      	b.n	8015ada <_fflush_r+0x22>
 8015b24:	08018818 	.word	0x08018818
 8015b28:	08018838 	.word	0x08018838
 8015b2c:	080187f8 	.word	0x080187f8

08015b30 <std>:
 8015b30:	2300      	movs	r3, #0
 8015b32:	b510      	push	{r4, lr}
 8015b34:	4604      	mov	r4, r0
 8015b36:	e9c0 3300 	strd	r3, r3, [r0]
 8015b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015b3e:	6083      	str	r3, [r0, #8]
 8015b40:	8181      	strh	r1, [r0, #12]
 8015b42:	6643      	str	r3, [r0, #100]	; 0x64
 8015b44:	81c2      	strh	r2, [r0, #14]
 8015b46:	6183      	str	r3, [r0, #24]
 8015b48:	4619      	mov	r1, r3
 8015b4a:	2208      	movs	r2, #8
 8015b4c:	305c      	adds	r0, #92	; 0x5c
 8015b4e:	f7fd f8a9 	bl	8012ca4 <memset>
 8015b52:	4b05      	ldr	r3, [pc, #20]	; (8015b68 <std+0x38>)
 8015b54:	6263      	str	r3, [r4, #36]	; 0x24
 8015b56:	4b05      	ldr	r3, [pc, #20]	; (8015b6c <std+0x3c>)
 8015b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8015b5a:	4b05      	ldr	r3, [pc, #20]	; (8015b70 <std+0x40>)
 8015b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015b5e:	4b05      	ldr	r3, [pc, #20]	; (8015b74 <std+0x44>)
 8015b60:	6224      	str	r4, [r4, #32]
 8015b62:	6323      	str	r3, [r4, #48]	; 0x30
 8015b64:	bd10      	pop	{r4, pc}
 8015b66:	bf00      	nop
 8015b68:	08017481 	.word	0x08017481
 8015b6c:	080174a3 	.word	0x080174a3
 8015b70:	080174db 	.word	0x080174db
 8015b74:	080174ff 	.word	0x080174ff

08015b78 <_cleanup_r>:
 8015b78:	4901      	ldr	r1, [pc, #4]	; (8015b80 <_cleanup_r+0x8>)
 8015b7a:	f000 b8c1 	b.w	8015d00 <_fwalk_reent>
 8015b7e:	bf00      	nop
 8015b80:	08015ab9 	.word	0x08015ab9

08015b84 <__sfmoreglue>:
 8015b84:	b570      	push	{r4, r5, r6, lr}
 8015b86:	2268      	movs	r2, #104	; 0x68
 8015b88:	1e4d      	subs	r5, r1, #1
 8015b8a:	4355      	muls	r5, r2
 8015b8c:	460e      	mov	r6, r1
 8015b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015b92:	f7fd f911 	bl	8012db8 <_malloc_r>
 8015b96:	4604      	mov	r4, r0
 8015b98:	b140      	cbz	r0, 8015bac <__sfmoreglue+0x28>
 8015b9a:	2100      	movs	r1, #0
 8015b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8015ba0:	300c      	adds	r0, #12
 8015ba2:	60a0      	str	r0, [r4, #8]
 8015ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015ba8:	f7fd f87c 	bl	8012ca4 <memset>
 8015bac:	4620      	mov	r0, r4
 8015bae:	bd70      	pop	{r4, r5, r6, pc}

08015bb0 <__sfp_lock_acquire>:
 8015bb0:	4801      	ldr	r0, [pc, #4]	; (8015bb8 <__sfp_lock_acquire+0x8>)
 8015bb2:	f7fd b856 	b.w	8012c62 <__retarget_lock_acquire_recursive>
 8015bb6:	bf00      	nop
 8015bb8:	2000eaf2 	.word	0x2000eaf2

08015bbc <__sfp_lock_release>:
 8015bbc:	4801      	ldr	r0, [pc, #4]	; (8015bc4 <__sfp_lock_release+0x8>)
 8015bbe:	f7fd b851 	b.w	8012c64 <__retarget_lock_release_recursive>
 8015bc2:	bf00      	nop
 8015bc4:	2000eaf2 	.word	0x2000eaf2

08015bc8 <__sinit_lock_acquire>:
 8015bc8:	4801      	ldr	r0, [pc, #4]	; (8015bd0 <__sinit_lock_acquire+0x8>)
 8015bca:	f7fd b84a 	b.w	8012c62 <__retarget_lock_acquire_recursive>
 8015bce:	bf00      	nop
 8015bd0:	2000eaf3 	.word	0x2000eaf3

08015bd4 <__sinit_lock_release>:
 8015bd4:	4801      	ldr	r0, [pc, #4]	; (8015bdc <__sinit_lock_release+0x8>)
 8015bd6:	f7fd b845 	b.w	8012c64 <__retarget_lock_release_recursive>
 8015bda:	bf00      	nop
 8015bdc:	2000eaf3 	.word	0x2000eaf3

08015be0 <__sinit>:
 8015be0:	b510      	push	{r4, lr}
 8015be2:	4604      	mov	r4, r0
 8015be4:	f7ff fff0 	bl	8015bc8 <__sinit_lock_acquire>
 8015be8:	69a3      	ldr	r3, [r4, #24]
 8015bea:	b11b      	cbz	r3, 8015bf4 <__sinit+0x14>
 8015bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015bf0:	f7ff bff0 	b.w	8015bd4 <__sinit_lock_release>
 8015bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8015bfa:	4b13      	ldr	r3, [pc, #76]	; (8015c48 <__sinit+0x68>)
 8015bfc:	4a13      	ldr	r2, [pc, #76]	; (8015c4c <__sinit+0x6c>)
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8015c02:	42a3      	cmp	r3, r4
 8015c04:	bf04      	itt	eq
 8015c06:	2301      	moveq	r3, #1
 8015c08:	61a3      	streq	r3, [r4, #24]
 8015c0a:	4620      	mov	r0, r4
 8015c0c:	f000 f820 	bl	8015c50 <__sfp>
 8015c10:	6060      	str	r0, [r4, #4]
 8015c12:	4620      	mov	r0, r4
 8015c14:	f000 f81c 	bl	8015c50 <__sfp>
 8015c18:	60a0      	str	r0, [r4, #8]
 8015c1a:	4620      	mov	r0, r4
 8015c1c:	f000 f818 	bl	8015c50 <__sfp>
 8015c20:	2200      	movs	r2, #0
 8015c22:	60e0      	str	r0, [r4, #12]
 8015c24:	2104      	movs	r1, #4
 8015c26:	6860      	ldr	r0, [r4, #4]
 8015c28:	f7ff ff82 	bl	8015b30 <std>
 8015c2c:	68a0      	ldr	r0, [r4, #8]
 8015c2e:	2201      	movs	r2, #1
 8015c30:	2109      	movs	r1, #9
 8015c32:	f7ff ff7d 	bl	8015b30 <std>
 8015c36:	68e0      	ldr	r0, [r4, #12]
 8015c38:	2202      	movs	r2, #2
 8015c3a:	2112      	movs	r1, #18
 8015c3c:	f7ff ff78 	bl	8015b30 <std>
 8015c40:	2301      	movs	r3, #1
 8015c42:	61a3      	str	r3, [r4, #24]
 8015c44:	e7d2      	b.n	8015bec <__sinit+0xc>
 8015c46:	bf00      	nop
 8015c48:	08018640 	.word	0x08018640
 8015c4c:	08015b79 	.word	0x08015b79

08015c50 <__sfp>:
 8015c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c52:	4607      	mov	r7, r0
 8015c54:	f7ff ffac 	bl	8015bb0 <__sfp_lock_acquire>
 8015c58:	4b1e      	ldr	r3, [pc, #120]	; (8015cd4 <__sfp+0x84>)
 8015c5a:	681e      	ldr	r6, [r3, #0]
 8015c5c:	69b3      	ldr	r3, [r6, #24]
 8015c5e:	b913      	cbnz	r3, 8015c66 <__sfp+0x16>
 8015c60:	4630      	mov	r0, r6
 8015c62:	f7ff ffbd 	bl	8015be0 <__sinit>
 8015c66:	3648      	adds	r6, #72	; 0x48
 8015c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015c6c:	3b01      	subs	r3, #1
 8015c6e:	d503      	bpl.n	8015c78 <__sfp+0x28>
 8015c70:	6833      	ldr	r3, [r6, #0]
 8015c72:	b30b      	cbz	r3, 8015cb8 <__sfp+0x68>
 8015c74:	6836      	ldr	r6, [r6, #0]
 8015c76:	e7f7      	b.n	8015c68 <__sfp+0x18>
 8015c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015c7c:	b9d5      	cbnz	r5, 8015cb4 <__sfp+0x64>
 8015c7e:	4b16      	ldr	r3, [pc, #88]	; (8015cd8 <__sfp+0x88>)
 8015c80:	60e3      	str	r3, [r4, #12]
 8015c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015c86:	6665      	str	r5, [r4, #100]	; 0x64
 8015c88:	f7fc ffea 	bl	8012c60 <__retarget_lock_init_recursive>
 8015c8c:	f7ff ff96 	bl	8015bbc <__sfp_lock_release>
 8015c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015c98:	6025      	str	r5, [r4, #0]
 8015c9a:	61a5      	str	r5, [r4, #24]
 8015c9c:	2208      	movs	r2, #8
 8015c9e:	4629      	mov	r1, r5
 8015ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015ca4:	f7fc fffe 	bl	8012ca4 <memset>
 8015ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015cb0:	4620      	mov	r0, r4
 8015cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cb4:	3468      	adds	r4, #104	; 0x68
 8015cb6:	e7d9      	b.n	8015c6c <__sfp+0x1c>
 8015cb8:	2104      	movs	r1, #4
 8015cba:	4638      	mov	r0, r7
 8015cbc:	f7ff ff62 	bl	8015b84 <__sfmoreglue>
 8015cc0:	4604      	mov	r4, r0
 8015cc2:	6030      	str	r0, [r6, #0]
 8015cc4:	2800      	cmp	r0, #0
 8015cc6:	d1d5      	bne.n	8015c74 <__sfp+0x24>
 8015cc8:	f7ff ff78 	bl	8015bbc <__sfp_lock_release>
 8015ccc:	230c      	movs	r3, #12
 8015cce:	603b      	str	r3, [r7, #0]
 8015cd0:	e7ee      	b.n	8015cb0 <__sfp+0x60>
 8015cd2:	bf00      	nop
 8015cd4:	08018640 	.word	0x08018640
 8015cd8:	ffff0001 	.word	0xffff0001

08015cdc <fiprintf>:
 8015cdc:	b40e      	push	{r1, r2, r3}
 8015cde:	b503      	push	{r0, r1, lr}
 8015ce0:	4601      	mov	r1, r0
 8015ce2:	ab03      	add	r3, sp, #12
 8015ce4:	4805      	ldr	r0, [pc, #20]	; (8015cfc <fiprintf+0x20>)
 8015ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8015cea:	6800      	ldr	r0, [r0, #0]
 8015cec:	9301      	str	r3, [sp, #4]
 8015cee:	f001 fa8f 	bl	8017210 <_vfiprintf_r>
 8015cf2:	b002      	add	sp, #8
 8015cf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015cf8:	b003      	add	sp, #12
 8015cfa:	4770      	bx	lr
 8015cfc:	20000de8 	.word	0x20000de8

08015d00 <_fwalk_reent>:
 8015d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d04:	4606      	mov	r6, r0
 8015d06:	4688      	mov	r8, r1
 8015d08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015d0c:	2700      	movs	r7, #0
 8015d0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015d12:	f1b9 0901 	subs.w	r9, r9, #1
 8015d16:	d505      	bpl.n	8015d24 <_fwalk_reent+0x24>
 8015d18:	6824      	ldr	r4, [r4, #0]
 8015d1a:	2c00      	cmp	r4, #0
 8015d1c:	d1f7      	bne.n	8015d0e <_fwalk_reent+0xe>
 8015d1e:	4638      	mov	r0, r7
 8015d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d24:	89ab      	ldrh	r3, [r5, #12]
 8015d26:	2b01      	cmp	r3, #1
 8015d28:	d907      	bls.n	8015d3a <_fwalk_reent+0x3a>
 8015d2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015d2e:	3301      	adds	r3, #1
 8015d30:	d003      	beq.n	8015d3a <_fwalk_reent+0x3a>
 8015d32:	4629      	mov	r1, r5
 8015d34:	4630      	mov	r0, r6
 8015d36:	47c0      	blx	r8
 8015d38:	4307      	orrs	r7, r0
 8015d3a:	3568      	adds	r5, #104	; 0x68
 8015d3c:	e7e9      	b.n	8015d12 <_fwalk_reent+0x12>

08015d3e <rshift>:
 8015d3e:	6903      	ldr	r3, [r0, #16]
 8015d40:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d48:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015d4c:	f100 0414 	add.w	r4, r0, #20
 8015d50:	dd45      	ble.n	8015dde <rshift+0xa0>
 8015d52:	f011 011f 	ands.w	r1, r1, #31
 8015d56:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015d5a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015d5e:	d10c      	bne.n	8015d7a <rshift+0x3c>
 8015d60:	f100 0710 	add.w	r7, r0, #16
 8015d64:	4629      	mov	r1, r5
 8015d66:	42b1      	cmp	r1, r6
 8015d68:	d334      	bcc.n	8015dd4 <rshift+0x96>
 8015d6a:	1a9b      	subs	r3, r3, r2
 8015d6c:	009b      	lsls	r3, r3, #2
 8015d6e:	1eea      	subs	r2, r5, #3
 8015d70:	4296      	cmp	r6, r2
 8015d72:	bf38      	it	cc
 8015d74:	2300      	movcc	r3, #0
 8015d76:	4423      	add	r3, r4
 8015d78:	e015      	b.n	8015da6 <rshift+0x68>
 8015d7a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015d7e:	f1c1 0820 	rsb	r8, r1, #32
 8015d82:	40cf      	lsrs	r7, r1
 8015d84:	f105 0e04 	add.w	lr, r5, #4
 8015d88:	46a1      	mov	r9, r4
 8015d8a:	4576      	cmp	r6, lr
 8015d8c:	46f4      	mov	ip, lr
 8015d8e:	d815      	bhi.n	8015dbc <rshift+0x7e>
 8015d90:	1a9a      	subs	r2, r3, r2
 8015d92:	0092      	lsls	r2, r2, #2
 8015d94:	3a04      	subs	r2, #4
 8015d96:	3501      	adds	r5, #1
 8015d98:	42ae      	cmp	r6, r5
 8015d9a:	bf38      	it	cc
 8015d9c:	2200      	movcc	r2, #0
 8015d9e:	18a3      	adds	r3, r4, r2
 8015da0:	50a7      	str	r7, [r4, r2]
 8015da2:	b107      	cbz	r7, 8015da6 <rshift+0x68>
 8015da4:	3304      	adds	r3, #4
 8015da6:	1b1a      	subs	r2, r3, r4
 8015da8:	42a3      	cmp	r3, r4
 8015daa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015dae:	bf08      	it	eq
 8015db0:	2300      	moveq	r3, #0
 8015db2:	6102      	str	r2, [r0, #16]
 8015db4:	bf08      	it	eq
 8015db6:	6143      	streq	r3, [r0, #20]
 8015db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015dbc:	f8dc c000 	ldr.w	ip, [ip]
 8015dc0:	fa0c fc08 	lsl.w	ip, ip, r8
 8015dc4:	ea4c 0707 	orr.w	r7, ip, r7
 8015dc8:	f849 7b04 	str.w	r7, [r9], #4
 8015dcc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015dd0:	40cf      	lsrs	r7, r1
 8015dd2:	e7da      	b.n	8015d8a <rshift+0x4c>
 8015dd4:	f851 cb04 	ldr.w	ip, [r1], #4
 8015dd8:	f847 cf04 	str.w	ip, [r7, #4]!
 8015ddc:	e7c3      	b.n	8015d66 <rshift+0x28>
 8015dde:	4623      	mov	r3, r4
 8015de0:	e7e1      	b.n	8015da6 <rshift+0x68>

08015de2 <__hexdig_fun>:
 8015de2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015de6:	2b09      	cmp	r3, #9
 8015de8:	d802      	bhi.n	8015df0 <__hexdig_fun+0xe>
 8015dea:	3820      	subs	r0, #32
 8015dec:	b2c0      	uxtb	r0, r0
 8015dee:	4770      	bx	lr
 8015df0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015df4:	2b05      	cmp	r3, #5
 8015df6:	d801      	bhi.n	8015dfc <__hexdig_fun+0x1a>
 8015df8:	3847      	subs	r0, #71	; 0x47
 8015dfa:	e7f7      	b.n	8015dec <__hexdig_fun+0xa>
 8015dfc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015e00:	2b05      	cmp	r3, #5
 8015e02:	d801      	bhi.n	8015e08 <__hexdig_fun+0x26>
 8015e04:	3827      	subs	r0, #39	; 0x27
 8015e06:	e7f1      	b.n	8015dec <__hexdig_fun+0xa>
 8015e08:	2000      	movs	r0, #0
 8015e0a:	4770      	bx	lr

08015e0c <__gethex>:
 8015e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e10:	ed2d 8b02 	vpush	{d8}
 8015e14:	b089      	sub	sp, #36	; 0x24
 8015e16:	ee08 0a10 	vmov	s16, r0
 8015e1a:	9304      	str	r3, [sp, #16]
 8015e1c:	4bb4      	ldr	r3, [pc, #720]	; (80160f0 <__gethex+0x2e4>)
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	9301      	str	r3, [sp, #4]
 8015e22:	4618      	mov	r0, r3
 8015e24:	468b      	mov	fp, r1
 8015e26:	4690      	mov	r8, r2
 8015e28:	f7ea fa64 	bl	80002f4 <strlen>
 8015e2c:	9b01      	ldr	r3, [sp, #4]
 8015e2e:	f8db 2000 	ldr.w	r2, [fp]
 8015e32:	4403      	add	r3, r0
 8015e34:	4682      	mov	sl, r0
 8015e36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015e3a:	9305      	str	r3, [sp, #20]
 8015e3c:	1c93      	adds	r3, r2, #2
 8015e3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015e42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015e46:	32fe      	adds	r2, #254	; 0xfe
 8015e48:	18d1      	adds	r1, r2, r3
 8015e4a:	461f      	mov	r7, r3
 8015e4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015e50:	9100      	str	r1, [sp, #0]
 8015e52:	2830      	cmp	r0, #48	; 0x30
 8015e54:	d0f8      	beq.n	8015e48 <__gethex+0x3c>
 8015e56:	f7ff ffc4 	bl	8015de2 <__hexdig_fun>
 8015e5a:	4604      	mov	r4, r0
 8015e5c:	2800      	cmp	r0, #0
 8015e5e:	d13a      	bne.n	8015ed6 <__gethex+0xca>
 8015e60:	9901      	ldr	r1, [sp, #4]
 8015e62:	4652      	mov	r2, sl
 8015e64:	4638      	mov	r0, r7
 8015e66:	f7fd ff6e 	bl	8013d46 <strncmp>
 8015e6a:	4605      	mov	r5, r0
 8015e6c:	2800      	cmp	r0, #0
 8015e6e:	d168      	bne.n	8015f42 <__gethex+0x136>
 8015e70:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015e74:	eb07 060a 	add.w	r6, r7, sl
 8015e78:	f7ff ffb3 	bl	8015de2 <__hexdig_fun>
 8015e7c:	2800      	cmp	r0, #0
 8015e7e:	d062      	beq.n	8015f46 <__gethex+0x13a>
 8015e80:	4633      	mov	r3, r6
 8015e82:	7818      	ldrb	r0, [r3, #0]
 8015e84:	2830      	cmp	r0, #48	; 0x30
 8015e86:	461f      	mov	r7, r3
 8015e88:	f103 0301 	add.w	r3, r3, #1
 8015e8c:	d0f9      	beq.n	8015e82 <__gethex+0x76>
 8015e8e:	f7ff ffa8 	bl	8015de2 <__hexdig_fun>
 8015e92:	2301      	movs	r3, #1
 8015e94:	fab0 f480 	clz	r4, r0
 8015e98:	0964      	lsrs	r4, r4, #5
 8015e9a:	4635      	mov	r5, r6
 8015e9c:	9300      	str	r3, [sp, #0]
 8015e9e:	463a      	mov	r2, r7
 8015ea0:	4616      	mov	r6, r2
 8015ea2:	3201      	adds	r2, #1
 8015ea4:	7830      	ldrb	r0, [r6, #0]
 8015ea6:	f7ff ff9c 	bl	8015de2 <__hexdig_fun>
 8015eaa:	2800      	cmp	r0, #0
 8015eac:	d1f8      	bne.n	8015ea0 <__gethex+0x94>
 8015eae:	9901      	ldr	r1, [sp, #4]
 8015eb0:	4652      	mov	r2, sl
 8015eb2:	4630      	mov	r0, r6
 8015eb4:	f7fd ff47 	bl	8013d46 <strncmp>
 8015eb8:	b980      	cbnz	r0, 8015edc <__gethex+0xd0>
 8015eba:	b94d      	cbnz	r5, 8015ed0 <__gethex+0xc4>
 8015ebc:	eb06 050a 	add.w	r5, r6, sl
 8015ec0:	462a      	mov	r2, r5
 8015ec2:	4616      	mov	r6, r2
 8015ec4:	3201      	adds	r2, #1
 8015ec6:	7830      	ldrb	r0, [r6, #0]
 8015ec8:	f7ff ff8b 	bl	8015de2 <__hexdig_fun>
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	d1f8      	bne.n	8015ec2 <__gethex+0xb6>
 8015ed0:	1bad      	subs	r5, r5, r6
 8015ed2:	00ad      	lsls	r5, r5, #2
 8015ed4:	e004      	b.n	8015ee0 <__gethex+0xd4>
 8015ed6:	2400      	movs	r4, #0
 8015ed8:	4625      	mov	r5, r4
 8015eda:	e7e0      	b.n	8015e9e <__gethex+0x92>
 8015edc:	2d00      	cmp	r5, #0
 8015ede:	d1f7      	bne.n	8015ed0 <__gethex+0xc4>
 8015ee0:	7833      	ldrb	r3, [r6, #0]
 8015ee2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015ee6:	2b50      	cmp	r3, #80	; 0x50
 8015ee8:	d13b      	bne.n	8015f62 <__gethex+0x156>
 8015eea:	7873      	ldrb	r3, [r6, #1]
 8015eec:	2b2b      	cmp	r3, #43	; 0x2b
 8015eee:	d02c      	beq.n	8015f4a <__gethex+0x13e>
 8015ef0:	2b2d      	cmp	r3, #45	; 0x2d
 8015ef2:	d02e      	beq.n	8015f52 <__gethex+0x146>
 8015ef4:	1c71      	adds	r1, r6, #1
 8015ef6:	f04f 0900 	mov.w	r9, #0
 8015efa:	7808      	ldrb	r0, [r1, #0]
 8015efc:	f7ff ff71 	bl	8015de2 <__hexdig_fun>
 8015f00:	1e43      	subs	r3, r0, #1
 8015f02:	b2db      	uxtb	r3, r3
 8015f04:	2b18      	cmp	r3, #24
 8015f06:	d82c      	bhi.n	8015f62 <__gethex+0x156>
 8015f08:	f1a0 0210 	sub.w	r2, r0, #16
 8015f0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015f10:	f7ff ff67 	bl	8015de2 <__hexdig_fun>
 8015f14:	1e43      	subs	r3, r0, #1
 8015f16:	b2db      	uxtb	r3, r3
 8015f18:	2b18      	cmp	r3, #24
 8015f1a:	d91d      	bls.n	8015f58 <__gethex+0x14c>
 8015f1c:	f1b9 0f00 	cmp.w	r9, #0
 8015f20:	d000      	beq.n	8015f24 <__gethex+0x118>
 8015f22:	4252      	negs	r2, r2
 8015f24:	4415      	add	r5, r2
 8015f26:	f8cb 1000 	str.w	r1, [fp]
 8015f2a:	b1e4      	cbz	r4, 8015f66 <__gethex+0x15a>
 8015f2c:	9b00      	ldr	r3, [sp, #0]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	bf14      	ite	ne
 8015f32:	2700      	movne	r7, #0
 8015f34:	2706      	moveq	r7, #6
 8015f36:	4638      	mov	r0, r7
 8015f38:	b009      	add	sp, #36	; 0x24
 8015f3a:	ecbd 8b02 	vpop	{d8}
 8015f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f42:	463e      	mov	r6, r7
 8015f44:	4625      	mov	r5, r4
 8015f46:	2401      	movs	r4, #1
 8015f48:	e7ca      	b.n	8015ee0 <__gethex+0xd4>
 8015f4a:	f04f 0900 	mov.w	r9, #0
 8015f4e:	1cb1      	adds	r1, r6, #2
 8015f50:	e7d3      	b.n	8015efa <__gethex+0xee>
 8015f52:	f04f 0901 	mov.w	r9, #1
 8015f56:	e7fa      	b.n	8015f4e <__gethex+0x142>
 8015f58:	230a      	movs	r3, #10
 8015f5a:	fb03 0202 	mla	r2, r3, r2, r0
 8015f5e:	3a10      	subs	r2, #16
 8015f60:	e7d4      	b.n	8015f0c <__gethex+0x100>
 8015f62:	4631      	mov	r1, r6
 8015f64:	e7df      	b.n	8015f26 <__gethex+0x11a>
 8015f66:	1bf3      	subs	r3, r6, r7
 8015f68:	3b01      	subs	r3, #1
 8015f6a:	4621      	mov	r1, r4
 8015f6c:	2b07      	cmp	r3, #7
 8015f6e:	dc0b      	bgt.n	8015f88 <__gethex+0x17c>
 8015f70:	ee18 0a10 	vmov	r0, s16
 8015f74:	f000 fada 	bl	801652c <_Balloc>
 8015f78:	4604      	mov	r4, r0
 8015f7a:	b940      	cbnz	r0, 8015f8e <__gethex+0x182>
 8015f7c:	4b5d      	ldr	r3, [pc, #372]	; (80160f4 <__gethex+0x2e8>)
 8015f7e:	4602      	mov	r2, r0
 8015f80:	21de      	movs	r1, #222	; 0xde
 8015f82:	485d      	ldr	r0, [pc, #372]	; (80160f8 <__gethex+0x2ec>)
 8015f84:	f7fe feee 	bl	8014d64 <__assert_func>
 8015f88:	3101      	adds	r1, #1
 8015f8a:	105b      	asrs	r3, r3, #1
 8015f8c:	e7ee      	b.n	8015f6c <__gethex+0x160>
 8015f8e:	f100 0914 	add.w	r9, r0, #20
 8015f92:	f04f 0b00 	mov.w	fp, #0
 8015f96:	f1ca 0301 	rsb	r3, sl, #1
 8015f9a:	f8cd 9008 	str.w	r9, [sp, #8]
 8015f9e:	f8cd b000 	str.w	fp, [sp]
 8015fa2:	9306      	str	r3, [sp, #24]
 8015fa4:	42b7      	cmp	r7, r6
 8015fa6:	d340      	bcc.n	801602a <__gethex+0x21e>
 8015fa8:	9802      	ldr	r0, [sp, #8]
 8015faa:	9b00      	ldr	r3, [sp, #0]
 8015fac:	f840 3b04 	str.w	r3, [r0], #4
 8015fb0:	eba0 0009 	sub.w	r0, r0, r9
 8015fb4:	1080      	asrs	r0, r0, #2
 8015fb6:	0146      	lsls	r6, r0, #5
 8015fb8:	6120      	str	r0, [r4, #16]
 8015fba:	4618      	mov	r0, r3
 8015fbc:	f000 fba8 	bl	8016710 <__hi0bits>
 8015fc0:	1a30      	subs	r0, r6, r0
 8015fc2:	f8d8 6000 	ldr.w	r6, [r8]
 8015fc6:	42b0      	cmp	r0, r6
 8015fc8:	dd63      	ble.n	8016092 <__gethex+0x286>
 8015fca:	1b87      	subs	r7, r0, r6
 8015fcc:	4639      	mov	r1, r7
 8015fce:	4620      	mov	r0, r4
 8015fd0:	f000 ff49 	bl	8016e66 <__any_on>
 8015fd4:	4682      	mov	sl, r0
 8015fd6:	b1a8      	cbz	r0, 8016004 <__gethex+0x1f8>
 8015fd8:	1e7b      	subs	r3, r7, #1
 8015fda:	1159      	asrs	r1, r3, #5
 8015fdc:	f003 021f 	and.w	r2, r3, #31
 8015fe0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015fe4:	f04f 0a01 	mov.w	sl, #1
 8015fe8:	fa0a f202 	lsl.w	r2, sl, r2
 8015fec:	420a      	tst	r2, r1
 8015fee:	d009      	beq.n	8016004 <__gethex+0x1f8>
 8015ff0:	4553      	cmp	r3, sl
 8015ff2:	dd05      	ble.n	8016000 <__gethex+0x1f4>
 8015ff4:	1eb9      	subs	r1, r7, #2
 8015ff6:	4620      	mov	r0, r4
 8015ff8:	f000 ff35 	bl	8016e66 <__any_on>
 8015ffc:	2800      	cmp	r0, #0
 8015ffe:	d145      	bne.n	801608c <__gethex+0x280>
 8016000:	f04f 0a02 	mov.w	sl, #2
 8016004:	4639      	mov	r1, r7
 8016006:	4620      	mov	r0, r4
 8016008:	f7ff fe99 	bl	8015d3e <rshift>
 801600c:	443d      	add	r5, r7
 801600e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016012:	42ab      	cmp	r3, r5
 8016014:	da4c      	bge.n	80160b0 <__gethex+0x2a4>
 8016016:	ee18 0a10 	vmov	r0, s16
 801601a:	4621      	mov	r1, r4
 801601c:	f000 fac6 	bl	80165ac <_Bfree>
 8016020:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016022:	2300      	movs	r3, #0
 8016024:	6013      	str	r3, [r2, #0]
 8016026:	27a3      	movs	r7, #163	; 0xa3
 8016028:	e785      	b.n	8015f36 <__gethex+0x12a>
 801602a:	1e73      	subs	r3, r6, #1
 801602c:	9a05      	ldr	r2, [sp, #20]
 801602e:	9303      	str	r3, [sp, #12]
 8016030:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016034:	4293      	cmp	r3, r2
 8016036:	d019      	beq.n	801606c <__gethex+0x260>
 8016038:	f1bb 0f20 	cmp.w	fp, #32
 801603c:	d107      	bne.n	801604e <__gethex+0x242>
 801603e:	9b02      	ldr	r3, [sp, #8]
 8016040:	9a00      	ldr	r2, [sp, #0]
 8016042:	f843 2b04 	str.w	r2, [r3], #4
 8016046:	9302      	str	r3, [sp, #8]
 8016048:	2300      	movs	r3, #0
 801604a:	9300      	str	r3, [sp, #0]
 801604c:	469b      	mov	fp, r3
 801604e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016052:	f7ff fec6 	bl	8015de2 <__hexdig_fun>
 8016056:	9b00      	ldr	r3, [sp, #0]
 8016058:	f000 000f 	and.w	r0, r0, #15
 801605c:	fa00 f00b 	lsl.w	r0, r0, fp
 8016060:	4303      	orrs	r3, r0
 8016062:	9300      	str	r3, [sp, #0]
 8016064:	f10b 0b04 	add.w	fp, fp, #4
 8016068:	9b03      	ldr	r3, [sp, #12]
 801606a:	e00d      	b.n	8016088 <__gethex+0x27c>
 801606c:	9b03      	ldr	r3, [sp, #12]
 801606e:	9a06      	ldr	r2, [sp, #24]
 8016070:	4413      	add	r3, r2
 8016072:	42bb      	cmp	r3, r7
 8016074:	d3e0      	bcc.n	8016038 <__gethex+0x22c>
 8016076:	4618      	mov	r0, r3
 8016078:	9901      	ldr	r1, [sp, #4]
 801607a:	9307      	str	r3, [sp, #28]
 801607c:	4652      	mov	r2, sl
 801607e:	f7fd fe62 	bl	8013d46 <strncmp>
 8016082:	9b07      	ldr	r3, [sp, #28]
 8016084:	2800      	cmp	r0, #0
 8016086:	d1d7      	bne.n	8016038 <__gethex+0x22c>
 8016088:	461e      	mov	r6, r3
 801608a:	e78b      	b.n	8015fa4 <__gethex+0x198>
 801608c:	f04f 0a03 	mov.w	sl, #3
 8016090:	e7b8      	b.n	8016004 <__gethex+0x1f8>
 8016092:	da0a      	bge.n	80160aa <__gethex+0x29e>
 8016094:	1a37      	subs	r7, r6, r0
 8016096:	4621      	mov	r1, r4
 8016098:	ee18 0a10 	vmov	r0, s16
 801609c:	463a      	mov	r2, r7
 801609e:	f000 fca1 	bl	80169e4 <__lshift>
 80160a2:	1bed      	subs	r5, r5, r7
 80160a4:	4604      	mov	r4, r0
 80160a6:	f100 0914 	add.w	r9, r0, #20
 80160aa:	f04f 0a00 	mov.w	sl, #0
 80160ae:	e7ae      	b.n	801600e <__gethex+0x202>
 80160b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80160b4:	42a8      	cmp	r0, r5
 80160b6:	dd72      	ble.n	801619e <__gethex+0x392>
 80160b8:	1b45      	subs	r5, r0, r5
 80160ba:	42ae      	cmp	r6, r5
 80160bc:	dc36      	bgt.n	801612c <__gethex+0x320>
 80160be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80160c2:	2b02      	cmp	r3, #2
 80160c4:	d02a      	beq.n	801611c <__gethex+0x310>
 80160c6:	2b03      	cmp	r3, #3
 80160c8:	d02c      	beq.n	8016124 <__gethex+0x318>
 80160ca:	2b01      	cmp	r3, #1
 80160cc:	d11c      	bne.n	8016108 <__gethex+0x2fc>
 80160ce:	42ae      	cmp	r6, r5
 80160d0:	d11a      	bne.n	8016108 <__gethex+0x2fc>
 80160d2:	2e01      	cmp	r6, #1
 80160d4:	d112      	bne.n	80160fc <__gethex+0x2f0>
 80160d6:	9a04      	ldr	r2, [sp, #16]
 80160d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80160dc:	6013      	str	r3, [r2, #0]
 80160de:	2301      	movs	r3, #1
 80160e0:	6123      	str	r3, [r4, #16]
 80160e2:	f8c9 3000 	str.w	r3, [r9]
 80160e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80160e8:	2762      	movs	r7, #98	; 0x62
 80160ea:	601c      	str	r4, [r3, #0]
 80160ec:	e723      	b.n	8015f36 <__gethex+0x12a>
 80160ee:	bf00      	nop
 80160f0:	080188c0 	.word	0x080188c0
 80160f4:	080187e4 	.word	0x080187e4
 80160f8:	08018858 	.word	0x08018858
 80160fc:	1e71      	subs	r1, r6, #1
 80160fe:	4620      	mov	r0, r4
 8016100:	f000 feb1 	bl	8016e66 <__any_on>
 8016104:	2800      	cmp	r0, #0
 8016106:	d1e6      	bne.n	80160d6 <__gethex+0x2ca>
 8016108:	ee18 0a10 	vmov	r0, s16
 801610c:	4621      	mov	r1, r4
 801610e:	f000 fa4d 	bl	80165ac <_Bfree>
 8016112:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016114:	2300      	movs	r3, #0
 8016116:	6013      	str	r3, [r2, #0]
 8016118:	2750      	movs	r7, #80	; 0x50
 801611a:	e70c      	b.n	8015f36 <__gethex+0x12a>
 801611c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801611e:	2b00      	cmp	r3, #0
 8016120:	d1f2      	bne.n	8016108 <__gethex+0x2fc>
 8016122:	e7d8      	b.n	80160d6 <__gethex+0x2ca>
 8016124:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016126:	2b00      	cmp	r3, #0
 8016128:	d1d5      	bne.n	80160d6 <__gethex+0x2ca>
 801612a:	e7ed      	b.n	8016108 <__gethex+0x2fc>
 801612c:	1e6f      	subs	r7, r5, #1
 801612e:	f1ba 0f00 	cmp.w	sl, #0
 8016132:	d131      	bne.n	8016198 <__gethex+0x38c>
 8016134:	b127      	cbz	r7, 8016140 <__gethex+0x334>
 8016136:	4639      	mov	r1, r7
 8016138:	4620      	mov	r0, r4
 801613a:	f000 fe94 	bl	8016e66 <__any_on>
 801613e:	4682      	mov	sl, r0
 8016140:	117b      	asrs	r3, r7, #5
 8016142:	2101      	movs	r1, #1
 8016144:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016148:	f007 071f 	and.w	r7, r7, #31
 801614c:	fa01 f707 	lsl.w	r7, r1, r7
 8016150:	421f      	tst	r7, r3
 8016152:	4629      	mov	r1, r5
 8016154:	4620      	mov	r0, r4
 8016156:	bf18      	it	ne
 8016158:	f04a 0a02 	orrne.w	sl, sl, #2
 801615c:	1b76      	subs	r6, r6, r5
 801615e:	f7ff fdee 	bl	8015d3e <rshift>
 8016162:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016166:	2702      	movs	r7, #2
 8016168:	f1ba 0f00 	cmp.w	sl, #0
 801616c:	d048      	beq.n	8016200 <__gethex+0x3f4>
 801616e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016172:	2b02      	cmp	r3, #2
 8016174:	d015      	beq.n	80161a2 <__gethex+0x396>
 8016176:	2b03      	cmp	r3, #3
 8016178:	d017      	beq.n	80161aa <__gethex+0x39e>
 801617a:	2b01      	cmp	r3, #1
 801617c:	d109      	bne.n	8016192 <__gethex+0x386>
 801617e:	f01a 0f02 	tst.w	sl, #2
 8016182:	d006      	beq.n	8016192 <__gethex+0x386>
 8016184:	f8d9 0000 	ldr.w	r0, [r9]
 8016188:	ea4a 0a00 	orr.w	sl, sl, r0
 801618c:	f01a 0f01 	tst.w	sl, #1
 8016190:	d10e      	bne.n	80161b0 <__gethex+0x3a4>
 8016192:	f047 0710 	orr.w	r7, r7, #16
 8016196:	e033      	b.n	8016200 <__gethex+0x3f4>
 8016198:	f04f 0a01 	mov.w	sl, #1
 801619c:	e7d0      	b.n	8016140 <__gethex+0x334>
 801619e:	2701      	movs	r7, #1
 80161a0:	e7e2      	b.n	8016168 <__gethex+0x35c>
 80161a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80161a4:	f1c3 0301 	rsb	r3, r3, #1
 80161a8:	9315      	str	r3, [sp, #84]	; 0x54
 80161aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d0f0      	beq.n	8016192 <__gethex+0x386>
 80161b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80161b4:	f104 0314 	add.w	r3, r4, #20
 80161b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80161bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80161c0:	f04f 0c00 	mov.w	ip, #0
 80161c4:	4618      	mov	r0, r3
 80161c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80161ca:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80161ce:	d01c      	beq.n	801620a <__gethex+0x3fe>
 80161d0:	3201      	adds	r2, #1
 80161d2:	6002      	str	r2, [r0, #0]
 80161d4:	2f02      	cmp	r7, #2
 80161d6:	f104 0314 	add.w	r3, r4, #20
 80161da:	d13f      	bne.n	801625c <__gethex+0x450>
 80161dc:	f8d8 2000 	ldr.w	r2, [r8]
 80161e0:	3a01      	subs	r2, #1
 80161e2:	42b2      	cmp	r2, r6
 80161e4:	d10a      	bne.n	80161fc <__gethex+0x3f0>
 80161e6:	1171      	asrs	r1, r6, #5
 80161e8:	2201      	movs	r2, #1
 80161ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80161ee:	f006 061f 	and.w	r6, r6, #31
 80161f2:	fa02 f606 	lsl.w	r6, r2, r6
 80161f6:	421e      	tst	r6, r3
 80161f8:	bf18      	it	ne
 80161fa:	4617      	movne	r7, r2
 80161fc:	f047 0720 	orr.w	r7, r7, #32
 8016200:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016202:	601c      	str	r4, [r3, #0]
 8016204:	9b04      	ldr	r3, [sp, #16]
 8016206:	601d      	str	r5, [r3, #0]
 8016208:	e695      	b.n	8015f36 <__gethex+0x12a>
 801620a:	4299      	cmp	r1, r3
 801620c:	f843 cc04 	str.w	ip, [r3, #-4]
 8016210:	d8d8      	bhi.n	80161c4 <__gethex+0x3b8>
 8016212:	68a3      	ldr	r3, [r4, #8]
 8016214:	459b      	cmp	fp, r3
 8016216:	db19      	blt.n	801624c <__gethex+0x440>
 8016218:	6861      	ldr	r1, [r4, #4]
 801621a:	ee18 0a10 	vmov	r0, s16
 801621e:	3101      	adds	r1, #1
 8016220:	f000 f984 	bl	801652c <_Balloc>
 8016224:	4681      	mov	r9, r0
 8016226:	b918      	cbnz	r0, 8016230 <__gethex+0x424>
 8016228:	4b1a      	ldr	r3, [pc, #104]	; (8016294 <__gethex+0x488>)
 801622a:	4602      	mov	r2, r0
 801622c:	2184      	movs	r1, #132	; 0x84
 801622e:	e6a8      	b.n	8015f82 <__gethex+0x176>
 8016230:	6922      	ldr	r2, [r4, #16]
 8016232:	3202      	adds	r2, #2
 8016234:	f104 010c 	add.w	r1, r4, #12
 8016238:	0092      	lsls	r2, r2, #2
 801623a:	300c      	adds	r0, #12
 801623c:	f7fc fd24 	bl	8012c88 <memcpy>
 8016240:	4621      	mov	r1, r4
 8016242:	ee18 0a10 	vmov	r0, s16
 8016246:	f000 f9b1 	bl	80165ac <_Bfree>
 801624a:	464c      	mov	r4, r9
 801624c:	6923      	ldr	r3, [r4, #16]
 801624e:	1c5a      	adds	r2, r3, #1
 8016250:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016254:	6122      	str	r2, [r4, #16]
 8016256:	2201      	movs	r2, #1
 8016258:	615a      	str	r2, [r3, #20]
 801625a:	e7bb      	b.n	80161d4 <__gethex+0x3c8>
 801625c:	6922      	ldr	r2, [r4, #16]
 801625e:	455a      	cmp	r2, fp
 8016260:	dd0b      	ble.n	801627a <__gethex+0x46e>
 8016262:	2101      	movs	r1, #1
 8016264:	4620      	mov	r0, r4
 8016266:	f7ff fd6a 	bl	8015d3e <rshift>
 801626a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801626e:	3501      	adds	r5, #1
 8016270:	42ab      	cmp	r3, r5
 8016272:	f6ff aed0 	blt.w	8016016 <__gethex+0x20a>
 8016276:	2701      	movs	r7, #1
 8016278:	e7c0      	b.n	80161fc <__gethex+0x3f0>
 801627a:	f016 061f 	ands.w	r6, r6, #31
 801627e:	d0fa      	beq.n	8016276 <__gethex+0x46a>
 8016280:	4453      	add	r3, sl
 8016282:	f1c6 0620 	rsb	r6, r6, #32
 8016286:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801628a:	f000 fa41 	bl	8016710 <__hi0bits>
 801628e:	42b0      	cmp	r0, r6
 8016290:	dbe7      	blt.n	8016262 <__gethex+0x456>
 8016292:	e7f0      	b.n	8016276 <__gethex+0x46a>
 8016294:	080187e4 	.word	0x080187e4

08016298 <L_shift>:
 8016298:	f1c2 0208 	rsb	r2, r2, #8
 801629c:	0092      	lsls	r2, r2, #2
 801629e:	b570      	push	{r4, r5, r6, lr}
 80162a0:	f1c2 0620 	rsb	r6, r2, #32
 80162a4:	6843      	ldr	r3, [r0, #4]
 80162a6:	6804      	ldr	r4, [r0, #0]
 80162a8:	fa03 f506 	lsl.w	r5, r3, r6
 80162ac:	432c      	orrs	r4, r5
 80162ae:	40d3      	lsrs	r3, r2
 80162b0:	6004      	str	r4, [r0, #0]
 80162b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80162b6:	4288      	cmp	r0, r1
 80162b8:	d3f4      	bcc.n	80162a4 <L_shift+0xc>
 80162ba:	bd70      	pop	{r4, r5, r6, pc}

080162bc <__match>:
 80162bc:	b530      	push	{r4, r5, lr}
 80162be:	6803      	ldr	r3, [r0, #0]
 80162c0:	3301      	adds	r3, #1
 80162c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80162c6:	b914      	cbnz	r4, 80162ce <__match+0x12>
 80162c8:	6003      	str	r3, [r0, #0]
 80162ca:	2001      	movs	r0, #1
 80162cc:	bd30      	pop	{r4, r5, pc}
 80162ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80162d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80162d6:	2d19      	cmp	r5, #25
 80162d8:	bf98      	it	ls
 80162da:	3220      	addls	r2, #32
 80162dc:	42a2      	cmp	r2, r4
 80162de:	d0f0      	beq.n	80162c2 <__match+0x6>
 80162e0:	2000      	movs	r0, #0
 80162e2:	e7f3      	b.n	80162cc <__match+0x10>

080162e4 <__hexnan>:
 80162e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162e8:	680b      	ldr	r3, [r1, #0]
 80162ea:	115e      	asrs	r6, r3, #5
 80162ec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80162f0:	f013 031f 	ands.w	r3, r3, #31
 80162f4:	b087      	sub	sp, #28
 80162f6:	bf18      	it	ne
 80162f8:	3604      	addne	r6, #4
 80162fa:	2500      	movs	r5, #0
 80162fc:	1f37      	subs	r7, r6, #4
 80162fe:	4690      	mov	r8, r2
 8016300:	6802      	ldr	r2, [r0, #0]
 8016302:	9301      	str	r3, [sp, #4]
 8016304:	4682      	mov	sl, r0
 8016306:	f846 5c04 	str.w	r5, [r6, #-4]
 801630a:	46b9      	mov	r9, r7
 801630c:	463c      	mov	r4, r7
 801630e:	9502      	str	r5, [sp, #8]
 8016310:	46ab      	mov	fp, r5
 8016312:	7851      	ldrb	r1, [r2, #1]
 8016314:	1c53      	adds	r3, r2, #1
 8016316:	9303      	str	r3, [sp, #12]
 8016318:	b341      	cbz	r1, 801636c <__hexnan+0x88>
 801631a:	4608      	mov	r0, r1
 801631c:	9205      	str	r2, [sp, #20]
 801631e:	9104      	str	r1, [sp, #16]
 8016320:	f7ff fd5f 	bl	8015de2 <__hexdig_fun>
 8016324:	2800      	cmp	r0, #0
 8016326:	d14f      	bne.n	80163c8 <__hexnan+0xe4>
 8016328:	9904      	ldr	r1, [sp, #16]
 801632a:	9a05      	ldr	r2, [sp, #20]
 801632c:	2920      	cmp	r1, #32
 801632e:	d818      	bhi.n	8016362 <__hexnan+0x7e>
 8016330:	9b02      	ldr	r3, [sp, #8]
 8016332:	459b      	cmp	fp, r3
 8016334:	dd13      	ble.n	801635e <__hexnan+0x7a>
 8016336:	454c      	cmp	r4, r9
 8016338:	d206      	bcs.n	8016348 <__hexnan+0x64>
 801633a:	2d07      	cmp	r5, #7
 801633c:	dc04      	bgt.n	8016348 <__hexnan+0x64>
 801633e:	462a      	mov	r2, r5
 8016340:	4649      	mov	r1, r9
 8016342:	4620      	mov	r0, r4
 8016344:	f7ff ffa8 	bl	8016298 <L_shift>
 8016348:	4544      	cmp	r4, r8
 801634a:	d950      	bls.n	80163ee <__hexnan+0x10a>
 801634c:	2300      	movs	r3, #0
 801634e:	f1a4 0904 	sub.w	r9, r4, #4
 8016352:	f844 3c04 	str.w	r3, [r4, #-4]
 8016356:	f8cd b008 	str.w	fp, [sp, #8]
 801635a:	464c      	mov	r4, r9
 801635c:	461d      	mov	r5, r3
 801635e:	9a03      	ldr	r2, [sp, #12]
 8016360:	e7d7      	b.n	8016312 <__hexnan+0x2e>
 8016362:	2929      	cmp	r1, #41	; 0x29
 8016364:	d156      	bne.n	8016414 <__hexnan+0x130>
 8016366:	3202      	adds	r2, #2
 8016368:	f8ca 2000 	str.w	r2, [sl]
 801636c:	f1bb 0f00 	cmp.w	fp, #0
 8016370:	d050      	beq.n	8016414 <__hexnan+0x130>
 8016372:	454c      	cmp	r4, r9
 8016374:	d206      	bcs.n	8016384 <__hexnan+0xa0>
 8016376:	2d07      	cmp	r5, #7
 8016378:	dc04      	bgt.n	8016384 <__hexnan+0xa0>
 801637a:	462a      	mov	r2, r5
 801637c:	4649      	mov	r1, r9
 801637e:	4620      	mov	r0, r4
 8016380:	f7ff ff8a 	bl	8016298 <L_shift>
 8016384:	4544      	cmp	r4, r8
 8016386:	d934      	bls.n	80163f2 <__hexnan+0x10e>
 8016388:	f1a8 0204 	sub.w	r2, r8, #4
 801638c:	4623      	mov	r3, r4
 801638e:	f853 1b04 	ldr.w	r1, [r3], #4
 8016392:	f842 1f04 	str.w	r1, [r2, #4]!
 8016396:	429f      	cmp	r7, r3
 8016398:	d2f9      	bcs.n	801638e <__hexnan+0xaa>
 801639a:	1b3b      	subs	r3, r7, r4
 801639c:	f023 0303 	bic.w	r3, r3, #3
 80163a0:	3304      	adds	r3, #4
 80163a2:	3401      	adds	r4, #1
 80163a4:	3e03      	subs	r6, #3
 80163a6:	42b4      	cmp	r4, r6
 80163a8:	bf88      	it	hi
 80163aa:	2304      	movhi	r3, #4
 80163ac:	4443      	add	r3, r8
 80163ae:	2200      	movs	r2, #0
 80163b0:	f843 2b04 	str.w	r2, [r3], #4
 80163b4:	429f      	cmp	r7, r3
 80163b6:	d2fb      	bcs.n	80163b0 <__hexnan+0xcc>
 80163b8:	683b      	ldr	r3, [r7, #0]
 80163ba:	b91b      	cbnz	r3, 80163c4 <__hexnan+0xe0>
 80163bc:	4547      	cmp	r7, r8
 80163be:	d127      	bne.n	8016410 <__hexnan+0x12c>
 80163c0:	2301      	movs	r3, #1
 80163c2:	603b      	str	r3, [r7, #0]
 80163c4:	2005      	movs	r0, #5
 80163c6:	e026      	b.n	8016416 <__hexnan+0x132>
 80163c8:	3501      	adds	r5, #1
 80163ca:	2d08      	cmp	r5, #8
 80163cc:	f10b 0b01 	add.w	fp, fp, #1
 80163d0:	dd06      	ble.n	80163e0 <__hexnan+0xfc>
 80163d2:	4544      	cmp	r4, r8
 80163d4:	d9c3      	bls.n	801635e <__hexnan+0x7a>
 80163d6:	2300      	movs	r3, #0
 80163d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80163dc:	2501      	movs	r5, #1
 80163de:	3c04      	subs	r4, #4
 80163e0:	6822      	ldr	r2, [r4, #0]
 80163e2:	f000 000f 	and.w	r0, r0, #15
 80163e6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80163ea:	6022      	str	r2, [r4, #0]
 80163ec:	e7b7      	b.n	801635e <__hexnan+0x7a>
 80163ee:	2508      	movs	r5, #8
 80163f0:	e7b5      	b.n	801635e <__hexnan+0x7a>
 80163f2:	9b01      	ldr	r3, [sp, #4]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d0df      	beq.n	80163b8 <__hexnan+0xd4>
 80163f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80163fc:	f1c3 0320 	rsb	r3, r3, #32
 8016400:	fa22 f303 	lsr.w	r3, r2, r3
 8016404:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016408:	401a      	ands	r2, r3
 801640a:	f846 2c04 	str.w	r2, [r6, #-4]
 801640e:	e7d3      	b.n	80163b8 <__hexnan+0xd4>
 8016410:	3f04      	subs	r7, #4
 8016412:	e7d1      	b.n	80163b8 <__hexnan+0xd4>
 8016414:	2004      	movs	r0, #4
 8016416:	b007      	add	sp, #28
 8016418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801641c <_localeconv_r>:
 801641c:	4800      	ldr	r0, [pc, #0]	; (8016420 <_localeconv_r+0x4>)
 801641e:	4770      	bx	lr
 8016420:	20000f40 	.word	0x20000f40

08016424 <__swhatbuf_r>:
 8016424:	b570      	push	{r4, r5, r6, lr}
 8016426:	460e      	mov	r6, r1
 8016428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801642c:	2900      	cmp	r1, #0
 801642e:	b096      	sub	sp, #88	; 0x58
 8016430:	4614      	mov	r4, r2
 8016432:	461d      	mov	r5, r3
 8016434:	da08      	bge.n	8016448 <__swhatbuf_r+0x24>
 8016436:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801643a:	2200      	movs	r2, #0
 801643c:	602a      	str	r2, [r5, #0]
 801643e:	061a      	lsls	r2, r3, #24
 8016440:	d410      	bmi.n	8016464 <__swhatbuf_r+0x40>
 8016442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016446:	e00e      	b.n	8016466 <__swhatbuf_r+0x42>
 8016448:	466a      	mov	r2, sp
 801644a:	f001 f893 	bl	8017574 <_fstat_r>
 801644e:	2800      	cmp	r0, #0
 8016450:	dbf1      	blt.n	8016436 <__swhatbuf_r+0x12>
 8016452:	9a01      	ldr	r2, [sp, #4]
 8016454:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016458:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801645c:	425a      	negs	r2, r3
 801645e:	415a      	adcs	r2, r3
 8016460:	602a      	str	r2, [r5, #0]
 8016462:	e7ee      	b.n	8016442 <__swhatbuf_r+0x1e>
 8016464:	2340      	movs	r3, #64	; 0x40
 8016466:	2000      	movs	r0, #0
 8016468:	6023      	str	r3, [r4, #0]
 801646a:	b016      	add	sp, #88	; 0x58
 801646c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016470 <__smakebuf_r>:
 8016470:	898b      	ldrh	r3, [r1, #12]
 8016472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016474:	079d      	lsls	r5, r3, #30
 8016476:	4606      	mov	r6, r0
 8016478:	460c      	mov	r4, r1
 801647a:	d507      	bpl.n	801648c <__smakebuf_r+0x1c>
 801647c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016480:	6023      	str	r3, [r4, #0]
 8016482:	6123      	str	r3, [r4, #16]
 8016484:	2301      	movs	r3, #1
 8016486:	6163      	str	r3, [r4, #20]
 8016488:	b002      	add	sp, #8
 801648a:	bd70      	pop	{r4, r5, r6, pc}
 801648c:	ab01      	add	r3, sp, #4
 801648e:	466a      	mov	r2, sp
 8016490:	f7ff ffc8 	bl	8016424 <__swhatbuf_r>
 8016494:	9900      	ldr	r1, [sp, #0]
 8016496:	4605      	mov	r5, r0
 8016498:	4630      	mov	r0, r6
 801649a:	f7fc fc8d 	bl	8012db8 <_malloc_r>
 801649e:	b948      	cbnz	r0, 80164b4 <__smakebuf_r+0x44>
 80164a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164a4:	059a      	lsls	r2, r3, #22
 80164a6:	d4ef      	bmi.n	8016488 <__smakebuf_r+0x18>
 80164a8:	f023 0303 	bic.w	r3, r3, #3
 80164ac:	f043 0302 	orr.w	r3, r3, #2
 80164b0:	81a3      	strh	r3, [r4, #12]
 80164b2:	e7e3      	b.n	801647c <__smakebuf_r+0xc>
 80164b4:	4b0d      	ldr	r3, [pc, #52]	; (80164ec <__smakebuf_r+0x7c>)
 80164b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80164b8:	89a3      	ldrh	r3, [r4, #12]
 80164ba:	6020      	str	r0, [r4, #0]
 80164bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80164c0:	81a3      	strh	r3, [r4, #12]
 80164c2:	9b00      	ldr	r3, [sp, #0]
 80164c4:	6163      	str	r3, [r4, #20]
 80164c6:	9b01      	ldr	r3, [sp, #4]
 80164c8:	6120      	str	r0, [r4, #16]
 80164ca:	b15b      	cbz	r3, 80164e4 <__smakebuf_r+0x74>
 80164cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80164d0:	4630      	mov	r0, r6
 80164d2:	f001 f861 	bl	8017598 <_isatty_r>
 80164d6:	b128      	cbz	r0, 80164e4 <__smakebuf_r+0x74>
 80164d8:	89a3      	ldrh	r3, [r4, #12]
 80164da:	f023 0303 	bic.w	r3, r3, #3
 80164de:	f043 0301 	orr.w	r3, r3, #1
 80164e2:	81a3      	strh	r3, [r4, #12]
 80164e4:	89a0      	ldrh	r0, [r4, #12]
 80164e6:	4305      	orrs	r5, r0
 80164e8:	81a5      	strh	r5, [r4, #12]
 80164ea:	e7cd      	b.n	8016488 <__smakebuf_r+0x18>
 80164ec:	08015b79 	.word	0x08015b79

080164f0 <__ascii_mbtowc>:
 80164f0:	b082      	sub	sp, #8
 80164f2:	b901      	cbnz	r1, 80164f6 <__ascii_mbtowc+0x6>
 80164f4:	a901      	add	r1, sp, #4
 80164f6:	b142      	cbz	r2, 801650a <__ascii_mbtowc+0x1a>
 80164f8:	b14b      	cbz	r3, 801650e <__ascii_mbtowc+0x1e>
 80164fa:	7813      	ldrb	r3, [r2, #0]
 80164fc:	600b      	str	r3, [r1, #0]
 80164fe:	7812      	ldrb	r2, [r2, #0]
 8016500:	1e10      	subs	r0, r2, #0
 8016502:	bf18      	it	ne
 8016504:	2001      	movne	r0, #1
 8016506:	b002      	add	sp, #8
 8016508:	4770      	bx	lr
 801650a:	4610      	mov	r0, r2
 801650c:	e7fb      	b.n	8016506 <__ascii_mbtowc+0x16>
 801650e:	f06f 0001 	mvn.w	r0, #1
 8016512:	e7f8      	b.n	8016506 <__ascii_mbtowc+0x16>

08016514 <__malloc_lock>:
 8016514:	4801      	ldr	r0, [pc, #4]	; (801651c <__malloc_lock+0x8>)
 8016516:	f7fc bba4 	b.w	8012c62 <__retarget_lock_acquire_recursive>
 801651a:	bf00      	nop
 801651c:	2000eaf1 	.word	0x2000eaf1

08016520 <__malloc_unlock>:
 8016520:	4801      	ldr	r0, [pc, #4]	; (8016528 <__malloc_unlock+0x8>)
 8016522:	f7fc bb9f 	b.w	8012c64 <__retarget_lock_release_recursive>
 8016526:	bf00      	nop
 8016528:	2000eaf1 	.word	0x2000eaf1

0801652c <_Balloc>:
 801652c:	b570      	push	{r4, r5, r6, lr}
 801652e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016530:	4604      	mov	r4, r0
 8016532:	460d      	mov	r5, r1
 8016534:	b976      	cbnz	r6, 8016554 <_Balloc+0x28>
 8016536:	2010      	movs	r0, #16
 8016538:	f7fc fb96 	bl	8012c68 <malloc>
 801653c:	4602      	mov	r2, r0
 801653e:	6260      	str	r0, [r4, #36]	; 0x24
 8016540:	b920      	cbnz	r0, 801654c <_Balloc+0x20>
 8016542:	4b18      	ldr	r3, [pc, #96]	; (80165a4 <_Balloc+0x78>)
 8016544:	4818      	ldr	r0, [pc, #96]	; (80165a8 <_Balloc+0x7c>)
 8016546:	2166      	movs	r1, #102	; 0x66
 8016548:	f7fe fc0c 	bl	8014d64 <__assert_func>
 801654c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016550:	6006      	str	r6, [r0, #0]
 8016552:	60c6      	str	r6, [r0, #12]
 8016554:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016556:	68f3      	ldr	r3, [r6, #12]
 8016558:	b183      	cbz	r3, 801657c <_Balloc+0x50>
 801655a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801655c:	68db      	ldr	r3, [r3, #12]
 801655e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016562:	b9b8      	cbnz	r0, 8016594 <_Balloc+0x68>
 8016564:	2101      	movs	r1, #1
 8016566:	fa01 f605 	lsl.w	r6, r1, r5
 801656a:	1d72      	adds	r2, r6, #5
 801656c:	0092      	lsls	r2, r2, #2
 801656e:	4620      	mov	r0, r4
 8016570:	f7fc fba0 	bl	8012cb4 <_calloc_r>
 8016574:	b160      	cbz	r0, 8016590 <_Balloc+0x64>
 8016576:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801657a:	e00e      	b.n	801659a <_Balloc+0x6e>
 801657c:	2221      	movs	r2, #33	; 0x21
 801657e:	2104      	movs	r1, #4
 8016580:	4620      	mov	r0, r4
 8016582:	f7fc fb97 	bl	8012cb4 <_calloc_r>
 8016586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016588:	60f0      	str	r0, [r6, #12]
 801658a:	68db      	ldr	r3, [r3, #12]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d1e4      	bne.n	801655a <_Balloc+0x2e>
 8016590:	2000      	movs	r0, #0
 8016592:	bd70      	pop	{r4, r5, r6, pc}
 8016594:	6802      	ldr	r2, [r0, #0]
 8016596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801659a:	2300      	movs	r3, #0
 801659c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80165a0:	e7f7      	b.n	8016592 <_Balloc+0x66>
 80165a2:	bf00      	nop
 80165a4:	0801867d 	.word	0x0801867d
 80165a8:	080188d4 	.word	0x080188d4

080165ac <_Bfree>:
 80165ac:	b570      	push	{r4, r5, r6, lr}
 80165ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80165b0:	4605      	mov	r5, r0
 80165b2:	460c      	mov	r4, r1
 80165b4:	b976      	cbnz	r6, 80165d4 <_Bfree+0x28>
 80165b6:	2010      	movs	r0, #16
 80165b8:	f7fc fb56 	bl	8012c68 <malloc>
 80165bc:	4602      	mov	r2, r0
 80165be:	6268      	str	r0, [r5, #36]	; 0x24
 80165c0:	b920      	cbnz	r0, 80165cc <_Bfree+0x20>
 80165c2:	4b09      	ldr	r3, [pc, #36]	; (80165e8 <_Bfree+0x3c>)
 80165c4:	4809      	ldr	r0, [pc, #36]	; (80165ec <_Bfree+0x40>)
 80165c6:	218a      	movs	r1, #138	; 0x8a
 80165c8:	f7fe fbcc 	bl	8014d64 <__assert_func>
 80165cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80165d0:	6006      	str	r6, [r0, #0]
 80165d2:	60c6      	str	r6, [r0, #12]
 80165d4:	b13c      	cbz	r4, 80165e6 <_Bfree+0x3a>
 80165d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80165d8:	6862      	ldr	r2, [r4, #4]
 80165da:	68db      	ldr	r3, [r3, #12]
 80165dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80165e0:	6021      	str	r1, [r4, #0]
 80165e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80165e6:	bd70      	pop	{r4, r5, r6, pc}
 80165e8:	0801867d 	.word	0x0801867d
 80165ec:	080188d4 	.word	0x080188d4

080165f0 <__multadd>:
 80165f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165f4:	690d      	ldr	r5, [r1, #16]
 80165f6:	4607      	mov	r7, r0
 80165f8:	460c      	mov	r4, r1
 80165fa:	461e      	mov	r6, r3
 80165fc:	f101 0c14 	add.w	ip, r1, #20
 8016600:	2000      	movs	r0, #0
 8016602:	f8dc 3000 	ldr.w	r3, [ip]
 8016606:	b299      	uxth	r1, r3
 8016608:	fb02 6101 	mla	r1, r2, r1, r6
 801660c:	0c1e      	lsrs	r6, r3, #16
 801660e:	0c0b      	lsrs	r3, r1, #16
 8016610:	fb02 3306 	mla	r3, r2, r6, r3
 8016614:	b289      	uxth	r1, r1
 8016616:	3001      	adds	r0, #1
 8016618:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801661c:	4285      	cmp	r5, r0
 801661e:	f84c 1b04 	str.w	r1, [ip], #4
 8016622:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016626:	dcec      	bgt.n	8016602 <__multadd+0x12>
 8016628:	b30e      	cbz	r6, 801666e <__multadd+0x7e>
 801662a:	68a3      	ldr	r3, [r4, #8]
 801662c:	42ab      	cmp	r3, r5
 801662e:	dc19      	bgt.n	8016664 <__multadd+0x74>
 8016630:	6861      	ldr	r1, [r4, #4]
 8016632:	4638      	mov	r0, r7
 8016634:	3101      	adds	r1, #1
 8016636:	f7ff ff79 	bl	801652c <_Balloc>
 801663a:	4680      	mov	r8, r0
 801663c:	b928      	cbnz	r0, 801664a <__multadd+0x5a>
 801663e:	4602      	mov	r2, r0
 8016640:	4b0c      	ldr	r3, [pc, #48]	; (8016674 <__multadd+0x84>)
 8016642:	480d      	ldr	r0, [pc, #52]	; (8016678 <__multadd+0x88>)
 8016644:	21b5      	movs	r1, #181	; 0xb5
 8016646:	f7fe fb8d 	bl	8014d64 <__assert_func>
 801664a:	6922      	ldr	r2, [r4, #16]
 801664c:	3202      	adds	r2, #2
 801664e:	f104 010c 	add.w	r1, r4, #12
 8016652:	0092      	lsls	r2, r2, #2
 8016654:	300c      	adds	r0, #12
 8016656:	f7fc fb17 	bl	8012c88 <memcpy>
 801665a:	4621      	mov	r1, r4
 801665c:	4638      	mov	r0, r7
 801665e:	f7ff ffa5 	bl	80165ac <_Bfree>
 8016662:	4644      	mov	r4, r8
 8016664:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016668:	3501      	adds	r5, #1
 801666a:	615e      	str	r6, [r3, #20]
 801666c:	6125      	str	r5, [r4, #16]
 801666e:	4620      	mov	r0, r4
 8016670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016674:	080187e4 	.word	0x080187e4
 8016678:	080188d4 	.word	0x080188d4

0801667c <__s2b>:
 801667c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016680:	460c      	mov	r4, r1
 8016682:	4615      	mov	r5, r2
 8016684:	461f      	mov	r7, r3
 8016686:	2209      	movs	r2, #9
 8016688:	3308      	adds	r3, #8
 801668a:	4606      	mov	r6, r0
 801668c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016690:	2100      	movs	r1, #0
 8016692:	2201      	movs	r2, #1
 8016694:	429a      	cmp	r2, r3
 8016696:	db09      	blt.n	80166ac <__s2b+0x30>
 8016698:	4630      	mov	r0, r6
 801669a:	f7ff ff47 	bl	801652c <_Balloc>
 801669e:	b940      	cbnz	r0, 80166b2 <__s2b+0x36>
 80166a0:	4602      	mov	r2, r0
 80166a2:	4b19      	ldr	r3, [pc, #100]	; (8016708 <__s2b+0x8c>)
 80166a4:	4819      	ldr	r0, [pc, #100]	; (801670c <__s2b+0x90>)
 80166a6:	21ce      	movs	r1, #206	; 0xce
 80166a8:	f7fe fb5c 	bl	8014d64 <__assert_func>
 80166ac:	0052      	lsls	r2, r2, #1
 80166ae:	3101      	adds	r1, #1
 80166b0:	e7f0      	b.n	8016694 <__s2b+0x18>
 80166b2:	9b08      	ldr	r3, [sp, #32]
 80166b4:	6143      	str	r3, [r0, #20]
 80166b6:	2d09      	cmp	r5, #9
 80166b8:	f04f 0301 	mov.w	r3, #1
 80166bc:	6103      	str	r3, [r0, #16]
 80166be:	dd16      	ble.n	80166ee <__s2b+0x72>
 80166c0:	f104 0909 	add.w	r9, r4, #9
 80166c4:	46c8      	mov	r8, r9
 80166c6:	442c      	add	r4, r5
 80166c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80166cc:	4601      	mov	r1, r0
 80166ce:	3b30      	subs	r3, #48	; 0x30
 80166d0:	220a      	movs	r2, #10
 80166d2:	4630      	mov	r0, r6
 80166d4:	f7ff ff8c 	bl	80165f0 <__multadd>
 80166d8:	45a0      	cmp	r8, r4
 80166da:	d1f5      	bne.n	80166c8 <__s2b+0x4c>
 80166dc:	f1a5 0408 	sub.w	r4, r5, #8
 80166e0:	444c      	add	r4, r9
 80166e2:	1b2d      	subs	r5, r5, r4
 80166e4:	1963      	adds	r3, r4, r5
 80166e6:	42bb      	cmp	r3, r7
 80166e8:	db04      	blt.n	80166f4 <__s2b+0x78>
 80166ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166ee:	340a      	adds	r4, #10
 80166f0:	2509      	movs	r5, #9
 80166f2:	e7f6      	b.n	80166e2 <__s2b+0x66>
 80166f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80166f8:	4601      	mov	r1, r0
 80166fa:	3b30      	subs	r3, #48	; 0x30
 80166fc:	220a      	movs	r2, #10
 80166fe:	4630      	mov	r0, r6
 8016700:	f7ff ff76 	bl	80165f0 <__multadd>
 8016704:	e7ee      	b.n	80166e4 <__s2b+0x68>
 8016706:	bf00      	nop
 8016708:	080187e4 	.word	0x080187e4
 801670c:	080188d4 	.word	0x080188d4

08016710 <__hi0bits>:
 8016710:	0c03      	lsrs	r3, r0, #16
 8016712:	041b      	lsls	r3, r3, #16
 8016714:	b9d3      	cbnz	r3, 801674c <__hi0bits+0x3c>
 8016716:	0400      	lsls	r0, r0, #16
 8016718:	2310      	movs	r3, #16
 801671a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801671e:	bf04      	itt	eq
 8016720:	0200      	lsleq	r0, r0, #8
 8016722:	3308      	addeq	r3, #8
 8016724:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016728:	bf04      	itt	eq
 801672a:	0100      	lsleq	r0, r0, #4
 801672c:	3304      	addeq	r3, #4
 801672e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016732:	bf04      	itt	eq
 8016734:	0080      	lsleq	r0, r0, #2
 8016736:	3302      	addeq	r3, #2
 8016738:	2800      	cmp	r0, #0
 801673a:	db05      	blt.n	8016748 <__hi0bits+0x38>
 801673c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016740:	f103 0301 	add.w	r3, r3, #1
 8016744:	bf08      	it	eq
 8016746:	2320      	moveq	r3, #32
 8016748:	4618      	mov	r0, r3
 801674a:	4770      	bx	lr
 801674c:	2300      	movs	r3, #0
 801674e:	e7e4      	b.n	801671a <__hi0bits+0xa>

08016750 <__lo0bits>:
 8016750:	6803      	ldr	r3, [r0, #0]
 8016752:	f013 0207 	ands.w	r2, r3, #7
 8016756:	4601      	mov	r1, r0
 8016758:	d00b      	beq.n	8016772 <__lo0bits+0x22>
 801675a:	07da      	lsls	r2, r3, #31
 801675c:	d423      	bmi.n	80167a6 <__lo0bits+0x56>
 801675e:	0798      	lsls	r0, r3, #30
 8016760:	bf49      	itett	mi
 8016762:	085b      	lsrmi	r3, r3, #1
 8016764:	089b      	lsrpl	r3, r3, #2
 8016766:	2001      	movmi	r0, #1
 8016768:	600b      	strmi	r3, [r1, #0]
 801676a:	bf5c      	itt	pl
 801676c:	600b      	strpl	r3, [r1, #0]
 801676e:	2002      	movpl	r0, #2
 8016770:	4770      	bx	lr
 8016772:	b298      	uxth	r0, r3
 8016774:	b9a8      	cbnz	r0, 80167a2 <__lo0bits+0x52>
 8016776:	0c1b      	lsrs	r3, r3, #16
 8016778:	2010      	movs	r0, #16
 801677a:	b2da      	uxtb	r2, r3
 801677c:	b90a      	cbnz	r2, 8016782 <__lo0bits+0x32>
 801677e:	3008      	adds	r0, #8
 8016780:	0a1b      	lsrs	r3, r3, #8
 8016782:	071a      	lsls	r2, r3, #28
 8016784:	bf04      	itt	eq
 8016786:	091b      	lsreq	r3, r3, #4
 8016788:	3004      	addeq	r0, #4
 801678a:	079a      	lsls	r2, r3, #30
 801678c:	bf04      	itt	eq
 801678e:	089b      	lsreq	r3, r3, #2
 8016790:	3002      	addeq	r0, #2
 8016792:	07da      	lsls	r2, r3, #31
 8016794:	d403      	bmi.n	801679e <__lo0bits+0x4e>
 8016796:	085b      	lsrs	r3, r3, #1
 8016798:	f100 0001 	add.w	r0, r0, #1
 801679c:	d005      	beq.n	80167aa <__lo0bits+0x5a>
 801679e:	600b      	str	r3, [r1, #0]
 80167a0:	4770      	bx	lr
 80167a2:	4610      	mov	r0, r2
 80167a4:	e7e9      	b.n	801677a <__lo0bits+0x2a>
 80167a6:	2000      	movs	r0, #0
 80167a8:	4770      	bx	lr
 80167aa:	2020      	movs	r0, #32
 80167ac:	4770      	bx	lr
	...

080167b0 <__i2b>:
 80167b0:	b510      	push	{r4, lr}
 80167b2:	460c      	mov	r4, r1
 80167b4:	2101      	movs	r1, #1
 80167b6:	f7ff feb9 	bl	801652c <_Balloc>
 80167ba:	4602      	mov	r2, r0
 80167bc:	b928      	cbnz	r0, 80167ca <__i2b+0x1a>
 80167be:	4b05      	ldr	r3, [pc, #20]	; (80167d4 <__i2b+0x24>)
 80167c0:	4805      	ldr	r0, [pc, #20]	; (80167d8 <__i2b+0x28>)
 80167c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80167c6:	f7fe facd 	bl	8014d64 <__assert_func>
 80167ca:	2301      	movs	r3, #1
 80167cc:	6144      	str	r4, [r0, #20]
 80167ce:	6103      	str	r3, [r0, #16]
 80167d0:	bd10      	pop	{r4, pc}
 80167d2:	bf00      	nop
 80167d4:	080187e4 	.word	0x080187e4
 80167d8:	080188d4 	.word	0x080188d4

080167dc <__multiply>:
 80167dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e0:	4691      	mov	r9, r2
 80167e2:	690a      	ldr	r2, [r1, #16]
 80167e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80167e8:	429a      	cmp	r2, r3
 80167ea:	bfb8      	it	lt
 80167ec:	460b      	movlt	r3, r1
 80167ee:	460c      	mov	r4, r1
 80167f0:	bfbc      	itt	lt
 80167f2:	464c      	movlt	r4, r9
 80167f4:	4699      	movlt	r9, r3
 80167f6:	6927      	ldr	r7, [r4, #16]
 80167f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80167fc:	68a3      	ldr	r3, [r4, #8]
 80167fe:	6861      	ldr	r1, [r4, #4]
 8016800:	eb07 060a 	add.w	r6, r7, sl
 8016804:	42b3      	cmp	r3, r6
 8016806:	b085      	sub	sp, #20
 8016808:	bfb8      	it	lt
 801680a:	3101      	addlt	r1, #1
 801680c:	f7ff fe8e 	bl	801652c <_Balloc>
 8016810:	b930      	cbnz	r0, 8016820 <__multiply+0x44>
 8016812:	4602      	mov	r2, r0
 8016814:	4b44      	ldr	r3, [pc, #272]	; (8016928 <__multiply+0x14c>)
 8016816:	4845      	ldr	r0, [pc, #276]	; (801692c <__multiply+0x150>)
 8016818:	f240 115d 	movw	r1, #349	; 0x15d
 801681c:	f7fe faa2 	bl	8014d64 <__assert_func>
 8016820:	f100 0514 	add.w	r5, r0, #20
 8016824:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016828:	462b      	mov	r3, r5
 801682a:	2200      	movs	r2, #0
 801682c:	4543      	cmp	r3, r8
 801682e:	d321      	bcc.n	8016874 <__multiply+0x98>
 8016830:	f104 0314 	add.w	r3, r4, #20
 8016834:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016838:	f109 0314 	add.w	r3, r9, #20
 801683c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016840:	9202      	str	r2, [sp, #8]
 8016842:	1b3a      	subs	r2, r7, r4
 8016844:	3a15      	subs	r2, #21
 8016846:	f022 0203 	bic.w	r2, r2, #3
 801684a:	3204      	adds	r2, #4
 801684c:	f104 0115 	add.w	r1, r4, #21
 8016850:	428f      	cmp	r7, r1
 8016852:	bf38      	it	cc
 8016854:	2204      	movcc	r2, #4
 8016856:	9201      	str	r2, [sp, #4]
 8016858:	9a02      	ldr	r2, [sp, #8]
 801685a:	9303      	str	r3, [sp, #12]
 801685c:	429a      	cmp	r2, r3
 801685e:	d80c      	bhi.n	801687a <__multiply+0x9e>
 8016860:	2e00      	cmp	r6, #0
 8016862:	dd03      	ble.n	801686c <__multiply+0x90>
 8016864:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016868:	2b00      	cmp	r3, #0
 801686a:	d05a      	beq.n	8016922 <__multiply+0x146>
 801686c:	6106      	str	r6, [r0, #16]
 801686e:	b005      	add	sp, #20
 8016870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016874:	f843 2b04 	str.w	r2, [r3], #4
 8016878:	e7d8      	b.n	801682c <__multiply+0x50>
 801687a:	f8b3 a000 	ldrh.w	sl, [r3]
 801687e:	f1ba 0f00 	cmp.w	sl, #0
 8016882:	d024      	beq.n	80168ce <__multiply+0xf2>
 8016884:	f104 0e14 	add.w	lr, r4, #20
 8016888:	46a9      	mov	r9, r5
 801688a:	f04f 0c00 	mov.w	ip, #0
 801688e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016892:	f8d9 1000 	ldr.w	r1, [r9]
 8016896:	fa1f fb82 	uxth.w	fp, r2
 801689a:	b289      	uxth	r1, r1
 801689c:	fb0a 110b 	mla	r1, sl, fp, r1
 80168a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80168a4:	f8d9 2000 	ldr.w	r2, [r9]
 80168a8:	4461      	add	r1, ip
 80168aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80168ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80168b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80168b6:	b289      	uxth	r1, r1
 80168b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80168bc:	4577      	cmp	r7, lr
 80168be:	f849 1b04 	str.w	r1, [r9], #4
 80168c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80168c6:	d8e2      	bhi.n	801688e <__multiply+0xb2>
 80168c8:	9a01      	ldr	r2, [sp, #4]
 80168ca:	f845 c002 	str.w	ip, [r5, r2]
 80168ce:	9a03      	ldr	r2, [sp, #12]
 80168d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80168d4:	3304      	adds	r3, #4
 80168d6:	f1b9 0f00 	cmp.w	r9, #0
 80168da:	d020      	beq.n	801691e <__multiply+0x142>
 80168dc:	6829      	ldr	r1, [r5, #0]
 80168de:	f104 0c14 	add.w	ip, r4, #20
 80168e2:	46ae      	mov	lr, r5
 80168e4:	f04f 0a00 	mov.w	sl, #0
 80168e8:	f8bc b000 	ldrh.w	fp, [ip]
 80168ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80168f0:	fb09 220b 	mla	r2, r9, fp, r2
 80168f4:	4492      	add	sl, r2
 80168f6:	b289      	uxth	r1, r1
 80168f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80168fc:	f84e 1b04 	str.w	r1, [lr], #4
 8016900:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016904:	f8be 1000 	ldrh.w	r1, [lr]
 8016908:	0c12      	lsrs	r2, r2, #16
 801690a:	fb09 1102 	mla	r1, r9, r2, r1
 801690e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8016912:	4567      	cmp	r7, ip
 8016914:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016918:	d8e6      	bhi.n	80168e8 <__multiply+0x10c>
 801691a:	9a01      	ldr	r2, [sp, #4]
 801691c:	50a9      	str	r1, [r5, r2]
 801691e:	3504      	adds	r5, #4
 8016920:	e79a      	b.n	8016858 <__multiply+0x7c>
 8016922:	3e01      	subs	r6, #1
 8016924:	e79c      	b.n	8016860 <__multiply+0x84>
 8016926:	bf00      	nop
 8016928:	080187e4 	.word	0x080187e4
 801692c:	080188d4 	.word	0x080188d4

08016930 <__pow5mult>:
 8016930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016934:	4615      	mov	r5, r2
 8016936:	f012 0203 	ands.w	r2, r2, #3
 801693a:	4606      	mov	r6, r0
 801693c:	460f      	mov	r7, r1
 801693e:	d007      	beq.n	8016950 <__pow5mult+0x20>
 8016940:	4c25      	ldr	r4, [pc, #148]	; (80169d8 <__pow5mult+0xa8>)
 8016942:	3a01      	subs	r2, #1
 8016944:	2300      	movs	r3, #0
 8016946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801694a:	f7ff fe51 	bl	80165f0 <__multadd>
 801694e:	4607      	mov	r7, r0
 8016950:	10ad      	asrs	r5, r5, #2
 8016952:	d03d      	beq.n	80169d0 <__pow5mult+0xa0>
 8016954:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016956:	b97c      	cbnz	r4, 8016978 <__pow5mult+0x48>
 8016958:	2010      	movs	r0, #16
 801695a:	f7fc f985 	bl	8012c68 <malloc>
 801695e:	4602      	mov	r2, r0
 8016960:	6270      	str	r0, [r6, #36]	; 0x24
 8016962:	b928      	cbnz	r0, 8016970 <__pow5mult+0x40>
 8016964:	4b1d      	ldr	r3, [pc, #116]	; (80169dc <__pow5mult+0xac>)
 8016966:	481e      	ldr	r0, [pc, #120]	; (80169e0 <__pow5mult+0xb0>)
 8016968:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801696c:	f7fe f9fa 	bl	8014d64 <__assert_func>
 8016970:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016974:	6004      	str	r4, [r0, #0]
 8016976:	60c4      	str	r4, [r0, #12]
 8016978:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801697c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016980:	b94c      	cbnz	r4, 8016996 <__pow5mult+0x66>
 8016982:	f240 2171 	movw	r1, #625	; 0x271
 8016986:	4630      	mov	r0, r6
 8016988:	f7ff ff12 	bl	80167b0 <__i2b>
 801698c:	2300      	movs	r3, #0
 801698e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016992:	4604      	mov	r4, r0
 8016994:	6003      	str	r3, [r0, #0]
 8016996:	f04f 0900 	mov.w	r9, #0
 801699a:	07eb      	lsls	r3, r5, #31
 801699c:	d50a      	bpl.n	80169b4 <__pow5mult+0x84>
 801699e:	4639      	mov	r1, r7
 80169a0:	4622      	mov	r2, r4
 80169a2:	4630      	mov	r0, r6
 80169a4:	f7ff ff1a 	bl	80167dc <__multiply>
 80169a8:	4639      	mov	r1, r7
 80169aa:	4680      	mov	r8, r0
 80169ac:	4630      	mov	r0, r6
 80169ae:	f7ff fdfd 	bl	80165ac <_Bfree>
 80169b2:	4647      	mov	r7, r8
 80169b4:	106d      	asrs	r5, r5, #1
 80169b6:	d00b      	beq.n	80169d0 <__pow5mult+0xa0>
 80169b8:	6820      	ldr	r0, [r4, #0]
 80169ba:	b938      	cbnz	r0, 80169cc <__pow5mult+0x9c>
 80169bc:	4622      	mov	r2, r4
 80169be:	4621      	mov	r1, r4
 80169c0:	4630      	mov	r0, r6
 80169c2:	f7ff ff0b 	bl	80167dc <__multiply>
 80169c6:	6020      	str	r0, [r4, #0]
 80169c8:	f8c0 9000 	str.w	r9, [r0]
 80169cc:	4604      	mov	r4, r0
 80169ce:	e7e4      	b.n	801699a <__pow5mult+0x6a>
 80169d0:	4638      	mov	r0, r7
 80169d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169d6:	bf00      	nop
 80169d8:	08018a20 	.word	0x08018a20
 80169dc:	0801867d 	.word	0x0801867d
 80169e0:	080188d4 	.word	0x080188d4

080169e4 <__lshift>:
 80169e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169e8:	460c      	mov	r4, r1
 80169ea:	6849      	ldr	r1, [r1, #4]
 80169ec:	6923      	ldr	r3, [r4, #16]
 80169ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80169f2:	68a3      	ldr	r3, [r4, #8]
 80169f4:	4607      	mov	r7, r0
 80169f6:	4691      	mov	r9, r2
 80169f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80169fc:	f108 0601 	add.w	r6, r8, #1
 8016a00:	42b3      	cmp	r3, r6
 8016a02:	db0b      	blt.n	8016a1c <__lshift+0x38>
 8016a04:	4638      	mov	r0, r7
 8016a06:	f7ff fd91 	bl	801652c <_Balloc>
 8016a0a:	4605      	mov	r5, r0
 8016a0c:	b948      	cbnz	r0, 8016a22 <__lshift+0x3e>
 8016a0e:	4602      	mov	r2, r0
 8016a10:	4b2a      	ldr	r3, [pc, #168]	; (8016abc <__lshift+0xd8>)
 8016a12:	482b      	ldr	r0, [pc, #172]	; (8016ac0 <__lshift+0xdc>)
 8016a14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016a18:	f7fe f9a4 	bl	8014d64 <__assert_func>
 8016a1c:	3101      	adds	r1, #1
 8016a1e:	005b      	lsls	r3, r3, #1
 8016a20:	e7ee      	b.n	8016a00 <__lshift+0x1c>
 8016a22:	2300      	movs	r3, #0
 8016a24:	f100 0114 	add.w	r1, r0, #20
 8016a28:	f100 0210 	add.w	r2, r0, #16
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	4553      	cmp	r3, sl
 8016a30:	db37      	blt.n	8016aa2 <__lshift+0xbe>
 8016a32:	6920      	ldr	r0, [r4, #16]
 8016a34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016a38:	f104 0314 	add.w	r3, r4, #20
 8016a3c:	f019 091f 	ands.w	r9, r9, #31
 8016a40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016a44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016a48:	d02f      	beq.n	8016aaa <__lshift+0xc6>
 8016a4a:	f1c9 0e20 	rsb	lr, r9, #32
 8016a4e:	468a      	mov	sl, r1
 8016a50:	f04f 0c00 	mov.w	ip, #0
 8016a54:	681a      	ldr	r2, [r3, #0]
 8016a56:	fa02 f209 	lsl.w	r2, r2, r9
 8016a5a:	ea42 020c 	orr.w	r2, r2, ip
 8016a5e:	f84a 2b04 	str.w	r2, [sl], #4
 8016a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a66:	4298      	cmp	r0, r3
 8016a68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016a6c:	d8f2      	bhi.n	8016a54 <__lshift+0x70>
 8016a6e:	1b03      	subs	r3, r0, r4
 8016a70:	3b15      	subs	r3, #21
 8016a72:	f023 0303 	bic.w	r3, r3, #3
 8016a76:	3304      	adds	r3, #4
 8016a78:	f104 0215 	add.w	r2, r4, #21
 8016a7c:	4290      	cmp	r0, r2
 8016a7e:	bf38      	it	cc
 8016a80:	2304      	movcc	r3, #4
 8016a82:	f841 c003 	str.w	ip, [r1, r3]
 8016a86:	f1bc 0f00 	cmp.w	ip, #0
 8016a8a:	d001      	beq.n	8016a90 <__lshift+0xac>
 8016a8c:	f108 0602 	add.w	r6, r8, #2
 8016a90:	3e01      	subs	r6, #1
 8016a92:	4638      	mov	r0, r7
 8016a94:	612e      	str	r6, [r5, #16]
 8016a96:	4621      	mov	r1, r4
 8016a98:	f7ff fd88 	bl	80165ac <_Bfree>
 8016a9c:	4628      	mov	r0, r5
 8016a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016aa2:	f842 0f04 	str.w	r0, [r2, #4]!
 8016aa6:	3301      	adds	r3, #1
 8016aa8:	e7c1      	b.n	8016a2e <__lshift+0x4a>
 8016aaa:	3904      	subs	r1, #4
 8016aac:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ab0:	f841 2f04 	str.w	r2, [r1, #4]!
 8016ab4:	4298      	cmp	r0, r3
 8016ab6:	d8f9      	bhi.n	8016aac <__lshift+0xc8>
 8016ab8:	e7ea      	b.n	8016a90 <__lshift+0xac>
 8016aba:	bf00      	nop
 8016abc:	080187e4 	.word	0x080187e4
 8016ac0:	080188d4 	.word	0x080188d4

08016ac4 <__mcmp>:
 8016ac4:	b530      	push	{r4, r5, lr}
 8016ac6:	6902      	ldr	r2, [r0, #16]
 8016ac8:	690c      	ldr	r4, [r1, #16]
 8016aca:	1b12      	subs	r2, r2, r4
 8016acc:	d10e      	bne.n	8016aec <__mcmp+0x28>
 8016ace:	f100 0314 	add.w	r3, r0, #20
 8016ad2:	3114      	adds	r1, #20
 8016ad4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016ad8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016adc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016ae0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016ae4:	42a5      	cmp	r5, r4
 8016ae6:	d003      	beq.n	8016af0 <__mcmp+0x2c>
 8016ae8:	d305      	bcc.n	8016af6 <__mcmp+0x32>
 8016aea:	2201      	movs	r2, #1
 8016aec:	4610      	mov	r0, r2
 8016aee:	bd30      	pop	{r4, r5, pc}
 8016af0:	4283      	cmp	r3, r0
 8016af2:	d3f3      	bcc.n	8016adc <__mcmp+0x18>
 8016af4:	e7fa      	b.n	8016aec <__mcmp+0x28>
 8016af6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016afa:	e7f7      	b.n	8016aec <__mcmp+0x28>

08016afc <__mdiff>:
 8016afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b00:	460c      	mov	r4, r1
 8016b02:	4606      	mov	r6, r0
 8016b04:	4611      	mov	r1, r2
 8016b06:	4620      	mov	r0, r4
 8016b08:	4690      	mov	r8, r2
 8016b0a:	f7ff ffdb 	bl	8016ac4 <__mcmp>
 8016b0e:	1e05      	subs	r5, r0, #0
 8016b10:	d110      	bne.n	8016b34 <__mdiff+0x38>
 8016b12:	4629      	mov	r1, r5
 8016b14:	4630      	mov	r0, r6
 8016b16:	f7ff fd09 	bl	801652c <_Balloc>
 8016b1a:	b930      	cbnz	r0, 8016b2a <__mdiff+0x2e>
 8016b1c:	4b3a      	ldr	r3, [pc, #232]	; (8016c08 <__mdiff+0x10c>)
 8016b1e:	4602      	mov	r2, r0
 8016b20:	f240 2132 	movw	r1, #562	; 0x232
 8016b24:	4839      	ldr	r0, [pc, #228]	; (8016c0c <__mdiff+0x110>)
 8016b26:	f7fe f91d 	bl	8014d64 <__assert_func>
 8016b2a:	2301      	movs	r3, #1
 8016b2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016b30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b34:	bfa4      	itt	ge
 8016b36:	4643      	movge	r3, r8
 8016b38:	46a0      	movge	r8, r4
 8016b3a:	4630      	mov	r0, r6
 8016b3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016b40:	bfa6      	itte	ge
 8016b42:	461c      	movge	r4, r3
 8016b44:	2500      	movge	r5, #0
 8016b46:	2501      	movlt	r5, #1
 8016b48:	f7ff fcf0 	bl	801652c <_Balloc>
 8016b4c:	b920      	cbnz	r0, 8016b58 <__mdiff+0x5c>
 8016b4e:	4b2e      	ldr	r3, [pc, #184]	; (8016c08 <__mdiff+0x10c>)
 8016b50:	4602      	mov	r2, r0
 8016b52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016b56:	e7e5      	b.n	8016b24 <__mdiff+0x28>
 8016b58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016b5c:	6926      	ldr	r6, [r4, #16]
 8016b5e:	60c5      	str	r5, [r0, #12]
 8016b60:	f104 0914 	add.w	r9, r4, #20
 8016b64:	f108 0514 	add.w	r5, r8, #20
 8016b68:	f100 0e14 	add.w	lr, r0, #20
 8016b6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016b70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016b74:	f108 0210 	add.w	r2, r8, #16
 8016b78:	46f2      	mov	sl, lr
 8016b7a:	2100      	movs	r1, #0
 8016b7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8016b80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016b84:	fa1f f883 	uxth.w	r8, r3
 8016b88:	fa11 f18b 	uxtah	r1, r1, fp
 8016b8c:	0c1b      	lsrs	r3, r3, #16
 8016b8e:	eba1 0808 	sub.w	r8, r1, r8
 8016b92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016b96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016b9a:	fa1f f888 	uxth.w	r8, r8
 8016b9e:	1419      	asrs	r1, r3, #16
 8016ba0:	454e      	cmp	r6, r9
 8016ba2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016ba6:	f84a 3b04 	str.w	r3, [sl], #4
 8016baa:	d8e7      	bhi.n	8016b7c <__mdiff+0x80>
 8016bac:	1b33      	subs	r3, r6, r4
 8016bae:	3b15      	subs	r3, #21
 8016bb0:	f023 0303 	bic.w	r3, r3, #3
 8016bb4:	3304      	adds	r3, #4
 8016bb6:	3415      	adds	r4, #21
 8016bb8:	42a6      	cmp	r6, r4
 8016bba:	bf38      	it	cc
 8016bbc:	2304      	movcc	r3, #4
 8016bbe:	441d      	add	r5, r3
 8016bc0:	4473      	add	r3, lr
 8016bc2:	469e      	mov	lr, r3
 8016bc4:	462e      	mov	r6, r5
 8016bc6:	4566      	cmp	r6, ip
 8016bc8:	d30e      	bcc.n	8016be8 <__mdiff+0xec>
 8016bca:	f10c 0203 	add.w	r2, ip, #3
 8016bce:	1b52      	subs	r2, r2, r5
 8016bd0:	f022 0203 	bic.w	r2, r2, #3
 8016bd4:	3d03      	subs	r5, #3
 8016bd6:	45ac      	cmp	ip, r5
 8016bd8:	bf38      	it	cc
 8016bda:	2200      	movcc	r2, #0
 8016bdc:	441a      	add	r2, r3
 8016bde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016be2:	b17b      	cbz	r3, 8016c04 <__mdiff+0x108>
 8016be4:	6107      	str	r7, [r0, #16]
 8016be6:	e7a3      	b.n	8016b30 <__mdiff+0x34>
 8016be8:	f856 8b04 	ldr.w	r8, [r6], #4
 8016bec:	fa11 f288 	uxtah	r2, r1, r8
 8016bf0:	1414      	asrs	r4, r2, #16
 8016bf2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016bf6:	b292      	uxth	r2, r2
 8016bf8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016bfc:	f84e 2b04 	str.w	r2, [lr], #4
 8016c00:	1421      	asrs	r1, r4, #16
 8016c02:	e7e0      	b.n	8016bc6 <__mdiff+0xca>
 8016c04:	3f01      	subs	r7, #1
 8016c06:	e7ea      	b.n	8016bde <__mdiff+0xe2>
 8016c08:	080187e4 	.word	0x080187e4
 8016c0c:	080188d4 	.word	0x080188d4

08016c10 <__ulp>:
 8016c10:	b082      	sub	sp, #8
 8016c12:	ed8d 0b00 	vstr	d0, [sp]
 8016c16:	9b01      	ldr	r3, [sp, #4]
 8016c18:	4912      	ldr	r1, [pc, #72]	; (8016c64 <__ulp+0x54>)
 8016c1a:	4019      	ands	r1, r3
 8016c1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016c20:	2900      	cmp	r1, #0
 8016c22:	dd05      	ble.n	8016c30 <__ulp+0x20>
 8016c24:	2200      	movs	r2, #0
 8016c26:	460b      	mov	r3, r1
 8016c28:	ec43 2b10 	vmov	d0, r2, r3
 8016c2c:	b002      	add	sp, #8
 8016c2e:	4770      	bx	lr
 8016c30:	4249      	negs	r1, r1
 8016c32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016c36:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016c3a:	f04f 0200 	mov.w	r2, #0
 8016c3e:	f04f 0300 	mov.w	r3, #0
 8016c42:	da04      	bge.n	8016c4e <__ulp+0x3e>
 8016c44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016c48:	fa41 f300 	asr.w	r3, r1, r0
 8016c4c:	e7ec      	b.n	8016c28 <__ulp+0x18>
 8016c4e:	f1a0 0114 	sub.w	r1, r0, #20
 8016c52:	291e      	cmp	r1, #30
 8016c54:	bfda      	itte	le
 8016c56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016c5a:	fa20 f101 	lsrle.w	r1, r0, r1
 8016c5e:	2101      	movgt	r1, #1
 8016c60:	460a      	mov	r2, r1
 8016c62:	e7e1      	b.n	8016c28 <__ulp+0x18>
 8016c64:	7ff00000 	.word	0x7ff00000

08016c68 <__b2d>:
 8016c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c6a:	6905      	ldr	r5, [r0, #16]
 8016c6c:	f100 0714 	add.w	r7, r0, #20
 8016c70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016c74:	1f2e      	subs	r6, r5, #4
 8016c76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016c7a:	4620      	mov	r0, r4
 8016c7c:	f7ff fd48 	bl	8016710 <__hi0bits>
 8016c80:	f1c0 0320 	rsb	r3, r0, #32
 8016c84:	280a      	cmp	r0, #10
 8016c86:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016d04 <__b2d+0x9c>
 8016c8a:	600b      	str	r3, [r1, #0]
 8016c8c:	dc14      	bgt.n	8016cb8 <__b2d+0x50>
 8016c8e:	f1c0 0e0b 	rsb	lr, r0, #11
 8016c92:	fa24 f10e 	lsr.w	r1, r4, lr
 8016c96:	42b7      	cmp	r7, r6
 8016c98:	ea41 030c 	orr.w	r3, r1, ip
 8016c9c:	bf34      	ite	cc
 8016c9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016ca2:	2100      	movcs	r1, #0
 8016ca4:	3015      	adds	r0, #21
 8016ca6:	fa04 f000 	lsl.w	r0, r4, r0
 8016caa:	fa21 f10e 	lsr.w	r1, r1, lr
 8016cae:	ea40 0201 	orr.w	r2, r0, r1
 8016cb2:	ec43 2b10 	vmov	d0, r2, r3
 8016cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cb8:	42b7      	cmp	r7, r6
 8016cba:	bf3a      	itte	cc
 8016cbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016cc0:	f1a5 0608 	subcc.w	r6, r5, #8
 8016cc4:	2100      	movcs	r1, #0
 8016cc6:	380b      	subs	r0, #11
 8016cc8:	d017      	beq.n	8016cfa <__b2d+0x92>
 8016cca:	f1c0 0c20 	rsb	ip, r0, #32
 8016cce:	fa04 f500 	lsl.w	r5, r4, r0
 8016cd2:	42be      	cmp	r6, r7
 8016cd4:	fa21 f40c 	lsr.w	r4, r1, ip
 8016cd8:	ea45 0504 	orr.w	r5, r5, r4
 8016cdc:	bf8c      	ite	hi
 8016cde:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016ce2:	2400      	movls	r4, #0
 8016ce4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016ce8:	fa01 f000 	lsl.w	r0, r1, r0
 8016cec:	fa24 f40c 	lsr.w	r4, r4, ip
 8016cf0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016cf4:	ea40 0204 	orr.w	r2, r0, r4
 8016cf8:	e7db      	b.n	8016cb2 <__b2d+0x4a>
 8016cfa:	ea44 030c 	orr.w	r3, r4, ip
 8016cfe:	460a      	mov	r2, r1
 8016d00:	e7d7      	b.n	8016cb2 <__b2d+0x4a>
 8016d02:	bf00      	nop
 8016d04:	3ff00000 	.word	0x3ff00000

08016d08 <__d2b>:
 8016d08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016d0c:	4689      	mov	r9, r1
 8016d0e:	2101      	movs	r1, #1
 8016d10:	ec57 6b10 	vmov	r6, r7, d0
 8016d14:	4690      	mov	r8, r2
 8016d16:	f7ff fc09 	bl	801652c <_Balloc>
 8016d1a:	4604      	mov	r4, r0
 8016d1c:	b930      	cbnz	r0, 8016d2c <__d2b+0x24>
 8016d1e:	4602      	mov	r2, r0
 8016d20:	4b25      	ldr	r3, [pc, #148]	; (8016db8 <__d2b+0xb0>)
 8016d22:	4826      	ldr	r0, [pc, #152]	; (8016dbc <__d2b+0xb4>)
 8016d24:	f240 310a 	movw	r1, #778	; 0x30a
 8016d28:	f7fe f81c 	bl	8014d64 <__assert_func>
 8016d2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016d30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016d34:	bb35      	cbnz	r5, 8016d84 <__d2b+0x7c>
 8016d36:	2e00      	cmp	r6, #0
 8016d38:	9301      	str	r3, [sp, #4]
 8016d3a:	d028      	beq.n	8016d8e <__d2b+0x86>
 8016d3c:	4668      	mov	r0, sp
 8016d3e:	9600      	str	r6, [sp, #0]
 8016d40:	f7ff fd06 	bl	8016750 <__lo0bits>
 8016d44:	9900      	ldr	r1, [sp, #0]
 8016d46:	b300      	cbz	r0, 8016d8a <__d2b+0x82>
 8016d48:	9a01      	ldr	r2, [sp, #4]
 8016d4a:	f1c0 0320 	rsb	r3, r0, #32
 8016d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8016d52:	430b      	orrs	r3, r1
 8016d54:	40c2      	lsrs	r2, r0
 8016d56:	6163      	str	r3, [r4, #20]
 8016d58:	9201      	str	r2, [sp, #4]
 8016d5a:	9b01      	ldr	r3, [sp, #4]
 8016d5c:	61a3      	str	r3, [r4, #24]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	bf14      	ite	ne
 8016d62:	2202      	movne	r2, #2
 8016d64:	2201      	moveq	r2, #1
 8016d66:	6122      	str	r2, [r4, #16]
 8016d68:	b1d5      	cbz	r5, 8016da0 <__d2b+0x98>
 8016d6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016d6e:	4405      	add	r5, r0
 8016d70:	f8c9 5000 	str.w	r5, [r9]
 8016d74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016d78:	f8c8 0000 	str.w	r0, [r8]
 8016d7c:	4620      	mov	r0, r4
 8016d7e:	b003      	add	sp, #12
 8016d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016d88:	e7d5      	b.n	8016d36 <__d2b+0x2e>
 8016d8a:	6161      	str	r1, [r4, #20]
 8016d8c:	e7e5      	b.n	8016d5a <__d2b+0x52>
 8016d8e:	a801      	add	r0, sp, #4
 8016d90:	f7ff fcde 	bl	8016750 <__lo0bits>
 8016d94:	9b01      	ldr	r3, [sp, #4]
 8016d96:	6163      	str	r3, [r4, #20]
 8016d98:	2201      	movs	r2, #1
 8016d9a:	6122      	str	r2, [r4, #16]
 8016d9c:	3020      	adds	r0, #32
 8016d9e:	e7e3      	b.n	8016d68 <__d2b+0x60>
 8016da0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016da4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016da8:	f8c9 0000 	str.w	r0, [r9]
 8016dac:	6918      	ldr	r0, [r3, #16]
 8016dae:	f7ff fcaf 	bl	8016710 <__hi0bits>
 8016db2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016db6:	e7df      	b.n	8016d78 <__d2b+0x70>
 8016db8:	080187e4 	.word	0x080187e4
 8016dbc:	080188d4 	.word	0x080188d4

08016dc0 <__ratio>:
 8016dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dc4:	4688      	mov	r8, r1
 8016dc6:	4669      	mov	r1, sp
 8016dc8:	4681      	mov	r9, r0
 8016dca:	f7ff ff4d 	bl	8016c68 <__b2d>
 8016dce:	a901      	add	r1, sp, #4
 8016dd0:	4640      	mov	r0, r8
 8016dd2:	ec55 4b10 	vmov	r4, r5, d0
 8016dd6:	ee10 aa10 	vmov	sl, s0
 8016dda:	f7ff ff45 	bl	8016c68 <__b2d>
 8016dde:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016de2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016de6:	1a59      	subs	r1, r3, r1
 8016de8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016dec:	1ad3      	subs	r3, r2, r3
 8016dee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016df2:	ec57 6b10 	vmov	r6, r7, d0
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	bfd6      	itet	le
 8016dfa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016dfe:	462a      	movgt	r2, r5
 8016e00:	463a      	movle	r2, r7
 8016e02:	46ab      	mov	fp, r5
 8016e04:	bfd6      	itet	le
 8016e06:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8016e0a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8016e0e:	ee00 3a90 	vmovle	s1, r3
 8016e12:	ec4b ab17 	vmov	d7, sl, fp
 8016e16:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8016e1a:	b003      	add	sp, #12
 8016e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016e20 <__copybits>:
 8016e20:	3901      	subs	r1, #1
 8016e22:	b570      	push	{r4, r5, r6, lr}
 8016e24:	1149      	asrs	r1, r1, #5
 8016e26:	6914      	ldr	r4, [r2, #16]
 8016e28:	3101      	adds	r1, #1
 8016e2a:	f102 0314 	add.w	r3, r2, #20
 8016e2e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016e32:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016e36:	1f05      	subs	r5, r0, #4
 8016e38:	42a3      	cmp	r3, r4
 8016e3a:	d30c      	bcc.n	8016e56 <__copybits+0x36>
 8016e3c:	1aa3      	subs	r3, r4, r2
 8016e3e:	3b11      	subs	r3, #17
 8016e40:	f023 0303 	bic.w	r3, r3, #3
 8016e44:	3211      	adds	r2, #17
 8016e46:	42a2      	cmp	r2, r4
 8016e48:	bf88      	it	hi
 8016e4a:	2300      	movhi	r3, #0
 8016e4c:	4418      	add	r0, r3
 8016e4e:	2300      	movs	r3, #0
 8016e50:	4288      	cmp	r0, r1
 8016e52:	d305      	bcc.n	8016e60 <__copybits+0x40>
 8016e54:	bd70      	pop	{r4, r5, r6, pc}
 8016e56:	f853 6b04 	ldr.w	r6, [r3], #4
 8016e5a:	f845 6f04 	str.w	r6, [r5, #4]!
 8016e5e:	e7eb      	b.n	8016e38 <__copybits+0x18>
 8016e60:	f840 3b04 	str.w	r3, [r0], #4
 8016e64:	e7f4      	b.n	8016e50 <__copybits+0x30>

08016e66 <__any_on>:
 8016e66:	f100 0214 	add.w	r2, r0, #20
 8016e6a:	6900      	ldr	r0, [r0, #16]
 8016e6c:	114b      	asrs	r3, r1, #5
 8016e6e:	4298      	cmp	r0, r3
 8016e70:	b510      	push	{r4, lr}
 8016e72:	db11      	blt.n	8016e98 <__any_on+0x32>
 8016e74:	dd0a      	ble.n	8016e8c <__any_on+0x26>
 8016e76:	f011 011f 	ands.w	r1, r1, #31
 8016e7a:	d007      	beq.n	8016e8c <__any_on+0x26>
 8016e7c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016e80:	fa24 f001 	lsr.w	r0, r4, r1
 8016e84:	fa00 f101 	lsl.w	r1, r0, r1
 8016e88:	428c      	cmp	r4, r1
 8016e8a:	d10b      	bne.n	8016ea4 <__any_on+0x3e>
 8016e8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016e90:	4293      	cmp	r3, r2
 8016e92:	d803      	bhi.n	8016e9c <__any_on+0x36>
 8016e94:	2000      	movs	r0, #0
 8016e96:	bd10      	pop	{r4, pc}
 8016e98:	4603      	mov	r3, r0
 8016e9a:	e7f7      	b.n	8016e8c <__any_on+0x26>
 8016e9c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016ea0:	2900      	cmp	r1, #0
 8016ea2:	d0f5      	beq.n	8016e90 <__any_on+0x2a>
 8016ea4:	2001      	movs	r0, #1
 8016ea6:	e7f6      	b.n	8016e96 <__any_on+0x30>

08016ea8 <_realloc_r>:
 8016ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eac:	4680      	mov	r8, r0
 8016eae:	4614      	mov	r4, r2
 8016eb0:	460e      	mov	r6, r1
 8016eb2:	b921      	cbnz	r1, 8016ebe <_realloc_r+0x16>
 8016eb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016eb8:	4611      	mov	r1, r2
 8016eba:	f7fb bf7d 	b.w	8012db8 <_malloc_r>
 8016ebe:	b92a      	cbnz	r2, 8016ecc <_realloc_r+0x24>
 8016ec0:	f7fb ff0e 	bl	8012ce0 <_free_r>
 8016ec4:	4625      	mov	r5, r4
 8016ec6:	4628      	mov	r0, r5
 8016ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ecc:	f000 fba0 	bl	8017610 <_malloc_usable_size_r>
 8016ed0:	4284      	cmp	r4, r0
 8016ed2:	4607      	mov	r7, r0
 8016ed4:	d802      	bhi.n	8016edc <_realloc_r+0x34>
 8016ed6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016eda:	d812      	bhi.n	8016f02 <_realloc_r+0x5a>
 8016edc:	4621      	mov	r1, r4
 8016ede:	4640      	mov	r0, r8
 8016ee0:	f7fb ff6a 	bl	8012db8 <_malloc_r>
 8016ee4:	4605      	mov	r5, r0
 8016ee6:	2800      	cmp	r0, #0
 8016ee8:	d0ed      	beq.n	8016ec6 <_realloc_r+0x1e>
 8016eea:	42bc      	cmp	r4, r7
 8016eec:	4622      	mov	r2, r4
 8016eee:	4631      	mov	r1, r6
 8016ef0:	bf28      	it	cs
 8016ef2:	463a      	movcs	r2, r7
 8016ef4:	f7fb fec8 	bl	8012c88 <memcpy>
 8016ef8:	4631      	mov	r1, r6
 8016efa:	4640      	mov	r0, r8
 8016efc:	f7fb fef0 	bl	8012ce0 <_free_r>
 8016f00:	e7e1      	b.n	8016ec6 <_realloc_r+0x1e>
 8016f02:	4635      	mov	r5, r6
 8016f04:	e7df      	b.n	8016ec6 <_realloc_r+0x1e>

08016f06 <__ssputs_r>:
 8016f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f0a:	688e      	ldr	r6, [r1, #8]
 8016f0c:	429e      	cmp	r6, r3
 8016f0e:	4682      	mov	sl, r0
 8016f10:	460c      	mov	r4, r1
 8016f12:	4690      	mov	r8, r2
 8016f14:	461f      	mov	r7, r3
 8016f16:	d838      	bhi.n	8016f8a <__ssputs_r+0x84>
 8016f18:	898a      	ldrh	r2, [r1, #12]
 8016f1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016f1e:	d032      	beq.n	8016f86 <__ssputs_r+0x80>
 8016f20:	6825      	ldr	r5, [r4, #0]
 8016f22:	6909      	ldr	r1, [r1, #16]
 8016f24:	eba5 0901 	sub.w	r9, r5, r1
 8016f28:	6965      	ldr	r5, [r4, #20]
 8016f2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016f2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016f32:	3301      	adds	r3, #1
 8016f34:	444b      	add	r3, r9
 8016f36:	106d      	asrs	r5, r5, #1
 8016f38:	429d      	cmp	r5, r3
 8016f3a:	bf38      	it	cc
 8016f3c:	461d      	movcc	r5, r3
 8016f3e:	0553      	lsls	r3, r2, #21
 8016f40:	d531      	bpl.n	8016fa6 <__ssputs_r+0xa0>
 8016f42:	4629      	mov	r1, r5
 8016f44:	f7fb ff38 	bl	8012db8 <_malloc_r>
 8016f48:	4606      	mov	r6, r0
 8016f4a:	b950      	cbnz	r0, 8016f62 <__ssputs_r+0x5c>
 8016f4c:	230c      	movs	r3, #12
 8016f4e:	f8ca 3000 	str.w	r3, [sl]
 8016f52:	89a3      	ldrh	r3, [r4, #12]
 8016f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f58:	81a3      	strh	r3, [r4, #12]
 8016f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f62:	6921      	ldr	r1, [r4, #16]
 8016f64:	464a      	mov	r2, r9
 8016f66:	f7fb fe8f 	bl	8012c88 <memcpy>
 8016f6a:	89a3      	ldrh	r3, [r4, #12]
 8016f6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f74:	81a3      	strh	r3, [r4, #12]
 8016f76:	6126      	str	r6, [r4, #16]
 8016f78:	6165      	str	r5, [r4, #20]
 8016f7a:	444e      	add	r6, r9
 8016f7c:	eba5 0509 	sub.w	r5, r5, r9
 8016f80:	6026      	str	r6, [r4, #0]
 8016f82:	60a5      	str	r5, [r4, #8]
 8016f84:	463e      	mov	r6, r7
 8016f86:	42be      	cmp	r6, r7
 8016f88:	d900      	bls.n	8016f8c <__ssputs_r+0x86>
 8016f8a:	463e      	mov	r6, r7
 8016f8c:	6820      	ldr	r0, [r4, #0]
 8016f8e:	4632      	mov	r2, r6
 8016f90:	4641      	mov	r1, r8
 8016f92:	f000 fb23 	bl	80175dc <memmove>
 8016f96:	68a3      	ldr	r3, [r4, #8]
 8016f98:	1b9b      	subs	r3, r3, r6
 8016f9a:	60a3      	str	r3, [r4, #8]
 8016f9c:	6823      	ldr	r3, [r4, #0]
 8016f9e:	4433      	add	r3, r6
 8016fa0:	6023      	str	r3, [r4, #0]
 8016fa2:	2000      	movs	r0, #0
 8016fa4:	e7db      	b.n	8016f5e <__ssputs_r+0x58>
 8016fa6:	462a      	mov	r2, r5
 8016fa8:	f7ff ff7e 	bl	8016ea8 <_realloc_r>
 8016fac:	4606      	mov	r6, r0
 8016fae:	2800      	cmp	r0, #0
 8016fb0:	d1e1      	bne.n	8016f76 <__ssputs_r+0x70>
 8016fb2:	6921      	ldr	r1, [r4, #16]
 8016fb4:	4650      	mov	r0, sl
 8016fb6:	f7fb fe93 	bl	8012ce0 <_free_r>
 8016fba:	e7c7      	b.n	8016f4c <__ssputs_r+0x46>

08016fbc <_svfiprintf_r>:
 8016fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fc0:	4698      	mov	r8, r3
 8016fc2:	898b      	ldrh	r3, [r1, #12]
 8016fc4:	061b      	lsls	r3, r3, #24
 8016fc6:	b09d      	sub	sp, #116	; 0x74
 8016fc8:	4607      	mov	r7, r0
 8016fca:	460d      	mov	r5, r1
 8016fcc:	4614      	mov	r4, r2
 8016fce:	d50e      	bpl.n	8016fee <_svfiprintf_r+0x32>
 8016fd0:	690b      	ldr	r3, [r1, #16]
 8016fd2:	b963      	cbnz	r3, 8016fee <_svfiprintf_r+0x32>
 8016fd4:	2140      	movs	r1, #64	; 0x40
 8016fd6:	f7fb feef 	bl	8012db8 <_malloc_r>
 8016fda:	6028      	str	r0, [r5, #0]
 8016fdc:	6128      	str	r0, [r5, #16]
 8016fde:	b920      	cbnz	r0, 8016fea <_svfiprintf_r+0x2e>
 8016fe0:	230c      	movs	r3, #12
 8016fe2:	603b      	str	r3, [r7, #0]
 8016fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016fe8:	e0d1      	b.n	801718e <_svfiprintf_r+0x1d2>
 8016fea:	2340      	movs	r3, #64	; 0x40
 8016fec:	616b      	str	r3, [r5, #20]
 8016fee:	2300      	movs	r3, #0
 8016ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8016ff2:	2320      	movs	r3, #32
 8016ff4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8016ffc:	2330      	movs	r3, #48	; 0x30
 8016ffe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80171a8 <_svfiprintf_r+0x1ec>
 8017002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017006:	f04f 0901 	mov.w	r9, #1
 801700a:	4623      	mov	r3, r4
 801700c:	469a      	mov	sl, r3
 801700e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017012:	b10a      	cbz	r2, 8017018 <_svfiprintf_r+0x5c>
 8017014:	2a25      	cmp	r2, #37	; 0x25
 8017016:	d1f9      	bne.n	801700c <_svfiprintf_r+0x50>
 8017018:	ebba 0b04 	subs.w	fp, sl, r4
 801701c:	d00b      	beq.n	8017036 <_svfiprintf_r+0x7a>
 801701e:	465b      	mov	r3, fp
 8017020:	4622      	mov	r2, r4
 8017022:	4629      	mov	r1, r5
 8017024:	4638      	mov	r0, r7
 8017026:	f7ff ff6e 	bl	8016f06 <__ssputs_r>
 801702a:	3001      	adds	r0, #1
 801702c:	f000 80aa 	beq.w	8017184 <_svfiprintf_r+0x1c8>
 8017030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017032:	445a      	add	r2, fp
 8017034:	9209      	str	r2, [sp, #36]	; 0x24
 8017036:	f89a 3000 	ldrb.w	r3, [sl]
 801703a:	2b00      	cmp	r3, #0
 801703c:	f000 80a2 	beq.w	8017184 <_svfiprintf_r+0x1c8>
 8017040:	2300      	movs	r3, #0
 8017042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801704a:	f10a 0a01 	add.w	sl, sl, #1
 801704e:	9304      	str	r3, [sp, #16]
 8017050:	9307      	str	r3, [sp, #28]
 8017052:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017056:	931a      	str	r3, [sp, #104]	; 0x68
 8017058:	4654      	mov	r4, sl
 801705a:	2205      	movs	r2, #5
 801705c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017060:	4851      	ldr	r0, [pc, #324]	; (80171a8 <_svfiprintf_r+0x1ec>)
 8017062:	f7e9 f8ed 	bl	8000240 <memchr>
 8017066:	9a04      	ldr	r2, [sp, #16]
 8017068:	b9d8      	cbnz	r0, 80170a2 <_svfiprintf_r+0xe6>
 801706a:	06d0      	lsls	r0, r2, #27
 801706c:	bf44      	itt	mi
 801706e:	2320      	movmi	r3, #32
 8017070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017074:	0711      	lsls	r1, r2, #28
 8017076:	bf44      	itt	mi
 8017078:	232b      	movmi	r3, #43	; 0x2b
 801707a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801707e:	f89a 3000 	ldrb.w	r3, [sl]
 8017082:	2b2a      	cmp	r3, #42	; 0x2a
 8017084:	d015      	beq.n	80170b2 <_svfiprintf_r+0xf6>
 8017086:	9a07      	ldr	r2, [sp, #28]
 8017088:	4654      	mov	r4, sl
 801708a:	2000      	movs	r0, #0
 801708c:	f04f 0c0a 	mov.w	ip, #10
 8017090:	4621      	mov	r1, r4
 8017092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017096:	3b30      	subs	r3, #48	; 0x30
 8017098:	2b09      	cmp	r3, #9
 801709a:	d94e      	bls.n	801713a <_svfiprintf_r+0x17e>
 801709c:	b1b0      	cbz	r0, 80170cc <_svfiprintf_r+0x110>
 801709e:	9207      	str	r2, [sp, #28]
 80170a0:	e014      	b.n	80170cc <_svfiprintf_r+0x110>
 80170a2:	eba0 0308 	sub.w	r3, r0, r8
 80170a6:	fa09 f303 	lsl.w	r3, r9, r3
 80170aa:	4313      	orrs	r3, r2
 80170ac:	9304      	str	r3, [sp, #16]
 80170ae:	46a2      	mov	sl, r4
 80170b0:	e7d2      	b.n	8017058 <_svfiprintf_r+0x9c>
 80170b2:	9b03      	ldr	r3, [sp, #12]
 80170b4:	1d19      	adds	r1, r3, #4
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	9103      	str	r1, [sp, #12]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	bfbb      	ittet	lt
 80170be:	425b      	neglt	r3, r3
 80170c0:	f042 0202 	orrlt.w	r2, r2, #2
 80170c4:	9307      	strge	r3, [sp, #28]
 80170c6:	9307      	strlt	r3, [sp, #28]
 80170c8:	bfb8      	it	lt
 80170ca:	9204      	strlt	r2, [sp, #16]
 80170cc:	7823      	ldrb	r3, [r4, #0]
 80170ce:	2b2e      	cmp	r3, #46	; 0x2e
 80170d0:	d10c      	bne.n	80170ec <_svfiprintf_r+0x130>
 80170d2:	7863      	ldrb	r3, [r4, #1]
 80170d4:	2b2a      	cmp	r3, #42	; 0x2a
 80170d6:	d135      	bne.n	8017144 <_svfiprintf_r+0x188>
 80170d8:	9b03      	ldr	r3, [sp, #12]
 80170da:	1d1a      	adds	r2, r3, #4
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	9203      	str	r2, [sp, #12]
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	bfb8      	it	lt
 80170e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80170e8:	3402      	adds	r4, #2
 80170ea:	9305      	str	r3, [sp, #20]
 80170ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80171b8 <_svfiprintf_r+0x1fc>
 80170f0:	7821      	ldrb	r1, [r4, #0]
 80170f2:	2203      	movs	r2, #3
 80170f4:	4650      	mov	r0, sl
 80170f6:	f7e9 f8a3 	bl	8000240 <memchr>
 80170fa:	b140      	cbz	r0, 801710e <_svfiprintf_r+0x152>
 80170fc:	2340      	movs	r3, #64	; 0x40
 80170fe:	eba0 000a 	sub.w	r0, r0, sl
 8017102:	fa03 f000 	lsl.w	r0, r3, r0
 8017106:	9b04      	ldr	r3, [sp, #16]
 8017108:	4303      	orrs	r3, r0
 801710a:	3401      	adds	r4, #1
 801710c:	9304      	str	r3, [sp, #16]
 801710e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017112:	4826      	ldr	r0, [pc, #152]	; (80171ac <_svfiprintf_r+0x1f0>)
 8017114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017118:	2206      	movs	r2, #6
 801711a:	f7e9 f891 	bl	8000240 <memchr>
 801711e:	2800      	cmp	r0, #0
 8017120:	d038      	beq.n	8017194 <_svfiprintf_r+0x1d8>
 8017122:	4b23      	ldr	r3, [pc, #140]	; (80171b0 <_svfiprintf_r+0x1f4>)
 8017124:	bb1b      	cbnz	r3, 801716e <_svfiprintf_r+0x1b2>
 8017126:	9b03      	ldr	r3, [sp, #12]
 8017128:	3307      	adds	r3, #7
 801712a:	f023 0307 	bic.w	r3, r3, #7
 801712e:	3308      	adds	r3, #8
 8017130:	9303      	str	r3, [sp, #12]
 8017132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017134:	4433      	add	r3, r6
 8017136:	9309      	str	r3, [sp, #36]	; 0x24
 8017138:	e767      	b.n	801700a <_svfiprintf_r+0x4e>
 801713a:	fb0c 3202 	mla	r2, ip, r2, r3
 801713e:	460c      	mov	r4, r1
 8017140:	2001      	movs	r0, #1
 8017142:	e7a5      	b.n	8017090 <_svfiprintf_r+0xd4>
 8017144:	2300      	movs	r3, #0
 8017146:	3401      	adds	r4, #1
 8017148:	9305      	str	r3, [sp, #20]
 801714a:	4619      	mov	r1, r3
 801714c:	f04f 0c0a 	mov.w	ip, #10
 8017150:	4620      	mov	r0, r4
 8017152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017156:	3a30      	subs	r2, #48	; 0x30
 8017158:	2a09      	cmp	r2, #9
 801715a:	d903      	bls.n	8017164 <_svfiprintf_r+0x1a8>
 801715c:	2b00      	cmp	r3, #0
 801715e:	d0c5      	beq.n	80170ec <_svfiprintf_r+0x130>
 8017160:	9105      	str	r1, [sp, #20]
 8017162:	e7c3      	b.n	80170ec <_svfiprintf_r+0x130>
 8017164:	fb0c 2101 	mla	r1, ip, r1, r2
 8017168:	4604      	mov	r4, r0
 801716a:	2301      	movs	r3, #1
 801716c:	e7f0      	b.n	8017150 <_svfiprintf_r+0x194>
 801716e:	ab03      	add	r3, sp, #12
 8017170:	9300      	str	r3, [sp, #0]
 8017172:	462a      	mov	r2, r5
 8017174:	4b0f      	ldr	r3, [pc, #60]	; (80171b4 <_svfiprintf_r+0x1f8>)
 8017176:	a904      	add	r1, sp, #16
 8017178:	4638      	mov	r0, r7
 801717a:	f7fb ff21 	bl	8012fc0 <_printf_float>
 801717e:	1c42      	adds	r2, r0, #1
 8017180:	4606      	mov	r6, r0
 8017182:	d1d6      	bne.n	8017132 <_svfiprintf_r+0x176>
 8017184:	89ab      	ldrh	r3, [r5, #12]
 8017186:	065b      	lsls	r3, r3, #25
 8017188:	f53f af2c 	bmi.w	8016fe4 <_svfiprintf_r+0x28>
 801718c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801718e:	b01d      	add	sp, #116	; 0x74
 8017190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017194:	ab03      	add	r3, sp, #12
 8017196:	9300      	str	r3, [sp, #0]
 8017198:	462a      	mov	r2, r5
 801719a:	4b06      	ldr	r3, [pc, #24]	; (80171b4 <_svfiprintf_r+0x1f8>)
 801719c:	a904      	add	r1, sp, #16
 801719e:	4638      	mov	r0, r7
 80171a0:	f7fc f99a 	bl	80134d8 <_printf_i>
 80171a4:	e7eb      	b.n	801717e <_svfiprintf_r+0x1c2>
 80171a6:	bf00      	nop
 80171a8:	08018a2c 	.word	0x08018a2c
 80171ac:	08018a36 	.word	0x08018a36
 80171b0:	08012fc1 	.word	0x08012fc1
 80171b4:	08016f07 	.word	0x08016f07
 80171b8:	08018a32 	.word	0x08018a32

080171bc <__sfputc_r>:
 80171bc:	6893      	ldr	r3, [r2, #8]
 80171be:	3b01      	subs	r3, #1
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	b410      	push	{r4}
 80171c4:	6093      	str	r3, [r2, #8]
 80171c6:	da08      	bge.n	80171da <__sfputc_r+0x1e>
 80171c8:	6994      	ldr	r4, [r2, #24]
 80171ca:	42a3      	cmp	r3, r4
 80171cc:	db01      	blt.n	80171d2 <__sfputc_r+0x16>
 80171ce:	290a      	cmp	r1, #10
 80171d0:	d103      	bne.n	80171da <__sfputc_r+0x1e>
 80171d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171d6:	f7fd bd05 	b.w	8014be4 <__swbuf_r>
 80171da:	6813      	ldr	r3, [r2, #0]
 80171dc:	1c58      	adds	r0, r3, #1
 80171de:	6010      	str	r0, [r2, #0]
 80171e0:	7019      	strb	r1, [r3, #0]
 80171e2:	4608      	mov	r0, r1
 80171e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80171e8:	4770      	bx	lr

080171ea <__sfputs_r>:
 80171ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171ec:	4606      	mov	r6, r0
 80171ee:	460f      	mov	r7, r1
 80171f0:	4614      	mov	r4, r2
 80171f2:	18d5      	adds	r5, r2, r3
 80171f4:	42ac      	cmp	r4, r5
 80171f6:	d101      	bne.n	80171fc <__sfputs_r+0x12>
 80171f8:	2000      	movs	r0, #0
 80171fa:	e007      	b.n	801720c <__sfputs_r+0x22>
 80171fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017200:	463a      	mov	r2, r7
 8017202:	4630      	mov	r0, r6
 8017204:	f7ff ffda 	bl	80171bc <__sfputc_r>
 8017208:	1c43      	adds	r3, r0, #1
 801720a:	d1f3      	bne.n	80171f4 <__sfputs_r+0xa>
 801720c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017210 <_vfiprintf_r>:
 8017210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017214:	460d      	mov	r5, r1
 8017216:	b09d      	sub	sp, #116	; 0x74
 8017218:	4614      	mov	r4, r2
 801721a:	4698      	mov	r8, r3
 801721c:	4606      	mov	r6, r0
 801721e:	b118      	cbz	r0, 8017228 <_vfiprintf_r+0x18>
 8017220:	6983      	ldr	r3, [r0, #24]
 8017222:	b90b      	cbnz	r3, 8017228 <_vfiprintf_r+0x18>
 8017224:	f7fe fcdc 	bl	8015be0 <__sinit>
 8017228:	4b89      	ldr	r3, [pc, #548]	; (8017450 <_vfiprintf_r+0x240>)
 801722a:	429d      	cmp	r5, r3
 801722c:	d11b      	bne.n	8017266 <_vfiprintf_r+0x56>
 801722e:	6875      	ldr	r5, [r6, #4]
 8017230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017232:	07d9      	lsls	r1, r3, #31
 8017234:	d405      	bmi.n	8017242 <_vfiprintf_r+0x32>
 8017236:	89ab      	ldrh	r3, [r5, #12]
 8017238:	059a      	lsls	r2, r3, #22
 801723a:	d402      	bmi.n	8017242 <_vfiprintf_r+0x32>
 801723c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801723e:	f7fb fd10 	bl	8012c62 <__retarget_lock_acquire_recursive>
 8017242:	89ab      	ldrh	r3, [r5, #12]
 8017244:	071b      	lsls	r3, r3, #28
 8017246:	d501      	bpl.n	801724c <_vfiprintf_r+0x3c>
 8017248:	692b      	ldr	r3, [r5, #16]
 801724a:	b9eb      	cbnz	r3, 8017288 <_vfiprintf_r+0x78>
 801724c:	4629      	mov	r1, r5
 801724e:	4630      	mov	r0, r6
 8017250:	f7fd fd1a 	bl	8014c88 <__swsetup_r>
 8017254:	b1c0      	cbz	r0, 8017288 <_vfiprintf_r+0x78>
 8017256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017258:	07dc      	lsls	r4, r3, #31
 801725a:	d50e      	bpl.n	801727a <_vfiprintf_r+0x6a>
 801725c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017260:	b01d      	add	sp, #116	; 0x74
 8017262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017266:	4b7b      	ldr	r3, [pc, #492]	; (8017454 <_vfiprintf_r+0x244>)
 8017268:	429d      	cmp	r5, r3
 801726a:	d101      	bne.n	8017270 <_vfiprintf_r+0x60>
 801726c:	68b5      	ldr	r5, [r6, #8]
 801726e:	e7df      	b.n	8017230 <_vfiprintf_r+0x20>
 8017270:	4b79      	ldr	r3, [pc, #484]	; (8017458 <_vfiprintf_r+0x248>)
 8017272:	429d      	cmp	r5, r3
 8017274:	bf08      	it	eq
 8017276:	68f5      	ldreq	r5, [r6, #12]
 8017278:	e7da      	b.n	8017230 <_vfiprintf_r+0x20>
 801727a:	89ab      	ldrh	r3, [r5, #12]
 801727c:	0598      	lsls	r0, r3, #22
 801727e:	d4ed      	bmi.n	801725c <_vfiprintf_r+0x4c>
 8017280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017282:	f7fb fcef 	bl	8012c64 <__retarget_lock_release_recursive>
 8017286:	e7e9      	b.n	801725c <_vfiprintf_r+0x4c>
 8017288:	2300      	movs	r3, #0
 801728a:	9309      	str	r3, [sp, #36]	; 0x24
 801728c:	2320      	movs	r3, #32
 801728e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017292:	f8cd 800c 	str.w	r8, [sp, #12]
 8017296:	2330      	movs	r3, #48	; 0x30
 8017298:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801745c <_vfiprintf_r+0x24c>
 801729c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80172a0:	f04f 0901 	mov.w	r9, #1
 80172a4:	4623      	mov	r3, r4
 80172a6:	469a      	mov	sl, r3
 80172a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172ac:	b10a      	cbz	r2, 80172b2 <_vfiprintf_r+0xa2>
 80172ae:	2a25      	cmp	r2, #37	; 0x25
 80172b0:	d1f9      	bne.n	80172a6 <_vfiprintf_r+0x96>
 80172b2:	ebba 0b04 	subs.w	fp, sl, r4
 80172b6:	d00b      	beq.n	80172d0 <_vfiprintf_r+0xc0>
 80172b8:	465b      	mov	r3, fp
 80172ba:	4622      	mov	r2, r4
 80172bc:	4629      	mov	r1, r5
 80172be:	4630      	mov	r0, r6
 80172c0:	f7ff ff93 	bl	80171ea <__sfputs_r>
 80172c4:	3001      	adds	r0, #1
 80172c6:	f000 80aa 	beq.w	801741e <_vfiprintf_r+0x20e>
 80172ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172cc:	445a      	add	r2, fp
 80172ce:	9209      	str	r2, [sp, #36]	; 0x24
 80172d0:	f89a 3000 	ldrb.w	r3, [sl]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	f000 80a2 	beq.w	801741e <_vfiprintf_r+0x20e>
 80172da:	2300      	movs	r3, #0
 80172dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80172e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80172e4:	f10a 0a01 	add.w	sl, sl, #1
 80172e8:	9304      	str	r3, [sp, #16]
 80172ea:	9307      	str	r3, [sp, #28]
 80172ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80172f0:	931a      	str	r3, [sp, #104]	; 0x68
 80172f2:	4654      	mov	r4, sl
 80172f4:	2205      	movs	r2, #5
 80172f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172fa:	4858      	ldr	r0, [pc, #352]	; (801745c <_vfiprintf_r+0x24c>)
 80172fc:	f7e8 ffa0 	bl	8000240 <memchr>
 8017300:	9a04      	ldr	r2, [sp, #16]
 8017302:	b9d8      	cbnz	r0, 801733c <_vfiprintf_r+0x12c>
 8017304:	06d1      	lsls	r1, r2, #27
 8017306:	bf44      	itt	mi
 8017308:	2320      	movmi	r3, #32
 801730a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801730e:	0713      	lsls	r3, r2, #28
 8017310:	bf44      	itt	mi
 8017312:	232b      	movmi	r3, #43	; 0x2b
 8017314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017318:	f89a 3000 	ldrb.w	r3, [sl]
 801731c:	2b2a      	cmp	r3, #42	; 0x2a
 801731e:	d015      	beq.n	801734c <_vfiprintf_r+0x13c>
 8017320:	9a07      	ldr	r2, [sp, #28]
 8017322:	4654      	mov	r4, sl
 8017324:	2000      	movs	r0, #0
 8017326:	f04f 0c0a 	mov.w	ip, #10
 801732a:	4621      	mov	r1, r4
 801732c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017330:	3b30      	subs	r3, #48	; 0x30
 8017332:	2b09      	cmp	r3, #9
 8017334:	d94e      	bls.n	80173d4 <_vfiprintf_r+0x1c4>
 8017336:	b1b0      	cbz	r0, 8017366 <_vfiprintf_r+0x156>
 8017338:	9207      	str	r2, [sp, #28]
 801733a:	e014      	b.n	8017366 <_vfiprintf_r+0x156>
 801733c:	eba0 0308 	sub.w	r3, r0, r8
 8017340:	fa09 f303 	lsl.w	r3, r9, r3
 8017344:	4313      	orrs	r3, r2
 8017346:	9304      	str	r3, [sp, #16]
 8017348:	46a2      	mov	sl, r4
 801734a:	e7d2      	b.n	80172f2 <_vfiprintf_r+0xe2>
 801734c:	9b03      	ldr	r3, [sp, #12]
 801734e:	1d19      	adds	r1, r3, #4
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	9103      	str	r1, [sp, #12]
 8017354:	2b00      	cmp	r3, #0
 8017356:	bfbb      	ittet	lt
 8017358:	425b      	neglt	r3, r3
 801735a:	f042 0202 	orrlt.w	r2, r2, #2
 801735e:	9307      	strge	r3, [sp, #28]
 8017360:	9307      	strlt	r3, [sp, #28]
 8017362:	bfb8      	it	lt
 8017364:	9204      	strlt	r2, [sp, #16]
 8017366:	7823      	ldrb	r3, [r4, #0]
 8017368:	2b2e      	cmp	r3, #46	; 0x2e
 801736a:	d10c      	bne.n	8017386 <_vfiprintf_r+0x176>
 801736c:	7863      	ldrb	r3, [r4, #1]
 801736e:	2b2a      	cmp	r3, #42	; 0x2a
 8017370:	d135      	bne.n	80173de <_vfiprintf_r+0x1ce>
 8017372:	9b03      	ldr	r3, [sp, #12]
 8017374:	1d1a      	adds	r2, r3, #4
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	9203      	str	r2, [sp, #12]
 801737a:	2b00      	cmp	r3, #0
 801737c:	bfb8      	it	lt
 801737e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017382:	3402      	adds	r4, #2
 8017384:	9305      	str	r3, [sp, #20]
 8017386:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801746c <_vfiprintf_r+0x25c>
 801738a:	7821      	ldrb	r1, [r4, #0]
 801738c:	2203      	movs	r2, #3
 801738e:	4650      	mov	r0, sl
 8017390:	f7e8 ff56 	bl	8000240 <memchr>
 8017394:	b140      	cbz	r0, 80173a8 <_vfiprintf_r+0x198>
 8017396:	2340      	movs	r3, #64	; 0x40
 8017398:	eba0 000a 	sub.w	r0, r0, sl
 801739c:	fa03 f000 	lsl.w	r0, r3, r0
 80173a0:	9b04      	ldr	r3, [sp, #16]
 80173a2:	4303      	orrs	r3, r0
 80173a4:	3401      	adds	r4, #1
 80173a6:	9304      	str	r3, [sp, #16]
 80173a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173ac:	482c      	ldr	r0, [pc, #176]	; (8017460 <_vfiprintf_r+0x250>)
 80173ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80173b2:	2206      	movs	r2, #6
 80173b4:	f7e8 ff44 	bl	8000240 <memchr>
 80173b8:	2800      	cmp	r0, #0
 80173ba:	d03f      	beq.n	801743c <_vfiprintf_r+0x22c>
 80173bc:	4b29      	ldr	r3, [pc, #164]	; (8017464 <_vfiprintf_r+0x254>)
 80173be:	bb1b      	cbnz	r3, 8017408 <_vfiprintf_r+0x1f8>
 80173c0:	9b03      	ldr	r3, [sp, #12]
 80173c2:	3307      	adds	r3, #7
 80173c4:	f023 0307 	bic.w	r3, r3, #7
 80173c8:	3308      	adds	r3, #8
 80173ca:	9303      	str	r3, [sp, #12]
 80173cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173ce:	443b      	add	r3, r7
 80173d0:	9309      	str	r3, [sp, #36]	; 0x24
 80173d2:	e767      	b.n	80172a4 <_vfiprintf_r+0x94>
 80173d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80173d8:	460c      	mov	r4, r1
 80173da:	2001      	movs	r0, #1
 80173dc:	e7a5      	b.n	801732a <_vfiprintf_r+0x11a>
 80173de:	2300      	movs	r3, #0
 80173e0:	3401      	adds	r4, #1
 80173e2:	9305      	str	r3, [sp, #20]
 80173e4:	4619      	mov	r1, r3
 80173e6:	f04f 0c0a 	mov.w	ip, #10
 80173ea:	4620      	mov	r0, r4
 80173ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80173f0:	3a30      	subs	r2, #48	; 0x30
 80173f2:	2a09      	cmp	r2, #9
 80173f4:	d903      	bls.n	80173fe <_vfiprintf_r+0x1ee>
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d0c5      	beq.n	8017386 <_vfiprintf_r+0x176>
 80173fa:	9105      	str	r1, [sp, #20]
 80173fc:	e7c3      	b.n	8017386 <_vfiprintf_r+0x176>
 80173fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8017402:	4604      	mov	r4, r0
 8017404:	2301      	movs	r3, #1
 8017406:	e7f0      	b.n	80173ea <_vfiprintf_r+0x1da>
 8017408:	ab03      	add	r3, sp, #12
 801740a:	9300      	str	r3, [sp, #0]
 801740c:	462a      	mov	r2, r5
 801740e:	4b16      	ldr	r3, [pc, #88]	; (8017468 <_vfiprintf_r+0x258>)
 8017410:	a904      	add	r1, sp, #16
 8017412:	4630      	mov	r0, r6
 8017414:	f7fb fdd4 	bl	8012fc0 <_printf_float>
 8017418:	4607      	mov	r7, r0
 801741a:	1c78      	adds	r0, r7, #1
 801741c:	d1d6      	bne.n	80173cc <_vfiprintf_r+0x1bc>
 801741e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017420:	07d9      	lsls	r1, r3, #31
 8017422:	d405      	bmi.n	8017430 <_vfiprintf_r+0x220>
 8017424:	89ab      	ldrh	r3, [r5, #12]
 8017426:	059a      	lsls	r2, r3, #22
 8017428:	d402      	bmi.n	8017430 <_vfiprintf_r+0x220>
 801742a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801742c:	f7fb fc1a 	bl	8012c64 <__retarget_lock_release_recursive>
 8017430:	89ab      	ldrh	r3, [r5, #12]
 8017432:	065b      	lsls	r3, r3, #25
 8017434:	f53f af12 	bmi.w	801725c <_vfiprintf_r+0x4c>
 8017438:	9809      	ldr	r0, [sp, #36]	; 0x24
 801743a:	e711      	b.n	8017260 <_vfiprintf_r+0x50>
 801743c:	ab03      	add	r3, sp, #12
 801743e:	9300      	str	r3, [sp, #0]
 8017440:	462a      	mov	r2, r5
 8017442:	4b09      	ldr	r3, [pc, #36]	; (8017468 <_vfiprintf_r+0x258>)
 8017444:	a904      	add	r1, sp, #16
 8017446:	4630      	mov	r0, r6
 8017448:	f7fc f846 	bl	80134d8 <_printf_i>
 801744c:	e7e4      	b.n	8017418 <_vfiprintf_r+0x208>
 801744e:	bf00      	nop
 8017450:	08018818 	.word	0x08018818
 8017454:	08018838 	.word	0x08018838
 8017458:	080187f8 	.word	0x080187f8
 801745c:	08018a2c 	.word	0x08018a2c
 8017460:	08018a36 	.word	0x08018a36
 8017464:	08012fc1 	.word	0x08012fc1
 8017468:	080171eb 	.word	0x080171eb
 801746c:	08018a32 	.word	0x08018a32

08017470 <nan>:
 8017470:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017478 <nan+0x8>
 8017474:	4770      	bx	lr
 8017476:	bf00      	nop
 8017478:	00000000 	.word	0x00000000
 801747c:	7ff80000 	.word	0x7ff80000

08017480 <__sread>:
 8017480:	b510      	push	{r4, lr}
 8017482:	460c      	mov	r4, r1
 8017484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017488:	f000 f8ca 	bl	8017620 <_read_r>
 801748c:	2800      	cmp	r0, #0
 801748e:	bfab      	itete	ge
 8017490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017492:	89a3      	ldrhlt	r3, [r4, #12]
 8017494:	181b      	addge	r3, r3, r0
 8017496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801749a:	bfac      	ite	ge
 801749c:	6563      	strge	r3, [r4, #84]	; 0x54
 801749e:	81a3      	strhlt	r3, [r4, #12]
 80174a0:	bd10      	pop	{r4, pc}

080174a2 <__swrite>:
 80174a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174a6:	461f      	mov	r7, r3
 80174a8:	898b      	ldrh	r3, [r1, #12]
 80174aa:	05db      	lsls	r3, r3, #23
 80174ac:	4605      	mov	r5, r0
 80174ae:	460c      	mov	r4, r1
 80174b0:	4616      	mov	r6, r2
 80174b2:	d505      	bpl.n	80174c0 <__swrite+0x1e>
 80174b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174b8:	2302      	movs	r3, #2
 80174ba:	2200      	movs	r2, #0
 80174bc:	f000 f87c 	bl	80175b8 <_lseek_r>
 80174c0:	89a3      	ldrh	r3, [r4, #12]
 80174c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80174ca:	81a3      	strh	r3, [r4, #12]
 80174cc:	4632      	mov	r2, r6
 80174ce:	463b      	mov	r3, r7
 80174d0:	4628      	mov	r0, r5
 80174d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80174d6:	f000 b823 	b.w	8017520 <_write_r>

080174da <__sseek>:
 80174da:	b510      	push	{r4, lr}
 80174dc:	460c      	mov	r4, r1
 80174de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174e2:	f000 f869 	bl	80175b8 <_lseek_r>
 80174e6:	1c43      	adds	r3, r0, #1
 80174e8:	89a3      	ldrh	r3, [r4, #12]
 80174ea:	bf15      	itete	ne
 80174ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80174ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80174f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80174f6:	81a3      	strheq	r3, [r4, #12]
 80174f8:	bf18      	it	ne
 80174fa:	81a3      	strhne	r3, [r4, #12]
 80174fc:	bd10      	pop	{r4, pc}

080174fe <__sclose>:
 80174fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017502:	f000 b827 	b.w	8017554 <_close_r>

08017506 <__ascii_wctomb>:
 8017506:	b149      	cbz	r1, 801751c <__ascii_wctomb+0x16>
 8017508:	2aff      	cmp	r2, #255	; 0xff
 801750a:	bf85      	ittet	hi
 801750c:	238a      	movhi	r3, #138	; 0x8a
 801750e:	6003      	strhi	r3, [r0, #0]
 8017510:	700a      	strbls	r2, [r1, #0]
 8017512:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8017516:	bf98      	it	ls
 8017518:	2001      	movls	r0, #1
 801751a:	4770      	bx	lr
 801751c:	4608      	mov	r0, r1
 801751e:	4770      	bx	lr

08017520 <_write_r>:
 8017520:	b538      	push	{r3, r4, r5, lr}
 8017522:	4d07      	ldr	r5, [pc, #28]	; (8017540 <_write_r+0x20>)
 8017524:	4604      	mov	r4, r0
 8017526:	4608      	mov	r0, r1
 8017528:	4611      	mov	r1, r2
 801752a:	2200      	movs	r2, #0
 801752c:	602a      	str	r2, [r5, #0]
 801752e:	461a      	mov	r2, r3
 8017530:	f7ea f8a7 	bl	8001682 <_write>
 8017534:	1c43      	adds	r3, r0, #1
 8017536:	d102      	bne.n	801753e <_write_r+0x1e>
 8017538:	682b      	ldr	r3, [r5, #0]
 801753a:	b103      	cbz	r3, 801753e <_write_r+0x1e>
 801753c:	6023      	str	r3, [r4, #0]
 801753e:	bd38      	pop	{r3, r4, r5, pc}
 8017540:	2000eafc 	.word	0x2000eafc

08017544 <abort>:
 8017544:	b508      	push	{r3, lr}
 8017546:	2006      	movs	r0, #6
 8017548:	f000 f8a4 	bl	8017694 <raise>
 801754c:	2001      	movs	r0, #1
 801754e:	f7ea f871 	bl	8001634 <_exit>
	...

08017554 <_close_r>:
 8017554:	b538      	push	{r3, r4, r5, lr}
 8017556:	4d06      	ldr	r5, [pc, #24]	; (8017570 <_close_r+0x1c>)
 8017558:	2300      	movs	r3, #0
 801755a:	4604      	mov	r4, r0
 801755c:	4608      	mov	r0, r1
 801755e:	602b      	str	r3, [r5, #0]
 8017560:	f7ea f8ab 	bl	80016ba <_close>
 8017564:	1c43      	adds	r3, r0, #1
 8017566:	d102      	bne.n	801756e <_close_r+0x1a>
 8017568:	682b      	ldr	r3, [r5, #0]
 801756a:	b103      	cbz	r3, 801756e <_close_r+0x1a>
 801756c:	6023      	str	r3, [r4, #0]
 801756e:	bd38      	pop	{r3, r4, r5, pc}
 8017570:	2000eafc 	.word	0x2000eafc

08017574 <_fstat_r>:
 8017574:	b538      	push	{r3, r4, r5, lr}
 8017576:	4d07      	ldr	r5, [pc, #28]	; (8017594 <_fstat_r+0x20>)
 8017578:	2300      	movs	r3, #0
 801757a:	4604      	mov	r4, r0
 801757c:	4608      	mov	r0, r1
 801757e:	4611      	mov	r1, r2
 8017580:	602b      	str	r3, [r5, #0]
 8017582:	f7ea f8a6 	bl	80016d2 <_fstat>
 8017586:	1c43      	adds	r3, r0, #1
 8017588:	d102      	bne.n	8017590 <_fstat_r+0x1c>
 801758a:	682b      	ldr	r3, [r5, #0]
 801758c:	b103      	cbz	r3, 8017590 <_fstat_r+0x1c>
 801758e:	6023      	str	r3, [r4, #0]
 8017590:	bd38      	pop	{r3, r4, r5, pc}
 8017592:	bf00      	nop
 8017594:	2000eafc 	.word	0x2000eafc

08017598 <_isatty_r>:
 8017598:	b538      	push	{r3, r4, r5, lr}
 801759a:	4d06      	ldr	r5, [pc, #24]	; (80175b4 <_isatty_r+0x1c>)
 801759c:	2300      	movs	r3, #0
 801759e:	4604      	mov	r4, r0
 80175a0:	4608      	mov	r0, r1
 80175a2:	602b      	str	r3, [r5, #0]
 80175a4:	f7ea f8a5 	bl	80016f2 <_isatty>
 80175a8:	1c43      	adds	r3, r0, #1
 80175aa:	d102      	bne.n	80175b2 <_isatty_r+0x1a>
 80175ac:	682b      	ldr	r3, [r5, #0]
 80175ae:	b103      	cbz	r3, 80175b2 <_isatty_r+0x1a>
 80175b0:	6023      	str	r3, [r4, #0]
 80175b2:	bd38      	pop	{r3, r4, r5, pc}
 80175b4:	2000eafc 	.word	0x2000eafc

080175b8 <_lseek_r>:
 80175b8:	b538      	push	{r3, r4, r5, lr}
 80175ba:	4d07      	ldr	r5, [pc, #28]	; (80175d8 <_lseek_r+0x20>)
 80175bc:	4604      	mov	r4, r0
 80175be:	4608      	mov	r0, r1
 80175c0:	4611      	mov	r1, r2
 80175c2:	2200      	movs	r2, #0
 80175c4:	602a      	str	r2, [r5, #0]
 80175c6:	461a      	mov	r2, r3
 80175c8:	f7ea f89e 	bl	8001708 <_lseek>
 80175cc:	1c43      	adds	r3, r0, #1
 80175ce:	d102      	bne.n	80175d6 <_lseek_r+0x1e>
 80175d0:	682b      	ldr	r3, [r5, #0]
 80175d2:	b103      	cbz	r3, 80175d6 <_lseek_r+0x1e>
 80175d4:	6023      	str	r3, [r4, #0]
 80175d6:	bd38      	pop	{r3, r4, r5, pc}
 80175d8:	2000eafc 	.word	0x2000eafc

080175dc <memmove>:
 80175dc:	4288      	cmp	r0, r1
 80175de:	b510      	push	{r4, lr}
 80175e0:	eb01 0402 	add.w	r4, r1, r2
 80175e4:	d902      	bls.n	80175ec <memmove+0x10>
 80175e6:	4284      	cmp	r4, r0
 80175e8:	4623      	mov	r3, r4
 80175ea:	d807      	bhi.n	80175fc <memmove+0x20>
 80175ec:	1e43      	subs	r3, r0, #1
 80175ee:	42a1      	cmp	r1, r4
 80175f0:	d008      	beq.n	8017604 <memmove+0x28>
 80175f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80175f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80175fa:	e7f8      	b.n	80175ee <memmove+0x12>
 80175fc:	4402      	add	r2, r0
 80175fe:	4601      	mov	r1, r0
 8017600:	428a      	cmp	r2, r1
 8017602:	d100      	bne.n	8017606 <memmove+0x2a>
 8017604:	bd10      	pop	{r4, pc}
 8017606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801760a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801760e:	e7f7      	b.n	8017600 <memmove+0x24>

08017610 <_malloc_usable_size_r>:
 8017610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017614:	1f18      	subs	r0, r3, #4
 8017616:	2b00      	cmp	r3, #0
 8017618:	bfbc      	itt	lt
 801761a:	580b      	ldrlt	r3, [r1, r0]
 801761c:	18c0      	addlt	r0, r0, r3
 801761e:	4770      	bx	lr

08017620 <_read_r>:
 8017620:	b538      	push	{r3, r4, r5, lr}
 8017622:	4d07      	ldr	r5, [pc, #28]	; (8017640 <_read_r+0x20>)
 8017624:	4604      	mov	r4, r0
 8017626:	4608      	mov	r0, r1
 8017628:	4611      	mov	r1, r2
 801762a:	2200      	movs	r2, #0
 801762c:	602a      	str	r2, [r5, #0]
 801762e:	461a      	mov	r2, r3
 8017630:	f7ea f80a 	bl	8001648 <_read>
 8017634:	1c43      	adds	r3, r0, #1
 8017636:	d102      	bne.n	801763e <_read_r+0x1e>
 8017638:	682b      	ldr	r3, [r5, #0]
 801763a:	b103      	cbz	r3, 801763e <_read_r+0x1e>
 801763c:	6023      	str	r3, [r4, #0]
 801763e:	bd38      	pop	{r3, r4, r5, pc}
 8017640:	2000eafc 	.word	0x2000eafc

08017644 <_raise_r>:
 8017644:	291f      	cmp	r1, #31
 8017646:	b538      	push	{r3, r4, r5, lr}
 8017648:	4604      	mov	r4, r0
 801764a:	460d      	mov	r5, r1
 801764c:	d904      	bls.n	8017658 <_raise_r+0x14>
 801764e:	2316      	movs	r3, #22
 8017650:	6003      	str	r3, [r0, #0]
 8017652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017656:	bd38      	pop	{r3, r4, r5, pc}
 8017658:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801765a:	b112      	cbz	r2, 8017662 <_raise_r+0x1e>
 801765c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017660:	b94b      	cbnz	r3, 8017676 <_raise_r+0x32>
 8017662:	4620      	mov	r0, r4
 8017664:	f000 f830 	bl	80176c8 <_getpid_r>
 8017668:	462a      	mov	r2, r5
 801766a:	4601      	mov	r1, r0
 801766c:	4620      	mov	r0, r4
 801766e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017672:	f000 b817 	b.w	80176a4 <_kill_r>
 8017676:	2b01      	cmp	r3, #1
 8017678:	d00a      	beq.n	8017690 <_raise_r+0x4c>
 801767a:	1c59      	adds	r1, r3, #1
 801767c:	d103      	bne.n	8017686 <_raise_r+0x42>
 801767e:	2316      	movs	r3, #22
 8017680:	6003      	str	r3, [r0, #0]
 8017682:	2001      	movs	r0, #1
 8017684:	e7e7      	b.n	8017656 <_raise_r+0x12>
 8017686:	2400      	movs	r4, #0
 8017688:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801768c:	4628      	mov	r0, r5
 801768e:	4798      	blx	r3
 8017690:	2000      	movs	r0, #0
 8017692:	e7e0      	b.n	8017656 <_raise_r+0x12>

08017694 <raise>:
 8017694:	4b02      	ldr	r3, [pc, #8]	; (80176a0 <raise+0xc>)
 8017696:	4601      	mov	r1, r0
 8017698:	6818      	ldr	r0, [r3, #0]
 801769a:	f7ff bfd3 	b.w	8017644 <_raise_r>
 801769e:	bf00      	nop
 80176a0:	20000de8 	.word	0x20000de8

080176a4 <_kill_r>:
 80176a4:	b538      	push	{r3, r4, r5, lr}
 80176a6:	4d07      	ldr	r5, [pc, #28]	; (80176c4 <_kill_r+0x20>)
 80176a8:	2300      	movs	r3, #0
 80176aa:	4604      	mov	r4, r0
 80176ac:	4608      	mov	r0, r1
 80176ae:	4611      	mov	r1, r2
 80176b0:	602b      	str	r3, [r5, #0]
 80176b2:	f7e9 ffaf 	bl	8001614 <_kill>
 80176b6:	1c43      	adds	r3, r0, #1
 80176b8:	d102      	bne.n	80176c0 <_kill_r+0x1c>
 80176ba:	682b      	ldr	r3, [r5, #0]
 80176bc:	b103      	cbz	r3, 80176c0 <_kill_r+0x1c>
 80176be:	6023      	str	r3, [r4, #0]
 80176c0:	bd38      	pop	{r3, r4, r5, pc}
 80176c2:	bf00      	nop
 80176c4:	2000eafc 	.word	0x2000eafc

080176c8 <_getpid_r>:
 80176c8:	f7e9 bf9c 	b.w	8001604 <_getpid>

080176cc <_init>:
 80176cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176ce:	bf00      	nop
 80176d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176d2:	bc08      	pop	{r3}
 80176d4:	469e      	mov	lr, r3
 80176d6:	4770      	bx	lr

080176d8 <_fini>:
 80176d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176da:	bf00      	nop
 80176dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176de:	bc08      	pop	{r3}
 80176e0:	469e      	mov	lr, r3
 80176e2:	4770      	bx	lr
