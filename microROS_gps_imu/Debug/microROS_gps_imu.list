
microROS_gps_imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c58  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005e58  08005e58  00015e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eb8  08005eb8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005eb8  08005eb8  00015eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ec0  08005ec0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ec0  08005ec0  00015ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ec4  08005ec4  00015ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a40  20000010  08005ed8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a50  08005ed8  00024a50  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019366  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000304e  00000000  00000000  000393a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003c3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003d7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002af4  00000000  00000000  0003ea30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016aab  00000000  00000000  00041524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104951  00000000  00000000  00057fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c920  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005304  00000000  00000000  0015c970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08005e40 	.word	0x08005e40

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08005e40 	.word	0x08005e40

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fb27 	bl	8000b9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f818 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f8a2 	bl	8000698 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000554:	f000 f870 	bl	8000638 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000558:	f002 fe6e 	bl	8003238 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of microROS_tx */
  microROS_txHandle = osThreadNew(tx_data, NULL, &microROS_tx_attributes);
 800055c:	4a05      	ldr	r2, [pc, #20]	; (8000574 <main+0x30>)
 800055e:	2100      	movs	r1, #0
 8000560:	4805      	ldr	r0, [pc, #20]	; (8000578 <main+0x34>)
 8000562:	f002 fed3 	bl	800330c <osThreadNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <main+0x38>)
 800056a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800056c:	f002 fe98 	bl	80032a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0x2c>
 8000572:	bf00      	nop
 8000574:	08005e7c 	.word	0x08005e7c
 8000578:	080008a1 	.word	0x080008a1
 800057c:	200000b4 	.word	0x200000b4

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	2234      	movs	r2, #52	; 0x34
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f005 fc4e 	bl	8005e30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemClock_Config+0xb0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a21      	ldr	r2, [pc, #132]	; (8000630 <SystemClock_Config+0xb0>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <SystemClock_Config+0xb0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <SystemClock_Config+0xb4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c4:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <SystemClock_Config+0xb4>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b19      	ldr	r3, [pc, #100]	; (8000634 <SystemClock_Config+0xb4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fda9 	bl	8001144 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005f8:	f000 f96c 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f001 f841 	bl	80016a0 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000624:	f000 f956 	bl	80008d4 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	; 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_USART3_UART_Init+0x58>)
 800063e:	4a15      	ldr	r2, [pc, #84]	; (8000694 <MX_USART3_UART_Init+0x5c>)
 8000640:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_USART3_UART_Init+0x58>)
 8000644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000648:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_USART3_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_USART3_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_USART3_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_USART3_UART_Init+0x58>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_USART3_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_USART3_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_USART3_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_USART3_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_USART3_UART_Init+0x58>)
 800067c:	f002 f96e 	bl	800295c <HAL_UART_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000686:	f000 f925 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2000002c 	.word	0x2000002c
 8000694:	40004800 	.word	0x40004800

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	; 0x30
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b77      	ldr	r3, [pc, #476]	; (800088c <MX_GPIO_Init+0x1f4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a76      	ldr	r2, [pc, #472]	; (800088c <MX_GPIO_Init+0x1f4>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b74      	ldr	r3, [pc, #464]	; (800088c <MX_GPIO_Init+0x1f4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	61bb      	str	r3, [r7, #24]
 80006c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c6:	4b71      	ldr	r3, [pc, #452]	; (800088c <MX_GPIO_Init+0x1f4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a70      	ldr	r2, [pc, #448]	; (800088c <MX_GPIO_Init+0x1f4>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b6e      	ldr	r3, [pc, #440]	; (800088c <MX_GPIO_Init+0x1f4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b6b      	ldr	r3, [pc, #428]	; (800088c <MX_GPIO_Init+0x1f4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a6a      	ldr	r2, [pc, #424]	; (800088c <MX_GPIO_Init+0x1f4>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b68      	ldr	r3, [pc, #416]	; (800088c <MX_GPIO_Init+0x1f4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b65      	ldr	r3, [pc, #404]	; (800088c <MX_GPIO_Init+0x1f4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a64      	ldr	r2, [pc, #400]	; (800088c <MX_GPIO_Init+0x1f4>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b62      	ldr	r3, [pc, #392]	; (800088c <MX_GPIO_Init+0x1f4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	4b5f      	ldr	r3, [pc, #380]	; (800088c <MX_GPIO_Init+0x1f4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a5e      	ldr	r2, [pc, #376]	; (800088c <MX_GPIO_Init+0x1f4>)
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b5c      	ldr	r3, [pc, #368]	; (800088c <MX_GPIO_Init+0x1f4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000726:	4b59      	ldr	r3, [pc, #356]	; (800088c <MX_GPIO_Init+0x1f4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a58      	ldr	r2, [pc, #352]	; (800088c <MX_GPIO_Init+0x1f4>)
 800072c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b56      	ldr	r3, [pc, #344]	; (800088c <MX_GPIO_Init+0x1f4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f244 0181 	movw	r1, #16513	; 0x4081
 8000744:	4852      	ldr	r0, [pc, #328]	; (8000890 <MX_GPIO_Init+0x1f8>)
 8000746:	f000 fce3 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2140      	movs	r1, #64	; 0x40
 800074e:	4851      	ldr	r0, [pc, #324]	; (8000894 <MX_GPIO_Init+0x1fc>)
 8000750:	f000 fcde 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 031c 	add.w	r3, r7, #28
 8000768:	4619      	mov	r1, r3
 800076a:	484b      	ldr	r0, [pc, #300]	; (8000898 <MX_GPIO_Init+0x200>)
 800076c:	f000 fb24 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000770:	2332      	movs	r3, #50	; 0x32
 8000772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000780:	230b      	movs	r3, #11
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	4843      	ldr	r0, [pc, #268]	; (8000898 <MX_GPIO_Init+0x200>)
 800078c:	f000 fb14 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000790:	2386      	movs	r3, #134	; 0x86
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a0:	230b      	movs	r3, #11
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	483c      	ldr	r0, [pc, #240]	; (800089c <MX_GPIO_Init+0x204>)
 80007ac:	f000 fb04 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007b0:	f244 0381 	movw	r3, #16513	; 0x4081
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	4831      	ldr	r0, [pc, #196]	; (8000890 <MX_GPIO_Init+0x1f8>)
 80007ca:	f000 faf5 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e0:	230b      	movs	r3, #11
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	4829      	ldr	r0, [pc, #164]	; (8000890 <MX_GPIO_Init+0x1f8>)
 80007ec:	f000 fae4 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007f0:	2340      	movs	r3, #64	; 0x40
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4823      	ldr	r0, [pc, #140]	; (8000894 <MX_GPIO_Init+0x1fc>)
 8000808:	f000 fad6 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	481d      	ldr	r0, [pc, #116]	; (8000894 <MX_GPIO_Init+0x1fc>)
 8000820:	f000 faca 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000824:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	2302      	movs	r3, #2
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000832:	2303      	movs	r3, #3
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000836:	230a      	movs	r3, #10
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4816      	ldr	r0, [pc, #88]	; (800089c <MX_GPIO_Init+0x204>)
 8000842:	f000 fab9 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4810      	ldr	r0, [pc, #64]	; (800089c <MX_GPIO_Init+0x204>)
 800085c:	f000 faac 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000860:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000872:	230b      	movs	r3, #11
 8000874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_GPIO_Init+0x1fc>)
 800087e:	f000 fa9b 	bl	8000db8 <HAL_GPIO_Init>

}
 8000882:	bf00      	nop
 8000884:	3730      	adds	r7, #48	; 0x30
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400
 8000894:	40021800 	.word	0x40021800
 8000898:	40020800 	.word	0x40020800
 800089c:	40020000 	.word	0x40020000

080008a0 <tx_data>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_tx_data */
void tx_data(void *argument)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f002 fdd5 	bl	8003458 <osDelay>
 80008ae:	e7fb      	b.n	80008a8 <tx_data+0x8>

080008b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d101      	bne.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c2:	f000 f977 	bl	8000bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40001000 	.word	0x40001000

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a10      	ldr	r2, [pc, #64]	; (800092c <HAL_MspInit+0x4c>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <HAL_MspInit+0x4c>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	210f      	movs	r1, #15
 800091a:	f06f 0001 	mvn.w	r0, #1
 800091e:	f000 fa21 	bl	8000d64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b0ae      	sub	sp, #184	; 0xb8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2290      	movs	r2, #144	; 0x90
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f005 fa6d 	bl	8005e30 <memset>
  if(huart->Instance==USART3)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <HAL_UART_MspInit+0xb4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d13c      	bne.n	80009da <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000964:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000966:	2300      	movs	r3, #0
 8000968:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f8ec 	bl	8001b4c <HAL_RCCEx_PeriphCLKConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800097a:	f7ff ffab 	bl	80008d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <HAL_UART_MspInit+0xb8>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <HAL_UART_MspInit+0xb8>)
 8000984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <HAL_UART_MspInit+0xb8>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_UART_MspInit+0xb8>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <HAL_UART_MspInit+0xb8>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_UART_MspInit+0xb8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009c8:	2307      	movs	r3, #7
 80009ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <HAL_UART_MspInit+0xbc>)
 80009d6:	f000 f9ef 	bl	8000db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	37b8      	adds	r7, #184	; 0xb8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40004800 	.word	0x40004800
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020c00 	.word	0x40020c00

080009f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a00:	4b33      	ldr	r3, [pc, #204]	; (8000ad0 <HAL_InitTick+0xe0>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	4a32      	ldr	r2, [pc, #200]	; (8000ad0 <HAL_InitTick+0xe0>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0c:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <HAL_InitTick+0xe0>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	f003 0310 	and.w	r3, r3, #16
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a18:	f107 0210 	add.w	r2, r7, #16
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 f860 	bl	8001ae8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a28:	6a3b      	ldr	r3, [r7, #32]
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d103      	bne.n	8000a3a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a32:	f001 f831 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 8000a36:	6378      	str	r0, [r7, #52]	; 0x34
 8000a38:	e004      	b.n	8000a44 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a3a:	f001 f82d 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a46:	4a23      	ldr	r2, [pc, #140]	; (8000ad4 <HAL_InitTick+0xe4>)
 8000a48:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4c:	0c9b      	lsrs	r3, r3, #18
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <HAL_InitTick+0xe8>)
 8000a54:	4a21      	ldr	r2, [pc, #132]	; (8000adc <HAL_InitTick+0xec>)
 8000a56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <HAL_InitTick+0xe8>)
 8000a5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a5e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a60:	4a1d      	ldr	r2, [pc, #116]	; (8000ad8 <HAL_InitTick+0xe8>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HAL_InitTick+0xe8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <HAL_InitTick+0xe8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_InitTick+0xe8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a78:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <HAL_InitTick+0xe8>)
 8000a7a:	f001 fc8f 	bl	800239c <HAL_TIM_Base_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d11b      	bne.n	8000ac4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a8c:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <HAL_InitTick+0xe8>)
 8000a8e:	f001 fce7 	bl	8002460 <HAL_TIM_Base_Start_IT>
 8000a92:	4603      	mov	r3, r0
 8000a94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d111      	bne.n	8000ac4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aa0:	2036      	movs	r0, #54	; 0x36
 8000aa2:	f000 f97b 	bl	8000d9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d808      	bhi.n	8000abe <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2036      	movs	r0, #54	; 0x36
 8000ab2:	f000 f957 	bl	8000d64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_InitTick+0xf0>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	e002      	b.n	8000ac4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ac4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3738      	adds	r7, #56	; 0x38
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	431bde83 	.word	0x431bde83
 8000ad8:	200000b8 	.word	0x200000b8
 8000adc:	40001000 	.word	0x40001000
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b14:	4802      	ldr	r0, [pc, #8]	; (8000b20 <TIM6_DAC_IRQHandler+0x10>)
 8000b16:	f001 fd1b 	bl	8002550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200000b8 	.word	0x200000b8

08000b24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <SystemInit+0x20>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <SystemInit+0x20>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b4e:	490e      	ldr	r1, [pc, #56]	; (8000b88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b54:	e002      	b.n	8000b5c <LoopCopyDataInit>

08000b56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5a:	3304      	adds	r3, #4

08000b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b60:	d3f9      	bcc.n	8000b56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b64:	4c0b      	ldr	r4, [pc, #44]	; (8000b94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b68:	e001      	b.n	8000b6e <LoopFillZerobss>

08000b6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b6c:	3204      	adds	r2, #4

08000b6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b70:	d3fb      	bcc.n	8000b6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b72:	f7ff ffd7 	bl	8000b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b76:	f005 f929 	bl	8005dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7a:	f7ff fce3 	bl	8000544 <main>
  bx  lr    
 8000b7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b80:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b8c:	08005ec8 	.word	0x08005ec8
  ldr r2, =_sbss
 8000b90:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b94:	20004a50 	.word	0x20004a50

08000b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC_IRQHandler>

08000b9a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9e:	2003      	movs	r0, #3
 8000ba0:	f000 f8d5 	bl	8000d4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba4:	200f      	movs	r0, #15
 8000ba6:	f7ff ff23 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000baa:	f7ff fe99 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000104 	.word	0x20000104

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000104 	.word	0x20000104

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <__NVIC_SetPriorityGrouping+0x40>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x40>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00
 8000c38:	05fa0000 	.word	0x05fa0000

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4907      	ldr	r1, [pc, #28]	; (8000c90 <__NVIC_EnableIRQ+0x38>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	; (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ff4c 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d76:	f7ff ff61 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	6978      	ldr	r0, [r7, #20]
 8000d82:	f7ff ffb1 	bl	8000ce8 <NVIC_EncodePriority>
 8000d86:	4602      	mov	r2, r0
 8000d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff80 	bl	8000c94 <__NVIC_SetPriority>
}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff54 	bl	8000c58 <__NVIC_EnableIRQ>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	e175      	b.n	80010c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	f040 8164 	bne.w	80010be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d005      	beq.n	8000e0e <HAL_GPIO_Init+0x56>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d130      	bne.n	8000e70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e44:	2201      	movs	r2, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	091b      	lsrs	r3, r3, #4
 8000e5a:	f003 0201 	and.w	r2, r3, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d017      	beq.n	8000eac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d123      	bne.n	8000f00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	08da      	lsrs	r2, r3, #3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3208      	adds	r2, #8
 8000ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	08da      	lsrs	r2, r3, #3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3208      	adds	r2, #8
 8000efa:	69b9      	ldr	r1, [r7, #24]
 8000efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0203 	and.w	r2, r3, #3
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 80be 	beq.w	80010be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	4b66      	ldr	r3, [pc, #408]	; (80010dc <HAL_GPIO_Init+0x324>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a65      	ldr	r2, [pc, #404]	; (80010dc <HAL_GPIO_Init+0x324>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b63      	ldr	r3, [pc, #396]	; (80010dc <HAL_GPIO_Init+0x324>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f5a:	4a61      	ldr	r2, [pc, #388]	; (80010e0 <HAL_GPIO_Init+0x328>)
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a58      	ldr	r2, [pc, #352]	; (80010e4 <HAL_GPIO_Init+0x32c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d037      	beq.n	8000ff6 <HAL_GPIO_Init+0x23e>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a57      	ldr	r2, [pc, #348]	; (80010e8 <HAL_GPIO_Init+0x330>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d031      	beq.n	8000ff2 <HAL_GPIO_Init+0x23a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a56      	ldr	r2, [pc, #344]	; (80010ec <HAL_GPIO_Init+0x334>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d02b      	beq.n	8000fee <HAL_GPIO_Init+0x236>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a55      	ldr	r2, [pc, #340]	; (80010f0 <HAL_GPIO_Init+0x338>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d025      	beq.n	8000fea <HAL_GPIO_Init+0x232>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a54      	ldr	r2, [pc, #336]	; (80010f4 <HAL_GPIO_Init+0x33c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d01f      	beq.n	8000fe6 <HAL_GPIO_Init+0x22e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a53      	ldr	r2, [pc, #332]	; (80010f8 <HAL_GPIO_Init+0x340>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d019      	beq.n	8000fe2 <HAL_GPIO_Init+0x22a>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a52      	ldr	r2, [pc, #328]	; (80010fc <HAL_GPIO_Init+0x344>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d013      	beq.n	8000fde <HAL_GPIO_Init+0x226>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a51      	ldr	r2, [pc, #324]	; (8001100 <HAL_GPIO_Init+0x348>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d00d      	beq.n	8000fda <HAL_GPIO_Init+0x222>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a50      	ldr	r2, [pc, #320]	; (8001104 <HAL_GPIO_Init+0x34c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d007      	beq.n	8000fd6 <HAL_GPIO_Init+0x21e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4f      	ldr	r2, [pc, #316]	; (8001108 <HAL_GPIO_Init+0x350>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d101      	bne.n	8000fd2 <HAL_GPIO_Init+0x21a>
 8000fce:	2309      	movs	r3, #9
 8000fd0:	e012      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fd2:	230a      	movs	r3, #10
 8000fd4:	e010      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	e00e      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fda:	2307      	movs	r3, #7
 8000fdc:	e00c      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fde:	2306      	movs	r3, #6
 8000fe0:	e00a      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	e008      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fea:	2303      	movs	r3, #3
 8000fec:	e004      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e002      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_GPIO_Init+0x240>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	69fa      	ldr	r2, [r7, #28]
 8000ffa:	f002 0203 	and.w	r2, r2, #3
 8000ffe:	0092      	lsls	r2, r2, #2
 8001000:	4093      	lsls	r3, r2
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001008:	4935      	ldr	r1, [pc, #212]	; (80010e0 <HAL_GPIO_Init+0x328>)
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001016:	4b3d      	ldr	r3, [pc, #244]	; (800110c <HAL_GPIO_Init+0x354>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800103a:	4a34      	ldr	r2, [pc, #208]	; (800110c <HAL_GPIO_Init+0x354>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001040:	4b32      	ldr	r3, [pc, #200]	; (800110c <HAL_GPIO_Init+0x354>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001064:	4a29      	ldr	r2, [pc, #164]	; (800110c <HAL_GPIO_Init+0x354>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800106a:	4b28      	ldr	r3, [pc, #160]	; (800110c <HAL_GPIO_Init+0x354>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800108e:	4a1f      	ldr	r2, [pc, #124]	; (800110c <HAL_GPIO_Init+0x354>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001094:	4b1d      	ldr	r3, [pc, #116]	; (800110c <HAL_GPIO_Init+0x354>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <HAL_GPIO_Init+0x354>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3301      	adds	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	2b0f      	cmp	r3, #15
 80010c8:	f67f ae86 	bls.w	8000dd8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40013800 	.word	0x40013800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40021400 	.word	0x40021400
 80010fc:	40021800 	.word	0x40021800
 8001100:	40021c00 	.word	0x40021c00
 8001104:	40022000 	.word	0x40022000
 8001108:	40022400 	.word	0x40022400
 800110c:	40013c00 	.word	0x40013c00

08001110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800112c:	e003      	b.n	8001136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	041a      	lsls	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	619a      	str	r2, [r3, #24]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e29b      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8087 	beq.w	8001276 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001168:	4b96      	ldr	r3, [pc, #600]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 030c 	and.w	r3, r3, #12
 8001170:	2b04      	cmp	r3, #4
 8001172:	d00c      	beq.n	800118e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001174:	4b93      	ldr	r3, [pc, #588]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	2b08      	cmp	r3, #8
 800117e:	d112      	bne.n	80011a6 <HAL_RCC_OscConfig+0x62>
 8001180:	4b90      	ldr	r3, [pc, #576]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800118c:	d10b      	bne.n	80011a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118e:	4b8d      	ldr	r3, [pc, #564]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d06c      	beq.n	8001274 <HAL_RCC_OscConfig+0x130>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d168      	bne.n	8001274 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e275      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ae:	d106      	bne.n	80011be <HAL_RCC_OscConfig+0x7a>
 80011b0:	4b84      	ldr	r3, [pc, #528]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a83      	ldr	r2, [pc, #524]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	e02e      	b.n	800121c <HAL_RCC_OscConfig+0xd8>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x9c>
 80011c6:	4b7f      	ldr	r3, [pc, #508]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a7e      	ldr	r2, [pc, #504]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b7c      	ldr	r3, [pc, #496]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a7b      	ldr	r2, [pc, #492]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e01d      	b.n	800121c <HAL_RCC_OscConfig+0xd8>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011e8:	d10c      	bne.n	8001204 <HAL_RCC_OscConfig+0xc0>
 80011ea:	4b76      	ldr	r3, [pc, #472]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a75      	ldr	r2, [pc, #468]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	4b73      	ldr	r3, [pc, #460]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a72      	ldr	r2, [pc, #456]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e00b      	b.n	800121c <HAL_RCC_OscConfig+0xd8>
 8001204:	4b6f      	ldr	r3, [pc, #444]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a6e      	ldr	r2, [pc, #440]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 800120a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b6c      	ldr	r3, [pc, #432]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a6b      	ldr	r2, [pc, #428]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d013      	beq.n	800124c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fcda 	bl	8000bdc <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800122c:	f7ff fcd6 	bl	8000bdc <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b64      	cmp	r3, #100	; 0x64
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e229      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	4b61      	ldr	r3, [pc, #388]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0xe8>
 800124a:	e014      	b.n	8001276 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124c:	f7ff fcc6 	bl	8000bdc <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fcc2 	bl	8000bdc <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e215      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	4b57      	ldr	r3, [pc, #348]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x110>
 8001272:	e000      	b.n	8001276 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d069      	beq.n	8001356 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001282:	4b50      	ldr	r3, [pc, #320]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00b      	beq.n	80012a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800128e:	4b4d      	ldr	r3, [pc, #308]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b08      	cmp	r3, #8
 8001298:	d11c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x190>
 800129a:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d116      	bne.n	80012d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a6:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <HAL_RCC_OscConfig+0x17a>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d001      	beq.n	80012be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e1e9      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012be:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	493d      	ldr	r1, [pc, #244]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d2:	e040      	b.n	8001356 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d023      	beq.n	8001324 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012dc:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a38      	ldr	r2, [pc, #224]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc78 	bl	8000bdc <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc74 	bl	8000bdc <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e1c7      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4929      	ldr	r1, [pc, #164]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
 8001322:	e018      	b.n	8001356 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a26      	ldr	r2, [pc, #152]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff fc54 	bl	8000bdc <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001338:	f7ff fc50 	bl	8000bdc <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e1a3      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d038      	beq.n	80013d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d019      	beq.n	800139e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136a:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 800136c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800136e:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001376:	f7ff fc31 	bl	8000bdc <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137e:	f7ff fc2d 	bl	8000bdc <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e180      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 8001392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x23a>
 800139c:	e01a      	b.n	80013d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80013a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_RCC_OscConfig+0x280>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013aa:	f7ff fc17 	bl	8000bdc <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b2:	f7ff fc13 	bl	8000bdc <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d903      	bls.n	80013c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e166      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
 80013c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c8:	4b92      	ldr	r3, [pc, #584]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80013ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1ee      	bne.n	80013b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80a4 	beq.w	800152a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e2:	4b8c      	ldr	r3, [pc, #560]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10d      	bne.n	800140a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b89      	ldr	r3, [pc, #548]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a88      	ldr	r2, [pc, #544]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b86      	ldr	r3, [pc, #536]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001406:	2301      	movs	r3, #1
 8001408:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800140a:	4b83      	ldr	r3, [pc, #524]	; (8001618 <HAL_RCC_OscConfig+0x4d4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001412:	2b00      	cmp	r3, #0
 8001414:	d118      	bne.n	8001448 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001416:	4b80      	ldr	r3, [pc, #512]	; (8001618 <HAL_RCC_OscConfig+0x4d4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a7f      	ldr	r2, [pc, #508]	; (8001618 <HAL_RCC_OscConfig+0x4d4>)
 800141c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001422:	f7ff fbdb 	bl	8000bdc <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142a:	f7ff fbd7 	bl	8000bdc <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b64      	cmp	r3, #100	; 0x64
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e12a      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800143c:	4b76      	ldr	r3, [pc, #472]	; (8001618 <HAL_RCC_OscConfig+0x4d4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x31a>
 8001450:	4b70      	ldr	r3, [pc, #448]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001454:	4a6f      	ldr	r2, [pc, #444]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6713      	str	r3, [r2, #112]	; 0x70
 800145c:	e02d      	b.n	80014ba <HAL_RCC_OscConfig+0x376>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x33c>
 8001466:	4b6b      	ldr	r3, [pc, #428]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	4a6a      	ldr	r2, [pc, #424]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 800146c:	f023 0301 	bic.w	r3, r3, #1
 8001470:	6713      	str	r3, [r2, #112]	; 0x70
 8001472:	4b68      	ldr	r3, [pc, #416]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	4a67      	ldr	r2, [pc, #412]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001478:	f023 0304 	bic.w	r3, r3, #4
 800147c:	6713      	str	r3, [r2, #112]	; 0x70
 800147e:	e01c      	b.n	80014ba <HAL_RCC_OscConfig+0x376>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b05      	cmp	r3, #5
 8001486:	d10c      	bne.n	80014a2 <HAL_RCC_OscConfig+0x35e>
 8001488:	4b62      	ldr	r3, [pc, #392]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 800148a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148c:	4a61      	ldr	r2, [pc, #388]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6713      	str	r3, [r2, #112]	; 0x70
 8001494:	4b5f      	ldr	r3, [pc, #380]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001498:	4a5e      	ldr	r2, [pc, #376]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6713      	str	r3, [r2, #112]	; 0x70
 80014a0:	e00b      	b.n	80014ba <HAL_RCC_OscConfig+0x376>
 80014a2:	4b5c      	ldr	r3, [pc, #368]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80014a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a6:	4a5b      	ldr	r2, [pc, #364]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80014a8:	f023 0301 	bic.w	r3, r3, #1
 80014ac:	6713      	str	r3, [r2, #112]	; 0x70
 80014ae:	4b59      	ldr	r3, [pc, #356]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80014b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b2:	4a58      	ldr	r2, [pc, #352]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80014b4:	f023 0304 	bic.w	r3, r3, #4
 80014b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d015      	beq.n	80014ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c2:	f7ff fb8b 	bl	8000bdc <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c8:	e00a      	b.n	80014e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ca:	f7ff fb87 	bl	8000bdc <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d8:	4293      	cmp	r3, r2
 80014da:	d901      	bls.n	80014e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e0d8      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e0:	4b4c      	ldr	r3, [pc, #304]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80014e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d0ee      	beq.n	80014ca <HAL_RCC_OscConfig+0x386>
 80014ec:	e014      	b.n	8001518 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ee:	f7ff fb75 	bl	8000bdc <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff fb71 	bl	8000bdc <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f241 3288 	movw	r2, #5000	; 0x1388
 8001504:	4293      	cmp	r3, r2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e0c2      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150c:	4b41      	ldr	r3, [pc, #260]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1ee      	bne.n	80014f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d105      	bne.n	800152a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800151e:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a3c      	ldr	r2, [pc, #240]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80ae 	beq.w	8001690 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001534:	4b37      	ldr	r3, [pc, #220]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b08      	cmp	r3, #8
 800153e:	d06d      	beq.n	800161c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d14b      	bne.n	80015e0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001548:	4b32      	ldr	r3, [pc, #200]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a31      	ldr	r2, [pc, #196]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 800154e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fb42 	bl	8000bdc <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155c:	f7ff fb3e 	bl	8000bdc <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e091      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156e:	4b29      	ldr	r3, [pc, #164]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69da      	ldr	r2, [r3, #28]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001588:	019b      	lsls	r3, r3, #6
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	3b01      	subs	r3, #1
 8001594:	041b      	lsls	r3, r3, #16
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	061b      	lsls	r3, r3, #24
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	071b      	lsls	r3, r3, #28
 80015a6:	491b      	ldr	r1, [pc, #108]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a18      	ldr	r2, [pc, #96]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80015b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fb10 	bl	8000bdc <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fb0c 	bl	8000bdc <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e05f      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x47c>
 80015de:	e057      	b.n	8001690 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 80015e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff faf6 	bl	8000bdc <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff faf2 	bl	8000bdc <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e045      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_RCC_OscConfig+0x4d0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x4b0>
 8001612:	e03d      	b.n	8001690 <HAL_RCC_OscConfig+0x54c>
 8001614:	40023800 	.word	0x40023800
 8001618:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <HAL_RCC_OscConfig+0x558>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d030      	beq.n	800168c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001634:	429a      	cmp	r2, r3
 8001636:	d129      	bne.n	800168c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d122      	bne.n	800168c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800164c:	4013      	ands	r3, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001652:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001654:	4293      	cmp	r3, r2
 8001656:	d119      	bne.n	800168c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	3b01      	subs	r3, #1
 8001666:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d10f      	bne.n	800168c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001678:	429a      	cmp	r2, r3
 800167a:	d107      	bne.n	800168c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d001      	beq.n	8001690 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0d0      	b.n	800185a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016b8:	4b6a      	ldr	r3, [pc, #424]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d910      	bls.n	80016e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b67      	ldr	r3, [pc, #412]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 020f 	bic.w	r2, r3, #15
 80016ce:	4965      	ldr	r1, [pc, #404]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b63      	ldr	r3, [pc, #396]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0b8      	b.n	800185a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001700:	4b59      	ldr	r3, [pc, #356]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4a58      	ldr	r2, [pc, #352]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800170a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001718:	4b53      	ldr	r3, [pc, #332]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4a52      	ldr	r2, [pc, #328]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 800171e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001722:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001724:	4b50      	ldr	r3, [pc, #320]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	494d      	ldr	r1, [pc, #308]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d040      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	4b47      	ldr	r3, [pc, #284]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d115      	bne.n	8001782 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e07f      	b.n	800185a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001762:	4b41      	ldr	r3, [pc, #260]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e073      	b.n	800185a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e06b      	b.n	800185a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001782:	4b39      	ldr	r3, [pc, #228]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f023 0203 	bic.w	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4936      	ldr	r1, [pc, #216]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001790:	4313      	orrs	r3, r2
 8001792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001794:	f7ff fa22 	bl	8000bdc <HAL_GetTick>
 8001798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179c:	f7ff fa1e 	bl	8000bdc <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e053      	b.n	800185a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 020c 	and.w	r2, r3, #12
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d1eb      	bne.n	800179c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c4:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d210      	bcs.n	80017f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 020f 	bic.w	r2, r3, #15
 80017da:	4922      	ldr	r1, [pc, #136]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e032      	b.n	800185a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4916      	ldr	r1, [pc, #88]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 800180e:	4313      	orrs	r3, r2
 8001810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	490e      	ldr	r1, [pc, #56]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001832:	f000 f821 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 8001836:	4602      	mov	r2, r0
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_RCC_ClockConfig+0x1c8>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	490a      	ldr	r1, [pc, #40]	; (800186c <HAL_RCC_ClockConfig+0x1cc>)
 8001844:	5ccb      	ldrb	r3, [r1, r3]
 8001846:	fa22 f303 	lsr.w	r3, r2, r3
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <HAL_RCC_ClockConfig+0x1d0>)
 800184c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_RCC_ClockConfig+0x1d4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff f8cc 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023c00 	.word	0x40023c00
 8001868:	40023800 	.word	0x40023800
 800186c:	08005ea0 	.word	0x08005ea0
 8001870:	20000000 	.word	0x20000000
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800187c:	b094      	sub	sp, #80	; 0x50
 800187e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	647b      	str	r3, [r7, #68]	; 0x44
 8001884:	2300      	movs	r3, #0
 8001886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001888:	2300      	movs	r3, #0
 800188a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001890:	4b79      	ldr	r3, [pc, #484]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b08      	cmp	r3, #8
 800189a:	d00d      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x40>
 800189c:	2b08      	cmp	r3, #8
 800189e:	f200 80e1 	bhi.w	8001a64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_RCC_GetSysClockFreq+0x34>
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	d003      	beq.n	80018b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018aa:	e0db      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ac:	4b73      	ldr	r3, [pc, #460]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x204>)
 80018ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018b0:	e0db      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018b2:	4b72      	ldr	r3, [pc, #456]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x204>)
 80018b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018b6:	e0d8      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b8:	4b6f      	ldr	r3, [pc, #444]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018c0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80018c2:	4b6d      	ldr	r3, [pc, #436]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d063      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ce:	4b6a      	ldr	r3, [pc, #424]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	099b      	lsrs	r3, r3, #6
 80018d4:	2200      	movs	r2, #0
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80018d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
 80018e2:	2300      	movs	r3, #0
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
 80018e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018ea:	4622      	mov	r2, r4
 80018ec:	462b      	mov	r3, r5
 80018ee:	f04f 0000 	mov.w	r0, #0
 80018f2:	f04f 0100 	mov.w	r1, #0
 80018f6:	0159      	lsls	r1, r3, #5
 80018f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018fc:	0150      	lsls	r0, r2, #5
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4621      	mov	r1, r4
 8001904:	1a51      	subs	r1, r2, r1
 8001906:	6139      	str	r1, [r7, #16]
 8001908:	4629      	mov	r1, r5
 800190a:	eb63 0301 	sbc.w	r3, r3, r1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800191c:	4659      	mov	r1, fp
 800191e:	018b      	lsls	r3, r1, #6
 8001920:	4651      	mov	r1, sl
 8001922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001926:	4651      	mov	r1, sl
 8001928:	018a      	lsls	r2, r1, #6
 800192a:	4651      	mov	r1, sl
 800192c:	ebb2 0801 	subs.w	r8, r2, r1
 8001930:	4659      	mov	r1, fp
 8001932:	eb63 0901 	sbc.w	r9, r3, r1
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800194a:	4690      	mov	r8, r2
 800194c:	4699      	mov	r9, r3
 800194e:	4623      	mov	r3, r4
 8001950:	eb18 0303 	adds.w	r3, r8, r3
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	462b      	mov	r3, r5
 8001958:	eb49 0303 	adc.w	r3, r9, r3
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800196a:	4629      	mov	r1, r5
 800196c:	028b      	lsls	r3, r1, #10
 800196e:	4621      	mov	r1, r4
 8001970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001974:	4621      	mov	r1, r4
 8001976:	028a      	lsls	r2, r1, #10
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800197e:	2200      	movs	r2, #0
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
 8001982:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001988:	f7fe fc5a 	bl	8000240 <__aeabi_uldivmod>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4613      	mov	r3, r2
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001994:	e058      	b.n	8001a48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001996:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	099b      	lsrs	r3, r3, #6
 800199c:	2200      	movs	r2, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	4611      	mov	r1, r2
 80019a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019a6:	623b      	str	r3, [r7, #32]
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
 80019ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019b0:	4642      	mov	r2, r8
 80019b2:	464b      	mov	r3, r9
 80019b4:	f04f 0000 	mov.w	r0, #0
 80019b8:	f04f 0100 	mov.w	r1, #0
 80019bc:	0159      	lsls	r1, r3, #5
 80019be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c2:	0150      	lsls	r0, r2, #5
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4641      	mov	r1, r8
 80019ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80019ce:	4649      	mov	r1, r9
 80019d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019e8:	ebb2 040a 	subs.w	r4, r2, sl
 80019ec:	eb63 050b 	sbc.w	r5, r3, fp
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	00eb      	lsls	r3, r5, #3
 80019fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019fe:	00e2      	lsls	r2, r4, #3
 8001a00:	4614      	mov	r4, r2
 8001a02:	461d      	mov	r5, r3
 8001a04:	4643      	mov	r3, r8
 8001a06:	18e3      	adds	r3, r4, r3
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	eb45 0303 	adc.w	r3, r5, r3
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a1e:	4629      	mov	r1, r5
 8001a20:	028b      	lsls	r3, r1, #10
 8001a22:	4621      	mov	r1, r4
 8001a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a28:	4621      	mov	r1, r4
 8001a2a:	028a      	lsls	r2, r1, #10
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a32:	2200      	movs	r2, #0
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	61fa      	str	r2, [r7, #28]
 8001a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a3c:	f7fe fc00 	bl	8000240 <__aeabi_uldivmod>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4613      	mov	r3, r2
 8001a46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	0c1b      	lsrs	r3, r3, #16
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	3301      	adds	r3, #1
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001a58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a62:	e002      	b.n	8001a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3750      	adds	r7, #80	; 0x50
 8001a70:	46bd      	mov	sp, r7
 8001a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	00f42400 	.word	0x00f42400

08001a80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000000 	.word	0x20000000

08001a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a9c:	f7ff fff0 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0a9b      	lsrs	r3, r3, #10
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4903      	ldr	r1, [pc, #12]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aae:	5ccb      	ldrb	r3, [r1, r3]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	08005eb0 	.word	0x08005eb0

08001ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ac4:	f7ff ffdc 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	0b5b      	lsrs	r3, r3, #13
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	4903      	ldr	r1, [pc, #12]	; (8001ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	08005eb0 	.word	0x08005eb0

08001ae8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	220f      	movs	r2, #15
 8001af6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_RCC_GetClockConfig+0x5c>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 0203 	and.w	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_RCC_GetClockConfig+0x5c>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <HAL_RCC_GetClockConfig+0x5c>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	08db      	lsrs	r3, r3, #3
 8001b22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_RCC_GetClockConfig+0x60>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 020f 	and.w	r2, r3, #15
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	601a      	str	r2, [r3, #0]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40023c00 	.word	0x40023c00

08001b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d012      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b74:	4b69      	ldr	r3, [pc, #420]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4a68      	ldr	r2, [pc, #416]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b7e:	6093      	str	r3, [r2, #8]
 8001b80:	4b66      	ldr	r3, [pc, #408]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b88:	4964      	ldr	r1, [pc, #400]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001b96:	2301      	movs	r3, #1
 8001b98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d017      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ba6:	4b5d      	ldr	r3, [pc, #372]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb4:	4959      	ldr	r1, [pc, #356]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bc4:	d101      	bne.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d017      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001be2:	4b4e      	ldr	r3, [pc, #312]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001be8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	494a      	ldr	r1, [pc, #296]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c00:	d101      	bne.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001c02:	2301      	movs	r3, #1
 8001c04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0320 	and.w	r3, r3, #32
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 808b 	beq.w	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c30:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	4a39      	ldr	r2, [pc, #228]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3c:	4b37      	ldr	r3, [pc, #220]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c48:	4b35      	ldr	r3, [pc, #212]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a34      	ldr	r2, [pc, #208]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c54:	f7fe ffc2 	bl	8000bdc <HAL_GetTick>
 8001c58:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5c:	f7fe ffbe 	bl	8000bdc <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e38f      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c6e:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c7a:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d035      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d02e      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c98:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ca0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb2:	4a1a      	ldr	r2, [pc, #104]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001cba:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d114      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7fe ff86 	bl	8000bdc <HAL_GetTick>
 8001cd0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7fe ff82 	bl	8000bdc <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e351      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0ee      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d02:	d111      	bne.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d12:	400b      	ands	r3, r1
 8001d14:	4901      	ldr	r1, [pc, #4]	; (8001d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40007000 	.word	0x40007000
 8001d24:	0ffffcff 	.word	0x0ffffcff
 8001d28:	4bac      	ldr	r3, [pc, #688]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4aab      	ldr	r2, [pc, #684]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d32:	6093      	str	r3, [r2, #8]
 8001d34:	4ba9      	ldr	r3, [pc, #676]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d40:	49a6      	ldr	r1, [pc, #664]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d010      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d52:	4ba2      	ldr	r3, [pc, #648]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d58:	4aa0      	ldr	r2, [pc, #640]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d62:	4b9e      	ldr	r3, [pc, #632]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6c:	499b      	ldr	r1, [pc, #620]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00a      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d80:	4b96      	ldr	r3, [pc, #600]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d8e:	4993      	ldr	r1, [pc, #588]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00a      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001da2:	4b8e      	ldr	r3, [pc, #568]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001db0:	498a      	ldr	r1, [pc, #552]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00a      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001dc4:	4b85      	ldr	r3, [pc, #532]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dd2:	4982      	ldr	r1, [pc, #520]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00a      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001de6:	4b7d      	ldr	r3, [pc, #500]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df4:	4979      	ldr	r1, [pc, #484]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00a      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e08:	4b74      	ldr	r3, [pc, #464]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0e:	f023 0203 	bic.w	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4971      	ldr	r1, [pc, #452]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00a      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e2a:	4b6c      	ldr	r3, [pc, #432]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e30:	f023 020c 	bic.w	r2, r3, #12
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e38:	4968      	ldr	r1, [pc, #416]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00a      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e4c:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5a:	4960      	ldr	r1, [pc, #384]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e6e:	4b5b      	ldr	r3, [pc, #364]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e7c:	4957      	ldr	r1, [pc, #348]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00a      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e90:	4b52      	ldr	r3, [pc, #328]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9e:	494f      	ldr	r1, [pc, #316]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00a      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec0:	4946      	ldr	r1, [pc, #280]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00a      	beq.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ed4:	4b41      	ldr	r3, [pc, #260]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee2:	493e      	ldr	r1, [pc, #248]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00a      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001ef6:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f04:	4935      	ldr	r1, [pc, #212]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00a      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f18:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f26:	492d      	ldr	r1, [pc, #180]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d011      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f3a:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f40:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f48:	4924      	ldr	r1, [pc, #144]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f58:	d101      	bne.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f88:	4914      	ldr	r1, [pc, #80]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00b      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fac:	490b      	ldr	r1, [pc, #44]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00f      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fd0:	4902      	ldr	r1, [pc, #8]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fd8:	e002      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00b      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001fec:	4b8a      	ldr	r3, [pc, #552]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ff2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffc:	4986      	ldr	r1, [pc, #536]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00b      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002010:	4b81      	ldr	r3, [pc, #516]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002016:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002020:	497d      	ldr	r1, [pc, #500]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d006      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80d6 	beq.w	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800203c:	4b76      	ldr	r3, [pc, #472]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a75      	ldr	r2, [pc, #468]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002042:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002046:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002048:	f7fe fdc8 	bl	8000bdc <HAL_GetTick>
 800204c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002050:	f7fe fdc4 	bl	8000bdc <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	; 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e195      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002062:	4b6d      	ldr	r3, [pc, #436]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d021      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x572>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207e:	2b00      	cmp	r3, #0
 8002080:	d11d      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002082:	4b65      	ldr	r3, [pc, #404]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002090:	4b61      	ldr	r3, [pc, #388]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002096:	0e1b      	lsrs	r3, r3, #24
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	019a      	lsls	r2, r3, #6
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	041b      	lsls	r3, r3, #16
 80020a8:	431a      	orrs	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	061b      	lsls	r3, r3, #24
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	071b      	lsls	r3, r3, #28
 80020b6:	4958      	ldr	r1, [pc, #352]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d004      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d02e      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e8:	d129      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020ea:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020f8:	4b47      	ldr	r3, [pc, #284]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020fe:	0f1b      	lsrs	r3, r3, #28
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	019a      	lsls	r2, r3, #6
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	041b      	lsls	r3, r3, #16
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	061b      	lsls	r3, r3, #24
 8002118:	431a      	orrs	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	071b      	lsls	r3, r3, #28
 800211e:	493e      	ldr	r1, [pc, #248]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002126:	4b3c      	ldr	r3, [pc, #240]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800212c:	f023 021f 	bic.w	r2, r3, #31
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	3b01      	subs	r3, #1
 8002136:	4938      	ldr	r1, [pc, #224]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d01d      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800214a:	4b33      	ldr	r3, [pc, #204]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800214c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002150:	0e1b      	lsrs	r3, r3, #24
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002158:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800215a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800215e:	0f1b      	lsrs	r3, r3, #28
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	019a      	lsls	r2, r3, #6
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	041b      	lsls	r3, r3, #16
 8002172:	431a      	orrs	r2, r3
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	061b      	lsls	r3, r3, #24
 8002178:	431a      	orrs	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	071b      	lsls	r3, r3, #28
 800217e:	4926      	ldr	r1, [pc, #152]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d011      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	019a      	lsls	r2, r3, #6
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	041b      	lsls	r3, r3, #16
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	061b      	lsls	r3, r3, #24
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	071b      	lsls	r3, r3, #28
 80021ae:	491a      	ldr	r1, [pc, #104]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021b6:	4b18      	ldr	r3, [pc, #96]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a17      	ldr	r2, [pc, #92]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c2:	f7fe fd0b 	bl	8000bdc <HAL_GetTick>
 80021c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021ca:	f7fe fd07 	bl	8000bdc <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b64      	cmp	r3, #100	; 0x64
 80021d6:	d901      	bls.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e0d8      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021dc:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	f040 80ce 	bne.w	800238c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a08      	ldr	r2, [pc, #32]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021fc:	f7fe fcee 	bl	8000bdc <HAL_GetTick>
 8002200:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002202:	e00b      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002204:	f7fe fcea 	bl	8000bdc <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d904      	bls.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e0bb      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800221c:	4b5e      	ldr	r3, [pc, #376]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002228:	d0ec      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d009      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002246:	2b00      	cmp	r3, #0
 8002248:	d02e      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d12a      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002252:	4b51      	ldr	r3, [pc, #324]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002258:	0c1b      	lsrs	r3, r3, #16
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002260:	4b4d      	ldr	r3, [pc, #308]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	0f1b      	lsrs	r3, r3, #28
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	019a      	lsls	r2, r3, #6
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	041b      	lsls	r3, r3, #16
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	061b      	lsls	r3, r3, #24
 8002280:	431a      	orrs	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	071b      	lsls	r3, r3, #28
 8002286:	4944      	ldr	r1, [pc, #272]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800228e:	4b42      	ldr	r3, [pc, #264]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002294:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	3b01      	subs	r3, #1
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	493d      	ldr	r1, [pc, #244]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d022      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022bc:	d11d      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022be:	4b36      	ldr	r3, [pc, #216]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	0e1b      	lsrs	r3, r3, #24
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022cc:	4b32      	ldr	r3, [pc, #200]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	0f1b      	lsrs	r3, r3, #28
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	019a      	lsls	r2, r3, #6
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	041b      	lsls	r3, r3, #16
 80022e6:	431a      	orrs	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	061b      	lsls	r3, r3, #24
 80022ec:	431a      	orrs	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	071b      	lsls	r3, r3, #28
 80022f2:	4929      	ldr	r1, [pc, #164]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d028      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002306:	4b24      	ldr	r3, [pc, #144]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230c:	0e1b      	lsrs	r3, r3, #24
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002314:	4b20      	ldr	r3, [pc, #128]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	0c1b      	lsrs	r3, r3, #16
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	019a      	lsls	r2, r3, #6
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	041b      	lsls	r3, r3, #16
 800232c:	431a      	orrs	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	071b      	lsls	r3, r3, #28
 800233a:	4917      	ldr	r1, [pc, #92]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002348:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	4911      	ldr	r1, [pc, #68]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800235e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002364:	f7fe fc3a 	bl	8000bdc <HAL_GetTick>
 8002368:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800236c:	f7fe fc36 	bl	8000bdc <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	; 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e007      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800238a:	d1ef      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3720      	adds	r7, #32
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800

0800239c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e049      	b.n	8002442 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f841 	bl	800244a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f000 fa00 	bl	80027e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d001      	beq.n	8002478 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e054      	b.n	8002522 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a26      	ldr	r2, [pc, #152]	; (8002530 <HAL_TIM_Base_Start_IT+0xd0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d022      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x80>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a2:	d01d      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x80>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a22      	ldr	r2, [pc, #136]	; (8002534 <HAL_TIM_Base_Start_IT+0xd4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d018      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x80>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a21      	ldr	r2, [pc, #132]	; (8002538 <HAL_TIM_Base_Start_IT+0xd8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d013      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x80>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1f      	ldr	r2, [pc, #124]	; (800253c <HAL_TIM_Base_Start_IT+0xdc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00e      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x80>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1e      	ldr	r2, [pc, #120]	; (8002540 <HAL_TIM_Base_Start_IT+0xe0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d009      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x80>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <HAL_TIM_Base_Start_IT+0xe4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x80>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1b      	ldr	r2, [pc, #108]	; (8002548 <HAL_TIM_Base_Start_IT+0xe8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d115      	bne.n	800250c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_TIM_Base_Start_IT+0xec>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d015      	beq.n	800251e <HAL_TIM_Base_Start_IT+0xbe>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f8:	d011      	beq.n	800251e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0201 	orr.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250a:	e008      	b.n	800251e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e000      	b.n	8002520 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	40010000 	.word	0x40010000
 8002534:	40000400 	.word	0x40000400
 8002538:	40000800 	.word	0x40000800
 800253c:	40000c00 	.word	0x40000c00
 8002540:	40010400 	.word	0x40010400
 8002544:	40014000 	.word	0x40014000
 8002548:	40001800 	.word	0x40001800
 800254c:	00010007 	.word	0x00010007

08002550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b02      	cmp	r3, #2
 8002564:	d122      	bne.n	80025ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b02      	cmp	r3, #2
 8002572:	d11b      	bne.n	80025ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0202 	mvn.w	r2, #2
 800257c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f905 	bl	80027a2 <HAL_TIM_IC_CaptureCallback>
 8002598:	e005      	b.n	80025a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f8f7 	bl	800278e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f908 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d122      	bne.n	8002600 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d11b      	bne.n	8002600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0204 	mvn.w	r2, #4
 80025d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f8db 	bl	80027a2 <HAL_TIM_IC_CaptureCallback>
 80025ec:	e005      	b.n	80025fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f8cd 	bl	800278e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f8de 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b08      	cmp	r3, #8
 800260c:	d122      	bne.n	8002654 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b08      	cmp	r3, #8
 800261a:	d11b      	bne.n	8002654 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0208 	mvn.w	r2, #8
 8002624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2204      	movs	r2, #4
 800262a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f8b1 	bl	80027a2 <HAL_TIM_IC_CaptureCallback>
 8002640:	e005      	b.n	800264e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f8a3 	bl	800278e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f8b4 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b10      	cmp	r3, #16
 8002660:	d122      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0310 	and.w	r3, r3, #16
 800266c:	2b10      	cmp	r3, #16
 800266e:	d11b      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0210 	mvn.w	r2, #16
 8002678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2208      	movs	r2, #8
 800267e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f887 	bl	80027a2 <HAL_TIM_IC_CaptureCallback>
 8002694:	e005      	b.n	80026a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f879 	bl	800278e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f88a 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d10e      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d107      	bne.n	80026d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0201 	mvn.w	r2, #1
 80026cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe f8ee 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026de:	2b80      	cmp	r3, #128	; 0x80
 80026e0:	d10e      	bne.n	8002700 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	2b80      	cmp	r3, #128	; 0x80
 80026ee:	d107      	bne.n	8002700 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f91a 	bl	8002934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800270e:	d10e      	bne.n	800272e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b80      	cmp	r3, #128	; 0x80
 800271c:	d107      	bne.n	800272e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f90d 	bl	8002948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002738:	2b40      	cmp	r3, #64	; 0x40
 800273a:	d10e      	bne.n	800275a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b40      	cmp	r3, #64	; 0x40
 8002748:	d107      	bne.n	800275a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f838 	bl	80027ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b20      	cmp	r3, #32
 8002766:	d10e      	bne.n	8002786 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b20      	cmp	r3, #32
 8002774:	d107      	bne.n	8002786 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f06f 0220 	mvn.w	r2, #32
 800277e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f8cd 	bl	8002920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a40      	ldr	r2, [pc, #256]	; (80028f4 <TIM_Base_SetConfig+0x114>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d013      	beq.n	8002820 <TIM_Base_SetConfig+0x40>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fe:	d00f      	beq.n	8002820 <TIM_Base_SetConfig+0x40>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a3d      	ldr	r2, [pc, #244]	; (80028f8 <TIM_Base_SetConfig+0x118>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00b      	beq.n	8002820 <TIM_Base_SetConfig+0x40>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a3c      	ldr	r2, [pc, #240]	; (80028fc <TIM_Base_SetConfig+0x11c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d007      	beq.n	8002820 <TIM_Base_SetConfig+0x40>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a3b      	ldr	r2, [pc, #236]	; (8002900 <TIM_Base_SetConfig+0x120>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d003      	beq.n	8002820 <TIM_Base_SetConfig+0x40>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a3a      	ldr	r2, [pc, #232]	; (8002904 <TIM_Base_SetConfig+0x124>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d108      	bne.n	8002832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a2f      	ldr	r2, [pc, #188]	; (80028f4 <TIM_Base_SetConfig+0x114>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d02b      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002840:	d027      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a2c      	ldr	r2, [pc, #176]	; (80028f8 <TIM_Base_SetConfig+0x118>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d023      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a2b      	ldr	r2, [pc, #172]	; (80028fc <TIM_Base_SetConfig+0x11c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01f      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a2a      	ldr	r2, [pc, #168]	; (8002900 <TIM_Base_SetConfig+0x120>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d01b      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a29      	ldr	r2, [pc, #164]	; (8002904 <TIM_Base_SetConfig+0x124>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d017      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a28      	ldr	r2, [pc, #160]	; (8002908 <TIM_Base_SetConfig+0x128>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a27      	ldr	r2, [pc, #156]	; (800290c <TIM_Base_SetConfig+0x12c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00f      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a26      	ldr	r2, [pc, #152]	; (8002910 <TIM_Base_SetConfig+0x130>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00b      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a25      	ldr	r2, [pc, #148]	; (8002914 <TIM_Base_SetConfig+0x134>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d007      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a24      	ldr	r2, [pc, #144]	; (8002918 <TIM_Base_SetConfig+0x138>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d003      	beq.n	8002892 <TIM_Base_SetConfig+0xb2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a23      	ldr	r2, [pc, #140]	; (800291c <TIM_Base_SetConfig+0x13c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d108      	bne.n	80028a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <TIM_Base_SetConfig+0x114>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d003      	beq.n	80028d8 <TIM_Base_SetConfig+0xf8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a0c      	ldr	r2, [pc, #48]	; (8002904 <TIM_Base_SetConfig+0x124>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d103      	bne.n	80028e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	615a      	str	r2, [r3, #20]
}
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40010000 	.word	0x40010000
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40000800 	.word	0x40000800
 8002900:	40000c00 	.word	0x40000c00
 8002904:	40010400 	.word	0x40010400
 8002908:	40014000 	.word	0x40014000
 800290c:	40014400 	.word	0x40014400
 8002910:	40014800 	.word	0x40014800
 8002914:	40001800 	.word	0x40001800
 8002918:	40001c00 	.word	0x40001c00
 800291c:	40002000 	.word	0x40002000

08002920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e040      	b.n	80029f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fd ffd6 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	; 0x24
 8002988:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0201 	bic.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f82c 	bl	80029f8 <UART_SetConfig>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e022      	b.n	80029f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d002      	beq.n	80029b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fa84 	bl	8002ec0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fb0b 	bl	8003004 <UART_CheckIdleState>
 80029ee:	4603      	mov	r3, r0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4ba6      	ldr	r3, [pc, #664]	; (8002cbc <UART_SetConfig+0x2c4>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6812      	ldr	r2, [r2, #0]
 8002a2a:	6979      	ldr	r1, [r7, #20]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a94      	ldr	r2, [pc, #592]	; (8002cc0 <UART_SetConfig+0x2c8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d120      	bne.n	8002ab6 <UART_SetConfig+0xbe>
 8002a74:	4b93      	ldr	r3, [pc, #588]	; (8002cc4 <UART_SetConfig+0x2cc>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d816      	bhi.n	8002ab0 <UART_SetConfig+0xb8>
 8002a82:	a201      	add	r2, pc, #4	; (adr r2, 8002a88 <UART_SetConfig+0x90>)
 8002a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a88:	08002a99 	.word	0x08002a99
 8002a8c:	08002aa5 	.word	0x08002aa5
 8002a90:	08002a9f 	.word	0x08002a9f
 8002a94:	08002aab 	.word	0x08002aab
 8002a98:	2301      	movs	r3, #1
 8002a9a:	77fb      	strb	r3, [r7, #31]
 8002a9c:	e150      	b.n	8002d40 <UART_SetConfig+0x348>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	77fb      	strb	r3, [r7, #31]
 8002aa2:	e14d      	b.n	8002d40 <UART_SetConfig+0x348>
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	77fb      	strb	r3, [r7, #31]
 8002aa8:	e14a      	b.n	8002d40 <UART_SetConfig+0x348>
 8002aaa:	2308      	movs	r3, #8
 8002aac:	77fb      	strb	r3, [r7, #31]
 8002aae:	e147      	b.n	8002d40 <UART_SetConfig+0x348>
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	e144      	b.n	8002d40 <UART_SetConfig+0x348>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a83      	ldr	r2, [pc, #524]	; (8002cc8 <UART_SetConfig+0x2d0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d132      	bne.n	8002b26 <UART_SetConfig+0x12e>
 8002ac0:	4b80      	ldr	r3, [pc, #512]	; (8002cc4 <UART_SetConfig+0x2cc>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b0c      	cmp	r3, #12
 8002acc:	d828      	bhi.n	8002b20 <UART_SetConfig+0x128>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <UART_SetConfig+0xdc>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002b09 	.word	0x08002b09
 8002ad8:	08002b21 	.word	0x08002b21
 8002adc:	08002b21 	.word	0x08002b21
 8002ae0:	08002b21 	.word	0x08002b21
 8002ae4:	08002b15 	.word	0x08002b15
 8002ae8:	08002b21 	.word	0x08002b21
 8002aec:	08002b21 	.word	0x08002b21
 8002af0:	08002b21 	.word	0x08002b21
 8002af4:	08002b0f 	.word	0x08002b0f
 8002af8:	08002b21 	.word	0x08002b21
 8002afc:	08002b21 	.word	0x08002b21
 8002b00:	08002b21 	.word	0x08002b21
 8002b04:	08002b1b 	.word	0x08002b1b
 8002b08:	2300      	movs	r3, #0
 8002b0a:	77fb      	strb	r3, [r7, #31]
 8002b0c:	e118      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	77fb      	strb	r3, [r7, #31]
 8002b12:	e115      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b14:	2304      	movs	r3, #4
 8002b16:	77fb      	strb	r3, [r7, #31]
 8002b18:	e112      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	77fb      	strb	r3, [r7, #31]
 8002b1e:	e10f      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b20:	2310      	movs	r3, #16
 8002b22:	77fb      	strb	r3, [r7, #31]
 8002b24:	e10c      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a68      	ldr	r2, [pc, #416]	; (8002ccc <UART_SetConfig+0x2d4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d120      	bne.n	8002b72 <UART_SetConfig+0x17a>
 8002b30:	4b64      	ldr	r3, [pc, #400]	; (8002cc4 <UART_SetConfig+0x2cc>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b3a:	2b30      	cmp	r3, #48	; 0x30
 8002b3c:	d013      	beq.n	8002b66 <UART_SetConfig+0x16e>
 8002b3e:	2b30      	cmp	r3, #48	; 0x30
 8002b40:	d814      	bhi.n	8002b6c <UART_SetConfig+0x174>
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d009      	beq.n	8002b5a <UART_SetConfig+0x162>
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d810      	bhi.n	8002b6c <UART_SetConfig+0x174>
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <UART_SetConfig+0x15c>
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d006      	beq.n	8002b60 <UART_SetConfig+0x168>
 8002b52:	e00b      	b.n	8002b6c <UART_SetConfig+0x174>
 8002b54:	2300      	movs	r3, #0
 8002b56:	77fb      	strb	r3, [r7, #31]
 8002b58:	e0f2      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	77fb      	strb	r3, [r7, #31]
 8002b5e:	e0ef      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b60:	2304      	movs	r3, #4
 8002b62:	77fb      	strb	r3, [r7, #31]
 8002b64:	e0ec      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b66:	2308      	movs	r3, #8
 8002b68:	77fb      	strb	r3, [r7, #31]
 8002b6a:	e0e9      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	77fb      	strb	r3, [r7, #31]
 8002b70:	e0e6      	b.n	8002d40 <UART_SetConfig+0x348>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a56      	ldr	r2, [pc, #344]	; (8002cd0 <UART_SetConfig+0x2d8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d120      	bne.n	8002bbe <UART_SetConfig+0x1c6>
 8002b7c:	4b51      	ldr	r3, [pc, #324]	; (8002cc4 <UART_SetConfig+0x2cc>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b86:	2bc0      	cmp	r3, #192	; 0xc0
 8002b88:	d013      	beq.n	8002bb2 <UART_SetConfig+0x1ba>
 8002b8a:	2bc0      	cmp	r3, #192	; 0xc0
 8002b8c:	d814      	bhi.n	8002bb8 <UART_SetConfig+0x1c0>
 8002b8e:	2b80      	cmp	r3, #128	; 0x80
 8002b90:	d009      	beq.n	8002ba6 <UART_SetConfig+0x1ae>
 8002b92:	2b80      	cmp	r3, #128	; 0x80
 8002b94:	d810      	bhi.n	8002bb8 <UART_SetConfig+0x1c0>
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <UART_SetConfig+0x1a8>
 8002b9a:	2b40      	cmp	r3, #64	; 0x40
 8002b9c:	d006      	beq.n	8002bac <UART_SetConfig+0x1b4>
 8002b9e:	e00b      	b.n	8002bb8 <UART_SetConfig+0x1c0>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	77fb      	strb	r3, [r7, #31]
 8002ba4:	e0cc      	b.n	8002d40 <UART_SetConfig+0x348>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	77fb      	strb	r3, [r7, #31]
 8002baa:	e0c9      	b.n	8002d40 <UART_SetConfig+0x348>
 8002bac:	2304      	movs	r3, #4
 8002bae:	77fb      	strb	r3, [r7, #31]
 8002bb0:	e0c6      	b.n	8002d40 <UART_SetConfig+0x348>
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	77fb      	strb	r3, [r7, #31]
 8002bb6:	e0c3      	b.n	8002d40 <UART_SetConfig+0x348>
 8002bb8:	2310      	movs	r3, #16
 8002bba:	77fb      	strb	r3, [r7, #31]
 8002bbc:	e0c0      	b.n	8002d40 <UART_SetConfig+0x348>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a44      	ldr	r2, [pc, #272]	; (8002cd4 <UART_SetConfig+0x2dc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d125      	bne.n	8002c14 <UART_SetConfig+0x21c>
 8002bc8:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <UART_SetConfig+0x2cc>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bd6:	d017      	beq.n	8002c08 <UART_SetConfig+0x210>
 8002bd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bdc:	d817      	bhi.n	8002c0e <UART_SetConfig+0x216>
 8002bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be2:	d00b      	beq.n	8002bfc <UART_SetConfig+0x204>
 8002be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be8:	d811      	bhi.n	8002c0e <UART_SetConfig+0x216>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <UART_SetConfig+0x1fe>
 8002bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf2:	d006      	beq.n	8002c02 <UART_SetConfig+0x20a>
 8002bf4:	e00b      	b.n	8002c0e <UART_SetConfig+0x216>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	77fb      	strb	r3, [r7, #31]
 8002bfa:	e0a1      	b.n	8002d40 <UART_SetConfig+0x348>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	77fb      	strb	r3, [r7, #31]
 8002c00:	e09e      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c02:	2304      	movs	r3, #4
 8002c04:	77fb      	strb	r3, [r7, #31]
 8002c06:	e09b      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c08:	2308      	movs	r3, #8
 8002c0a:	77fb      	strb	r3, [r7, #31]
 8002c0c:	e098      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c0e:	2310      	movs	r3, #16
 8002c10:	77fb      	strb	r3, [r7, #31]
 8002c12:	e095      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a2f      	ldr	r2, [pc, #188]	; (8002cd8 <UART_SetConfig+0x2e0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d125      	bne.n	8002c6a <UART_SetConfig+0x272>
 8002c1e:	4b29      	ldr	r3, [pc, #164]	; (8002cc4 <UART_SetConfig+0x2cc>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c2c:	d017      	beq.n	8002c5e <UART_SetConfig+0x266>
 8002c2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c32:	d817      	bhi.n	8002c64 <UART_SetConfig+0x26c>
 8002c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c38:	d00b      	beq.n	8002c52 <UART_SetConfig+0x25a>
 8002c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c3e:	d811      	bhi.n	8002c64 <UART_SetConfig+0x26c>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <UART_SetConfig+0x254>
 8002c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c48:	d006      	beq.n	8002c58 <UART_SetConfig+0x260>
 8002c4a:	e00b      	b.n	8002c64 <UART_SetConfig+0x26c>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	77fb      	strb	r3, [r7, #31]
 8002c50:	e076      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c52:	2302      	movs	r3, #2
 8002c54:	77fb      	strb	r3, [r7, #31]
 8002c56:	e073      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c58:	2304      	movs	r3, #4
 8002c5a:	77fb      	strb	r3, [r7, #31]
 8002c5c:	e070      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c5e:	2308      	movs	r3, #8
 8002c60:	77fb      	strb	r3, [r7, #31]
 8002c62:	e06d      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c64:	2310      	movs	r3, #16
 8002c66:	77fb      	strb	r3, [r7, #31]
 8002c68:	e06a      	b.n	8002d40 <UART_SetConfig+0x348>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <UART_SetConfig+0x2e4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d138      	bne.n	8002ce6 <UART_SetConfig+0x2ee>
 8002c74:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <UART_SetConfig+0x2cc>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002c7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c82:	d017      	beq.n	8002cb4 <UART_SetConfig+0x2bc>
 8002c84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c88:	d82a      	bhi.n	8002ce0 <UART_SetConfig+0x2e8>
 8002c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8e:	d00b      	beq.n	8002ca8 <UART_SetConfig+0x2b0>
 8002c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c94:	d824      	bhi.n	8002ce0 <UART_SetConfig+0x2e8>
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <UART_SetConfig+0x2aa>
 8002c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9e:	d006      	beq.n	8002cae <UART_SetConfig+0x2b6>
 8002ca0:	e01e      	b.n	8002ce0 <UART_SetConfig+0x2e8>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	77fb      	strb	r3, [r7, #31]
 8002ca6:	e04b      	b.n	8002d40 <UART_SetConfig+0x348>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	77fb      	strb	r3, [r7, #31]
 8002cac:	e048      	b.n	8002d40 <UART_SetConfig+0x348>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	77fb      	strb	r3, [r7, #31]
 8002cb2:	e045      	b.n	8002d40 <UART_SetConfig+0x348>
 8002cb4:	2308      	movs	r3, #8
 8002cb6:	77fb      	strb	r3, [r7, #31]
 8002cb8:	e042      	b.n	8002d40 <UART_SetConfig+0x348>
 8002cba:	bf00      	nop
 8002cbc:	efff69f3 	.word	0xefff69f3
 8002cc0:	40011000 	.word	0x40011000
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40004400 	.word	0x40004400
 8002ccc:	40004800 	.word	0x40004800
 8002cd0:	40004c00 	.word	0x40004c00
 8002cd4:	40005000 	.word	0x40005000
 8002cd8:	40011400 	.word	0x40011400
 8002cdc:	40007800 	.word	0x40007800
 8002ce0:	2310      	movs	r3, #16
 8002ce2:	77fb      	strb	r3, [r7, #31]
 8002ce4:	e02c      	b.n	8002d40 <UART_SetConfig+0x348>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a72      	ldr	r2, [pc, #456]	; (8002eb4 <UART_SetConfig+0x4bc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d125      	bne.n	8002d3c <UART_SetConfig+0x344>
 8002cf0:	4b71      	ldr	r3, [pc, #452]	; (8002eb8 <UART_SetConfig+0x4c0>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cfa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002cfe:	d017      	beq.n	8002d30 <UART_SetConfig+0x338>
 8002d00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d04:	d817      	bhi.n	8002d36 <UART_SetConfig+0x33e>
 8002d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d0a:	d00b      	beq.n	8002d24 <UART_SetConfig+0x32c>
 8002d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d10:	d811      	bhi.n	8002d36 <UART_SetConfig+0x33e>
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <UART_SetConfig+0x326>
 8002d16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d1a:	d006      	beq.n	8002d2a <UART_SetConfig+0x332>
 8002d1c:	e00b      	b.n	8002d36 <UART_SetConfig+0x33e>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	77fb      	strb	r3, [r7, #31]
 8002d22:	e00d      	b.n	8002d40 <UART_SetConfig+0x348>
 8002d24:	2302      	movs	r3, #2
 8002d26:	77fb      	strb	r3, [r7, #31]
 8002d28:	e00a      	b.n	8002d40 <UART_SetConfig+0x348>
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	77fb      	strb	r3, [r7, #31]
 8002d2e:	e007      	b.n	8002d40 <UART_SetConfig+0x348>
 8002d30:	2308      	movs	r3, #8
 8002d32:	77fb      	strb	r3, [r7, #31]
 8002d34:	e004      	b.n	8002d40 <UART_SetConfig+0x348>
 8002d36:	2310      	movs	r3, #16
 8002d38:	77fb      	strb	r3, [r7, #31]
 8002d3a:	e001      	b.n	8002d40 <UART_SetConfig+0x348>
 8002d3c:	2310      	movs	r3, #16
 8002d3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d48:	d15b      	bne.n	8002e02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002d4a:	7ffb      	ldrb	r3, [r7, #31]
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d828      	bhi.n	8002da2 <UART_SetConfig+0x3aa>
 8002d50:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <UART_SetConfig+0x360>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d7d 	.word	0x08002d7d
 8002d5c:	08002d85 	.word	0x08002d85
 8002d60:	08002d8d 	.word	0x08002d8d
 8002d64:	08002da3 	.word	0x08002da3
 8002d68:	08002d93 	.word	0x08002d93
 8002d6c:	08002da3 	.word	0x08002da3
 8002d70:	08002da3 	.word	0x08002da3
 8002d74:	08002da3 	.word	0x08002da3
 8002d78:	08002d9b 	.word	0x08002d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d7c:	f7fe fe8c 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 8002d80:	61b8      	str	r0, [r7, #24]
        break;
 8002d82:	e013      	b.n	8002dac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d84:	f7fe fe9c 	bl	8001ac0 <HAL_RCC_GetPCLK2Freq>
 8002d88:	61b8      	str	r0, [r7, #24]
        break;
 8002d8a:	e00f      	b.n	8002dac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d8c:	4b4b      	ldr	r3, [pc, #300]	; (8002ebc <UART_SetConfig+0x4c4>)
 8002d8e:	61bb      	str	r3, [r7, #24]
        break;
 8002d90:	e00c      	b.n	8002dac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d92:	f7fe fd71 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 8002d96:	61b8      	str	r0, [r7, #24]
        break;
 8002d98:	e008      	b.n	8002dac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d9e:	61bb      	str	r3, [r7, #24]
        break;
 8002da0:	e004      	b.n	8002dac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	77bb      	strb	r3, [r7, #30]
        break;
 8002daa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d074      	beq.n	8002e9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	005a      	lsls	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	085b      	lsrs	r3, r3, #1
 8002dbc:	441a      	add	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b0f      	cmp	r3, #15
 8002dcc:	d916      	bls.n	8002dfc <UART_SetConfig+0x404>
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd4:	d212      	bcs.n	8002dfc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	f023 030f 	bic.w	r3, r3, #15
 8002dde:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	085b      	lsrs	r3, r3, #1
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	89fb      	ldrh	r3, [r7, #14]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	89fa      	ldrh	r2, [r7, #14]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	e04f      	b.n	8002e9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	77bb      	strb	r3, [r7, #30]
 8002e00:	e04c      	b.n	8002e9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e02:	7ffb      	ldrb	r3, [r7, #31]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d828      	bhi.n	8002e5a <UART_SetConfig+0x462>
 8002e08:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <UART_SetConfig+0x418>)
 8002e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0e:	bf00      	nop
 8002e10:	08002e35 	.word	0x08002e35
 8002e14:	08002e3d 	.word	0x08002e3d
 8002e18:	08002e45 	.word	0x08002e45
 8002e1c:	08002e5b 	.word	0x08002e5b
 8002e20:	08002e4b 	.word	0x08002e4b
 8002e24:	08002e5b 	.word	0x08002e5b
 8002e28:	08002e5b 	.word	0x08002e5b
 8002e2c:	08002e5b 	.word	0x08002e5b
 8002e30:	08002e53 	.word	0x08002e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e34:	f7fe fe30 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 8002e38:	61b8      	str	r0, [r7, #24]
        break;
 8002e3a:	e013      	b.n	8002e64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e3c:	f7fe fe40 	bl	8001ac0 <HAL_RCC_GetPCLK2Freq>
 8002e40:	61b8      	str	r0, [r7, #24]
        break;
 8002e42:	e00f      	b.n	8002e64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e44:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <UART_SetConfig+0x4c4>)
 8002e46:	61bb      	str	r3, [r7, #24]
        break;
 8002e48:	e00c      	b.n	8002e64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e4a:	f7fe fd15 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 8002e4e:	61b8      	str	r0, [r7, #24]
        break;
 8002e50:	e008      	b.n	8002e64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e56:	61bb      	str	r3, [r7, #24]
        break;
 8002e58:	e004      	b.n	8002e64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	77bb      	strb	r3, [r7, #30]
        break;
 8002e62:	bf00      	nop
    }

    if (pclk != 0U)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d018      	beq.n	8002e9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	085a      	lsrs	r2, r3, #1
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	441a      	add	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b0f      	cmp	r3, #15
 8002e82:	d909      	bls.n	8002e98 <UART_SetConfig+0x4a0>
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8a:	d205      	bcs.n	8002e98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	e001      	b.n	8002e9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ea8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40007c00 	.word	0x40007c00
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	00f42400 	.word	0x00f42400

08002ec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00a      	beq.n	8002f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01a      	beq.n	8002fd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fbe:	d10a      	bne.n	8002fd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	605a      	str	r2, [r3, #4]
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af02      	add	r7, sp, #8
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003014:	f7fd fde2 	bl	8000bdc <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b08      	cmp	r3, #8
 8003026:	d10e      	bne.n	8003046 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f831 	bl	800309e <UART_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e027      	b.n	8003096 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b04      	cmp	r3, #4
 8003052:	d10e      	bne.n	8003072 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f81b 	bl	800309e <UART_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e011      	b.n	8003096 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b09c      	sub	sp, #112	; 0x70
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	4613      	mov	r3, r2
 80030ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ae:	e0a7      	b.n	8003200 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030b6:	f000 80a3 	beq.w	8003200 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ba:	f7fd fd8f 	bl	8000bdc <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80030ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d13f      	bne.n	8003150 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d8:	e853 3f00 	ldrex	r3, [r3]
 80030dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80030de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030e4:	667b      	str	r3, [r7, #100]	; 0x64
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80030f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80030fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e6      	bne.n	80030d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3308      	adds	r3, #8
 8003108:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310c:	e853 3f00 	ldrex	r3, [r3]
 8003110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	663b      	str	r3, [r7, #96]	; 0x60
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3308      	adds	r3, #8
 8003120:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003122:	64ba      	str	r2, [r7, #72]	; 0x48
 8003124:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003126:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1e5      	bne.n	8003102 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e068      	b.n	8003222 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	d050      	beq.n	8003200 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800316c:	d148      	bne.n	8003200 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003176:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800318c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003196:	637b      	str	r3, [r7, #52]	; 0x34
 8003198:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800319c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e6      	bne.n	8003178 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3308      	adds	r3, #8
 80031b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	613b      	str	r3, [r7, #16]
   return(result);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3308      	adds	r3, #8
 80031c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031ca:	623a      	str	r2, [r7, #32]
 80031cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ce:	69f9      	ldr	r1, [r7, #28]
 80031d0:	6a3a      	ldr	r2, [r7, #32]
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e5      	bne.n	80031aa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e010      	b.n	8003222 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	4013      	ands	r3, r2
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	429a      	cmp	r2, r3
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	429a      	cmp	r2, r3
 800321c:	f43f af48 	beq.w	80030b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3770      	adds	r7, #112	; 0x70
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800323e:	f3ef 8305 	mrs	r3, IPSR
 8003242:	60bb      	str	r3, [r7, #8]
  return(result);
 8003244:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324a:	f3ef 8310 	mrs	r3, PRIMASK
 800324e:	607b      	str	r3, [r7, #4]
  return(result);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d105      	bne.n	8003262 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003256:	f3ef 8311 	mrs	r3, BASEPRI
 800325a:	603b      	str	r3, [r7, #0]
  return(result);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <osKernelInitialize+0x3a>
 8003262:	4b0e      	ldr	r3, [pc, #56]	; (800329c <osKernelInitialize+0x64>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d103      	bne.n	8003272 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800326a:	f06f 0305 	mvn.w	r3, #5
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	e00c      	b.n	800328c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <osKernelInitialize+0x64>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800327a:	4b08      	ldr	r3, [pc, #32]	; (800329c <osKernelInitialize+0x64>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	e002      	b.n	800328c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800328a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800328c:	68fb      	ldr	r3, [r7, #12]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000108 	.word	0x20000108

080032a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032a6:	f3ef 8305 	mrs	r3, IPSR
 80032aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80032ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10f      	bne.n	80032d2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b2:	f3ef 8310 	mrs	r3, PRIMASK
 80032b6:	607b      	str	r3, [r7, #4]
  return(result);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d105      	bne.n	80032ca <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032be:	f3ef 8311 	mrs	r3, BASEPRI
 80032c2:	603b      	str	r3, [r7, #0]
  return(result);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <osKernelStart+0x3a>
 80032ca:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <osKernelStart+0x68>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d103      	bne.n	80032da <osKernelStart+0x3a>
    stat = osErrorISR;
 80032d2:	f06f 0305 	mvn.w	r3, #5
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e010      	b.n	80032fc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <osKernelStart+0x68>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d109      	bne.n	80032f6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80032e2:	f7ff ffa2 	bl	800322a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <osKernelStart+0x68>)
 80032e8:	2202      	movs	r2, #2
 80032ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80032ec:	f001 f8b4 	bl	8004458 <vTaskStartScheduler>
      stat = osOK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	e002      	b.n	80032fc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80032fc:	68fb      	ldr	r3, [r7, #12]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000108 	.word	0x20000108

0800330c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b090      	sub	sp, #64	; 0x40
 8003310:	af04      	add	r7, sp, #16
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003318:	2300      	movs	r3, #0
 800331a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800331c:	f3ef 8305 	mrs	r3, IPSR
 8003320:	61fb      	str	r3, [r7, #28]
  return(result);
 8003322:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003324:	2b00      	cmp	r3, #0
 8003326:	f040 808f 	bne.w	8003448 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800332a:	f3ef 8310 	mrs	r3, PRIMASK
 800332e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d105      	bne.n	8003342 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003336:	f3ef 8311 	mrs	r3, BASEPRI
 800333a:	617b      	str	r3, [r7, #20]
  return(result);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <osThreadNew+0x3e>
 8003342:	4b44      	ldr	r3, [pc, #272]	; (8003454 <osThreadNew+0x148>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d07e      	beq.n	8003448 <osThreadNew+0x13c>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d07b      	beq.n	8003448 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003354:	2318      	movs	r3, #24
 8003356:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003358:	2300      	movs	r3, #0
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800335c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003360:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d045      	beq.n	80033f4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <osThreadNew+0x6a>
        name = attr->name;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <osThreadNew+0x90>
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	2b38      	cmp	r3, #56	; 0x38
 800338e:	d805      	bhi.n	800339c <osThreadNew+0x90>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <osThreadNew+0x94>
        return (NULL);
 800339c:	2300      	movs	r3, #0
 800339e:	e054      	b.n	800344a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00e      	beq.n	80033d6 <osThreadNew+0xca>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b5b      	cmp	r3, #91	; 0x5b
 80033be:	d90a      	bls.n	80033d6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d006      	beq.n	80033d6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <osThreadNew+0xca>
        mem = 1;
 80033d0:	2301      	movs	r3, #1
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	e010      	b.n	80033f8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10c      	bne.n	80033f8 <osThreadNew+0xec>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d108      	bne.n	80033f8 <osThreadNew+0xec>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d104      	bne.n	80033f8 <osThreadNew+0xec>
          mem = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	623b      	str	r3, [r7, #32]
 80033f2:	e001      	b.n	80033f8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d110      	bne.n	8003420 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003406:	9202      	str	r2, [sp, #8]
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003412:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fe3f 	bl	8004098 <xTaskCreateStatic>
 800341a:	4603      	mov	r3, r0
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	e013      	b.n	8003448 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d110      	bne.n	8003448 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	b29a      	uxth	r2, r3
 800342a:	f107 0310 	add.w	r3, r7, #16
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fe90 	bl	800415e <xTaskCreate>
 800343e:	4603      	mov	r3, r0
 8003440:	2b01      	cmp	r3, #1
 8003442:	d001      	beq.n	8003448 <osThreadNew+0x13c>
          hTask = NULL;
 8003444:	2300      	movs	r3, #0
 8003446:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003448:	693b      	ldr	r3, [r7, #16]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3730      	adds	r7, #48	; 0x30
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000108 	.word	0x20000108

08003458 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003460:	f3ef 8305 	mrs	r3, IPSR
 8003464:	613b      	str	r3, [r7, #16]
  return(result);
 8003466:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10f      	bne.n	800348c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346c:	f3ef 8310 	mrs	r3, PRIMASK
 8003470:	60fb      	str	r3, [r7, #12]
  return(result);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003478:	f3ef 8311 	mrs	r3, BASEPRI
 800347c:	60bb      	str	r3, [r7, #8]
  return(result);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <osDelay+0x3c>
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <osDelay+0x58>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d103      	bne.n	8003494 <osDelay+0x3c>
    stat = osErrorISR;
 800348c:	f06f 0305 	mvn.w	r3, #5
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e007      	b.n	80034a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 ffa4 	bl	80043ec <vTaskDelay>
    }
  }

  return (stat);
 80034a4:	697b      	ldr	r3, [r7, #20]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000108 	.word	0x20000108

080034b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4a07      	ldr	r2, [pc, #28]	; (80034e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80034c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	4a06      	ldr	r2, [pc, #24]	; (80034e4 <vApplicationGetIdleTaskMemory+0x30>)
 80034ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	601a      	str	r2, [r3, #0]
}
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	2000010c 	.word	0x2000010c
 80034e4:	20000168 	.word	0x20000168

080034e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4a07      	ldr	r2, [pc, #28]	; (8003514 <vApplicationGetTimerTaskMemory+0x2c>)
 80034f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4a06      	ldr	r2, [pc, #24]	; (8003518 <vApplicationGetTimerTaskMemory+0x30>)
 80034fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003506:	601a      	str	r2, [r3, #0]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	20000368 	.word	0x20000368
 8003518:	200003c4 	.word	0x200003c4

0800351c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f103 0208 	add.w	r2, r3, #8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003534:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f103 0208 	add.w	r2, r3, #8
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f103 0208 	add.w	r2, r3, #8
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003576:	b480      	push	{r7}
 8003578:	b085      	sub	sp, #20
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	601a      	str	r2, [r3, #0]
}
 80035b2:	bf00      	nop
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035be:	b480      	push	{r7}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035d4:	d103      	bne.n	80035de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e00c      	b.n	80035f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3308      	adds	r3, #8
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e002      	b.n	80035ec <vListInsert+0x2e>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d2f6      	bcs.n	80035e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	601a      	str	r2, [r3, #0]
}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6892      	ldr	r2, [r2, #8]
 8003646:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6852      	ldr	r2, [r2, #4]
 8003650:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d103      	bne.n	8003664 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	1e5a      	subs	r2, r3, #1
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10c      	bne.n	80036b2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369c:	b672      	cpsid	i
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	b662      	cpsie	i
 80036ac:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036ae:	bf00      	nop
 80036b0:	e7fe      	b.n	80036b0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80036b2:	f002 f87b 	bl	80057ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	68f9      	ldr	r1, [r7, #12]
 80036c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	441a      	add	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e2:	3b01      	subs	r3, #1
 80036e4:	68f9      	ldr	r1, [r7, #12]
 80036e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	441a      	add	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	22ff      	movs	r2, #255	; 0xff
 80036f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	22ff      	movs	r2, #255	; 0xff
 80036fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d114      	bne.n	8003732 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01a      	beq.n	8003746 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3310      	adds	r3, #16
 8003714:	4618      	mov	r0, r3
 8003716:	f001 f937 	bl	8004988 <xTaskRemoveFromEventList>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d012      	beq.n	8003746 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003720:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <xQueueGenericReset+0xd0>)
 8003722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	e009      	b.n	8003746 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3310      	adds	r3, #16
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff fef0 	bl	800351c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	3324      	adds	r3, #36	; 0x24
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff feeb 	bl	800351c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003746:	f002 f865 	bl	8005814 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800374a:	2301      	movs	r3, #1
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	e000ed04 	.word	0xe000ed04

08003758 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08e      	sub	sp, #56	; 0x38
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10c      	bne.n	8003786 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	b672      	cpsid	i
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	b662      	cpsie	i
 8003780:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10c      	bne.n	80037a6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	b672      	cpsid	i
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	b662      	cpsie	i
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037a2:	bf00      	nop
 80037a4:	e7fe      	b.n	80037a4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <xQueueGenericCreateStatic+0x5a>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <xQueueGenericCreateStatic+0x5e>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <xQueueGenericCreateStatic+0x60>
 80037b6:	2300      	movs	r3, #0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10c      	bne.n	80037d6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	b672      	cpsid	i
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	b662      	cpsie	i
 80037d0:	623b      	str	r3, [r7, #32]
}
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d102      	bne.n	80037e2 <xQueueGenericCreateStatic+0x8a>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <xQueueGenericCreateStatic+0x8e>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <xQueueGenericCreateStatic+0x90>
 80037e6:	2300      	movs	r3, #0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10c      	bne.n	8003806 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	b672      	cpsid	i
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	b662      	cpsie	i
 8003800:	61fb      	str	r3, [r7, #28]
}
 8003802:	bf00      	nop
 8003804:	e7fe      	b.n	8003804 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003806:	2350      	movs	r3, #80	; 0x50
 8003808:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2b50      	cmp	r3, #80	; 0x50
 800380e:	d00c      	beq.n	800382a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	b672      	cpsid	i
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	b662      	cpsie	i
 8003824:	61bb      	str	r3, [r7, #24]
}
 8003826:	bf00      	nop
 8003828:	e7fe      	b.n	8003828 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800382a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00d      	beq.n	8003852 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800383e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f805 	bl	800385c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003854:	4618      	mov	r0, r3
 8003856:	3730      	adds	r7, #48	; 0x30
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d103      	bne.n	8003878 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e002      	b.n	800387e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800388a:	2101      	movs	r1, #1
 800388c:	69b8      	ldr	r0, [r7, #24]
 800388e:	f7ff fef9 	bl	8003684 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08e      	sub	sp, #56	; 0x38
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038b2:	2300      	movs	r3, #0
 80038b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10c      	bne.n	80038da <xQueueGenericSend+0x36>
	__asm volatile
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	b672      	cpsid	i
 80038c6:	f383 8811 	msr	BASEPRI, r3
 80038ca:	f3bf 8f6f 	isb	sy
 80038ce:	f3bf 8f4f 	dsb	sy
 80038d2:	b662      	cpsie	i
 80038d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038d6:	bf00      	nop
 80038d8:	e7fe      	b.n	80038d8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d103      	bne.n	80038e8 <xQueueGenericSend+0x44>
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <xQueueGenericSend+0x48>
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <xQueueGenericSend+0x4a>
 80038ec:	2300      	movs	r3, #0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10c      	bne.n	800390c <xQueueGenericSend+0x68>
	__asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	b672      	cpsid	i
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	b662      	cpsie	i
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003908:	bf00      	nop
 800390a:	e7fe      	b.n	800390a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d103      	bne.n	800391a <xQueueGenericSend+0x76>
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <xQueueGenericSend+0x7a>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <xQueueGenericSend+0x7c>
 800391e:	2300      	movs	r3, #0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10c      	bne.n	800393e <xQueueGenericSend+0x9a>
	__asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003928:	b672      	cpsid	i
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	b662      	cpsie	i
 8003938:	623b      	str	r3, [r7, #32]
}
 800393a:	bf00      	nop
 800393c:	e7fe      	b.n	800393c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800393e:	f001 f9e9 	bl	8004d14 <xTaskGetSchedulerState>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <xQueueGenericSend+0xaa>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <xQueueGenericSend+0xae>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <xQueueGenericSend+0xb0>
 8003952:	2300      	movs	r3, #0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10c      	bne.n	8003972 <xQueueGenericSend+0xce>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395c:	b672      	cpsid	i
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	b662      	cpsie	i
 800396c:	61fb      	str	r3, [r7, #28]
}
 800396e:	bf00      	nop
 8003970:	e7fe      	b.n	8003970 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003972:	f001 ff1b 	bl	80057ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <xQueueGenericSend+0xe4>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d129      	bne.n	80039dc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800398e:	f000 fa15 	bl	8003dbc <prvCopyDataToQueue>
 8003992:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	2b00      	cmp	r3, #0
 800399a:	d010      	beq.n	80039be <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	3324      	adds	r3, #36	; 0x24
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fff1 	bl	8004988 <xTaskRemoveFromEventList>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039ac:	4b3f      	ldr	r3, [pc, #252]	; (8003aac <xQueueGenericSend+0x208>)
 80039ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	e00a      	b.n	80039d4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039c4:	4b39      	ldr	r3, [pc, #228]	; (8003aac <xQueueGenericSend+0x208>)
 80039c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039d4:	f001 ff1e 	bl	8005814 <vPortExitCritical>
				return pdPASS;
 80039d8:	2301      	movs	r3, #1
 80039da:	e063      	b.n	8003aa4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d103      	bne.n	80039ea <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039e2:	f001 ff17 	bl	8005814 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e05c      	b.n	8003aa4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039f0:	f107 0314 	add.w	r3, r7, #20
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 f82d 	bl	8004a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039fe:	f001 ff09 	bl	8005814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a02:	f000 fd93 	bl	800452c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a06:	f001 fed1 	bl	80057ac <vPortEnterCritical>
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a16:	d103      	bne.n	8003a20 <xQueueGenericSend+0x17c>
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a26:	b25b      	sxtb	r3, r3
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a2c:	d103      	bne.n	8003a36 <xQueueGenericSend+0x192>
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a36:	f001 feed 	bl	8005814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a3a:	1d3a      	adds	r2, r7, #4
 8003a3c:	f107 0314 	add.w	r3, r7, #20
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 f81c 	bl	8004a80 <xTaskCheckForTimeOut>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d124      	bne.n	8003a98 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a50:	f000 faac 	bl	8003fac <prvIsQueueFull>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d018      	beq.n	8003a8c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	3310      	adds	r3, #16
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4611      	mov	r1, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 ff3c 	bl	80048e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a6a:	f000 fa37 	bl	8003edc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a6e:	f000 fd6b 	bl	8004548 <xTaskResumeAll>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f47f af7c 	bne.w	8003972 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8003a7a:	4b0c      	ldr	r3, [pc, #48]	; (8003aac <xQueueGenericSend+0x208>)
 8003a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	e772      	b.n	8003972 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a8e:	f000 fa25 	bl	8003edc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a92:	f000 fd59 	bl	8004548 <xTaskResumeAll>
 8003a96:	e76c      	b.n	8003972 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a9a:	f000 fa1f 	bl	8003edc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a9e:	f000 fd53 	bl	8004548 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003aa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3738      	adds	r7, #56	; 0x38
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	e000ed04 	.word	0xe000ed04

08003ab0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08e      	sub	sp, #56	; 0x38
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10c      	bne.n	8003ae2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	b672      	cpsid	i
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	b662      	cpsie	i
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d103      	bne.n	8003af0 <xQueueGenericSendFromISR+0x40>
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <xQueueGenericSendFromISR+0x44>
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <xQueueGenericSendFromISR+0x46>
 8003af4:	2300      	movs	r3, #0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10c      	bne.n	8003b14 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	b672      	cpsid	i
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	b662      	cpsie	i
 8003b0e:	623b      	str	r3, [r7, #32]
}
 8003b10:	bf00      	nop
 8003b12:	e7fe      	b.n	8003b12 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d103      	bne.n	8003b22 <xQueueGenericSendFromISR+0x72>
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <xQueueGenericSendFromISR+0x76>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <xQueueGenericSendFromISR+0x78>
 8003b26:	2300      	movs	r3, #0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10c      	bne.n	8003b46 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	b672      	cpsid	i
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	b662      	cpsie	i
 8003b40:	61fb      	str	r3, [r7, #28]
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b46:	f001 ff19 	bl	800597c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b4a:	f3ef 8211 	mrs	r2, BASEPRI
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	b672      	cpsid	i
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	b662      	cpsie	i
 8003b62:	61ba      	str	r2, [r7, #24]
 8003b64:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b66:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <xQueueGenericSendFromISR+0xcc>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d12c      	bne.n	8003bd6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b8c:	f000 f916 	bl	8003dbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b90:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b98:	d112      	bne.n	8003bc0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d016      	beq.n	8003bd0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	3324      	adds	r3, #36	; 0x24
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 feee 	bl	8004988 <xTaskRemoveFromEventList>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00e      	beq.n	8003bd0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00b      	beq.n	8003bd0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	e007      	b.n	8003bd0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	b25a      	sxtb	r2, r3
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003bd4:	e001      	b.n	8003bda <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bdc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003be4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3738      	adds	r7, #56	; 0x38
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08c      	sub	sp, #48	; 0x30
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10c      	bne.n	8003c24 <xQueueReceive+0x34>
	__asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0e:	b672      	cpsid	i
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	b662      	cpsie	i
 8003c1e:	623b      	str	r3, [r7, #32]
}
 8003c20:	bf00      	nop
 8003c22:	e7fe      	b.n	8003c22 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d103      	bne.n	8003c32 <xQueueReceive+0x42>
 8003c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <xQueueReceive+0x46>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <xQueueReceive+0x48>
 8003c36:	2300      	movs	r3, #0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10c      	bne.n	8003c56 <xQueueReceive+0x66>
	__asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c40:	b672      	cpsid	i
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	b662      	cpsie	i
 8003c50:	61fb      	str	r3, [r7, #28]
}
 8003c52:	bf00      	nop
 8003c54:	e7fe      	b.n	8003c54 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c56:	f001 f85d 	bl	8004d14 <xTaskGetSchedulerState>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d102      	bne.n	8003c66 <xQueueReceive+0x76>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <xQueueReceive+0x7a>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <xQueueReceive+0x7c>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10c      	bne.n	8003c8a <xQueueReceive+0x9a>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	b672      	cpsid	i
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	b662      	cpsie	i
 8003c84:	61bb      	str	r3, [r7, #24]
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c8a:	f001 fd8f 	bl	80057ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01f      	beq.n	8003cda <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c9e:	f000 f8f7 	bl	8003e90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	1e5a      	subs	r2, r3, #1
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00f      	beq.n	8003cd2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	3310      	adds	r3, #16
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fe66 	bl	8004988 <xTaskRemoveFromEventList>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cc2:	4b3d      	ldr	r3, [pc, #244]	; (8003db8 <xQueueReceive+0x1c8>)
 8003cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cd2:	f001 fd9f 	bl	8005814 <vPortExitCritical>
				return pdPASS;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e069      	b.n	8003dae <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d103      	bne.n	8003ce8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ce0:	f001 fd98 	bl	8005814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e062      	b.n	8003dae <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cee:	f107 0310 	add.w	r3, r7, #16
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 feae 	bl	8004a54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cfc:	f001 fd8a 	bl	8005814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d00:	f000 fc14 	bl	800452c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d04:	f001 fd52 	bl	80057ac <vPortEnterCritical>
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d0e:	b25b      	sxtb	r3, r3
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d14:	d103      	bne.n	8003d1e <xQueueReceive+0x12e>
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d24:	b25b      	sxtb	r3, r3
 8003d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d2a:	d103      	bne.n	8003d34 <xQueueReceive+0x144>
 8003d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d34:	f001 fd6e 	bl	8005814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d38:	1d3a      	adds	r2, r7, #4
 8003d3a:	f107 0310 	add.w	r3, r7, #16
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fe9d 	bl	8004a80 <xTaskCheckForTimeOut>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d123      	bne.n	8003d94 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d4e:	f000 f917 	bl	8003f80 <prvIsQueueEmpty>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d017      	beq.n	8003d88 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	3324      	adds	r3, #36	; 0x24
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 fdbd 	bl	80048e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d68:	f000 f8b8 	bl	8003edc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d6c:	f000 fbec 	bl	8004548 <xTaskResumeAll>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d189      	bne.n	8003c8a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8003d76:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <xQueueReceive+0x1c8>)
 8003d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	e780      	b.n	8003c8a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d8a:	f000 f8a7 	bl	8003edc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d8e:	f000 fbdb 	bl	8004548 <xTaskResumeAll>
 8003d92:	e77a      	b.n	8003c8a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d96:	f000 f8a1 	bl	8003edc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d9a:	f000 fbd5 	bl	8004548 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003da0:	f000 f8ee 	bl	8003f80 <prvIsQueueEmpty>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f43f af6f 	beq.w	8003c8a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3730      	adds	r7, #48	; 0x30
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	e000ed04 	.word	0xe000ed04

08003dbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d14d      	bne.n	8003e7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 ffb2 	bl	8004d50 <xTaskPriorityDisinherit>
 8003dec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	e043      	b.n	8003e7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d119      	bne.n	8003e30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6858      	ldr	r0, [r3, #4]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	461a      	mov	r2, r3
 8003e06:	68b9      	ldr	r1, [r7, #8]
 8003e08:	f002 f804 	bl	8005e14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	441a      	add	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d32b      	bcc.n	8003e7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	e026      	b.n	8003e7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	68d8      	ldr	r0, [r3, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	f001 ffea 	bl	8005e14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	425b      	negs	r3, r3
 8003e4a:	441a      	add	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d207      	bcs.n	8003e6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	425b      	negs	r3, r3
 8003e66:	441a      	add	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d105      	bne.n	8003e7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e86:	697b      	ldr	r3, [r7, #20]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d018      	beq.n	8003ed4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	441a      	add	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d303      	bcc.n	8003ec4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68d9      	ldr	r1, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	461a      	mov	r2, r3
 8003ece:	6838      	ldr	r0, [r7, #0]
 8003ed0:	f001 ffa0 	bl	8005e14 <memcpy>
	}
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ee4:	f001 fc62 	bl	80057ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ef0:	e011      	b.n	8003f16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d012      	beq.n	8003f20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3324      	adds	r3, #36	; 0x24
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fd42 	bl	8004988 <xTaskRemoveFromEventList>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f0a:	f000 fe1f 	bl	8004b4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	dce9      	bgt.n	8003ef2 <prvUnlockQueue+0x16>
 8003f1e:	e000      	b.n	8003f22 <prvUnlockQueue+0x46>
					break;
 8003f20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	22ff      	movs	r2, #255	; 0xff
 8003f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f2a:	f001 fc73 	bl	8005814 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f2e:	f001 fc3d 	bl	80057ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f3a:	e011      	b.n	8003f60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d012      	beq.n	8003f6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3310      	adds	r3, #16
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fd1d 	bl	8004988 <xTaskRemoveFromEventList>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f54:	f000 fdfa 	bl	8004b4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f58:	7bbb      	ldrb	r3, [r7, #14]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	dce9      	bgt.n	8003f3c <prvUnlockQueue+0x60>
 8003f68:	e000      	b.n	8003f6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	22ff      	movs	r2, #255	; 0xff
 8003f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f74:	f001 fc4e 	bl	8005814 <vPortExitCritical>
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f88:	f001 fc10 	bl	80057ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e001      	b.n	8003f9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f9e:	f001 fc39 	bl	8005814 <vPortExitCritical>

	return xReturn;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fb4:	f001 fbfa 	bl	80057ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d102      	bne.n	8003fca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	e001      	b.n	8003fce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fce:	f001 fc21 	bl	8005814 <vPortExitCritical>

	return xReturn;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	e014      	b.n	8004016 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003fec:	4a0f      	ldr	r2, [pc, #60]	; (800402c <vQueueAddToRegistry+0x50>)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ff8:	490c      	ldr	r1, [pc, #48]	; (800402c <vQueueAddToRegistry+0x50>)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004002:	4a0a      	ldr	r2, [pc, #40]	; (800402c <vQueueAddToRegistry+0x50>)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800400e:	e006      	b.n	800401e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3301      	adds	r3, #1
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b07      	cmp	r3, #7
 800401a:	d9e7      	bls.n	8003fec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	200007c4 	.word	0x200007c4

08004030 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004040:	f001 fbb4 	bl	80057ac <vPortEnterCritical>
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800404a:	b25b      	sxtb	r3, r3
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004050:	d103      	bne.n	800405a <vQueueWaitForMessageRestricted+0x2a>
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004060:	b25b      	sxtb	r3, r3
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004066:	d103      	bne.n	8004070 <vQueueWaitForMessageRestricted+0x40>
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004070:	f001 fbd0 	bl	8005814 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	2b00      	cmp	r3, #0
 800407a:	d106      	bne.n	800408a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	3324      	adds	r3, #36	; 0x24
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fc51 	bl	800492c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800408a:	6978      	ldr	r0, [r7, #20]
 800408c:	f7ff ff26 	bl	8003edc <prvUnlockQueue>
	}
 8004090:	bf00      	nop
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08e      	sub	sp, #56	; 0x38
 800409c:	af04      	add	r7, sp, #16
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10c      	bne.n	80040c6 <xTaskCreateStatic+0x2e>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	b672      	cpsid	i
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	b662      	cpsie	i
 80040c0:	623b      	str	r3, [r7, #32]
}
 80040c2:	bf00      	nop
 80040c4:	e7fe      	b.n	80040c4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10c      	bne.n	80040e6 <xTaskCreateStatic+0x4e>
	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	b672      	cpsid	i
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	b662      	cpsie	i
 80040e0:	61fb      	str	r3, [r7, #28]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040e6:	235c      	movs	r3, #92	; 0x5c
 80040e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	2b5c      	cmp	r3, #92	; 0x5c
 80040ee:	d00c      	beq.n	800410a <xTaskCreateStatic+0x72>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	b672      	cpsid	i
 80040f6:	f383 8811 	msr	BASEPRI, r3
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	b662      	cpsie	i
 8004104:	61bb      	str	r3, [r7, #24]
}
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800410a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410e:	2b00      	cmp	r3, #0
 8004110:	d01e      	beq.n	8004150 <xTaskCreateStatic+0xb8>
 8004112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01b      	beq.n	8004150 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004120:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	2202      	movs	r2, #2
 8004126:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800412a:	2300      	movs	r3, #0
 800412c:	9303      	str	r3, [sp, #12]
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	9302      	str	r3, [sp, #8]
 8004132:	f107 0314 	add.w	r3, r7, #20
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f850 	bl	80041e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800414a:	f000 f8df 	bl	800430c <prvAddNewTaskToReadyList>
 800414e:	e001      	b.n	8004154 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004154:	697b      	ldr	r3, [r7, #20]
	}
 8004156:	4618      	mov	r0, r3
 8004158:	3728      	adds	r7, #40	; 0x28
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800415e:	b580      	push	{r7, lr}
 8004160:	b08c      	sub	sp, #48	; 0x30
 8004162:	af04      	add	r7, sp, #16
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	603b      	str	r3, [r7, #0]
 800416a:	4613      	mov	r3, r2
 800416c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4618      	mov	r0, r3
 8004174:	f001 fc46 	bl	8005a04 <pvPortMalloc>
 8004178:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00e      	beq.n	800419e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004180:	205c      	movs	r0, #92	; 0x5c
 8004182:	f001 fc3f 	bl	8005a04 <pvPortMalloc>
 8004186:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
 8004194:	e005      	b.n	80041a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004196:	6978      	ldr	r0, [r7, #20]
 8004198:	f001 fcfe 	bl	8005b98 <vPortFree>
 800419c:	e001      	b.n	80041a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d017      	beq.n	80041d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041b0:	88fa      	ldrh	r2, [r7, #6]
 80041b2:	2300      	movs	r3, #0
 80041b4:	9303      	str	r3, [sp, #12]
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	9302      	str	r3, [sp, #8]
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	9301      	str	r3, [sp, #4]
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f80e 	bl	80041e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041cc:	69f8      	ldr	r0, [r7, #28]
 80041ce:	f000 f89d 	bl	800430c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041d2:	2301      	movs	r3, #1
 80041d4:	61bb      	str	r3, [r7, #24]
 80041d6:	e002      	b.n	80041de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041de:	69bb      	ldr	r3, [r7, #24]
	}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3720      	adds	r7, #32
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	461a      	mov	r2, r3
 8004200:	21a5      	movs	r1, #165	; 0xa5
 8004202:	f001 fe15 	bl	8005e30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004210:	440b      	add	r3, r1
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f023 0307 	bic.w	r3, r3, #7
 800421e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	b672      	cpsid	i
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	b662      	cpsie	i
 800423e:	617b      	str	r3, [r7, #20]
}
 8004240:	bf00      	nop
 8004242:	e7fe      	b.n	8004242 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d01f      	beq.n	800428a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800424a:	2300      	movs	r3, #0
 800424c:	61fb      	str	r3, [r7, #28]
 800424e:	e012      	b.n	8004276 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	7819      	ldrb	r1, [r3, #0]
 8004258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	3334      	adds	r3, #52	; 0x34
 8004260:	460a      	mov	r2, r1
 8004262:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	4413      	add	r3, r2
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d006      	beq.n	800427e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	3301      	adds	r3, #1
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	2b0f      	cmp	r3, #15
 800427a:	d9e9      	bls.n	8004250 <prvInitialiseNewTask+0x68>
 800427c:	e000      	b.n	8004280 <prvInitialiseNewTask+0x98>
			{
				break;
 800427e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004288:	e003      	b.n	8004292 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	2b37      	cmp	r3, #55	; 0x37
 8004296:	d901      	bls.n	800429c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004298:	2337      	movs	r3, #55	; 0x37
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	2200      	movs	r2, #0
 80042ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	3304      	adds	r3, #4
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff f952 	bl	800355c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	3318      	adds	r3, #24
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff f94d 	bl	800355c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	2200      	movs	r2, #0
 80042dc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	69b8      	ldr	r0, [r7, #24]
 80042ec:	f001 f952 	bl	8005594 <pxPortInitialiseStack>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004302:	bf00      	nop
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004314:	f001 fa4a 	bl	80057ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004318:	4b2d      	ldr	r3, [pc, #180]	; (80043d0 <prvAddNewTaskToReadyList+0xc4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3301      	adds	r3, #1
 800431e:	4a2c      	ldr	r2, [pc, #176]	; (80043d0 <prvAddNewTaskToReadyList+0xc4>)
 8004320:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004322:	4b2c      	ldr	r3, [pc, #176]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800432a:	4a2a      	ldr	r2, [pc, #168]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004330:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <prvAddNewTaskToReadyList+0xc4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d110      	bne.n	800435a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004338:	f000 fc2c 	bl	8004b94 <prvInitialiseTaskLists>
 800433c:	e00d      	b.n	800435a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800433e:	4b26      	ldr	r3, [pc, #152]	; (80043d8 <prvAddNewTaskToReadyList+0xcc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004346:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	429a      	cmp	r2, r3
 8004352:	d802      	bhi.n	800435a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004354:	4a1f      	ldr	r2, [pc, #124]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800435a:	4b20      	ldr	r3, [pc, #128]	; (80043dc <prvAddNewTaskToReadyList+0xd0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3301      	adds	r3, #1
 8004360:	4a1e      	ldr	r2, [pc, #120]	; (80043dc <prvAddNewTaskToReadyList+0xd0>)
 8004362:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004364:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <prvAddNewTaskToReadyList+0xd0>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	4b1b      	ldr	r3, [pc, #108]	; (80043e0 <prvAddNewTaskToReadyList+0xd4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d903      	bls.n	8004380 <prvAddNewTaskToReadyList+0x74>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <prvAddNewTaskToReadyList+0xd4>)
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <prvAddNewTaskToReadyList+0xd8>)
 800438e:	441a      	add	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f7ff f8ed 	bl	8003576 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800439c:	f001 fa3a 	bl	8005814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043a0:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <prvAddNewTaskToReadyList+0xcc>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00e      	beq.n	80043c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d207      	bcs.n	80043c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <prvAddNewTaskToReadyList+0xdc>)
 80043b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	20000cd8 	.word	0x20000cd8
 80043d4:	20000804 	.word	0x20000804
 80043d8:	20000ce4 	.word	0x20000ce4
 80043dc:	20000cf4 	.word	0x20000cf4
 80043e0:	20000ce0 	.word	0x20000ce0
 80043e4:	20000808 	.word	0x20000808
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d019      	beq.n	8004432 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043fe:	4b14      	ldr	r3, [pc, #80]	; (8004450 <vTaskDelay+0x64>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00c      	beq.n	8004420 <vTaskDelay+0x34>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	b672      	cpsid	i
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	b662      	cpsie	i
 800441a:	60bb      	str	r3, [r7, #8]
}
 800441c:	bf00      	nop
 800441e:	e7fe      	b.n	800441e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004420:	f000 f884 	bl	800452c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004424:	2100      	movs	r1, #0
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fd04 	bl	8004e34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800442c:	f000 f88c 	bl	8004548 <xTaskResumeAll>
 8004430:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d107      	bne.n	8004448 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <vTaskDelay+0x68>)
 800443a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20000d00 	.word	0x20000d00
 8004454:	e000ed04 	.word	0xe000ed04

08004458 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	; 0x28
 800445c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800445e:	2300      	movs	r3, #0
 8004460:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004462:	2300      	movs	r3, #0
 8004464:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004466:	463a      	mov	r2, r7
 8004468:	1d39      	adds	r1, r7, #4
 800446a:	f107 0308 	add.w	r3, r7, #8
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff f820 	bl	80034b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	9202      	str	r2, [sp, #8]
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	2300      	movs	r3, #0
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	2300      	movs	r3, #0
 8004484:	460a      	mov	r2, r1
 8004486:	4923      	ldr	r1, [pc, #140]	; (8004514 <vTaskStartScheduler+0xbc>)
 8004488:	4823      	ldr	r0, [pc, #140]	; (8004518 <vTaskStartScheduler+0xc0>)
 800448a:	f7ff fe05 	bl	8004098 <xTaskCreateStatic>
 800448e:	4603      	mov	r3, r0
 8004490:	4a22      	ldr	r2, [pc, #136]	; (800451c <vTaskStartScheduler+0xc4>)
 8004492:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004494:	4b21      	ldr	r3, [pc, #132]	; (800451c <vTaskStartScheduler+0xc4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800449c:	2301      	movs	r3, #1
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	e001      	b.n	80044a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d102      	bne.n	80044b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044ac:	f000 fd16 	bl	8004edc <xTimerCreateTimerTask>
 80044b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d118      	bne.n	80044ea <vTaskStartScheduler+0x92>
	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	b672      	cpsid	i
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	b662      	cpsie	i
 80044cc:	613b      	str	r3, [r7, #16]
}
 80044ce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044d0:	4b13      	ldr	r3, [pc, #76]	; (8004520 <vTaskStartScheduler+0xc8>)
 80044d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044d8:	4b12      	ldr	r3, [pc, #72]	; (8004524 <vTaskStartScheduler+0xcc>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044de:	4b12      	ldr	r3, [pc, #72]	; (8004528 <vTaskStartScheduler+0xd0>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044e4:	f001 f8e4 	bl	80056b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044e8:	e010      	b.n	800450c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f0:	d10c      	bne.n	800450c <vTaskStartScheduler+0xb4>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	b672      	cpsid	i
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	b662      	cpsie	i
 8004506:	60fb      	str	r3, [r7, #12]
}
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <vTaskStartScheduler+0xb2>
}
 800450c:	bf00      	nop
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	08005e64 	.word	0x08005e64
 8004518:	08004b65 	.word	0x08004b65
 800451c:	20000cfc 	.word	0x20000cfc
 8004520:	20000cf8 	.word	0x20000cf8
 8004524:	20000ce4 	.word	0x20000ce4
 8004528:	20000cdc 	.word	0x20000cdc

0800452c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004530:	4b04      	ldr	r3, [pc, #16]	; (8004544 <vTaskSuspendAll+0x18>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3301      	adds	r3, #1
 8004536:	4a03      	ldr	r2, [pc, #12]	; (8004544 <vTaskSuspendAll+0x18>)
 8004538:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800453a:	bf00      	nop
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	20000d00 	.word	0x20000d00

08004548 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004552:	2300      	movs	r3, #0
 8004554:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004556:	4b43      	ldr	r3, [pc, #268]	; (8004664 <xTaskResumeAll+0x11c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10c      	bne.n	8004578 <xTaskResumeAll+0x30>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	b672      	cpsid	i
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	b662      	cpsie	i
 8004572:	603b      	str	r3, [r7, #0]
}
 8004574:	bf00      	nop
 8004576:	e7fe      	b.n	8004576 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004578:	f001 f918 	bl	80057ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800457c:	4b39      	ldr	r3, [pc, #228]	; (8004664 <xTaskResumeAll+0x11c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3b01      	subs	r3, #1
 8004582:	4a38      	ldr	r2, [pc, #224]	; (8004664 <xTaskResumeAll+0x11c>)
 8004584:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004586:	4b37      	ldr	r3, [pc, #220]	; (8004664 <xTaskResumeAll+0x11c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d162      	bne.n	8004654 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800458e:	4b36      	ldr	r3, [pc, #216]	; (8004668 <xTaskResumeAll+0x120>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d05e      	beq.n	8004654 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004596:	e02f      	b.n	80045f8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004598:	4b34      	ldr	r3, [pc, #208]	; (800466c <xTaskResumeAll+0x124>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3318      	adds	r3, #24
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff f843 	bl	8003630 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff f83e 	bl	8003630 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <xTaskResumeAll+0x128>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d903      	bls.n	80045c8 <xTaskResumeAll+0x80>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	4a2a      	ldr	r2, [pc, #168]	; (8004670 <xTaskResumeAll+0x128>)
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4a27      	ldr	r2, [pc, #156]	; (8004674 <xTaskResumeAll+0x12c>)
 80045d6:	441a      	add	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3304      	adds	r3, #4
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f7fe ffc9 	bl	8003576 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	4b23      	ldr	r3, [pc, #140]	; (8004678 <xTaskResumeAll+0x130>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d302      	bcc.n	80045f8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80045f2:	4b22      	ldr	r3, [pc, #136]	; (800467c <xTaskResumeAll+0x134>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045f8:	4b1c      	ldr	r3, [pc, #112]	; (800466c <xTaskResumeAll+0x124>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1cb      	bne.n	8004598 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004606:	f000 fb65 	bl	8004cd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800460a:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <xTaskResumeAll+0x138>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d010      	beq.n	8004638 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004616:	f000 f847 	bl	80046a8 <xTaskIncrementTick>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8004620:	4b16      	ldr	r3, [pc, #88]	; (800467c <xTaskResumeAll+0x134>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3b01      	subs	r3, #1
 800462a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f1      	bne.n	8004616 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8004632:	4b13      	ldr	r3, [pc, #76]	; (8004680 <xTaskResumeAll+0x138>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004638:	4b10      	ldr	r3, [pc, #64]	; (800467c <xTaskResumeAll+0x134>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d009      	beq.n	8004654 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004640:	2301      	movs	r3, #1
 8004642:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004644:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <xTaskResumeAll+0x13c>)
 8004646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004654:	f001 f8de 	bl	8005814 <vPortExitCritical>

	return xAlreadyYielded;
 8004658:	68bb      	ldr	r3, [r7, #8]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000d00 	.word	0x20000d00
 8004668:	20000cd8 	.word	0x20000cd8
 800466c:	20000c98 	.word	0x20000c98
 8004670:	20000ce0 	.word	0x20000ce0
 8004674:	20000808 	.word	0x20000808
 8004678:	20000804 	.word	0x20000804
 800467c:	20000cec 	.word	0x20000cec
 8004680:	20000ce8 	.word	0x20000ce8
 8004684:	e000ed04 	.word	0xe000ed04

08004688 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <xTaskGetTickCount+0x1c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004694:	687b      	ldr	r3, [r7, #4]
}
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000cdc 	.word	0x20000cdc

080046a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046b2:	4b50      	ldr	r3, [pc, #320]	; (80047f4 <xTaskIncrementTick+0x14c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f040 808b 	bne.w	80047d2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046bc:	4b4e      	ldr	r3, [pc, #312]	; (80047f8 <xTaskIncrementTick+0x150>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3301      	adds	r3, #1
 80046c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046c4:	4a4c      	ldr	r2, [pc, #304]	; (80047f8 <xTaskIncrementTick+0x150>)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d122      	bne.n	8004716 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80046d0:	4b4a      	ldr	r3, [pc, #296]	; (80047fc <xTaskIncrementTick+0x154>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00c      	beq.n	80046f4 <xTaskIncrementTick+0x4c>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	b672      	cpsid	i
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	b662      	cpsie	i
 80046ee:	603b      	str	r3, [r7, #0]
}
 80046f0:	bf00      	nop
 80046f2:	e7fe      	b.n	80046f2 <xTaskIncrementTick+0x4a>
 80046f4:	4b41      	ldr	r3, [pc, #260]	; (80047fc <xTaskIncrementTick+0x154>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	4b41      	ldr	r3, [pc, #260]	; (8004800 <xTaskIncrementTick+0x158>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a3f      	ldr	r2, [pc, #252]	; (80047fc <xTaskIncrementTick+0x154>)
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	4a3f      	ldr	r2, [pc, #252]	; (8004800 <xTaskIncrementTick+0x158>)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	4b3e      	ldr	r3, [pc, #248]	; (8004804 <xTaskIncrementTick+0x15c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3301      	adds	r3, #1
 800470e:	4a3d      	ldr	r2, [pc, #244]	; (8004804 <xTaskIncrementTick+0x15c>)
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	f000 fadf 	bl	8004cd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004716:	4b3c      	ldr	r3, [pc, #240]	; (8004808 <xTaskIncrementTick+0x160>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	429a      	cmp	r2, r3
 800471e:	d349      	bcc.n	80047b4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004720:	4b36      	ldr	r3, [pc, #216]	; (80047fc <xTaskIncrementTick+0x154>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d104      	bne.n	8004734 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800472a:	4b37      	ldr	r3, [pc, #220]	; (8004808 <xTaskIncrementTick+0x160>)
 800472c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004730:	601a      	str	r2, [r3, #0]
					break;
 8004732:	e03f      	b.n	80047b4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004734:	4b31      	ldr	r3, [pc, #196]	; (80047fc <xTaskIncrementTick+0x154>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	429a      	cmp	r2, r3
 800474a:	d203      	bcs.n	8004754 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800474c:	4a2e      	ldr	r2, [pc, #184]	; (8004808 <xTaskIncrementTick+0x160>)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004752:	e02f      	b.n	80047b4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	3304      	adds	r3, #4
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe ff69 	bl	8003630 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d004      	beq.n	8004770 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	3318      	adds	r3, #24
 800476a:	4618      	mov	r0, r3
 800476c:	f7fe ff60 	bl	8003630 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004774:	4b25      	ldr	r3, [pc, #148]	; (800480c <xTaskIncrementTick+0x164>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d903      	bls.n	8004784 <xTaskIncrementTick+0xdc>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	4a22      	ldr	r2, [pc, #136]	; (800480c <xTaskIncrementTick+0x164>)
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4a1f      	ldr	r2, [pc, #124]	; (8004810 <xTaskIncrementTick+0x168>)
 8004792:	441a      	add	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	3304      	adds	r3, #4
 8004798:	4619      	mov	r1, r3
 800479a:	4610      	mov	r0, r2
 800479c:	f7fe feeb 	bl	8003576 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a4:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <xTaskIncrementTick+0x16c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d3b8      	bcc.n	8004720 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80047ae:	2301      	movs	r3, #1
 80047b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047b2:	e7b5      	b.n	8004720 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80047b4:	4b17      	ldr	r3, [pc, #92]	; (8004814 <xTaskIncrementTick+0x16c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ba:	4915      	ldr	r1, [pc, #84]	; (8004810 <xTaskIncrementTick+0x168>)
 80047bc:	4613      	mov	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d907      	bls.n	80047dc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80047cc:	2301      	movs	r3, #1
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e004      	b.n	80047dc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80047d2:	4b11      	ldr	r3, [pc, #68]	; (8004818 <xTaskIncrementTick+0x170>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3301      	adds	r3, #1
 80047d8:	4a0f      	ldr	r2, [pc, #60]	; (8004818 <xTaskIncrementTick+0x170>)
 80047da:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80047dc:	4b0f      	ldr	r3, [pc, #60]	; (800481c <xTaskIncrementTick+0x174>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80047e4:	2301      	movs	r3, #1
 80047e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80047e8:	697b      	ldr	r3, [r7, #20]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000d00 	.word	0x20000d00
 80047f8:	20000cdc 	.word	0x20000cdc
 80047fc:	20000c90 	.word	0x20000c90
 8004800:	20000c94 	.word	0x20000c94
 8004804:	20000cf0 	.word	0x20000cf0
 8004808:	20000cf8 	.word	0x20000cf8
 800480c:	20000ce0 	.word	0x20000ce0
 8004810:	20000808 	.word	0x20000808
 8004814:	20000804 	.word	0x20000804
 8004818:	20000ce8 	.word	0x20000ce8
 800481c:	20000cec 	.word	0x20000cec

08004820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004826:	4b29      	ldr	r3, [pc, #164]	; (80048cc <vTaskSwitchContext+0xac>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800482e:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <vTaskSwitchContext+0xb0>)
 8004830:	2201      	movs	r2, #1
 8004832:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004834:	e043      	b.n	80048be <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8004836:	4b26      	ldr	r3, [pc, #152]	; (80048d0 <vTaskSwitchContext+0xb0>)
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800483c:	4b25      	ldr	r3, [pc, #148]	; (80048d4 <vTaskSwitchContext+0xb4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	e012      	b.n	800486a <vTaskSwitchContext+0x4a>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10c      	bne.n	8004864 <vTaskSwitchContext+0x44>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	b672      	cpsid	i
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	b662      	cpsie	i
 800485e:	607b      	str	r3, [r7, #4]
}
 8004860:	bf00      	nop
 8004862:	e7fe      	b.n	8004862 <vTaskSwitchContext+0x42>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	3b01      	subs	r3, #1
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	491b      	ldr	r1, [pc, #108]	; (80048d8 <vTaskSwitchContext+0xb8>)
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0e2      	beq.n	8004844 <vTaskSwitchContext+0x24>
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4613      	mov	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4a13      	ldr	r2, [pc, #76]	; (80048d8 <vTaskSwitchContext+0xb8>)
 800488a:	4413      	add	r3, r2
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	605a      	str	r2, [r3, #4]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	3308      	adds	r3, #8
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d104      	bne.n	80048ae <vTaskSwitchContext+0x8e>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4a09      	ldr	r2, [pc, #36]	; (80048dc <vTaskSwitchContext+0xbc>)
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	4a06      	ldr	r2, [pc, #24]	; (80048d4 <vTaskSwitchContext+0xb4>)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6013      	str	r3, [r2, #0]
}
 80048be:	bf00      	nop
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000d00 	.word	0x20000d00
 80048d0:	20000cec 	.word	0x20000cec
 80048d4:	20000ce0 	.word	0x20000ce0
 80048d8:	20000808 	.word	0x20000808
 80048dc:	20000804 	.word	0x20000804

080048e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10c      	bne.n	800490a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	b672      	cpsid	i
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	b662      	cpsie	i
 8004904:	60fb      	str	r3, [r7, #12]
}
 8004906:	bf00      	nop
 8004908:	e7fe      	b.n	8004908 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800490a:	4b07      	ldr	r3, [pc, #28]	; (8004928 <vTaskPlaceOnEventList+0x48>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3318      	adds	r3, #24
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7fe fe53 	bl	80035be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004918:	2101      	movs	r1, #1
 800491a:	6838      	ldr	r0, [r7, #0]
 800491c:	f000 fa8a 	bl	8004e34 <prvAddCurrentTaskToDelayedList>
}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000804 	.word	0x20000804

0800492c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10c      	bne.n	8004958 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	b672      	cpsid	i
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	b662      	cpsie	i
 8004952:	617b      	str	r3, [r7, #20]
}
 8004954:	bf00      	nop
 8004956:	e7fe      	b.n	8004956 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <vTaskPlaceOnEventListRestricted+0x58>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3318      	adds	r3, #24
 800495e:	4619      	mov	r1, r3
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f7fe fe08 	bl	8003576 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800496c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004970:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	68b8      	ldr	r0, [r7, #8]
 8004976:	f000 fa5d 	bl	8004e34 <prvAddCurrentTaskToDelayedList>
	}
 800497a:	bf00      	nop
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000804 	.word	0x20000804

08004988 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10c      	bne.n	80049b8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	b672      	cpsid	i
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	b662      	cpsie	i
 80049b2:	60fb      	str	r3, [r7, #12]
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	3318      	adds	r3, #24
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fe fe37 	bl	8003630 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049c2:	4b1e      	ldr	r3, [pc, #120]	; (8004a3c <xTaskRemoveFromEventList+0xb4>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d11d      	bne.n	8004a06 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	3304      	adds	r3, #4
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe fe2e 	bl	8003630 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <xTaskRemoveFromEventList+0xb8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d903      	bls.n	80049e8 <xTaskRemoveFromEventList+0x60>
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	4a16      	ldr	r2, [pc, #88]	; (8004a40 <xTaskRemoveFromEventList+0xb8>)
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4a13      	ldr	r2, [pc, #76]	; (8004a44 <xTaskRemoveFromEventList+0xbc>)
 80049f6:	441a      	add	r2, r3
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	3304      	adds	r3, #4
 80049fc:	4619      	mov	r1, r3
 80049fe:	4610      	mov	r0, r2
 8004a00:	f7fe fdb9 	bl	8003576 <vListInsertEnd>
 8004a04:	e005      	b.n	8004a12 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	3318      	adds	r3, #24
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	480e      	ldr	r0, [pc, #56]	; (8004a48 <xTaskRemoveFromEventList+0xc0>)
 8004a0e:	f7fe fdb2 	bl	8003576 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <xTaskRemoveFromEventList+0xc4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d905      	bls.n	8004a2c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a20:	2301      	movs	r3, #1
 8004a22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a24:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <xTaskRemoveFromEventList+0xc8>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e001      	b.n	8004a30 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a30:	697b      	ldr	r3, [r7, #20]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20000d00 	.word	0x20000d00
 8004a40:	20000ce0 	.word	0x20000ce0
 8004a44:	20000808 	.word	0x20000808
 8004a48:	20000c98 	.word	0x20000c98
 8004a4c:	20000804 	.word	0x20000804
 8004a50:	20000cec 	.word	0x20000cec

08004a54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <vTaskInternalSetTimeOutState+0x24>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <vTaskInternalSetTimeOutState+0x28>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	605a      	str	r2, [r3, #4]
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	20000cf0 	.word	0x20000cf0
 8004a7c:	20000cdc 	.word	0x20000cdc

08004a80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10c      	bne.n	8004aaa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	b672      	cpsid	i
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	b662      	cpsie	i
 8004aa4:	613b      	str	r3, [r7, #16]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10c      	bne.n	8004aca <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	b672      	cpsid	i
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	b662      	cpsie	i
 8004ac4:	60fb      	str	r3, [r7, #12]
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8004aca:	f000 fe6f 	bl	80057ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ace:	4b1d      	ldr	r3, [pc, #116]	; (8004b44 <xTaskCheckForTimeOut+0xc4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ae6:	d102      	bne.n	8004aee <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	e023      	b.n	8004b36 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <xTaskCheckForTimeOut+0xc8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d007      	beq.n	8004b0a <xTaskCheckForTimeOut+0x8a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	61fb      	str	r3, [r7, #28]
 8004b08:	e015      	b.n	8004b36 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d20b      	bcs.n	8004b2c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	1ad2      	subs	r2, r2, r3
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff ff97 	bl	8004a54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	e004      	b.n	8004b36 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b32:	2301      	movs	r3, #1
 8004b34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b36:	f000 fe6d 	bl	8005814 <vPortExitCritical>

	return xReturn;
 8004b3a:	69fb      	ldr	r3, [r7, #28]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000cdc 	.word	0x20000cdc
 8004b48:	20000cf0 	.word	0x20000cf0

08004b4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b50:	4b03      	ldr	r3, [pc, #12]	; (8004b60 <vTaskMissedYield+0x14>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	601a      	str	r2, [r3, #0]
}
 8004b56:	bf00      	nop
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	20000cec 	.word	0x20000cec

08004b64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b6c:	f000 f852 	bl	8004c14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <prvIdleTask+0x28>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d9f9      	bls.n	8004b6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <prvIdleTask+0x2c>)
 8004b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b88:	e7f0      	b.n	8004b6c <prvIdleTask+0x8>
 8004b8a:	bf00      	nop
 8004b8c:	20000808 	.word	0x20000808
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	e00c      	b.n	8004bba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <prvInitialiseTaskLists+0x60>)
 8004bac:	4413      	add	r3, r2
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe fcb4 	bl	800351c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	607b      	str	r3, [r7, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b37      	cmp	r3, #55	; 0x37
 8004bbe:	d9ef      	bls.n	8004ba0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bc0:	480d      	ldr	r0, [pc, #52]	; (8004bf8 <prvInitialiseTaskLists+0x64>)
 8004bc2:	f7fe fcab 	bl	800351c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004bc6:	480d      	ldr	r0, [pc, #52]	; (8004bfc <prvInitialiseTaskLists+0x68>)
 8004bc8:	f7fe fca8 	bl	800351c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bcc:	480c      	ldr	r0, [pc, #48]	; (8004c00 <prvInitialiseTaskLists+0x6c>)
 8004bce:	f7fe fca5 	bl	800351c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bd2:	480c      	ldr	r0, [pc, #48]	; (8004c04 <prvInitialiseTaskLists+0x70>)
 8004bd4:	f7fe fca2 	bl	800351c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bd8:	480b      	ldr	r0, [pc, #44]	; (8004c08 <prvInitialiseTaskLists+0x74>)
 8004bda:	f7fe fc9f 	bl	800351c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bde:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <prvInitialiseTaskLists+0x78>)
 8004be0:	4a05      	ldr	r2, [pc, #20]	; (8004bf8 <prvInitialiseTaskLists+0x64>)
 8004be2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004be4:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <prvInitialiseTaskLists+0x7c>)
 8004be6:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <prvInitialiseTaskLists+0x68>)
 8004be8:	601a      	str	r2, [r3, #0]
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000808 	.word	0x20000808
 8004bf8:	20000c68 	.word	0x20000c68
 8004bfc:	20000c7c 	.word	0x20000c7c
 8004c00:	20000c98 	.word	0x20000c98
 8004c04:	20000cac 	.word	0x20000cac
 8004c08:	20000cc4 	.word	0x20000cc4
 8004c0c:	20000c90 	.word	0x20000c90
 8004c10:	20000c94 	.word	0x20000c94

08004c14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c1a:	e019      	b.n	8004c50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c1c:	f000 fdc6 	bl	80057ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c20:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <prvCheckTasksWaitingTermination+0x50>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fe fcff 	bl	8003630 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c32:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <prvCheckTasksWaitingTermination+0x54>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	4a0b      	ldr	r2, [pc, #44]	; (8004c68 <prvCheckTasksWaitingTermination+0x54>)
 8004c3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <prvCheckTasksWaitingTermination+0x58>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <prvCheckTasksWaitingTermination+0x58>)
 8004c44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c46:	f000 fde5 	bl	8005814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f810 	bl	8004c70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c50:	4b06      	ldr	r3, [pc, #24]	; (8004c6c <prvCheckTasksWaitingTermination+0x58>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e1      	bne.n	8004c1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20000cac 	.word	0x20000cac
 8004c68:	20000cd8 	.word	0x20000cd8
 8004c6c:	20000cc0 	.word	0x20000cc0

08004c70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d108      	bne.n	8004c94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 ff86 	bl	8005b98 <vPortFree>
				vPortFree( pxTCB );
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 ff83 	bl	8005b98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c92:	e01a      	b.n	8004cca <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d103      	bne.n	8004ca6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 ff7a 	bl	8005b98 <vPortFree>
	}
 8004ca4:	e011      	b.n	8004cca <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d00c      	beq.n	8004cca <prvDeleteTCB+0x5a>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	b672      	cpsid	i
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	b662      	cpsie	i
 8004cc4:	60fb      	str	r3, [r7, #12]
}
 8004cc6:	bf00      	nop
 8004cc8:	e7fe      	b.n	8004cc8 <prvDeleteTCB+0x58>
	}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cda:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <prvResetNextTaskUnblockTime+0x38>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d104      	bne.n	8004cee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <prvResetNextTaskUnblockTime+0x3c>)
 8004ce6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cec:	e008      	b.n	8004d00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cee:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <prvResetNextTaskUnblockTime+0x38>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4a04      	ldr	r2, [pc, #16]	; (8004d10 <prvResetNextTaskUnblockTime+0x3c>)
 8004cfe:	6013      	str	r3, [r2, #0]
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	20000c90 	.word	0x20000c90
 8004d10:	20000cf8 	.word	0x20000cf8

08004d14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d1a:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <xTaskGetSchedulerState+0x34>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d22:	2301      	movs	r3, #1
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	e008      	b.n	8004d3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <xTaskGetSchedulerState+0x38>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d102      	bne.n	8004d36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d30:	2302      	movs	r3, #2
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	e001      	b.n	8004d3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d36:	2300      	movs	r3, #0
 8004d38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d3a:	687b      	ldr	r3, [r7, #4]
	}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	20000ce4 	.word	0x20000ce4
 8004d4c:	20000d00 	.word	0x20000d00

08004d50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d05a      	beq.n	8004e1c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d66:	4b30      	ldr	r3, [pc, #192]	; (8004e28 <xTaskPriorityDisinherit+0xd8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d00c      	beq.n	8004d8a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	b672      	cpsid	i
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	b662      	cpsie	i
 8004d84:	60fb      	str	r3, [r7, #12]
}
 8004d86:	bf00      	nop
 8004d88:	e7fe      	b.n	8004d88 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10c      	bne.n	8004dac <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	b672      	cpsid	i
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	b662      	cpsie	i
 8004da6:	60bb      	str	r3, [r7, #8]
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db0:	1e5a      	subs	r2, r3, #1
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d02c      	beq.n	8004e1c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d128      	bne.n	8004e1c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	3304      	adds	r3, #4
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fc2e 	bl	8003630 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dec:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <xTaskPriorityDisinherit+0xdc>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d903      	bls.n	8004dfc <xTaskPriorityDisinherit+0xac>
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	4a0c      	ldr	r2, [pc, #48]	; (8004e2c <xTaskPriorityDisinherit+0xdc>)
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4a09      	ldr	r2, [pc, #36]	; (8004e30 <xTaskPriorityDisinherit+0xe0>)
 8004e0a:	441a      	add	r2, r3
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f7fe fbaf 	bl	8003576 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e1c:	697b      	ldr	r3, [r7, #20]
	}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000804 	.word	0x20000804
 8004e2c:	20000ce0 	.word	0x20000ce0
 8004e30:	20000808 	.word	0x20000808

08004e34 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e3e:	4b21      	ldr	r3, [pc, #132]	; (8004ec4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e44:	4b20      	ldr	r3, [pc, #128]	; (8004ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe fbf0 	bl	8003630 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e56:	d10a      	bne.n	8004e6e <prvAddCurrentTaskToDelayedList+0x3a>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3304      	adds	r3, #4
 8004e64:	4619      	mov	r1, r3
 8004e66:	4819      	ldr	r0, [pc, #100]	; (8004ecc <prvAddCurrentTaskToDelayedList+0x98>)
 8004e68:	f7fe fb85 	bl	8003576 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e6c:	e026      	b.n	8004ebc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4413      	add	r3, r2
 8004e74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e76:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d209      	bcs.n	8004e9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e86:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f7fe fb93 	bl	80035be <vListInsert>
}
 8004e98:	e010      	b.n	8004ebc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e9a:	4b0e      	ldr	r3, [pc, #56]	; (8004ed4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	f7fe fb89 	bl	80035be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004eac:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d202      	bcs.n	8004ebc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004eb6:	4a08      	ldr	r2, [pc, #32]	; (8004ed8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	6013      	str	r3, [r2, #0]
}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000cdc 	.word	0x20000cdc
 8004ec8:	20000804 	.word	0x20000804
 8004ecc:	20000cc4 	.word	0x20000cc4
 8004ed0:	20000c94 	.word	0x20000c94
 8004ed4:	20000c90 	.word	0x20000c90
 8004ed8:	20000cf8 	.word	0x20000cf8

08004edc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	; 0x28
 8004ee0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ee6:	f000 fb15 	bl	8005514 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004eea:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <xTimerCreateTimerTask+0x84>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d021      	beq.n	8004f36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004efa:	1d3a      	adds	r2, r7, #4
 8004efc:	f107 0108 	add.w	r1, r7, #8
 8004f00:	f107 030c 	add.w	r3, r7, #12
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe faef 	bl	80034e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	9202      	str	r2, [sp, #8]
 8004f12:	9301      	str	r3, [sp, #4]
 8004f14:	2302      	movs	r3, #2
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	460a      	mov	r2, r1
 8004f1c:	4911      	ldr	r1, [pc, #68]	; (8004f64 <xTimerCreateTimerTask+0x88>)
 8004f1e:	4812      	ldr	r0, [pc, #72]	; (8004f68 <xTimerCreateTimerTask+0x8c>)
 8004f20:	f7ff f8ba 	bl	8004098 <xTaskCreateStatic>
 8004f24:	4603      	mov	r3, r0
 8004f26:	4a11      	ldr	r2, [pc, #68]	; (8004f6c <xTimerCreateTimerTask+0x90>)
 8004f28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f2a:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <xTimerCreateTimerTask+0x90>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f32:	2301      	movs	r3, #1
 8004f34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10c      	bne.n	8004f56 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	b672      	cpsid	i
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	b662      	cpsie	i
 8004f50:	613b      	str	r3, [r7, #16]
}
 8004f52:	bf00      	nop
 8004f54:	e7fe      	b.n	8004f54 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8004f56:	697b      	ldr	r3, [r7, #20]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20000d34 	.word	0x20000d34
 8004f64:	08005e6c 	.word	0x08005e6c
 8004f68:	080050ad 	.word	0x080050ad
 8004f6c:	20000d38 	.word	0x20000d38

08004f70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08a      	sub	sp, #40	; 0x28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10c      	bne.n	8004fa2 <xTimerGenericCommand+0x32>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8c:	b672      	cpsid	i
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	b662      	cpsie	i
 8004f9c:	623b      	str	r3, [r7, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004fa2:	4b1a      	ldr	r3, [pc, #104]	; (800500c <xTimerGenericCommand+0x9c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d02a      	beq.n	8005000 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2b05      	cmp	r3, #5
 8004fba:	dc18      	bgt.n	8004fee <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004fbc:	f7ff feaa 	bl	8004d14 <xTaskGetSchedulerState>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d109      	bne.n	8004fda <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004fc6:	4b11      	ldr	r3, [pc, #68]	; (800500c <xTimerGenericCommand+0x9c>)
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	f107 0110 	add.w	r1, r7, #16
 8004fce:	2300      	movs	r3, #0
 8004fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd2:	f7fe fc67 	bl	80038a4 <xQueueGenericSend>
 8004fd6:	6278      	str	r0, [r7, #36]	; 0x24
 8004fd8:	e012      	b.n	8005000 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fda:	4b0c      	ldr	r3, [pc, #48]	; (800500c <xTimerGenericCommand+0x9c>)
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	f107 0110 	add.w	r1, r7, #16
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f7fe fc5d 	bl	80038a4 <xQueueGenericSend>
 8004fea:	6278      	str	r0, [r7, #36]	; 0x24
 8004fec:	e008      	b.n	8005000 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fee:	4b07      	ldr	r3, [pc, #28]	; (800500c <xTimerGenericCommand+0x9c>)
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	f107 0110 	add.w	r1, r7, #16
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	f7fe fd59 	bl	8003ab0 <xQueueGenericSendFromISR>
 8004ffe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005002:	4618      	mov	r0, r3
 8005004:	3728      	adds	r7, #40	; 0x28
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000d34 	.word	0x20000d34

08005010 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af02      	add	r7, sp, #8
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800501a:	4b23      	ldr	r3, [pc, #140]	; (80050a8 <prvProcessExpiredTimer+0x98>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	3304      	adds	r3, #4
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe fb01 	bl	8003630 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d024      	beq.n	8005086 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	699a      	ldr	r2, [r3, #24]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	18d1      	adds	r1, r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	6978      	ldr	r0, [r7, #20]
 800504a:	f000 f8d3 	bl	80051f4 <prvInsertTimerInActiveList>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d021      	beq.n	8005098 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005054:	2300      	movs	r3, #0
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	2300      	movs	r3, #0
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	2100      	movs	r1, #0
 800505e:	6978      	ldr	r0, [r7, #20]
 8005060:	f7ff ff86 	bl	8004f70 <xTimerGenericCommand>
 8005064:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d115      	bne.n	8005098 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	b672      	cpsid	i
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	b662      	cpsie	i
 8005080:	60fb      	str	r3, [r7, #12]
}
 8005082:	bf00      	nop
 8005084:	e7fe      	b.n	8005084 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	b2da      	uxtb	r2, r3
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	6978      	ldr	r0, [r7, #20]
 800509e:	4798      	blx	r3
}
 80050a0:	bf00      	nop
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	20000d2c 	.word	0x20000d2c

080050ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050b4:	f107 0308 	add.w	r3, r7, #8
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 f857 	bl	800516c <prvGetNextExpireTime>
 80050be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4619      	mov	r1, r3
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f803 	bl	80050d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050ca:	f000 f8d5 	bl	8005278 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050ce:	e7f1      	b.n	80050b4 <prvTimerTask+0x8>

080050d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050da:	f7ff fa27 	bl	800452c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050de:	f107 0308 	add.w	r3, r7, #8
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 f866 	bl	80051b4 <prvSampleTimeNow>
 80050e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d130      	bne.n	8005152 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <prvProcessTimerOrBlockTask+0x3c>
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d806      	bhi.n	800510c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050fe:	f7ff fa23 	bl	8004548 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005102:	68f9      	ldr	r1, [r7, #12]
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff ff83 	bl	8005010 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800510a:	e024      	b.n	8005156 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d008      	beq.n	8005124 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005112:	4b13      	ldr	r3, [pc, #76]	; (8005160 <prvProcessTimerOrBlockTask+0x90>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <prvProcessTimerOrBlockTask+0x50>
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <prvProcessTimerOrBlockTask+0x52>
 8005120:	2300      	movs	r3, #0
 8005122:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005124:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <prvProcessTimerOrBlockTask+0x94>)
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	4619      	mov	r1, r3
 8005132:	f7fe ff7d 	bl	8004030 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005136:	f7ff fa07 	bl	8004548 <xTaskResumeAll>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005140:	4b09      	ldr	r3, [pc, #36]	; (8005168 <prvProcessTimerOrBlockTask+0x98>)
 8005142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
}
 8005150:	e001      	b.n	8005156 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005152:	f7ff f9f9 	bl	8004548 <xTaskResumeAll>
}
 8005156:	bf00      	nop
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000d30 	.word	0x20000d30
 8005164:	20000d34 	.word	0x20000d34
 8005168:	e000ed04 	.word	0xe000ed04

0800516c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005174:	4b0e      	ldr	r3, [pc, #56]	; (80051b0 <prvGetNextExpireTime+0x44>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <prvGetNextExpireTime+0x16>
 800517e:	2201      	movs	r2, #1
 8005180:	e000      	b.n	8005184 <prvGetNextExpireTime+0x18>
 8005182:	2200      	movs	r2, #0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d105      	bne.n	800519c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005190:	4b07      	ldr	r3, [pc, #28]	; (80051b0 <prvGetNextExpireTime+0x44>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	e001      	b.n	80051a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80051a0:	68fb      	ldr	r3, [r7, #12]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	20000d2c 	.word	0x20000d2c

080051b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051bc:	f7ff fa64 	bl	8004688 <xTaskGetTickCount>
 80051c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80051c2:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <prvSampleTimeNow+0x3c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d205      	bcs.n	80051d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80051cc:	f000 f93c 	bl	8005448 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	e002      	b.n	80051de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051de:	4a04      	ldr	r2, [pc, #16]	; (80051f0 <prvSampleTimeNow+0x3c>)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051e4:	68fb      	ldr	r3, [r7, #12]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000d3c 	.word	0x20000d3c

080051f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d812      	bhi.n	8005240 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	1ad2      	subs	r2, r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	429a      	cmp	r2, r3
 8005226:	d302      	bcc.n	800522e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005228:	2301      	movs	r3, #1
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e01b      	b.n	8005266 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800522e:	4b10      	ldr	r3, [pc, #64]	; (8005270 <prvInsertTimerInActiveList+0x7c>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f7fe f9c0 	bl	80035be <vListInsert>
 800523e:	e012      	b.n	8005266 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d206      	bcs.n	8005256 <prvInsertTimerInActiveList+0x62>
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d302      	bcc.n	8005256 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005250:	2301      	movs	r3, #1
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	e007      	b.n	8005266 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005256:	4b07      	ldr	r3, [pc, #28]	; (8005274 <prvInsertTimerInActiveList+0x80>)
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3304      	adds	r3, #4
 800525e:	4619      	mov	r1, r3
 8005260:	4610      	mov	r0, r2
 8005262:	f7fe f9ac 	bl	80035be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005266:	697b      	ldr	r3, [r7, #20]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20000d30 	.word	0x20000d30
 8005274:	20000d2c 	.word	0x20000d2c

08005278 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08e      	sub	sp, #56	; 0x38
 800527c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800527e:	e0d0      	b.n	8005422 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	da1a      	bge.n	80052bc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	3304      	adds	r3, #4
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10c      	bne.n	80052ac <prvProcessReceivedCommands+0x34>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	b672      	cpsid	i
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	b662      	cpsie	i
 80052a6:	61fb      	str	r3, [r7, #28]
}
 80052a8:	bf00      	nop
 80052aa:	e7fe      	b.n	80052aa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b2:	6850      	ldr	r0, [r2, #4]
 80052b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052b6:	6892      	ldr	r2, [r2, #8]
 80052b8:	4611      	mov	r1, r2
 80052ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f2c0 80ae 	blt.w	8005420 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d004      	beq.n	80052da <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	3304      	adds	r3, #4
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe f9ab 	bl	8003630 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052da:	463b      	mov	r3, r7
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff ff69 	bl	80051b4 <prvSampleTimeNow>
 80052e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b09      	cmp	r3, #9
 80052e8:	f200 809b 	bhi.w	8005422 <prvProcessReceivedCommands+0x1aa>
 80052ec:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <prvProcessReceivedCommands+0x7c>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	0800531d 	.word	0x0800531d
 80052f8:	0800531d 	.word	0x0800531d
 80052fc:	0800531d 	.word	0x0800531d
 8005300:	08005395 	.word	0x08005395
 8005304:	080053a9 	.word	0x080053a9
 8005308:	080053f7 	.word	0x080053f7
 800530c:	0800531d 	.word	0x0800531d
 8005310:	0800531d 	.word	0x0800531d
 8005314:	08005395 	.word	0x08005395
 8005318:	080053a9 	.word	0x080053a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005322:	f043 0301 	orr.w	r3, r3, #1
 8005326:	b2da      	uxtb	r2, r3
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	18d1      	adds	r1, r2, r3
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800533c:	f7ff ff5a 	bl	80051f4 <prvInsertTimerInActiveList>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d06d      	beq.n	8005422 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800534c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d062      	beq.n	8005422 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	441a      	add	r2, r3
 8005364:	2300      	movs	r3, #0
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	2300      	movs	r3, #0
 800536a:	2100      	movs	r1, #0
 800536c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800536e:	f7ff fdff 	bl	8004f70 <xTimerGenericCommand>
 8005372:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d153      	bne.n	8005422 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	b672      	cpsid	i
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	b662      	cpsie	i
 800538e:	61bb      	str	r3, [r7, #24]
}
 8005390:	bf00      	nop
 8005392:	e7fe      	b.n	8005392 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800539a:	f023 0301 	bic.w	r3, r3, #1
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80053a6:	e03c      	b.n	8005422 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053ae:	f043 0301 	orr.w	r3, r3, #1
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10c      	bne.n	80053e2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	b672      	cpsid	i
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	b662      	cpsie	i
 80053dc:	617b      	str	r3, [r7, #20]
}
 80053de:	bf00      	nop
 80053e0:	e7fe      	b.n	80053e0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	699a      	ldr	r2, [r3, #24]
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	18d1      	adds	r1, r2, r3
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053f0:	f7ff ff00 	bl	80051f4 <prvInsertTimerInActiveList>
					break;
 80053f4:	e015      	b.n	8005422 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d103      	bne.n	800540c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8005404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005406:	f000 fbc7 	bl	8005b98 <vPortFree>
 800540a:	e00a      	b.n	8005422 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005412:	f023 0301 	bic.w	r3, r3, #1
 8005416:	b2da      	uxtb	r2, r3
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800541e:	e000      	b.n	8005422 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005420:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005422:	4b08      	ldr	r3, [pc, #32]	; (8005444 <prvProcessReceivedCommands+0x1cc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	1d39      	adds	r1, r7, #4
 8005428:	2200      	movs	r2, #0
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe fbe0 	bl	8003bf0 <xQueueReceive>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	f47f af24 	bne.w	8005280 <prvProcessReceivedCommands+0x8>
	}
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	3730      	adds	r7, #48	; 0x30
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20000d34 	.word	0x20000d34

08005448 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800544e:	e04a      	b.n	80054e6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005450:	4b2e      	ldr	r3, [pc, #184]	; (800550c <prvSwitchTimerLists+0xc4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800545a:	4b2c      	ldr	r3, [pc, #176]	; (800550c <prvSwitchTimerLists+0xc4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3304      	adds	r3, #4
 8005468:	4618      	mov	r0, r3
 800546a:	f7fe f8e1 	bl	8003630 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d030      	beq.n	80054e6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4413      	add	r3, r2
 800548c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	429a      	cmp	r2, r3
 8005494:	d90e      	bls.n	80054b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054a2:	4b1a      	ldr	r3, [pc, #104]	; (800550c <prvSwitchTimerLists+0xc4>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3304      	adds	r3, #4
 80054aa:	4619      	mov	r1, r3
 80054ac:	4610      	mov	r0, r2
 80054ae:	f7fe f886 	bl	80035be <vListInsert>
 80054b2:	e018      	b.n	80054e6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054b4:	2300      	movs	r3, #0
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	2300      	movs	r3, #0
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	2100      	movs	r1, #0
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7ff fd56 	bl	8004f70 <xTimerGenericCommand>
 80054c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10c      	bne.n	80054e6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	b672      	cpsid	i
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	b662      	cpsie	i
 80054e0:	603b      	str	r3, [r7, #0]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054e6:	4b09      	ldr	r3, [pc, #36]	; (800550c <prvSwitchTimerLists+0xc4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1af      	bne.n	8005450 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054f0:	4b06      	ldr	r3, [pc, #24]	; (800550c <prvSwitchTimerLists+0xc4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054f6:	4b06      	ldr	r3, [pc, #24]	; (8005510 <prvSwitchTimerLists+0xc8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a04      	ldr	r2, [pc, #16]	; (800550c <prvSwitchTimerLists+0xc4>)
 80054fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054fe:	4a04      	ldr	r2, [pc, #16]	; (8005510 <prvSwitchTimerLists+0xc8>)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	6013      	str	r3, [r2, #0]
}
 8005504:	bf00      	nop
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000d2c 	.word	0x20000d2c
 8005510:	20000d30 	.word	0x20000d30

08005514 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800551a:	f000 f947 	bl	80057ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800551e:	4b15      	ldr	r3, [pc, #84]	; (8005574 <prvCheckForValidListAndQueue+0x60>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d120      	bne.n	8005568 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005526:	4814      	ldr	r0, [pc, #80]	; (8005578 <prvCheckForValidListAndQueue+0x64>)
 8005528:	f7fd fff8 	bl	800351c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800552c:	4813      	ldr	r0, [pc, #76]	; (800557c <prvCheckForValidListAndQueue+0x68>)
 800552e:	f7fd fff5 	bl	800351c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005532:	4b13      	ldr	r3, [pc, #76]	; (8005580 <prvCheckForValidListAndQueue+0x6c>)
 8005534:	4a10      	ldr	r2, [pc, #64]	; (8005578 <prvCheckForValidListAndQueue+0x64>)
 8005536:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005538:	4b12      	ldr	r3, [pc, #72]	; (8005584 <prvCheckForValidListAndQueue+0x70>)
 800553a:	4a10      	ldr	r2, [pc, #64]	; (800557c <prvCheckForValidListAndQueue+0x68>)
 800553c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800553e:	2300      	movs	r3, #0
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <prvCheckForValidListAndQueue+0x74>)
 8005544:	4a11      	ldr	r2, [pc, #68]	; (800558c <prvCheckForValidListAndQueue+0x78>)
 8005546:	2110      	movs	r1, #16
 8005548:	200a      	movs	r0, #10
 800554a:	f7fe f905 	bl	8003758 <xQueueGenericCreateStatic>
 800554e:	4603      	mov	r3, r0
 8005550:	4a08      	ldr	r2, [pc, #32]	; (8005574 <prvCheckForValidListAndQueue+0x60>)
 8005552:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005554:	4b07      	ldr	r3, [pc, #28]	; (8005574 <prvCheckForValidListAndQueue+0x60>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800555c:	4b05      	ldr	r3, [pc, #20]	; (8005574 <prvCheckForValidListAndQueue+0x60>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	490b      	ldr	r1, [pc, #44]	; (8005590 <prvCheckForValidListAndQueue+0x7c>)
 8005562:	4618      	mov	r0, r3
 8005564:	f7fe fd3a 	bl	8003fdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005568:	f000 f954 	bl	8005814 <vPortExitCritical>
}
 800556c:	bf00      	nop
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000d34 	.word	0x20000d34
 8005578:	20000d04 	.word	0x20000d04
 800557c:	20000d18 	.word	0x20000d18
 8005580:	20000d2c 	.word	0x20000d2c
 8005584:	20000d30 	.word	0x20000d30
 8005588:	20000de0 	.word	0x20000de0
 800558c:	20000d40 	.word	0x20000d40
 8005590:	08005e74 	.word	0x08005e74

08005594 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3b04      	subs	r3, #4
 80055a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3b04      	subs	r3, #4
 80055b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f023 0201 	bic.w	r2, r3, #1
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3b04      	subs	r3, #4
 80055c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055c4:	4a0c      	ldr	r2, [pc, #48]	; (80055f8 <pxPortInitialiseStack+0x64>)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3b14      	subs	r3, #20
 80055ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3b04      	subs	r3, #4
 80055da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f06f 0202 	mvn.w	r2, #2
 80055e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3b20      	subs	r3, #32
 80055e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055ea:	68fb      	ldr	r3, [r7, #12]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	080055fd 	.word	0x080055fd

080055fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005606:	4b14      	ldr	r3, [pc, #80]	; (8005658 <prvTaskExitError+0x5c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800560e:	d00c      	beq.n	800562a <prvTaskExitError+0x2e>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	b672      	cpsid	i
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	b662      	cpsie	i
 8005624:	60fb      	str	r3, [r7, #12]
}
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <prvTaskExitError+0x2c>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	b672      	cpsid	i
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	b662      	cpsie	i
 800563e:	60bb      	str	r3, [r7, #8]
}
 8005640:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005642:	bf00      	nop
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0fc      	beq.n	8005644 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800564a:	bf00      	nop
 800564c:	bf00      	nop
 800564e:	3714      	adds	r7, #20
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	2000000c 	.word	0x2000000c
 800565c:	00000000 	.word	0x00000000

08005660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <pxCurrentTCBConst2>)
 8005662:	6819      	ldr	r1, [r3, #0]
 8005664:	6808      	ldr	r0, [r1, #0]
 8005666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566a:	f380 8809 	msr	PSP, r0
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f04f 0000 	mov.w	r0, #0
 8005676:	f380 8811 	msr	BASEPRI, r0
 800567a:	4770      	bx	lr
 800567c:	f3af 8000 	nop.w

08005680 <pxCurrentTCBConst2>:
 8005680:	20000804 	.word	0x20000804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop

08005688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005688:	4808      	ldr	r0, [pc, #32]	; (80056ac <prvPortStartFirstTask+0x24>)
 800568a:	6800      	ldr	r0, [r0, #0]
 800568c:	6800      	ldr	r0, [r0, #0]
 800568e:	f380 8808 	msr	MSP, r0
 8005692:	f04f 0000 	mov.w	r0, #0
 8005696:	f380 8814 	msr	CONTROL, r0
 800569a:	b662      	cpsie	i
 800569c:	b661      	cpsie	f
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	df00      	svc	0
 80056a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056aa:	bf00      	nop
 80056ac:	e000ed08 	.word	0xe000ed08

080056b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056b6:	4b37      	ldr	r3, [pc, #220]	; (8005794 <xPortStartScheduler+0xe4>)
 80056b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	22ff      	movs	r2, #255	; 0xff
 80056c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	4b2f      	ldr	r3, [pc, #188]	; (8005798 <xPortStartScheduler+0xe8>)
 80056dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056de:	4b2f      	ldr	r3, [pc, #188]	; (800579c <xPortStartScheduler+0xec>)
 80056e0:	2207      	movs	r2, #7
 80056e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056e4:	e009      	b.n	80056fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80056e6:	4b2d      	ldr	r3, [pc, #180]	; (800579c <xPortStartScheduler+0xec>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	4a2b      	ldr	r2, [pc, #172]	; (800579c <xPortStartScheduler+0xec>)
 80056ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005702:	2b80      	cmp	r3, #128	; 0x80
 8005704:	d0ef      	beq.n	80056e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005706:	4b25      	ldr	r3, [pc, #148]	; (800579c <xPortStartScheduler+0xec>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f1c3 0307 	rsb	r3, r3, #7
 800570e:	2b04      	cmp	r3, #4
 8005710:	d00c      	beq.n	800572c <xPortStartScheduler+0x7c>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	b672      	cpsid	i
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	b662      	cpsie	i
 8005726:	60bb      	str	r3, [r7, #8]
}
 8005728:	bf00      	nop
 800572a:	e7fe      	b.n	800572a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800572c:	4b1b      	ldr	r3, [pc, #108]	; (800579c <xPortStartScheduler+0xec>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	4a1a      	ldr	r2, [pc, #104]	; (800579c <xPortStartScheduler+0xec>)
 8005734:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005736:	4b19      	ldr	r3, [pc, #100]	; (800579c <xPortStartScheduler+0xec>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800573e:	4a17      	ldr	r2, [pc, #92]	; (800579c <xPortStartScheduler+0xec>)
 8005740:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	b2da      	uxtb	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800574a:	4b15      	ldr	r3, [pc, #84]	; (80057a0 <xPortStartScheduler+0xf0>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a14      	ldr	r2, [pc, #80]	; (80057a0 <xPortStartScheduler+0xf0>)
 8005750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005754:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005756:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <xPortStartScheduler+0xf0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a11      	ldr	r2, [pc, #68]	; (80057a0 <xPortStartScheduler+0xf0>)
 800575c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005760:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005762:	f000 f8dd 	bl	8005920 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005766:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <xPortStartScheduler+0xf4>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800576c:	f000 f8fc 	bl	8005968 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005770:	4b0d      	ldr	r3, [pc, #52]	; (80057a8 <xPortStartScheduler+0xf8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a0c      	ldr	r2, [pc, #48]	; (80057a8 <xPortStartScheduler+0xf8>)
 8005776:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800577a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800577c:	f7ff ff84 	bl	8005688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005780:	f7ff f84e 	bl	8004820 <vTaskSwitchContext>
	prvTaskExitError();
 8005784:	f7ff ff3a 	bl	80055fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	e000e400 	.word	0xe000e400
 8005798:	20000e30 	.word	0x20000e30
 800579c:	20000e34 	.word	0x20000e34
 80057a0:	e000ed20 	.word	0xe000ed20
 80057a4:	2000000c 	.word	0x2000000c
 80057a8:	e000ef34 	.word	0xe000ef34

080057ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	b672      	cpsid	i
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	b662      	cpsie	i
 80057c6:	607b      	str	r3, [r7, #4]
}
 80057c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057ca:	4b10      	ldr	r3, [pc, #64]	; (800580c <vPortEnterCritical+0x60>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3301      	adds	r3, #1
 80057d0:	4a0e      	ldr	r2, [pc, #56]	; (800580c <vPortEnterCritical+0x60>)
 80057d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057d4:	4b0d      	ldr	r3, [pc, #52]	; (800580c <vPortEnterCritical+0x60>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d111      	bne.n	8005800 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057dc:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <vPortEnterCritical+0x64>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00c      	beq.n	8005800 <vPortEnterCritical+0x54>
	__asm volatile
 80057e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ea:	b672      	cpsid	i
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	b662      	cpsie	i
 80057fa:	603b      	str	r3, [r7, #0]
}
 80057fc:	bf00      	nop
 80057fe:	e7fe      	b.n	80057fe <vPortEnterCritical+0x52>
	}
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	2000000c 	.word	0x2000000c
 8005810:	e000ed04 	.word	0xe000ed04

08005814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800581a:	4b13      	ldr	r3, [pc, #76]	; (8005868 <vPortExitCritical+0x54>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10c      	bne.n	800583c <vPortExitCritical+0x28>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	b672      	cpsid	i
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	b662      	cpsie	i
 8005836:	607b      	str	r3, [r7, #4]
}
 8005838:	bf00      	nop
 800583a:	e7fe      	b.n	800583a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800583c:	4b0a      	ldr	r3, [pc, #40]	; (8005868 <vPortExitCritical+0x54>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3b01      	subs	r3, #1
 8005842:	4a09      	ldr	r2, [pc, #36]	; (8005868 <vPortExitCritical+0x54>)
 8005844:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005846:	4b08      	ldr	r3, [pc, #32]	; (8005868 <vPortExitCritical+0x54>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d105      	bne.n	800585a <vPortExitCritical+0x46>
 800584e:	2300      	movs	r3, #0
 8005850:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	f383 8811 	msr	BASEPRI, r3
}
 8005858:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	2000000c 	.word	0x2000000c
 800586c:	00000000 	.word	0x00000000

08005870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005870:	f3ef 8009 	mrs	r0, PSP
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <pxCurrentTCBConst>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	f01e 0f10 	tst.w	lr, #16
 8005880:	bf08      	it	eq
 8005882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588a:	6010      	str	r0, [r2, #0]
 800588c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005894:	b672      	cpsid	i
 8005896:	f380 8811 	msr	BASEPRI, r0
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	b662      	cpsie	i
 80058a4:	f7fe ffbc 	bl	8004820 <vTaskSwitchContext>
 80058a8:	f04f 0000 	mov.w	r0, #0
 80058ac:	f380 8811 	msr	BASEPRI, r0
 80058b0:	bc09      	pop	{r0, r3}
 80058b2:	6819      	ldr	r1, [r3, #0]
 80058b4:	6808      	ldr	r0, [r1, #0]
 80058b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ba:	f01e 0f10 	tst.w	lr, #16
 80058be:	bf08      	it	eq
 80058c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058c4:	f380 8809 	msr	PSP, r0
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop

080058d0 <pxCurrentTCBConst>:
 80058d0:	20000804 	.word	0x20000804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop

080058d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	b672      	cpsid	i
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	b662      	cpsie	i
 80058f2:	607b      	str	r3, [r7, #4]
}
 80058f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058f6:	f7fe fed7 	bl	80046a8 <xTaskIncrementTick>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005900:	4b06      	ldr	r3, [pc, #24]	; (800591c <SysTick_Handler+0x44>)
 8005902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	2300      	movs	r3, #0
 800590a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	f383 8811 	msr	BASEPRI, r3
}
 8005912:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	e000ed04 	.word	0xe000ed04

08005920 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005924:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <vPortSetupTimerInterrupt+0x34>)
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800592a:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <vPortSetupTimerInterrupt+0x38>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005930:	4b0a      	ldr	r3, [pc, #40]	; (800595c <vPortSetupTimerInterrupt+0x3c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a0a      	ldr	r2, [pc, #40]	; (8005960 <vPortSetupTimerInterrupt+0x40>)
 8005936:	fba2 2303 	umull	r2, r3, r2, r3
 800593a:	099b      	lsrs	r3, r3, #6
 800593c:	4a09      	ldr	r2, [pc, #36]	; (8005964 <vPortSetupTimerInterrupt+0x44>)
 800593e:	3b01      	subs	r3, #1
 8005940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005942:	4b04      	ldr	r3, [pc, #16]	; (8005954 <vPortSetupTimerInterrupt+0x34>)
 8005944:	2207      	movs	r2, #7
 8005946:	601a      	str	r2, [r3, #0]
}
 8005948:	bf00      	nop
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	e000e010 	.word	0xe000e010
 8005958:	e000e018 	.word	0xe000e018
 800595c:	20000000 	.word	0x20000000
 8005960:	10624dd3 	.word	0x10624dd3
 8005964:	e000e014 	.word	0xe000e014

08005968 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005968:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005978 <vPortEnableVFP+0x10>
 800596c:	6801      	ldr	r1, [r0, #0]
 800596e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005972:	6001      	str	r1, [r0, #0]
 8005974:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005976:	bf00      	nop
 8005978:	e000ed88 	.word	0xe000ed88

0800597c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005982:	f3ef 8305 	mrs	r3, IPSR
 8005986:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b0f      	cmp	r3, #15
 800598c:	d916      	bls.n	80059bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800598e:	4a19      	ldr	r2, [pc, #100]	; (80059f4 <vPortValidateInterruptPriority+0x78>)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005998:	4b17      	ldr	r3, [pc, #92]	; (80059f8 <vPortValidateInterruptPriority+0x7c>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	7afa      	ldrb	r2, [r7, #11]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d20c      	bcs.n	80059bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	b672      	cpsid	i
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	b662      	cpsie	i
 80059b6:	607b      	str	r3, [r7, #4]
}
 80059b8:	bf00      	nop
 80059ba:	e7fe      	b.n	80059ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059bc:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <vPortValidateInterruptPriority+0x80>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059c4:	4b0e      	ldr	r3, [pc, #56]	; (8005a00 <vPortValidateInterruptPriority+0x84>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d90c      	bls.n	80059e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d0:	b672      	cpsid	i
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	b662      	cpsie	i
 80059e0:	603b      	str	r3, [r7, #0]
}
 80059e2:	bf00      	nop
 80059e4:	e7fe      	b.n	80059e4 <vPortValidateInterruptPriority+0x68>
	}
 80059e6:	bf00      	nop
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	e000e3f0 	.word	0xe000e3f0
 80059f8:	20000e30 	.word	0x20000e30
 80059fc:	e000ed0c 	.word	0xe000ed0c
 8005a00:	20000e34 	.word	0x20000e34

08005a04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08a      	sub	sp, #40	; 0x28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a10:	f7fe fd8c 	bl	800452c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a14:	4b5b      	ldr	r3, [pc, #364]	; (8005b84 <pvPortMalloc+0x180>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a1c:	f000 f91a 	bl	8005c54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a20:	4b59      	ldr	r3, [pc, #356]	; (8005b88 <pvPortMalloc+0x184>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4013      	ands	r3, r2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f040 8092 	bne.w	8005b52 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d01f      	beq.n	8005a74 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005a34:	2208      	movs	r2, #8
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4413      	add	r3, r2
 8005a3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d016      	beq.n	8005a74 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f023 0307 	bic.w	r3, r3, #7
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00c      	beq.n	8005a74 <pvPortMalloc+0x70>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	b672      	cpsid	i
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	b662      	cpsie	i
 8005a6e:	617b      	str	r3, [r7, #20]
}
 8005a70:	bf00      	nop
 8005a72:	e7fe      	b.n	8005a72 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d06b      	beq.n	8005b52 <pvPortMalloc+0x14e>
 8005a7a:	4b44      	ldr	r3, [pc, #272]	; (8005b8c <pvPortMalloc+0x188>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d866      	bhi.n	8005b52 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a84:	4b42      	ldr	r3, [pc, #264]	; (8005b90 <pvPortMalloc+0x18c>)
 8005a86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a88:	4b41      	ldr	r3, [pc, #260]	; (8005b90 <pvPortMalloc+0x18c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a8e:	e004      	b.n	8005a9a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d903      	bls.n	8005aac <pvPortMalloc+0xa8>
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1f1      	bne.n	8005a90 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005aac:	4b35      	ldr	r3, [pc, #212]	; (8005b84 <pvPortMalloc+0x180>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d04d      	beq.n	8005b52 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2208      	movs	r2, #8
 8005abc:	4413      	add	r3, r2
 8005abe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	1ad2      	subs	r2, r2, r3
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d921      	bls.n	8005b1c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00c      	beq.n	8005b04 <pvPortMalloc+0x100>
	__asm volatile
 8005aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aee:	b672      	cpsid	i
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	b662      	cpsie	i
 8005afe:	613b      	str	r3, [r7, #16]
}
 8005b00:	bf00      	nop
 8005b02:	e7fe      	b.n	8005b02 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	1ad2      	subs	r2, r2, r3
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b16:	69b8      	ldr	r0, [r7, #24]
 8005b18:	f000 f8fe 	bl	8005d18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b1c:	4b1b      	ldr	r3, [pc, #108]	; (8005b8c <pvPortMalloc+0x188>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <pvPortMalloc+0x188>)
 8005b28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b2a:	4b18      	ldr	r3, [pc, #96]	; (8005b8c <pvPortMalloc+0x188>)
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b19      	ldr	r3, [pc, #100]	; (8005b94 <pvPortMalloc+0x190>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d203      	bcs.n	8005b3e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b36:	4b15      	ldr	r3, [pc, #84]	; (8005b8c <pvPortMalloc+0x188>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a16      	ldr	r2, [pc, #88]	; (8005b94 <pvPortMalloc+0x190>)
 8005b3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <pvPortMalloc+0x184>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b52:	f7fe fcf9 	bl	8004548 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	f003 0307 	and.w	r3, r3, #7
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00c      	beq.n	8005b7a <pvPortMalloc+0x176>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	b672      	cpsid	i
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	b662      	cpsie	i
 8005b74:	60fb      	str	r3, [r7, #12]
}
 8005b76:	bf00      	nop
 8005b78:	e7fe      	b.n	8005b78 <pvPortMalloc+0x174>
	return pvReturn;
 8005b7a:	69fb      	ldr	r3, [r7, #28]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3728      	adds	r7, #40	; 0x28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	20004a40 	.word	0x20004a40
 8005b88:	20004a4c 	.word	0x20004a4c
 8005b8c:	20004a44 	.word	0x20004a44
 8005b90:	20004a38 	.word	0x20004a38
 8005b94:	20004a48 	.word	0x20004a48

08005b98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d04c      	beq.n	8005c44 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005baa:	2308      	movs	r3, #8
 8005bac:	425b      	negs	r3, r3
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	4b23      	ldr	r3, [pc, #140]	; (8005c4c <vPortFree+0xb4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10c      	bne.n	8005be0 <vPortFree+0x48>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bca:	b672      	cpsid	i
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	b662      	cpsie	i
 8005bda:	60fb      	str	r3, [r7, #12]
}
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00c      	beq.n	8005c02 <vPortFree+0x6a>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	b672      	cpsid	i
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	b662      	cpsie	i
 8005bfc:	60bb      	str	r3, [r7, #8]
}
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <vPortFree+0xb4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d019      	beq.n	8005c44 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d115      	bne.n	8005c44 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <vPortFree+0xb4>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	43db      	mvns	r3, r3
 8005c22:	401a      	ands	r2, r3
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c28:	f7fe fc80 	bl	800452c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <vPortFree+0xb8>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4413      	add	r3, r2
 8005c36:	4a06      	ldr	r2, [pc, #24]	; (8005c50 <vPortFree+0xb8>)
 8005c38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c3a:	6938      	ldr	r0, [r7, #16]
 8005c3c:	f000 f86c 	bl	8005d18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c40:	f7fe fc82 	bl	8004548 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c44:	bf00      	nop
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	20004a4c 	.word	0x20004a4c
 8005c50:	20004a44 	.word	0x20004a44

08005c54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c60:	4b27      	ldr	r3, [pc, #156]	; (8005d00 <prvHeapInit+0xac>)
 8005c62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00c      	beq.n	8005c88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3307      	adds	r3, #7
 8005c72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0307 	bic.w	r3, r3, #7
 8005c7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	4a1f      	ldr	r2, [pc, #124]	; (8005d00 <prvHeapInit+0xac>)
 8005c84:	4413      	add	r3, r2
 8005c86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c8c:	4a1d      	ldr	r2, [pc, #116]	; (8005d04 <prvHeapInit+0xb0>)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c92:	4b1c      	ldr	r3, [pc, #112]	; (8005d04 <prvHeapInit+0xb0>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0307 	bic.w	r3, r3, #7
 8005cae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <prvHeapInit+0xb4>)
 8005cb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cb6:	4b14      	ldr	r3, [pc, #80]	; (8005d08 <prvHeapInit+0xb4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cbe:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <prvHeapInit+0xb4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <prvHeapInit+0xb4>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	4a0a      	ldr	r2, [pc, #40]	; (8005d0c <prvHeapInit+0xb8>)
 8005ce2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	4a09      	ldr	r2, [pc, #36]	; (8005d10 <prvHeapInit+0xbc>)
 8005cea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cec:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <prvHeapInit+0xc0>)
 8005cee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cf2:	601a      	str	r2, [r3, #0]
}
 8005cf4:	bf00      	nop
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	20000e38 	.word	0x20000e38
 8005d04:	20004a38 	.word	0x20004a38
 8005d08:	20004a40 	.word	0x20004a40
 8005d0c:	20004a48 	.word	0x20004a48
 8005d10:	20004a44 	.word	0x20004a44
 8005d14:	20004a4c 	.word	0x20004a4c

08005d18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d20:	4b28      	ldr	r3, [pc, #160]	; (8005dc4 <prvInsertBlockIntoFreeList+0xac>)
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	e002      	b.n	8005d2c <prvInsertBlockIntoFreeList+0x14>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d8f7      	bhi.n	8005d26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	4413      	add	r3, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d108      	bne.n	8005d5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	441a      	add	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	441a      	add	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d118      	bne.n	8005da0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b15      	ldr	r3, [pc, #84]	; (8005dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d00d      	beq.n	8005d96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	441a      	add	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e008      	b.n	8005da8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d96:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <prvInsertBlockIntoFreeList+0xb0>)
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	e003      	b.n	8005da8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d002      	beq.n	8005db6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005db6:	bf00      	nop
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20004a38 	.word	0x20004a38
 8005dc8:	20004a40 	.word	0x20004a40

08005dcc <__libc_init_array>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	4d0d      	ldr	r5, [pc, #52]	; (8005e04 <__libc_init_array+0x38>)
 8005dd0:	4c0d      	ldr	r4, [pc, #52]	; (8005e08 <__libc_init_array+0x3c>)
 8005dd2:	1b64      	subs	r4, r4, r5
 8005dd4:	10a4      	asrs	r4, r4, #2
 8005dd6:	2600      	movs	r6, #0
 8005dd8:	42a6      	cmp	r6, r4
 8005dda:	d109      	bne.n	8005df0 <__libc_init_array+0x24>
 8005ddc:	4d0b      	ldr	r5, [pc, #44]	; (8005e0c <__libc_init_array+0x40>)
 8005dde:	4c0c      	ldr	r4, [pc, #48]	; (8005e10 <__libc_init_array+0x44>)
 8005de0:	f000 f82e 	bl	8005e40 <_init>
 8005de4:	1b64      	subs	r4, r4, r5
 8005de6:	10a4      	asrs	r4, r4, #2
 8005de8:	2600      	movs	r6, #0
 8005dea:	42a6      	cmp	r6, r4
 8005dec:	d105      	bne.n	8005dfa <__libc_init_array+0x2e>
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df4:	4798      	blx	r3
 8005df6:	3601      	adds	r6, #1
 8005df8:	e7ee      	b.n	8005dd8 <__libc_init_array+0xc>
 8005dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dfe:	4798      	blx	r3
 8005e00:	3601      	adds	r6, #1
 8005e02:	e7f2      	b.n	8005dea <__libc_init_array+0x1e>
 8005e04:	08005ec0 	.word	0x08005ec0
 8005e08:	08005ec0 	.word	0x08005ec0
 8005e0c:	08005ec0 	.word	0x08005ec0
 8005e10:	08005ec4 	.word	0x08005ec4

08005e14 <memcpy>:
 8005e14:	440a      	add	r2, r1
 8005e16:	4291      	cmp	r1, r2
 8005e18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005e1c:	d100      	bne.n	8005e20 <memcpy+0xc>
 8005e1e:	4770      	bx	lr
 8005e20:	b510      	push	{r4, lr}
 8005e22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e2a:	4291      	cmp	r1, r2
 8005e2c:	d1f9      	bne.n	8005e22 <memcpy+0xe>
 8005e2e:	bd10      	pop	{r4, pc}

08005e30 <memset>:
 8005e30:	4402      	add	r2, r0
 8005e32:	4603      	mov	r3, r0
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d100      	bne.n	8005e3a <memset+0xa>
 8005e38:	4770      	bx	lr
 8005e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e3e:	e7f9      	b.n	8005e34 <memset+0x4>

08005e40 <_init>:
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e42:	bf00      	nop
 8005e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e46:	bc08      	pop	{r3}
 8005e48:	469e      	mov	lr, r3
 8005e4a:	4770      	bx	lr

08005e4c <_fini>:
 8005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4e:	bf00      	nop
 8005e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e52:	bc08      	pop	{r3}
 8005e54:	469e      	mov	lr, r3
 8005e56:	4770      	bx	lr
